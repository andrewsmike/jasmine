# Generated from SQLParser.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


"""
Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License, version 2.0,
as published by the Free Software Foundation.

This program is also distributed with certain software (including
but not limited to OpenSSL) that is licensed under separate terms, as
designated in a particular file or component or in included license
documentation. The authors of MySQL hereby grant you an additional
permission to link the program and your derivative works with the
separately licensed software that they have included with MySQL.
This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
the GNU General Public License, version 2.0, for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
"""
# mypy: ignore-errors
from jasmine.sql.parser.sql_base import *

if __name__ is not None and "." in __name__:
    from .SQLBaseParser import SQLBaseParser
else:
    from SQLBaseParser import SQLBaseParser


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0328")
        buf.write("\u20eb\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca")
        buf.write("\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd")
        buf.write("\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1")
        buf.write("\t\u00d1\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4")
        buf.write("\4\u00d5\t\u00d5\4\u00d6\t\u00d6\4\u00d7\t\u00d7\4\u00d8")
        buf.write("\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da\4\u00db\t\u00db")
        buf.write("\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df")
        buf.write("\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2")
        buf.write("\4\u00e3\t\u00e3\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6")
        buf.write("\t\u00e6\4\u00e7\t\u00e7\4\u00e8\t\u00e8\4\u00e9\t\u00e9")
        buf.write("\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec\4\u00ed")
        buf.write("\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0")
        buf.write("\4\u00f1\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4")
        buf.write("\t\u00f4\4\u00f5\t\u00f5\4\u00f6\t\u00f6\4\u00f7\t\u00f7")
        buf.write("\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa\t\u00fa\4\u00fb")
        buf.write("\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe")
        buf.write("\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102")
        buf.write("\t\u0102\4\u0103\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105")
        buf.write("\4\u0106\t\u0106\4\u0107\t\u0107\4\u0108\t\u0108\4\u0109")
        buf.write("\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c\t\u010c")
        buf.write("\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110")
        buf.write("\t\u0110\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113")
        buf.write("\4\u0114\t\u0114\4\u0115\t\u0115\4\u0116\t\u0116\4\u0117")
        buf.write("\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119\4\u011a\t\u011a")
        buf.write("\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e")
        buf.write("\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121")
        buf.write("\4\u0122\t\u0122\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125")
        buf.write("\t\u0125\4\u0126\t\u0126\4\u0127\t\u0127\4\u0128\t\u0128")
        buf.write("\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b\4\u012c")
        buf.write("\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f")
        buf.write("\4\u0130\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133")
        buf.write("\t\u0133\4\u0134\t\u0134\4\u0135\t\u0135\4\u0136\t\u0136")
        buf.write("\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139\t\u0139\4\u013a")
        buf.write("\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d")
        buf.write("\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141")
        buf.write("\t\u0141\4\u0142\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144")
        buf.write("\4\u0145\t\u0145\4\u0146\t\u0146\4\u0147\t\u0147\4\u0148")
        buf.write("\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b\t\u014b")
        buf.write("\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f")
        buf.write("\t\u014f\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152")
        buf.write("\4\u0153\t\u0153\4\u0154\t\u0154\4\u0155\t\u0155\4\u0156")
        buf.write("\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158\4\u0159\t\u0159")
        buf.write("\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d")
        buf.write("\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160")
        buf.write("\4\u0161\t\u0161\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164")
        buf.write("\t\u0164\4\u0165\t\u0165\4\u0166\t\u0166\4\u0167\t\u0167")
        buf.write("\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a\4\u016b")
        buf.write("\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e")
        buf.write("\4\u016f\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172")
        buf.write("\t\u0172\4\u0173\t\u0173\4\u0174\t\u0174\4\u0175\t\u0175")
        buf.write("\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178\t\u0178\4\u0179")
        buf.write("\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c")
        buf.write("\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180")
        buf.write("\t\u0180\4\u0181\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183")
        buf.write("\4\u0184\t\u0184\4\u0185\t\u0185\4\u0186\t\u0186\4\u0187")
        buf.write("\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a\t\u018a")
        buf.write("\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e")
        buf.write("\t\u018e\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191")
        buf.write("\4\u0192\t\u0192\4\u0193\t\u0193\4\u0194\t\u0194\4\u0195")
        buf.write("\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197\4\u0198\t\u0198")
        buf.write("\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c")
        buf.write("\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f")
        buf.write("\4\u01a0\t\u01a0\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3")
        buf.write("\t\u01a3\4\u01a4\t\u01a4\4\u01a5\t\u01a5\4\u01a6\t\u01a6")
        buf.write("\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9\4\u01aa")
        buf.write("\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad")
        buf.write("\4\u01ae\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1")
        buf.write("\t\u01b1\4\u01b2\t\u01b2\4\u01b3\t\u01b3\4\u01b4\t\u01b4")
        buf.write("\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7\t\u01b7\4\u01b8")
        buf.write("\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb")
        buf.write("\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf")
        buf.write("\t\u01bf\4\u01c0\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2")
        buf.write("\4\u01c3\t\u01c3\4\u01c4\t\u01c4\4\u01c5\t\u01c5\4\u01c6")
        buf.write("\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9\t\u01c9")
        buf.write("\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd")
        buf.write("\t\u01cd\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0")
        buf.write("\4\u01d1\t\u01d1\4\u01d2\t\u01d2\4\u01d3\t\u01d3\4\u01d4")
        buf.write("\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6\4\u01d7\t\u01d7")
        buf.write("\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db")
        buf.write("\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de")
        buf.write("\4\u01df\t\u01df\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2")
        buf.write("\t\u01e2\4\u01e3\t\u01e3\4\u01e4\t\u01e4\4\u01e5\t\u01e5")
        buf.write("\4\u01e6\t\u01e6\4\u01e7\t\u01e7\4\u01e8\t\u01e8\4\u01e9")
        buf.write("\t\u01e9\4\u01ea\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec")
        buf.write("\4\u01ed\t\u01ed\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0")
        buf.write("\t\u01f0\4\u01f1\t\u01f1\4\u01f2\t\u01f2\4\u01f3\t\u01f3")
        buf.write("\4\u01f4\t\u01f4\4\u01f5\t\u01f5\4\u01f6\t\u01f6\4\u01f7")
        buf.write("\t\u01f7\4\u01f8\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa")
        buf.write("\4\u01fb\t\u01fb\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe")
        buf.write("\t\u01fe\4\u01ff\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201")
        buf.write("\4\u0202\t\u0202\4\u0203\t\u0203\4\u0204\t\u0204\4\u0205")
        buf.write("\t\u0205\4\u0206\t\u0206\4\u0207\t\u0207\4\u0208\t\u0208")
        buf.write("\4\u0209\t\u0209\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c")
        buf.write("\t\u020c\4\u020d\t\u020d\4\u020e\t\u020e\4\u020f\t\u020f")
        buf.write("\4\u0210\t\u0210\4\u0211\t\u0211\4\u0212\t\u0212\4\u0213")
        buf.write("\t\u0213\4\u0214\t\u0214\4\u0215\t\u0215\4\u0216\t\u0216")
        buf.write("\4\u0217\t\u0217\4\u0218\t\u0218\4\u0219\t\u0219\4\u021a")
        buf.write("\t\u021a\4\u021b\t\u021b\4\u021c\t\u021c\4\u021d\t\u021d")
        buf.write("\4\u021e\t\u021e\4\u021f\t\u021f\4\u0220\t\u0220\4\u0221")
        buf.write("\t\u0221\4\u0222\t\u0222\4\u0223\t\u0223\4\u0224\t\u0224")
        buf.write("\4\u0225\t\u0225\4\u0226\t\u0226\4\u0227\t\u0227\4\u0228")
        buf.write("\t\u0228\4\u0229\t\u0229\4\u022a\t\u022a\4\u022b\t\u022b")
        buf.write("\4\u022c\t\u022c\4\u022d\t\u022d\4\u022e\t\u022e\4\u022f")
        buf.write("\t\u022f\4\u0230\t\u0230\4\u0231\t\u0231\4\u0232\t\u0232")
        buf.write("\4\u0233\t\u0233\4\u0234\t\u0234\4\u0235\t\u0235\4\u0236")
        buf.write("\t\u0236\4\u0237\t\u0237\4\u0238\t\u0238\4\u0239\t\u0239")
        buf.write("\4\u023a\t\u023a\4\u023b\t\u023b\4\u023c\t\u023c\4\u023d")
        buf.write("\t\u023d\4\u023e\t\u023e\4\u023f\t\u023f\4\u0240\t\u0240")
        buf.write("\4\u0241\t\u0241\4\u0242\t\u0242\4\u0243\t\u0243\4\u0244")
        buf.write("\t\u0244\4\u0245\t\u0245\4\u0246\t\u0246\4\u0247\t\u0247")
        buf.write("\4\u0248\t\u0248\4\u0249\t\u0249\4\u024a\t\u024a\4\u024b")
        buf.write("\t\u024b\4\u024c\t\u024c\4\u024d\t\u024d\4\u024e\t\u024e")
        buf.write("\4\u024f\t\u024f\4\u0250\t\u0250\4\u0251\t\u0251\4\u0252")
        buf.write("\t\u0252\4\u0253\t\u0253\4\u0254\t\u0254\4\u0255\t\u0255")
        buf.write("\4\u0256\t\u0256\4\u0257\t\u0257\4\u0258\t\u0258\4\u0259")
        buf.write("\t\u0259\4\u025a\t\u025a\4\u025b\t\u025b\4\u025c\t\u025c")
        buf.write("\4\u025d\t\u025d\4\u025e\t\u025e\4\u025f\t\u025f\4\u0260")
        buf.write("\t\u0260\4\u0261\t\u0261\4\u0262\t\u0262\4\u0263\t\u0263")
        buf.write("\4\u0264\t\u0264\3\2\3\2\3\2\3\2\7\2\u04cd\n\2\f\2\16")
        buf.write("\2\u04d0\13\2\3\2\5\2\u04d3\n\2\3\2\3\2\5\2\u04d7\n\2")
        buf.write("\3\3\3\3\5\3\u04db\n\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write("\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4")
        buf.write("\u04ff\n\4\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0507\n\5\3\5\3")
        buf.write("\5\3\5\5\5\u050c\n\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\5\5\u051c\n\5\3\6\3\6\3\6\6\6\u0521")
        buf.write("\n\6\r\6\16\6\u0522\3\6\3\6\3\6\3\6\3\6\5\6\u052a\n\6")
        buf.write("\3\7\5\7\u052d\n\7\3\7\3\7\3\7\3\7\3\7\5\7\u0534\n\7\3")
        buf.write("\7\3\7\3\7\5\7\u0539\n\7\3\7\5\7\u053c\n\7\3\7\3\7\3\7")
        buf.write("\5\7\u0541\n\7\3\7\3\7\3\7\3\7\5\7\u0547\n\7\5\7\u0549")
        buf.write("\n\7\3\7\3\7\5\7\u054d\n\7\3\7\3\7\5\7\u0551\n\7\3\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\5\b\u055a\n\b\3\t\3\t\5\t\u055e")
        buf.write("\n\t\3\t\7\t\u0561\n\t\f\t\16\t\u0564\13\t\3\n\3\n\3\n")
        buf.write("\5\n\u0569\n\n\3\13\3\13\3\13\3\13\3\f\5\f\u0570\n\f\3")
        buf.write("\f\3\f\5\f\u0574\n\f\3\f\3\f\3\f\5\f\u0579\n\f\3\r\3\r")
        buf.write("\3\r\5\r\u057e\n\r\3\r\3\r\3\r\3\r\3\r\5\r\u0585\n\r\3")
        buf.write("\r\5\r\u0588\n\r\3\16\3\16\3\16\3\16\5\16\u058e\n\16\3")
        buf.write("\16\5\16\u0591\n\16\3\17\3\17\3\17\7\17\u0596\n\17\f\17")
        buf.write("\16\17\u0599\13\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\5\20\u05a2\n\20\3\21\3\21\3\21\5\21\u05a7\n\21\3\21\3")
        buf.write("\21\3\21\5\21\u05ac\n\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\5\21\u05b4\n\21\3\21\3\21\3\21\3\21\5\21\u05ba\n\21\3")
        buf.write("\21\3\21\5\21\u05be\n\21\3\21\3\21\3\21\5\21\u05c3\n\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\7\21\u05ca\n\21\f\21\16\21\u05cd")
        buf.write("\13\21\3\21\3\21\3\21\5\21\u05d2\n\21\3\21\3\21\7\21\u05d6")
        buf.write("\n\21\f\21\16\21\u05d9\13\21\3\21\3\21\3\21\5\21\u05de")
        buf.write("\n\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u05e7\n")
        buf.write("\21\3\21\3\21\3\21\3\21\5\21\u05ed\n\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\5\21\u05f6\n\21\3\21\3\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u0604")
        buf.write("\n\21\3\22\3\22\5\22\u0608\n\22\3\22\3\22\3\22\3\22\5")
        buf.write("\22\u060e\n\22\7\22\u0610\n\22\f\22\16\22\u0613\13\22")
        buf.write("\3\23\3\23\3\23\5\23\u0618\n\23\3\24\3\24\5\24\u061c\n")
        buf.write("\24\3\24\3\24\3\24\5\24\u0621\n\24\3\24\5\24\u0624\n\24")
        buf.write("\3\24\3\24\3\24\3\24\5\24\u062a\n\24\3\24\3\24\3\24\3")
        buf.write("\24\5\24\u0630\n\24\3\24\3\24\3\24\3\24\5\24\u0636\n\24")
        buf.write("\3\24\3\24\5\24\u063a\n\24\3\24\3\24\3\24\5\24\u063f\n")
        buf.write("\24\3\24\3\24\5\24\u0643\n\24\3\24\3\24\5\24\u0647\n\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\5\24\u064f\n\24\5\24\u0651")
        buf.write("\n\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\5\24\u065e\n\24\3\24\3\24\3\24\3\24\3\24\3\24\5")
        buf.write("\24\u0666\n\24\3\24\3\24\3\24\3\24\3\24\3\24\5\24\u066e")
        buf.write("\n\24\3\24\3\24\5\24\u0672\n\24\3\24\3\24\3\24\3\24\3")
        buf.write("\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\5\24\u068f\n\24\3\24\3\24\3\24\3\24\3\24\3\24\3")
        buf.write("\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\5\24\u069f\n\24")
        buf.write("\3\24\5\24\u06a2\n\24\3\24\3\24\3\24\3\24\3\24\3\24\3")
        buf.write("\24\5\24\u06ab\n\24\3\25\3\25\3\25\5\25\u06b0\n\25\3\26")
        buf.write("\3\26\3\27\3\27\5\27\u06b6\n\27\3\27\3\27\3\27\5\27\u06bb")
        buf.write("\n\27\7\27\u06bd\n\27\f\27\16\27\u06c0\13\27\3\30\3\30")
        buf.write("\5\30\u06c4\n\30\3\30\3\30\5\30\u06c8\n\30\3\31\3\31\5")
        buf.write("\31\u06cc\n\31\3\31\3\31\5\31\u06d0\n\31\3\32\3\32\5\32")
        buf.write("\u06d4\n\32\3\32\3\32\5\32\u06d8\n\32\5\32\u06da\n\32")
        buf.write("\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\35\3\35\5\35\u06e5")
        buf.write("\n\35\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u06ed\n\36\3")
        buf.write("\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u06f6\n\36\3\36")
        buf.write("\7\36\u06f9\n\36\f\36\16\36\u06fc\13\36\5\36\u06fe\n\36")
        buf.write("\3\36\3\36\3\36\5\36\u0703\n\36\3\36\3\36\3\36\3\36\3")
        buf.write("\36\5\36\u070a\n\36\3\37\3\37\3\37\3\37\3\37\3\37\5\37")
        buf.write("\u0712\n\37\3 \3 \5 \u0716\n \3 \7 \u0719\n \f \16 \u071c")
        buf.write("\13 \3!\3!\3\"\3\"\5\"\u0722\n\"\3\"\7\"\u0725\n\"\f\"")
        buf.write("\16\"\u0728\13\"\3#\3#\5#\u072c\n#\3#\3#\3#\3#\3#\3#\5")
        buf.write("#\u0734\n#\3$\3$\5$\u0738\n$\3$\3$\3$\5$\u073d\n$\3%\5")
        buf.write("%\u0740\n%\3%\5%\u0743\n%\3%\5%\u0746\n%\3%\3%\3%\3%\3")
        buf.write("&\5&\u074d\n&\3&\3&\3&\3\'\3\'\5\'\u0754\n\'\3(\3(\5(")
        buf.write("\u0758\n(\3(\3(\3(\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3")
        buf.write(")\3)\3)\3)\3)\3)\3)\3)\5)\u0770\n)\3*\3*\5*\u0774\n*\3")
        buf.write("*\3*\7*\u0778\n*\f*\16*\u077b\13*\3+\3+\3+\3+\5+\u0781")
        buf.write("\n+\3,\5,\u0784\n,\3,\3,\5,\u0788\n,\3,\3,\3,\3,\3,\5")
        buf.write(",\u078f\n,\3,\5,\u0792\n,\3,\5,\u0795\n,\3,\5,\u0798\n")
        buf.write(",\3,\3,\3,\3,\3,\3,\3,\5,\u07a1\n,\3-\3-\3-\7-\u07a6\n")
        buf.write("-\f-\16-\u07a9\13-\3.\3.\5.\u07ad\n.\3/\5/\u07b0\n/\3")
        buf.write("/\5/\u07b3\n/\3/\3/\3\60\3\60\5\60\u07b9\n\60\3\61\3\61")
        buf.write("\3\61\3\61\5\61\u07bf\n\61\3\61\5\61\u07c2\n\61\3\61\3")
        buf.write("\61\3\62\5\62\u07c7\n\62\3\62\3\62\3\62\3\62\3\62\3\62")
        buf.write("\7\62\u07cf\n\62\f\62\16\62\u07d2\13\62\5\62\u07d4\n\62")
        buf.write("\3\62\3\62\7\62\u07d8\n\62\f\62\16\62\u07db\13\62\3\62")
        buf.write("\3\62\3\63\5\63\u07e0\n\63\3\63\3\63\3\63\3\63\3\63\3")
        buf.write("\63\7\63\u07e8\n\63\f\63\16\63\u07eb\13\63\5\63\u07ed")
        buf.write("\n\63\3\63\3\63\3\63\3\63\7\63\u07f3\n\63\f\63\16\63\u07f6")
        buf.write("\13\63\3\63\3\63\3\64\5\64\u07fb\n\64\3\64\3\64\3\64\3")
        buf.write("\64\3\64\3\64\3\64\3\65\3\65\5\65\u0806\n\65\3\65\5\65")
        buf.write("\u0809\n\65\3\66\6\66\u080c\n\66\r\66\16\66\u080d\3\67")
        buf.write("\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67")
        buf.write("\3\67\3\67\3\67\3\67\3\67\5\67\u0821\n\67\38\58\u0824")
        buf.write("\n8\38\58\u0827\n8\38\38\38\38\58\u082d\n8\38\58\u0830")
        buf.write("\n8\58\u0832\n8\38\38\78\u0836\n8\f8\168\u0839\138\38")
        buf.write("\38\38\38\38\78\u0840\n8\f8\168\u0843\138\38\38\38\38")
        buf.write("\38\78\u084a\n8\f8\168\u084d\138\58\u084f\n8\38\58\u0852")
        buf.write("\n8\39\39\39\59\u0857\n9\39\39\39\39\59\u085d\n9\3:\3")
        buf.write(":\3:\3:\3;\3;\3;\3;\3;\3;\3;\5;\u086a\n;\3<\3<\5<\u086e")
        buf.write("\n<\3<\7<\u0871\n<\f<\16<\u0874\13<\3=\3=\3=\3=\3=\3=")
        buf.write("\5=\u087c\n=\3>\3>\3>\3>\3>\3>\3>\3>\3?\3?\3?\3?\3?\7")
        buf.write("?\u088b\n?\f?\16?\u088e\13?\3?\3?\3@\3@\3@\3@\3@\3@\3")
        buf.write("@\3@\3@\3@\3@\3@\3@\3@\5@\u08a0\n@\3A\3A\3A\3A\3A\3A\3")
        buf.write("A\5A\u08a9\nA\3A\5A\u08ac\nA\3B\3B\3B\3B\3B\3B\5B\u08b4")
        buf.write("\nB\3C\3C\3C\5C\u08b9\nC\3C\3C\5C\u08bd\nC\3D\3D\3D\3")
        buf.write("E\3E\5E\u08c4\nE\3E\7E\u08c7\nE\fE\16E\u08ca\13E\3F\3")
        buf.write("F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\5F\u08d8\nF\3G\3G\5G\u08dc")
        buf.write("\nG\3G\3G\3H\3H\5H\u08e2\nH\3H\3H\3I\3I\5I\u08e8\nI\3")
        buf.write("I\3I\3J\3J\5J\u08ee\nJ\3J\3J\3K\3K\5K\u08f4\nK\3K\3K\3")
        buf.write("L\3L\5L\u08fa\nL\3L\3L\3M\5M\u08ff\nM\3M\3M\5M\u0903\n")
        buf.write("M\3M\3M\3N\3N\3O\3O\5O\u090b\nO\3O\3O\3P\3P\5P\u0911\n")
        buf.write("P\3P\3P\3Q\3Q\5Q\u0917\nQ\3Q\3Q\3R\5R\u091c\nR\3R\5R\u091f")
        buf.write("\nR\3R\5R\u0922\nR\3R\3R\3R\3R\3S\3S\3S\5S\u092b\nS\3")
        buf.write("S\5S\u092e\nS\3T\3T\3T\3T\3U\3U\3U\3U\3V\5V\u0939\nV\3")
        buf.write("V\3V\3V\3V\3V\3V\3V\3V\3V\3V\5V\u0945\nV\3V\3V\3W\3W\3")
        buf.write("W\3W\3X\5X\u094e\nX\3X\3X\5X\u0952\nX\3X\3X\3X\3X\3X\3")
        buf.write("X\3X\5X\u095b\nX\3X\5X\u095e\nX\3X\3X\3X\3X\5X\u0964\n")
        buf.write("X\5X\u0966\nX\3X\3X\5X\u096a\nX\3X\3X\3X\3Y\3Y\5Y\u0971")
        buf.write("\nY\3Y\3Y\3Z\3Z\3Z\3Z\3Z\3Z\3Z\7Z\u097c\nZ\fZ\16Z\u097f")
        buf.write("\13Z\3Z\3Z\3Z\3Z\5Z\u0985\nZ\3Z\3Z\7Z\u0989\nZ\fZ\16Z")
        buf.write("\u098c\13Z\5Z\u098e\nZ\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3")
        buf.write("[\3[\3[\3[\3[\5[\u099f\n[\3\\\3\\\3\\\3\\\3\\\3\\\3\\")
        buf.write("\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\5\\\u09b3")
        buf.write("\n\\\3]\3]\5]\u09b7\n]\3]\3]\3^\3^\5^\u09bd\n^\3^\3^\3")
        buf.write("_\3_\5_\u09c3\n_\3_\3_\3`\3`\5`\u09c9\n`\3`\3`\3a\5a\u09ce")
        buf.write("\na\3a\3a\3a\3a\3a\5a\u09d5\na\3b\3b\3b\3b\3b\5b\u09dc")
        buf.write("\nb\3b\7b\u09df\nb\fb\16b\u09e2\13b\5b\u09e4\nb\3c\3c")
        buf.write("\5c\u09e8\nc\3d\3d\5d\u09ec\nd\3d\3d\3e\5e\u09f1\ne\3")
        buf.write("e\3e\5e\u09f5\ne\3e\3e\5e\u09f9\ne\3f\3f\3f\3f\5f\u09ff")
        buf.write("\nf\3f\7f\u0a02\nf\ff\16f\u0a05\13f\5f\u0a07\nf\3g\3g")
        buf.write("\5g\u0a0b\ng\3g\3g\3h\3h\5h\u0a11\nh\3h\3h\5h\u0a15\n")
        buf.write("h\3i\3i\5i\u0a19\ni\3i\3i\3j\3j\3j\3j\5j\u0a21\nj\3j\3")
        buf.write("j\3k\3k\3k\3k\5k\u0a29\nk\3l\3l\3l\3l\3l\7l\u0a30\nl\f")
        buf.write("l\16l\u0a33\13l\3m\3m\3m\3m\3n\3n\5n\u0a3b\nn\3n\3n\3")
        buf.write("o\3o\3o\3o\3o\3p\3p\3p\3p\5p\u0a48\np\3p\5p\u0a4b\np\3")
        buf.write("q\3q\5q\u0a4f\nq\3q\3q\7q\u0a53\nq\fq\16q\u0a56\13q\3")
        buf.write("q\3q\3q\3q\3q\5q\u0a5d\nq\3q\3q\3q\5q\u0a62\nq\3q\5q\u0a65")
        buf.write("\nq\3q\5q\u0a68\nq\3q\5q\u0a6b\nq\3q\5q\u0a6e\nq\5q\u0a70")
        buf.write("\nq\3q\3q\3q\3q\5q\u0a76\nq\5q\u0a78\nq\3r\3r\3r\3r\3")
        buf.write("r\3r\3s\3s\3t\3t\3t\3t\3t\5t\u0a87\nt\3u\3u\3u\3u\5u\u0a8d")
        buf.write("\nu\3u\3u\3u\3u\3u\5u\u0a94\nu\3u\5u\u0a97\nu\5u\u0a99")
        buf.write("\nu\5u\u0a9b\nu\3v\3v\3v\3v\3v\3v\3v\3v\5v\u0aa5\nv\5")
        buf.write("v\u0aa7\nv\3w\3w\5w\u0aab\nw\3w\5w\u0aae\nw\3w\5w\u0ab1")
        buf.write("\nw\3w\3w\5w\u0ab5\nw\3w\3w\3w\5w\u0aba\nw\3w\3w\3w\3")
        buf.write("w\5w\u0ac0\nw\3w\5w\u0ac3\nw\3w\5w\u0ac6\nw\3x\3x\3y\3")
        buf.write("y\5y\u0acc\ny\3y\5y\u0acf\ny\3y\3y\3z\3z\3z\7z\u0ad6\n")
        buf.write("z\fz\16z\u0ad9\13z\3{\3{\3{\3|\3|\3|\5|\u0ae1\n|\3|\3")
        buf.write("|\5|\u0ae5\n|\3}\3}\5}\u0ae9\n}\3}\3}\3}\3}\5}\u0aef\n")
        buf.write("}\3}\7}\u0af2\n}\f}\16}\u0af5\13}\3~\3~\5~\u0af9\n~\3")
        buf.write("~\3~\3~\5~\u0afe\n~\7~\u0b00\n~\f~\16~\u0b03\13~\3\177")
        buf.write("\3\177\3\177\5\177\u0b08\n\177\3\u0080\3\u0080\3\u0080")
        buf.write("\3\u0080\3\u0080\3\u0080\3\u0081\3\u0081\3\u0081\5\u0081")
        buf.write("\u0b13\n\u0081\3\u0081\5\u0081\u0b16\n\u0081\3\u0081\3")
        buf.write("\u0081\3\u0081\5\u0081\u0b1b\n\u0081\3\u0081\3\u0081\3")
        buf.write("\u0081\3\u0081\5\u0081\u0b21\n\u0081\3\u0081\5\u0081\u0b24")
        buf.write("\n\u0081\3\u0081\5\u0081\u0b27\n\u0081\3\u0081\5\u0081")
        buf.write("\u0b2a\n\u0081\3\u0081\5\u0081\u0b2d\n\u0081\3\u0081\3")
        buf.write("\u0081\3\u0082\3\u0082\3\u0083\3\u0083\3\u0083\3\u0083")
        buf.write("\3\u0083\3\u0084\3\u0084\3\u0084\5\u0084\u0b3b\n\u0084")
        buf.write("\3\u0084\5\u0084\u0b3e\n\u0084\3\u0084\3\u0084\5\u0084")
        buf.write("\u0b42\n\u0084\3\u0085\3\u0085\5\u0085\u0b46\n\u0085\3")
        buf.write("\u0085\3\u0085\3\u0086\3\u0086\5\u0086\u0b4c\n\u0086\3")
        buf.write("\u0086\3\u0086\3\u0086\5\u0086\u0b51\n\u0086\7\u0086\u0b53")
        buf.write("\n\u0086\f\u0086\16\u0086\u0b56\13\u0086\3\u0087\3\u0087")
        buf.write("\5\u0087\u0b5a\n\u0087\3\u0087\5\u0087\u0b5d\n\u0087\3")
        buf.write("\u0087\3\u0087\5\u0087\u0b61\n\u0087\3\u0087\3\u0087\3")
        buf.write("\u0087\3\u0087\5\u0087\u0b67\n\u0087\3\u0088\3\u0088\5")
        buf.write("\u0088\u0b6b\n\u0088\3\u0088\3\u0088\5\u0088\u0b6f\n\u0088")
        buf.write("\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\5\u0089\u0b78\n\u0089\3\u0089\3\u0089\3\u0089\5\u0089")
        buf.write("\u0b7d\n\u0089\3\u008a\3\u008a\5\u008a\u0b81\n\u008a\3")
        buf.write("\u008a\3\u008a\5\u008a\u0b85\n\u008a\3\u008a\5\u008a\u0b88")
        buf.write("\n\u008a\3\u008a\3\u008a\5\u008a\u0b8c\n\u008a\3\u008a")
        buf.write("\5\u008a\u0b8f\n\u008a\5\u008a\u0b91\n\u008a\3\u008a\3")
        buf.write("\u008a\5\u008a\u0b95\n\u008a\3\u008b\3\u008b\3\u008b\3")
        buf.write("\u008b\5\u008b\u0b9b\n\u008b\3\u008b\3\u008b\5\u008b\u0b9f")
        buf.write("\n\u008b\5\u008b\u0ba1\n\u008b\3\u008b\3\u008b\5\u008b")
        buf.write("\u0ba5\n\u008b\3\u008b\3\u008b\5\u008b\u0ba9\n\u008b\7")
        buf.write("\u008b\u0bab\n\u008b\f\u008b\16\u008b\u0bae\13\u008b\3")
        buf.write("\u008c\3\u008c\3\u008c\3\u008c\5\u008c\u0bb4\n\u008c\5")
        buf.write("\u008c\u0bb6\n\u008c\3\u008c\3\u008c\3\u008d\3\u008d\3")
        buf.write("\u008d\3\u008d\3\u008d\5\u008d\u0bbf\n\u008d\3\u008e\3")
        buf.write("\u008e\7\u008e\u0bc3\n\u008e\f\u008e\16\u008e\u0bc6\13")
        buf.write("\u008e\3\u008e\3\u008e\5\u008e\u0bca\n\u008e\3\u008e\5")
        buf.write("\u008e\u0bcd\n\u008e\3\u008e\5\u008e\u0bd0\n\u008e\3\u008e")
        buf.write("\5\u008e\u0bd3\n\u008e\3\u008e\5\u008e\u0bd6\n\u008e\3")
        buf.write("\u008e\3\u008e\5\u008e\u0bda\n\u008e\3\u008f\3\u008f\3")
        buf.write("\u0090\3\u0090\3\u0091\3\u0091\3\u0091\3\u0092\3\u0092")
        buf.write("\3\u0092\3\u0093\3\u0093\3\u0093\5\u0093\u0be9\n\u0093")
        buf.write("\3\u0094\3\u0094\5\u0094\u0bed\n\u0094\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\5\u0095\u0bf3\n\u0095\3\u0095\5\u0095")
        buf.write("\u0bf6\n\u0095\3\u0095\5\u0095\u0bf9\n\u0095\3\u0095\3")
        buf.write("\u0095\3\u0095\3\u0095\5\u0095\u0bff\n\u0095\3\u0095\3")
        buf.write("\u0095\3\u0095\5\u0095\u0c04\n\u0095\7\u0095\u0c06\n\u0095")
        buf.write("\f\u0095\16\u0095\u0c09\13\u0095\5\u0095\u0c0b\n\u0095")
        buf.write("\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\5\u0096")
        buf.write("\u0c13\n\u0096\5\u0096\u0c15\n\u0096\3\u0096\3\u0096\3")
        buf.write("\u0097\3\u0097\3\u0097\3\u0098\3\u0098\3\u0098\3\u0098")
        buf.write("\7\u0098\u0c20\n\u0098\f\u0098\16\u0098\u0c23\13\u0098")
        buf.write("\3\u0099\3\u0099\3\u0099\3\u0099\3\u009a\3\u009a\3\u009a")
        buf.write("\3\u009a\3\u009b\5\u009b\u0c2e\n\u009b\3\u009b\3\u009b")
        buf.write("\3\u009b\5\u009b\u0c33\n\u009b\3\u009b\5\u009b\u0c36\n")
        buf.write("\u009b\3\u009b\5\u009b\u0c39\n\u009b\3\u009c\3\u009c\3")
        buf.write("\u009c\5\u009c\u0c3e\n\u009c\3\u009d\3\u009d\3\u009e\3")
        buf.write("\u009e\5\u009e\u0c44\n\u009e\3\u009f\3\u009f\3\u009f\3")
        buf.write("\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f")
        buf.write("\3\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0c54\n\u009f")
        buf.write("\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a1\3\u00a1")
        buf.write("\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1")
        buf.write("\3\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u0c68\n\u00a1")
        buf.write("\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2")
        buf.write("\5\u00a2\u0c71\n\u00a2\3\u00a3\3\u00a3\5\u00a3\u0c75\n")
        buf.write("\u00a3\3\u00a3\3\u00a3\3\u00a3\7\u00a3\u0c7a\n\u00a3\f")
        buf.write("\u00a3\16\u00a3\u0c7d\13\u00a3\3\u00a4\3\u00a4\5\u00a4")
        buf.write("\u0c81\n\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a5\3\u00a5")
        buf.write("\3\u00a5\3\u00a5\5\u00a5\u0c8a\n\u00a5\3\u00a6\3\u00a6")
        buf.write("\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u0c91\n\u00a6\3\u00a7")
        buf.write("\3\u00a7\3\u00a7\3\u00a7\3\u00a8\3\u00a8\3\u00a9\3\u00a9")
        buf.write("\3\u00a9\5\u00a9\u0c9c\n\u00a9\3\u00aa\3\u00aa\3\u00aa")
        buf.write("\7\u00aa\u0ca1\n\u00aa\f\u00aa\16\u00aa\u0ca4\13\u00aa")
        buf.write("\3\u00ab\3\u00ab\3\u00ab\3\u00ab\7\u00ab\u0caa\n\u00ab")
        buf.write("\f\u00ab\16\u00ab\u0cad\13\u00ab\3\u00ac\3\u00ac\3\u00ac")
        buf.write("\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0cb5\n\u00ad\3\u00ad")
        buf.write("\3\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae")
        buf.write("\3\u00ae\3\u00ae\5\u00ae\u0cc1\n\u00ae\3\u00af\6\u00af")
        buf.write("\u0cc4\n\u00af\r\u00af\16\u00af\u0cc5\3\u00b0\3\u00b0")
        buf.write("\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u0ccd\n\u00b0\3\u00b0")
        buf.write("\3\u00b0\5\u00b0\u0cd1\n\u00b0\3\u00b0\3\u00b0\3\u00b0")
        buf.write("\3\u00b0\5\u00b0\u0cd7\n\u00b0\3\u00b1\3\u00b1\3\u00b1")
        buf.write("\5\u00b1\u0cdc\n\u00b1\3\u00b2\3\u00b2\3\u00b2\5\u00b2")
        buf.write("\u0ce1\n\u00b2\3\u00b3\3\u00b3\5\u00b3\u0ce5\n\u00b3\3")
        buf.write("\u00b3\3\u00b3\7\u00b3\u0ce9\n\u00b3\f\u00b3\16\u00b3")
        buf.write("\u0cec\13\u00b3\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u0cf1")
        buf.write("\n\u00b4\5\u00b4\u0cf3\n\u00b4\3\u00b5\5\u00b5\u0cf6\n")
        buf.write("\u00b5\3\u00b5\3\u00b5\5\u00b5\u0cfa\n\u00b5\3\u00b6\3")
        buf.write("\u00b6\3\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7")
        buf.write("\5\u00b7\u0d04\n\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7")
        buf.write("\u0d09\n\u00b7\3\u00b7\7\u00b7\u0d0c\n\u00b7\f\u00b7\16")
        buf.write("\u00b7\u0d0f\13\u00b7\3\u00b8\3\u00b8\7\u00b8\u0d13\n")
        buf.write("\u00b8\f\u00b8\16\u00b8\u0d16\13\u00b8\3\u00b9\3\u00b9")
        buf.write("\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u0d1e\n\u00b9")
        buf.write("\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9")
        buf.write("\u0d26\n\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u0d2b\n")
        buf.write("\u00b9\3\u00ba\3\u00ba\5\u00ba\u0d2f\n\u00ba\3\u00ba\3")
        buf.write("\u00ba\3\u00ba\3\u00ba\5\u00ba\u0d35\n\u00ba\3\u00ba\5")
        buf.write("\u00ba\u0d38\n\u00ba\3\u00bb\5\u00bb\u0d3b\n\u00bb\3\u00bb")
        buf.write("\3\u00bb\5\u00bb\u0d3f\n\u00bb\3\u00bc\3\u00bc\5\u00bc")
        buf.write("\u0d43\n\u00bc\3\u00bc\3\u00bc\3\u00bd\3\u00bd\3\u00bd")
        buf.write("\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u0d4d\n\u00bd\3\u00be")
        buf.write("\3\u00be\5\u00be\u0d51\n\u00be\3\u00be\5\u00be\u0d54\n")
        buf.write("\u00be\3\u00be\5\u00be\u0d57\n\u00be\3\u00bf\3\u00bf\3")
        buf.write("\u00bf\5\u00bf\u0d5c\n\u00bf\3\u00bf\3\u00bf\3\u00c0\3")
        buf.write("\u00c0\5\u00c0\u0d62\n\u00c0\3\u00c0\3\u00c0\5\u00c0\u0d66")
        buf.write("\n\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u0d6c")
        buf.write("\n\u00c0\3\u00c0\5\u00c0\u0d6f\n\u00c0\5\u00c0\u0d71\n")
        buf.write("\u00c0\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u0d76\n\u00c1\3")
        buf.write("\u00c1\3\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2")
        buf.write("\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u0d82\n\u00c2\3\u00c3")
        buf.write("\3\u00c3\3\u00c3\3\u00c3\3\u00c3\7\u00c3\u0d89\n\u00c3")
        buf.write("\f\u00c3\16\u00c3\u0d8c\13\u00c3\3\u00c3\3\u00c3\3\u00c4")
        buf.write("\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4")
        buf.write("\5\u00c4\u0d98\n\u00c4\3\u00c4\5\u00c4\u0d9b\n\u00c4\3")
        buf.write("\u00c4\3\u00c4\3\u00c4\5\u00c4\u0da0\n\u00c4\3\u00c4\3")
        buf.write("\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u0da7\n\u00c4\3")
        buf.write("\u00c5\3\u00c5\5\u00c5\u0dab\n\u00c5\3\u00c5\3\u00c5\5")
        buf.write("\u00c5\u0daf\n\u00c5\5\u00c5\u0db1\n\u00c5\3\u00c6\3\u00c6")
        buf.write("\3\u00c6\3\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c8")
        buf.write("\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u0dbf\n\u00c8\3\u00c9")
        buf.write("\3\u00c9\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u0dc6\n\u00ca")
        buf.write("\3\u00ca\3\u00ca\3\u00cb\3\u00cb\3\u00cb\7\u00cb\u0dcd")
        buf.write("\n\u00cb\f\u00cb\16\u00cb\u0dd0\13\u00cb\3\u00cc\3\u00cc")
        buf.write("\3\u00cc\5\u00cc\u0dd5\n\u00cc\3\u00cc\3\u00cc\3\u00cc")
        buf.write("\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u0dde\n\u00cc")
        buf.write("\3\u00cc\3\u00cc\5\u00cc\u0de2\n\u00cc\3\u00cc\3\u00cc")
        buf.write("\5\u00cc\u0de6\n\u00cc\3\u00cd\3\u00cd\3\u00ce\3\u00ce")
        buf.write("\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u0df0\n\u00cf")
        buf.write("\5\u00cf\u0df2\n\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0")
        buf.write("\3\u00d0\3\u00d0\5\u00d0\u0dfa\n\u00d0\3\u00d1\3\u00d1")
        buf.write("\3\u00d1\7\u00d1\u0dff\n\u00d1\f\u00d1\16\u00d1\u0e02")
        buf.write("\13\u00d1\3\u00d2\3\u00d2\5\u00d2\u0e06\n\u00d2\3\u00d3")
        buf.write("\3\u00d3\5\u00d3\u0e0a\n\u00d3\3\u00d3\3\u00d3\5\u00d3")
        buf.write("\u0e0e\n\u00d3\3\u00d3\5\u00d3\u0e11\n\u00d3\3\u00d3\3")
        buf.write("\u00d3\3\u00d3\3\u00d3\5\u00d3\u0e17\n\u00d3\3\u00d3\5")
        buf.write("\u00d3\u0e1a\n\u00d3\3\u00d3\5\u00d3\u0e1d\n\u00d3\3\u00d4")
        buf.write("\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u0e23\n\u00d4\3\u00d5")
        buf.write("\3\u00d5\3\u00d5\7\u00d5\u0e28\n\u00d5\f\u00d5\16\u00d5")
        buf.write("\u0e2b\13\u00d5\3\u00d5\3\u00d5\5\u00d5\u0e2f\n\u00d5")
        buf.write("\3\u00d5\3\u00d5\5\u00d5\u0e33\n\u00d5\3\u00d5\5\u00d5")
        buf.write("\u0e36\n\u00d5\3\u00d5\5\u00d5\u0e39\n\u00d5\3\u00d5\5")
        buf.write("\u00d5\u0e3c\n\u00d5\5\u00d5\u0e3e\n\u00d5\3\u00d6\3\u00d6")
        buf.write("\5\u00d6\u0e42\n\u00d6\3\u00d7\3\u00d7\3\u00d7\3\u00d7")
        buf.write("\3\u00d7\3\u00d7\5\u00d7\u0e4a\n\u00d7\3\u00d8\3\u00d8")
        buf.write("\3\u00d8\3\u00d8\5\u00d8\u0e50\n\u00d8\3\u00d8\3\u00d8")
        buf.write("\5\u00d8\u0e54\n\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8")
        buf.write("\u0e59\n\u00d8\3\u00d8\5\u00d8\u0e5c\n\u00d8\3\u00d8\5")
        buf.write("\u00d8\u0e5f\n\u00d8\3\u00d8\5\u00d8\u0e62\n\u00d8\5\u00d8")
        buf.write("\u0e64\n\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u0e69\n")
        buf.write("\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\7\u00d9")
        buf.write("\u0e70\n\u00d9\f\u00d9\16\u00d9\u0e73\13\u00d9\3\u00d9")
        buf.write("\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9")
        buf.write("\3\u00d9\3\u00d9\5\u00d9\u0e7f\n\u00d9\5\u00d9\u0e81\n")
        buf.write("\u00d9\3\u00da\3\u00da\5\u00da\u0e85\n\u00da\3\u00da\3")
        buf.write("\u00da\3\u00db\3\u00db\5\u00db\u0e8b\n\u00db\3\u00db\5")
        buf.write("\u00db\u0e8e\n\u00db\3\u00db\5\u00db\u0e91\n\u00db\3\u00dc")
        buf.write("\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u0e97\n\u00dc\3\u00dc")
        buf.write("\3\u00dc\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u0e9e\n\u00dc")
        buf.write("\5\u00dc\u0ea0\n\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc")
        buf.write("\3\u00dc\3\u00dc\5\u00dc\u0ea8\n\u00dc\3\u00dc\3\u00dc")
        buf.write("\3\u00dc\3\u00dc\5\u00dc\u0eae\n\u00dc\3\u00dd\3\u00dd")
        buf.write("\3\u00dd\5\u00dd\u0eb3\n\u00dd\3\u00dd\5\u00dd\u0eb6\n")
        buf.write("\u00dd\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de")
        buf.write("\u0ebd\n\u00de\5\u00de\u0ebf\n\u00de\3\u00df\3\u00df\3")
        buf.write("\u00df\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u0ec8\n")
        buf.write("\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\7\u00df")
        buf.write("\u0ecf\n\u00df\f\u00df\16\u00df\u0ed2\13\u00df\3\u00df")
        buf.write("\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u0eda")
        buf.write("\n\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df")
        buf.write("\5\u00df\u0ee2\n\u00df\3\u00e0\3\u00e0\5\u00e0\u0ee6\n")
        buf.write("\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0")
        buf.write("\u0eed\n\u00e0\3\u00e0\5\u00e0\u0ef0\n\u00e0\5\u00e0\u0ef2")
        buf.write("\n\u00e0\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1")
        buf.write("\5\u00e1\u0efa\n\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e2")
        buf.write("\5\u00e2\u0f00\n\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e3")
        buf.write("\3\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u0f0a\n\u00e3")
        buf.write("\3\u00e4\3\u00e4\3\u00e4\7\u00e4\u0f0f\n\u00e4\f\u00e4")
        buf.write("\16\u00e4\u0f12\13\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u0f6f\n\u00e5\3\u00e6")
        buf.write("\3\u00e6\5\u00e6\u0f73\n\u00e6\3\u00e7\3\u00e7\3\u00e8")
        buf.write("\3\u00e8\5\u00e8\u0f79\n\u00e8\3\u00e9\3\u00e9\3\u00e9")
        buf.write("\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9")
        buf.write("\3\u00e9\3\u00e9\5\u00e9\u0f87\n\u00e9\3\u00ea\3\u00ea")
        buf.write("\3\u00ea\3\u00ea\7\u00ea\u0f8d\n\u00ea\f\u00ea\16\u00ea")
        buf.write("\u0f90\13\u00ea\5\u00ea\u0f92\n\u00ea\3\u00ea\3\u00ea")
        buf.write("\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\7\u00eb")
        buf.write("\u0f9c\n\u00eb\f\u00eb\16\u00eb\u0f9f\13\u00eb\3\u00eb")
        buf.write("\3\u00eb\5\u00eb\u0fa3\n\u00eb\3\u00ec\3\u00ec\3\u00ec")
        buf.write("\3\u00ec\5\u00ec\u0fa9\n\u00ec\3\u00ec\3\u00ec\3\u00ec")
        buf.write("\3\u00ec\3\u00ec\5\u00ec\u0fb0\n\u00ec\3\u00ec\3\u00ec")
        buf.write("\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u0fb7\n\u00ec\3\u00ec")
        buf.write("\3\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u0fbe\n\u00ec")
        buf.write("\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u0fc5")
        buf.write("\n\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec")
        buf.write("\u0fcc\n\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec")
        buf.write("\5\u00ec\u0fd3\n\u00ec\3\u00ec\5\u00ec\u0fd6\n\u00ec\3")
        buf.write("\u00ed\3\u00ed\3\u00ed\7\u00ed\u0fdb\n\u00ed\f\u00ed\16")
        buf.write("\u00ed\u0fde\13\u00ed\3\u00ee\3\u00ee\3\u00ee\7\u00ee")
        buf.write("\u0fe3\n\u00ee\f\u00ee\16\u00ee\u0fe6\13\u00ee\3\u00ef")
        buf.write("\3\u00ef\3\u00ef\7\u00ef\u0feb\n\u00ef\f\u00ef\16\u00ef")
        buf.write("\u0fee\13\u00ef\3\u00f0\3\u00f0\3\u00f1\3\u00f1\3\u00f1")
        buf.write("\7\u00f1\u0ff5\n\u00f1\f\u00f1\16\u00f1\u0ff8\13\u00f1")
        buf.write("\3\u00f2\3\u00f2\3\u00f2\5\u00f2\u0ffd\n\u00f2\3\u00f2")
        buf.write("\3\u00f2\5\u00f2\u1001\n\u00f2\3\u00f2\3\u00f2\5\u00f2")
        buf.write("\u1005\n\u00f2\3\u00f2\3\u00f2\3\u00f2\5\u00f2\u100a\n")
        buf.write("\u00f2\3\u00f2\5\u00f2\u100d\n\u00f2\5\u00f2\u100f\n\u00f2")
        buf.write("\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3")
        buf.write("\5\u00f3\u1018\n\u00f3\3\u00f3\3\u00f3\7\u00f3\u101c\n")
        buf.write("\u00f3\f\u00f3\16\u00f3\u101f\13\u00f3\3\u00f4\3\u00f4")
        buf.write("\3\u00f4\3\u00f4\5\u00f4\u1025\n\u00f4\3\u00f4\3\u00f4")
        buf.write("\3\u00f4\5\u00f4\u102a\n\u00f4\3\u00f4\3\u00f4\3\u00f4")
        buf.write("\5\u00f4\u102f\n\u00f4\3\u00f4\3\u00f4\3\u00f4\5\u00f4")
        buf.write("\u1034\n\u00f4\3\u00f4\5\u00f4\u1037\n\u00f4\3\u00f5\3")
        buf.write("\u00f5\3\u00f5\7\u00f5\u103c\n\u00f5\f\u00f5\16\u00f5")
        buf.write("\u103f\13\u00f5\3\u00f6\3\u00f6\3\u00f7\3\u00f7\3\u00f7")
        buf.write("\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u104b")
        buf.write("\n\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u1051")
        buf.write("\n\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u1057")
        buf.write("\n\u00f9\3\u00fa\3\u00fa\3\u00fa\7\u00fa\u105c\n\u00fa")
        buf.write("\f\u00fa\16\u00fa\u105f\13\u00fa\3\u00fb\3\u00fb\3\u00fb")
        buf.write("\3\u00fb\3\u00fb\5\u00fb\u1066\n\u00fb\3\u00fb\3\u00fb")
        buf.write("\3\u00fb\3\u00fb\5\u00fb\u106c\n\u00fb\3\u00fb\3\u00fb")
        buf.write("\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb")
        buf.write("\3\u00fb\5\u00fb\u1078\n\u00fb\5\u00fb\u107a\n\u00fb\3")
        buf.write("\u00fc\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u1080\n\u00fc\3")
        buf.write("\u00fc\3\u00fc\5\u00fc\u1084\n\u00fc\5\u00fc\u1086\n\u00fc")
        buf.write("\3\u00fd\3\u00fd\5\u00fd\u108a\n\u00fd\3\u00fd\3\u00fd")
        buf.write("\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe")
        buf.write("\3\u00fe\3\u00fe\5\u00fe\u1097\n\u00fe\3\u00ff\3\u00ff")
        buf.write("\3\u00ff\3\u00ff\5\u00ff\u109d\n\u00ff\3\u00ff\3\u00ff")
        buf.write("\3\u0100\3\u0100\3\u0100\3\u0100\5\u0100\u10a5\n\u0100")
        buf.write("\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100")
        buf.write("\3\u0100\3\u0100\5\u0100\u10b0\n\u0100\3\u0100\3\u0100")
        buf.write("\5\u0100\u10b4\n\u0100\3\u0100\3\u0100\3\u0100\3\u0100")
        buf.write("\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100")
        buf.write("\5\u0100\u10c1\n\u0100\3\u0100\3\u0100\3\u0100\3\u0100")
        buf.write("\3\u0100\5\u0100\u10c8\n\u0100\3\u0100\3\u0100\3\u0100")
        buf.write("\3\u0100\5\u0100\u10ce\n\u0100\3\u0100\3\u0100\3\u0100")
        buf.write("\3\u0100\3\u0100\5\u0100\u10d5\n\u0100\5\u0100\u10d7\n")
        buf.write("\u0100\3\u0101\3\u0101\3\u0101\3\u0102\3\u0102\3\u0102")
        buf.write("\3\u0102\3\u0102\5\u0102\u10e1\n\u0102\3\u0102\3\u0102")
        buf.write("\3\u0102\3\u0102\3\u0103\3\u0103\5\u0103\u10e9\n\u0103")
        buf.write("\3\u0103\5\u0103\u10ec\n\u0103\3\u0103\7\u0103\u10ef\n")
        buf.write("\u0103\f\u0103\16\u0103\u10f2\13\u0103\3\u0103\5\u0103")
        buf.write("\u10f5\n\u0103\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104")
        buf.write("\u10fb\n\u0104\3\u0104\5\u0104\u10fe\n\u0104\3\u0105\3")
        buf.write("\u0105\3\u0105\5\u0105\u1103\n\u0105\3\u0106\3\u0106\3")
        buf.write("\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106")
        buf.write("\6\u0106\u110e\n\u0106\r\u0106\16\u0106\u110f\3\u0107")
        buf.write("\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107")
        buf.write("\3\u0107\3\u0107\5\u0107\u111c\n\u0107\3\u0107\3\u0107")
        buf.write("\3\u0107\5\u0107\u1121\n\u0107\3\u0107\3\u0107\3\u0107")
        buf.write("\3\u0107\3\u0107\3\u0107\5\u0107\u1129\n\u0107\3\u0107")
        buf.write("\3\u0107\3\u0107\3\u0107\5\u0107\u112f\n\u0107\5\u0107")
        buf.write("\u1131\n\u0107\5\u0107\u1133\n\u0107\3\u0108\3\u0108\3")
        buf.write("\u0108\3\u0108\5\u0108\u1139\n\u0108\3\u0108\3\u0108\3")
        buf.write("\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109")
        buf.write("\3\u0109\5\u0109\u1145\n\u0109\3\u0109\3\u0109\3\u0109")
        buf.write("\5\u0109\u114a\n\u0109\5\u0109\u114c\n\u0109\3\u0109\3")
        buf.write("\u0109\5\u0109\u1150\n\u0109\3\u0109\3\u0109\3\u0109\3")
        buf.write("\u0109\5\u0109\u1156\n\u0109\3\u0109\5\u0109\u1159\n\u0109")
        buf.write("\3\u0109\5\u0109\u115c\n\u0109\3\u0109\3\u0109\3\u0109")
        buf.write("\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\5\u0109\u1166")
        buf.write("\n\u0109\5\u0109\u1168\n\u0109\3\u010a\3\u010a\3\u010a")
        buf.write("\3\u010a\5\u010a\u116e\n\u010a\3\u010b\3\u010b\3\u010b")
        buf.write("\6\u010b\u1173\n\u010b\r\u010b\16\u010b\u1174\3\u010b")
        buf.write("\3\u010b\3\u010b\3\u010b\5\u010b\u117b\n\u010b\3\u010c")
        buf.write("\3\u010c\3\u010c\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d")
        buf.write("\5\u010d\u1185\n\u010d\3\u010d\3\u010d\5\u010d\u1189\n")
        buf.write("\u010d\3\u010e\3\u010e\3\u010e\5\u010e\u118e\n\u010e\3")
        buf.write("\u010f\3\u010f\3\u010f\3\u0110\3\u0110\3\u0110\3\u0110")
        buf.write("\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\7\u0110")
        buf.write("\u119d\n\u0110\f\u0110\16\u0110\u11a0\13\u0110\3\u0111")
        buf.write("\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111")
        buf.write("\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\5\u0111\u11af")
        buf.write("\n\u0111\3\u0111\3\u0111\3\u0111\5\u0111\u11b4\n\u0111")
        buf.write("\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\5\u0111")
        buf.write("\u11bc\n\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111")
        buf.write("\3\u0111\5\u0111\u11c4\n\u0111\3\u0112\3\u0112\3\u0112")
        buf.write("\5\u0112\u11c9\n\u0112\3\u0112\3\u0112\3\u0112\3\u0112")
        buf.write("\5\u0112\u11cf\n\u0112\3\u0112\5\u0112\u11d2\n\u0112\5")
        buf.write("\u0112\u11d4\n\u0112\3\u0113\3\u0113\3\u0114\3\u0114\3")
        buf.write("\u0114\7\u0114\u11db\n\u0114\f\u0114\16\u0114\u11de\13")
        buf.write("\u0114\3\u0115\3\u0115\3\u0115\5\u0115\u11e3\n\u0115\3")
        buf.write("\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u11e9\n\u0115\5")
        buf.write("\u0115\u11eb\n\u0115\3\u0115\3\u0115\5\u0115\u11ef\n\u0115")
        buf.write("\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\5\u0115\u11fa\n\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115")
        buf.write("\u1204\n\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u1209\n")
        buf.write("\u0115\3\u0116\3\u0116\3\u0116\5\u0116\u120e\n\u0116\3")
        buf.write("\u0116\3\u0116\3\u0116\5\u0116\u1213\n\u0116\3\u0116\3")
        buf.write("\u0116\3\u0116\3\u0116\3\u0116\3\u0116\5\u0116\u121b\n")
        buf.write("\u0116\3\u0117\3\u0117\5\u0117\u121f\n\u0117\3\u0117\7")
        buf.write("\u0117\u1222\n\u0117\f\u0117\16\u0117\u1225\13\u0117\3")
        buf.write("\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\5\u0118")
        buf.write("\u122d\n\u0118\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119")
        buf.write("\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u1239")
        buf.write("\n\u0119\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a")
        buf.write("\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\5\u011a")
        buf.write("\u1247\n\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a")
        buf.write("\3\u011a\3\u011a\5\u011a\u1250\n\u011a\5\u011a\u1252\n")
        buf.write("\u011a\3\u011b\3\u011b\3\u011b\7\u011b\u1257\n\u011b\f")
        buf.write("\u011b\16\u011b\u125a\13\u011b\3\u011c\3\u011c\3\u011c")
        buf.write("\3\u011c\5\u011c\u1260\n\u011c\3\u011d\3\u011d\5\u011d")
        buf.write("\u1264\n\u011d\3\u011d\3\u011d\3\u011d\3\u011d\5\u011d")
        buf.write("\u126a\n\u011d\3\u011d\3\u011d\3\u011d\3\u011d\7\u011d")
        buf.write("\u1270\n\u011d\f\u011d\16\u011d\u1273\13\u011d\3\u011d")
        buf.write("\3\u011d\3\u011d\3\u011d\5\u011d\u1279\n\u011d\3\u011d")
        buf.write("\3\u011d\5\u011d\u127d\n\u011d\3\u011d\3\u011d\3\u011d")
        buf.write("\3\u011d\5\u011d\u1283\n\u011d\3\u011d\3\u011d\3\u011d")
        buf.write("\7\u011d\u1288\n\u011d\f\u011d\16\u011d\u128b\13\u011d")
        buf.write("\5\u011d\u128d\n\u011d\3\u011e\3\u011e\3\u011e\3\u011e")
        buf.write("\3\u011e\3\u011e\3\u011e\5\u011e\u1296\n\u011e\3\u011e")
        buf.write("\3\u011e\3\u011e\3\u011e\5\u011e\u129c\n\u011e\3\u011f")
        buf.write("\3\u011f\3\u011f\5\u011f\u12a1\n\u011f\3\u0120\3\u0120")
        buf.write("\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121")
        buf.write("\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121")
        buf.write("\3\u0121\3\u0121\3\u0121\7\u0121\u12b6\n\u0121\f\u0121")
        buf.write("\16\u0121\u12b9\13\u0121\5\u0121\u12bb\n\u0121\3\u0122")
        buf.write("\3\u0122\3\u0122\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123")
        buf.write("\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\5\u0123")
        buf.write("\u12cb\n\u0123\3\u0123\3\u0123\3\u0123\5\u0123\u12d0\n")
        buf.write("\u0123\3\u0123\5\u0123\u12d3\n\u0123\3\u0123\3\u0123\5")
        buf.write("\u0123\u12d7\n\u0123\3\u0123\5\u0123\u12da\n\u0123\3\u0123")
        buf.write("\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123")
        buf.write("\3\u0123\3\u0123\3\u0123\3\u0123\5\u0123\u12e8\n\u0123")
        buf.write("\3\u0123\3\u0123\3\u0123\3\u0123\5\u0123\u12ee\n\u0123")
        buf.write("\3\u0123\3\u0123\3\u0123\5\u0123\u12f3\n\u0123\3\u0123")
        buf.write("\5\u0123\u12f6\n\u0123\5\u0123\u12f8\n\u0123\3\u0124\3")
        buf.write("\u0124\5\u0124\u12fc\n\u0124\3\u0124\3\u0124\3\u0124\5")
        buf.write("\u0124\u1301\n\u0124\5\u0124\u1303\n\u0124\3\u0125\3\u0125")
        buf.write("\3\u0125\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126")
        buf.write("\3\u0126\5\u0126\u130f\n\u0126\3\u0127\3\u0127\7\u0127")
        buf.write("\u1313\n\u0127\f\u0127\16\u0127\u1316\13\u0127\3\u0128")
        buf.write("\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128")
        buf.write("\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128")
        buf.write("\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u132b\n\u0128")
        buf.write("\3\u0128\3\u0128\5\u0128\u132f\n\u0128\5\u0128\u1331\n")
        buf.write("\u0128\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129")
        buf.write("\5\u0129\u1339\n\u0129\3\u012a\3\u012a\5\u012a\u133d\n")
        buf.write("\u012a\3\u012a\3\u012a\3\u012b\3\u012b\3\u012b\3\u012b")
        buf.write("\3\u012b\5\u012b\u1346\n\u012b\3\u012c\3\u012c\3\u012c")
        buf.write("\3\u012c\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d\u1350")
        buf.write("\n\u012d\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\5\u012e")
        buf.write("\u1357\n\u012e\3\u012e\5\u012e\u135a\n\u012e\3\u012e\3")
        buf.write("\u012e\5\u012e\u135e\n\u012e\3\u012e\5\u012e\u1361\n\u012e")
        buf.write("\3\u012e\5\u012e\u1364\n\u012e\3\u012e\3\u012e\5\u012e")
        buf.write("\u1368\n\u012e\3\u012e\5\u012e\u136b\n\u012e\3\u012e\3")
        buf.write("\u012e\5\u012e\u136f\n\u012e\3\u012e\5\u012e\u1372\n\u012e")
        buf.write("\3\u012e\3\u012e\3\u012e\5\u012e\u1377\n\u012e\3\u012e")
        buf.write("\5\u012e\u137a\n\u012e\3\u012e\3\u012e\3\u012e\5\u012e")
        buf.write("\u137f\n\u012e\3\u012e\5\u012e\u1382\n\u012e\3\u012e\3")
        buf.write("\u012e\3\u012e\3\u012e\5\u012e\u1388\n\u012e\3\u012e\3")
        buf.write("\u012e\5\u012e\u138c\n\u012e\3\u012e\3\u012e\3\u012e\3")
        buf.write("\u012e\5\u012e\u1392\n\u012e\3\u012e\5\u012e\u1395\n\u012e")
        buf.write("\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e")
        buf.write("\5\u012e\u139e\n\u012e\5\u012e\u13a0\n\u012e\3\u012e\3")
        buf.write("\u012e\3\u012e\3\u012e\5\u012e\u13a6\n\u012e\3\u012e\3")
        buf.write("\u012e\5\u012e\u13aa\n\u012e\3\u012e\5\u012e\u13ad\n\u012e")
        buf.write("\3\u012e\5\u012e\u13b0\n\u012e\3\u012e\3\u012e\5\u012e")
        buf.write("\u13b4\n\u012e\3\u012e\3\u012e\3\u012e\3\u012e\5\u012e")
        buf.write("\u13ba\n\u012e\3\u012e\5\u012e\u13bd\n\u012e\3\u012e\5")
        buf.write("\u012e\u13c0\n\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3")
        buf.write("\u012e\3\u012e\3\u012e\3\u012e\5\u012e\u13ca\n\u012e\3")
        buf.write("\u012e\3\u012e\5\u012e\u13ce\n\u012e\3\u012e\3\u012e\3")
        buf.write("\u012e\3\u012e\3\u012e\7\u012e\u13d5\n\u012e\f\u012e\16")
        buf.write("\u012e\u13d8\13\u012e\5\u012e\u13da\n\u012e\3\u012e\3")
        buf.write("\u012e\3\u012e\5\u012e\u13df\n\u012e\3\u012e\5\u012e\u13e2")
        buf.write("\n\u012e\3\u012e\5\u012e\u13e5\n\u012e\3\u012e\3\u012e")
        buf.write("\5\u012e\u13e9\n\u012e\3\u012e\5\u012e\u13ec\n\u012e\3")
        buf.write("\u012e\3\u012e\3\u012e\5\u012e\u13f1\n\u012e\3\u012e\3")
        buf.write("\u012e\5\u012e\u13f5\n\u012e\3\u012e\3\u012e\3\u012e\3")
        buf.write("\u012e\3\u012e\3\u012e\5\u012e\u13fd\n\u012e\3\u012e\3")
        buf.write("\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e")
        buf.write("\3\u012e\3\u012e\3\u012e\5\u012e\u140a\n\u012e\3\u012e")
        buf.write("\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e")
        buf.write("\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e")
        buf.write("\3\u012e\5\u012e\u141c\n\u012e\3\u012e\3\u012e\3\u012e")
        buf.write("\5\u012e\u1421\n\u012e\3\u012e\3\u012e\3\u012e\5\u012e")
        buf.write("\u1426\n\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e")
        buf.write("\3\u012e\5\u012e\u142e\n\u012e\3\u012f\3\u012f\3\u012f")
        buf.write("\3\u012f\5\u012f\u1434\n\u012f\5\u012f\u1436\n\u012f\3")
        buf.write("\u0130\3\u0130\5\u0130\u143a\n\u0130\3\u0130\5\u0130\u143d")
        buf.write("\n\u0130\3\u0131\3\u0131\3\u0132\3\u0132\3\u0132\3\u0133")
        buf.write("\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\5\u0133")
        buf.write("\u144b\n\u0133\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134")
        buf.write("\3\u0134\3\u0134\3\u0134\5\u0134\u1455\n\u0134\3\u0134")
        buf.write("\3\u0134\5\u0134\u1459\n\u0134\3\u0134\3\u0134\3\u0134")
        buf.write("\3\u0134\7\u0134\u145f\n\u0134\f\u0134\16\u0134\u1462")
        buf.write("\13\u0134\5\u0134\u1464\n\u0134\3\u0134\3\u0134\5\u0134")
        buf.write("\u1468\n\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134")
        buf.write("\3\u0134\3\u0134\3\u0134\5\u0134\u1472\n\u0134\3\u0135")
        buf.write("\3\u0135\5\u0135\u1476\n\u0135\3\u0136\3\u0136\3\u0136")
        buf.write("\7\u0136\u147b\n\u0136\f\u0136\16\u0136\u147e\13\u0136")
        buf.write("\3\u0137\3\u0137\5\u0137\u1482\n\u0137\3\u0138\3\u0138")
        buf.write("\3\u0138\3\u0138\3\u0138\3\u0138\5\u0138\u148a\n\u0138")
        buf.write("\3\u0139\3\u0139\3\u0139\5\u0139\u148f\n\u0139\3\u0139")
        buf.write("\3\u0139\3\u013a\3\u013a\5\u013a\u1495\n\u013a\3\u013b")
        buf.write("\3\u013b\3\u013b\7\u013b\u149a\n\u013b\f\u013b\16\u013b")
        buf.write("\u149d\13\u013b\3\u013c\3\u013c\5\u013c\u14a1\n\u013c")
        buf.write("\3\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u14a7\n\u013c")
        buf.write("\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u14ae")
        buf.write("\n\u013c\3\u013d\3\u013d\3\u013e\3\u013e\3\u013e\3\u013e")
        buf.write("\3\u013e\3\u013e\5\u013e\u14b8\n\u013e\5\u013e\u14ba\n")
        buf.write("\u013e\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f")
        buf.write("\5\u013f\u14c2\n\u013f\3\u0140\3\u0140\3\u0140\5\u0140")
        buf.write("\u14c7\n\u0140\3\u0140\3\u0140\5\u0140\u14cb\n\u0140\3")
        buf.write("\u0140\5\u0140\u14ce\n\u0140\3\u0141\3\u0141\3\u0141\7")
        buf.write("\u0141\u14d3\n\u0141\f\u0141\16\u0141\u14d6\13\u0141\3")
        buf.write("\u0142\3\u0142\5\u0142\u14da\n\u0142\3\u0142\3\u0142\5")
        buf.write("\u0142\u14de\n\u0142\3\u0143\3\u0143\3\u0143\3\u0143\3")
        buf.write("\u0143\3\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u14e9\n")
        buf.write("\u0144\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145")
        buf.write("\5\u0145\u14f1\n\u0145\3\u0145\3\u0145\5\u0145\u14f5\n")
        buf.write("\u0145\3\u0145\5\u0145\u14f8\n\u0145\3\u0145\5\u0145\u14fb")
        buf.write("\n\u0145\3\u0146\3\u0146\5\u0146\u14ff\n\u0146\3\u0146")
        buf.write("\3\u0146\5\u0146\u1503\n\u0146\3\u0146\7\u0146\u1506\n")
        buf.write("\u0146\f\u0146\16\u0146\u1509\13\u0146\3\u0147\3\u0147")
        buf.write("\3\u0147\5\u0147\u150e\n\u0147\3\u0148\3\u0148\5\u0148")
        buf.write("\u1512\n\u0148\3\u0148\3\u0148\3\u0149\3\u0149\3\u014a")
        buf.write("\3\u014a\3\u014a\3\u014a\3\u014a\5\u014a\u151d\n\u014a")
        buf.write("\3\u014a\5\u014a\u1520\n\u014a\3\u014a\5\u014a\u1523\n")
        buf.write("\u014a\3\u014a\5\u014a\u1526\n\u014a\3\u014b\3\u014b\3")
        buf.write("\u014b\3\u014b\3\u014b\3\u014b\5\u014b\u152e\n\u014b\3")
        buf.write("\u014c\3\u014c\5\u014c\u1532\n\u014c\3\u014c\7\u014c\u1535")
        buf.write("\n\u014c\f\u014c\16\u014c\u1538\13\u014c\3\u014d\3\u014d")
        buf.write("\3\u014d\3\u014d\3\u014d\5\u014d\u153f\n\u014d\3\u014e")
        buf.write("\3\u014e\3\u014e\3\u014e\3\u014e\3\u014e\5\u014e\u1547")
        buf.write("\n\u014e\3\u014f\3\u014f\3\u014f\3\u014f\5\u014f\u154d")
        buf.write("\n\u014f\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150")
        buf.write("\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150")
        buf.write("\3\u0150\3\u0150\3\u0150\5\u0150\u155f\n\u0150\3\u0150")
        buf.write("\3\u0150\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151")
        buf.write("\5\u0151\u1569\n\u0151\3\u0151\3\u0151\3\u0151\3\u0151")
        buf.write("\5\u0151\u156f\n\u0151\3\u0152\3\u0152\3\u0152\3\u0153")
        buf.write("\3\u0153\3\u0153\3\u0154\3\u0154\3\u0155\3\u0155\3\u0155")
        buf.write("\3\u0155\5\u0155\u157d\n\u0155\3\u0155\5\u0155\u1580\n")
        buf.write("\u0155\3\u0155\3\u0155\5\u0155\u1584\n\u0155\3\u0155\3")
        buf.write("\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155")
        buf.write("\3\u0155\7\u0155\u158f\n\u0155\f\u0155\16\u0155\u1592")
        buf.write("\13\u0155\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156")
        buf.write("\5\u0156\u159a\n\u0156\3\u0156\3\u0156\3\u0156\3\u0156")
        buf.write("\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\7\u0156")
        buf.write("\u15a6\n\u0156\f\u0156\16\u0156\u15a9\13\u0156\3\u0157")
        buf.write("\3\u0157\3\u0158\3\u0158\5\u0158\u15af\n\u0158\3\u0158")
        buf.write("\3\u0158\3\u0158\3\u0158\5\u0158\u15b5\n\u0158\3\u0158")
        buf.write("\3\u0158\3\u0158\3\u0158\5\u0158\u15bb\n\u0158\3\u0159")
        buf.write("\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\5\u0159\u15c3")
        buf.write("\n\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159")
        buf.write("\3\u0159\3\u0159\3\u0159\5\u0159\u15ce\n\u0159\3\u0159")
        buf.write("\3\u0159\5\u0159\u15d2\n\u0159\3\u015a\3\u015a\3\u015a")
        buf.write("\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a")
        buf.write("\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a")
        buf.write("\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a")
        buf.write("\3\u015a\3\u015a\3\u015a\7\u015a\u15ef\n\u015a\f\u015a")
        buf.write("\16\u015a\u15f2\13\u015a\3\u015b\3\u015b\3\u015b\3\u015b")
        buf.write("\3\u015b\5\u015b\u15f9\n\u015b\3\u015b\3\u015b\5\u015b")
        buf.write("\u15fd\n\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b")
        buf.write("\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b")
        buf.write("\3\u015b\3\u015b\3\u015b\5\u015b\u160e\n\u015b\3\u015b")
        buf.write("\3\u015b\3\u015b\3\u015b\3\u015b\5\u015b\u1615\n\u015b")
        buf.write("\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b")
        buf.write("\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\5\u015b\u1623")
        buf.write("\n\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b")
        buf.write("\3\u015b\3\u015b\3\u015b\3\u015b\5\u015b\u162f\n\u015b")
        buf.write("\3\u015b\3\u015b\3\u015b\3\u015b\5\u015b\u1635\n\u015b")
        buf.write("\3\u015b\3\u015b\3\u015b\6\u015b\u163a\n\u015b\r\u015b")
        buf.write("\16\u015b\u163b\3\u015b\5\u015b\u163f\n\u015b\3\u015b")
        buf.write("\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b")
        buf.write("\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b")
        buf.write("\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b")
        buf.write("\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b")
        buf.write("\3\u015b\3\u015b\3\u015b\5\u015b\u1661\n\u015b\3\u015b")
        buf.write("\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\7\u015b\u1669")
        buf.write("\n\u015b\f\u015b\16\u015b\u166c\13\u015b\3\u015c\3\u015c")
        buf.write("\3\u015c\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d")
        buf.write("\5\u015d\u1677\n\u015d\3\u015e\3\u015e\3\u015e\5\u015e")
        buf.write("\u167c\n\u015e\3\u015e\3\u015e\3\u015e\3\u015e\5\u015e")
        buf.write("\u1682\n\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e")
        buf.write("\3\u015e\5\u015e\u168a\n\u015e\3\u015e\3\u015e\3\u015e")
        buf.write("\3\u015e\3\u015e\5\u015e\u1691\n\u015e\3\u015e\3\u015e")
        buf.write("\3\u015e\3\u015e\5\u015e\u1697\n\u015e\3\u015e\3\u015e")
        buf.write("\3\u015e\5\u015e\u169c\n\u015e\3\u015e\3\u015e\3\u015e")
        buf.write("\3\u015e\5\u015e\u16a2\n\u015e\3\u015e\3\u015e\3\u015e")
        buf.write("\5\u015e\u16a7\n\u015e\3\u015e\3\u015e\3\u015e\5\u015e")
        buf.write("\u16ac\n\u015e\3\u015e\3\u015e\3\u015e\3\u015e\5\u015e")
        buf.write("\u16b2\n\u015e\3\u015e\3\u015e\3\u015e\5\u015e\u16b7\n")
        buf.write("\u015e\3\u015e\3\u015e\3\u015e\3\u015e\5\u015e\u16bd\n")
        buf.write("\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e")
        buf.write("\5\u015e\u16c5\n\u015e\3\u015e\3\u015e\3\u015e\3\u015e")
        buf.write("\3\u015e\3\u015e\5\u015e\u16cd\n\u015e\3\u015e\3\u015e")
        buf.write("\3\u015e\3\u015e\3\u015e\3\u015e\5\u015e\u16d5\n\u015e")
        buf.write("\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\5\u015e")
        buf.write("\u16dd\n\u015e\3\u015e\3\u015e\3\u015e\5\u015e\u16e2\n")
        buf.write("\u015e\3\u015e\3\u015e\3\u015e\3\u015e\5\u015e\u16e8\n")
        buf.write("\u015e\3\u015e\3\u015e\3\u015e\5\u015e\u16ed\n\u015e\3")
        buf.write("\u015e\3\u015e\5\u015e\u16f1\n\u015e\3\u015e\3\u015e\5")
        buf.write("\u015e\u16f5\n\u015e\3\u015e\3\u015e\3\u015e\5\u015e\u16fa")
        buf.write("\n\u015e\5\u015e\u16fc\n\u015e\3\u015f\3\u015f\3\u015f")
        buf.write("\3\u015f\3\u015f\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160")
        buf.write("\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160")
        buf.write("\5\u0160\u170f\n\u0160\3\u0160\3\u0160\5\u0160\u1713\n")
        buf.write("\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\5\u0160")
        buf.write("\u171a\n\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160")
        buf.write("\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\5\u0160\u1726")
        buf.write("\n\u0160\3\u0160\5\u0160\u1729\n\u0160\3\u0160\3\u0160")
        buf.write("\5\u0160\u172d\n\u0160\3\u0161\3\u0161\3\u0161\5\u0161")
        buf.write("\u1732\n\u0161\3\u0162\3\u0162\3\u0162\5\u0162\u1737\n")
        buf.write("\u0162\3\u0162\3\u0162\5\u0162\u173b\n\u0162\3\u0163\3")
        buf.write("\u0163\3\u0163\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164")
        buf.write("\5\u0164\u1745\n\u0164\3\u0164\3\u0164\3\u0164\3\u0164")
        buf.write("\3\u0164\3\u0164\3\u0164\5\u0164\u174e\n\u0164\5\u0164")
        buf.write("\u1750\n\u0164\3\u0165\5\u0165\u1753\n\u0165\3\u0165\3")
        buf.write("\u0165\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\5\u0166")
        buf.write("\u175c\n\u0166\3\u0167\3\u0167\3\u0167\7\u0167\u1761\n")
        buf.write("\u0167\f\u0167\16\u0167\u1764\13\u0167\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\5\u0168\u1770\n\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\5\u0168\u1775\n\u0168\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\5\u0169\u177c\n\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\5\u0169\u1782\n\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\6\u0169\u179a")
        buf.write("\n\u0169\r\u0169\16\u0169\u179b\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\5\u0169\u17bb")
        buf.write("\n\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\5\u0169\u17cf")
        buf.write("\n\u0169\3\u0169\3\u0169\3\u0169\3\u0169\5\u0169\u17d5")
        buf.write("\n\u0169\3\u0169\3\u0169\5\u0169\u17d9\n\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\5\u0169\u17f4\n\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\5\u0169\u1800\n\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\5\u0169\u180d\n\u0169\3\u0169\3\u0169")
        buf.write("\5\u0169\u1811\n\u0169\3\u0169\3\u0169\5\u0169\u1815\n")
        buf.write("\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\5\u0169")
        buf.write("\u1831\n\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\5\u0169\u1869\n\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\5\u0169\u1873\n\u0169")
        buf.write("\3\u0169\3\u0169\5\u0169\u1877\n\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\5\u0169\u1883\n\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\5\u0169\u1888\n\u0169\3\u016a\3\u016a\3\u016a\3\u016a")
        buf.write("\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a")
        buf.write("\5\u016a\u1895\n\u016a\3\u016a\3\u016a\3\u016a\3\u016a")
        buf.write("\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a")
        buf.write("\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a")
        buf.write("\5\u016a\u18a9\n\u016a\3\u016b\3\u016b\5\u016b\u18ad\n")
        buf.write("\u016b\3\u016b\3\u016b\3\u016c\3\u016c\3\u016c\3\u016d")
        buf.write("\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d")
        buf.write("\7\u016d\u18bc\n\u016d\f\u016d\16\u016d\u18bf\13\u016d")
        buf.write("\5\u016d\u18c1\n\u016d\3\u016e\3\u016e\3\u016e\5\u016e")
        buf.write("\u18c6\n\u016e\3\u016e\5\u016e\u18c9\n\u016e\3\u016f\3")
        buf.write("\u016f\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\5\u0170")
        buf.write("\u18d2\n\u0170\3\u0170\3\u0170\5\u0170\u18d6\n\u0170\3")
        buf.write("\u0170\3\u0170\3\u0170\3\u0170\5\u0170\u18dc\n\u0170\3")
        buf.write("\u0170\3\u0170\3\u0170\3\u0170\5\u0170\u18e2\n\u0170\3")
        buf.write("\u0170\3\u0170\5\u0170\u18e6\n\u0170\3\u0170\3\u0170\3")
        buf.write("\u0171\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171")
        buf.write("\5\u0171\u18f1\n\u0171\3\u0171\3\u0171\3\u0171\3\u0171")
        buf.write("\5\u0171\u18f7\n\u0171\5\u0171\u18f9\n\u0171\3\u0171\3")
        buf.write("\u0171\3\u0172\3\u0172\3\u0172\5\u0172\u1900\n\u0172\3")
        buf.write("\u0172\3\u0172\3\u0172\3\u0172\3\u0172\5\u0172\u1907\n")
        buf.write("\u0172\3\u0172\3\u0172\5\u0172\u190b\n\u0172\3\u0173\3")
        buf.write("\u0173\3\u0173\7\u0173\u1910\n\u0173\f\u0173\16\u0173")
        buf.write("\u1913\13\u0173\3\u0174\3\u0174\5\u0174\u1917\n\u0174")
        buf.write("\3\u0175\3\u0175\5\u0175\u191b\n\u0175\3\u0176\3\u0176")
        buf.write("\3\u0176\5\u0176\u1920\n\u0176\3\u0177\3\u0177\5\u0177")
        buf.write("\u1924\n\u0177\3\u0177\3\u0177\5\u0177\u1928\n\u0177\3")
        buf.write("\u0178\3\u0178\3\u0178\5\u0178\u192d\n\u0178\3\u0178\3")
        buf.write("\u0178\3\u0178\5\u0178\u1932\n\u0178\5\u0178\u1934\n\u0178")
        buf.write("\3\u0178\3\u0178\5\u0178\u1938\n\u0178\3\u0179\3\u0179")
        buf.write("\3\u0179\3\u017a\3\u017a\3\u017a\3\u017b\3\u017b\3\u017b")
        buf.write("\3\u017c\3\u017c\5\u017c\u1945\n\u017c\3\u017c\3\u017c")
        buf.write("\5\u017c\u1949\n\u017c\3\u017c\5\u017c\u194c\n\u017c\3")
        buf.write("\u017c\3\u017c\5\u017c\u1950\n\u017c\3\u017c\3\u017c\5")
        buf.write("\u017c\u1954\n\u017c\3\u017c\3\u017c\5\u017c\u1958\n\u017c")
        buf.write("\3\u017c\3\u017c\3\u017c\5\u017c\u195d\n\u017c\3\u017c")
        buf.write("\3\u017c\5\u017c\u1961\n\u017c\3\u017c\3\u017c\5\u017c")
        buf.write("\u1965\n\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write("\3\u017c\3\u017c\5\u017c\u196e\n\u017c\5\u017c\u1970\n")
        buf.write("\u017c\3\u017d\3\u017d\3\u017d\7\u017d\u1975\n\u017d\f")
        buf.write("\u017d\16\u017d\u1978\13\u017d\3\u017e\3\u017e\3\u017e")
        buf.write("\5\u017e\u197d\n\u017e\3\u017f\3\u017f\3\u0180\3\u0180")
        buf.write("\3\u0181\3\u0181\5\u0181\u1985\n\u0181\3\u0182\3\u0182")
        buf.write("\3\u0183\3\u0183\3\u0183\3\u0183\3\u0184\3\u0184\3\u0184")
        buf.write("\3\u0184\3\u0185\3\u0185\3\u0185\3\u0185\3\u0186\3\u0186")
        buf.write("\3\u0186\7\u0186\u1998\n\u0186\f\u0186\16\u0186\u199b")
        buf.write("\13\u0186\3\u0187\3\u0187\5\u0187\u199f\n\u0187\3\u0188")
        buf.write("\3\u0188\3\u0188\7\u0188\u19a4\n\u0188\f\u0188\16\u0188")
        buf.write("\u19a7\13\u0188\3\u0189\3\u0189\3\u018a\3\u018a\3\u018a")
        buf.write("\3\u018a\3\u018a\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b")
        buf.write("\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b")
        buf.write("\3\u018b\5\u018b\u19bd\n\u018b\3\u018c\3\u018c\3\u018c")
        buf.write("\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018e\3\u018e")
        buf.write("\3\u018e\3\u018e\3\u018e\3\u018e\5\u018e\u19cd\n\u018e")
        buf.write("\3\u018f\3\u018f\3\u018f\3\u0190\3\u0190\3\u0190\6\u0190")
        buf.write("\u19d5\n\u0190\r\u0190\16\u0190\u19d6\3\u0191\3\u0191")
        buf.write("\5\u0191\u19db\n\u0191\3\u0191\3\u0191\3\u0191\6\u0191")
        buf.write("\u19e0\n\u0191\r\u0191\16\u0191\u19e1\3\u0191\5\u0191")
        buf.write("\u19e5\n\u0191\3\u0191\3\u0191\3\u0191\3\u0192\3\u0192")
        buf.write("\3\u0192\3\u0193\3\u0193\3\u0193\5\u0193\u19f0\n\u0193")
        buf.write("\3\u0194\3\u0194\3\u0195\3\u0195\3\u0195\3\u0196\3\u0196")
        buf.write("\5\u0196\u19f9\n\u0196\3\u0196\5\u0196\u19fc\n\u0196\3")
        buf.write("\u0196\3\u0196\3\u0197\3\u0197\3\u0197\5\u0197\u1a03\n")
        buf.write("\u0197\3\u0198\3\u0198\3\u0198\5\u0198\u1a08\n\u0198\3")
        buf.write("\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u019a\3\u019a")
        buf.write("\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019b\3\u019b")
        buf.write("\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019c\3\u019c")
        buf.write("\3\u019c\6\u019c\u1a20\n\u019c\r\u019c\16\u019c\u1a21")
        buf.write("\3\u019d\3\u019d\3\u019d\3\u019d\5\u019d\u1a28\n\u019d")
        buf.write("\3\u019e\3\u019e\3\u019e\3\u019e\5\u019e\u1a2e\n\u019e")
        buf.write("\3\u019e\3\u019e\5\u019e\u1a32\n\u019e\3\u019f\3\u019f")
        buf.write("\3\u019f\3\u019f\3\u019f\3\u019f\3\u01a0\3\u01a0\5\u01a0")
        buf.write("\u1a3c\n\u01a0\3\u01a1\3\u01a1\5\u01a1\u1a40\n\u01a1\3")
        buf.write("\u01a1\3\u01a1\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2")
        buf.write("\3\u01a2\3\u01a2\7\u01a2\u1a4b\n\u01a2\f\u01a2\16\u01a2")
        buf.write("\u1a4e\13\u01a2\3\u01a2\3\u01a2\3\u01a3\3\u01a3\3\u01a3")
        buf.write("\3\u01a3\3\u01a3\3\u01a3\3\u01a3\5\u01a3\u1a59\n\u01a3")
        buf.write("\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a5")
        buf.write("\3\u01a5\3\u01a5\3\u01a6\3\u01a6\3\u01a6\3\u01a7\3\u01a7")
        buf.write("\3\u01a7\3\u01a7\5\u01a7\u1a6b\n\u01a7\3\u01a7\3\u01a7")
        buf.write("\3\u01a7\3\u01a7\7\u01a7\u1a71\n\u01a7\f\u01a7\16\u01a7")
        buf.write("\u1a74\13\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7")
        buf.write("\7\u01a7\u1a7b\n\u01a7\f\u01a7\16\u01a7\u1a7e\13\u01a7")
        buf.write("\5\u01a7\u1a80\n\u01a7\3\u01a8\3\u01a8\3\u01a8\5\u01a8")
        buf.write("\u1a85\n\u01a8\3\u01a9\3\u01a9\5\u01a9\u1a89\n\u01a9\3")
        buf.write("\u01a9\3\u01a9\3\u01a9\3\u01aa\3\u01aa\5\u01aa\u1a90\n")
        buf.write("\u01aa\3\u01aa\3\u01aa\3\u01aa\5\u01aa\u1a95\n\u01aa\3")
        buf.write("\u01ab\3\u01ab\3\u01ac\3\u01ac\3\u01ac\5\u01ac\u1a9c\n")
        buf.write("\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\7\u01ac\u1aa2\n")
        buf.write("\u01ac\f\u01ac\16\u01ac\u1aa5\13\u01ac\5\u01ac\u1aa7\n")
        buf.write("\u01ac\3\u01ad\3\u01ad\3\u01ad\5\u01ad\u1aac\n\u01ad\3")
        buf.write("\u01ad\3\u01ad\3\u01ad\3\u01ad\7\u01ad\u1ab2\n\u01ad\f")
        buf.write("\u01ad\16\u01ad\u1ab5\13\u01ad\5\u01ad\u1ab7\n\u01ad\3")
        buf.write("\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01af\3\u01af\3\u01af")
        buf.write("\3\u01b0\3\u01b0\3\u01b0\3\u01b1\3\u01b1\5\u01b1\u1ac5")
        buf.write("\n\u01b1\3\u01b1\5\u01b1\u1ac8\n\u01b1\3\u01b1\3\u01b1")
        buf.write("\3\u01b1\3\u01b1\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2")
        buf.write("\3\u01b2\3\u01b2\5\u01b2\u1ad5\n\u01b2\3\u01b2\3\u01b2")
        buf.write("\5\u01b2\u1ad9\n\u01b2\5\u01b2\u1adb\n\u01b2\3\u01b3\3")
        buf.write("\u01b3\3\u01b3\5\u01b3\u1ae0\n\u01b3\3\u01b4\3\u01b4\3")
        buf.write("\u01b4\5\u01b4\u1ae5\n\u01b4\3\u01b5\3\u01b5\3\u01b5\3")
        buf.write("\u01b6\5\u01b6\u1aeb\n\u01b6\3\u01b6\3\u01b6\3\u01b7\3")
        buf.write("\u01b7\5\u01b7\u1af1\n\u01b7\3\u01b7\3\u01b7\7\u01b7\u1af5")
        buf.write("\n\u01b7\f\u01b7\16\u01b7\u1af8\13\u01b7\3\u01b7\3\u01b7")
        buf.write("\5\u01b7\u1afc\n\u01b7\3\u01b7\5\u01b7\u1aff\n\u01b7\3")
        buf.write("\u01b7\3\u01b7\7\u01b7\u1b03\n\u01b7\f\u01b7\16\u01b7")
        buf.write("\u1b06\13\u01b7\3\u01b7\3\u01b7\5\u01b7\u1b0a\n\u01b7")
        buf.write("\3\u01b7\5\u01b7\u1b0d\n\u01b7\3\u01b7\3\u01b7\7\u01b7")
        buf.write("\u1b11\n\u01b7\f\u01b7\16\u01b7\u1b14\13\u01b7\3\u01b7")
        buf.write("\5\u01b7\u1b17\n\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7")
        buf.write("\5\u01b7\u1b1d\n\u01b7\5\u01b7\u1b1f\n\u01b7\3\u01b7\5")
        buf.write("\u01b7\u1b22\n\u01b7\3\u01b7\3\u01b7\7\u01b7\u1b26\n\u01b7")
        buf.write("\f\u01b7\16\u01b7\u1b29\13\u01b7\3\u01b7\3\u01b7\3\u01b7")
        buf.write("\5\u01b7\u1b2e\n\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7")
        buf.write("\3\u01b7\3\u01b7\5\u01b7\u1b36\n\u01b7\5\u01b7\u1b38\n")
        buf.write("\u01b7\5\u01b7\u1b3a\n\u01b7\3\u01b8\3\u01b8\5\u01b8\u1b3e")
        buf.write("\n\u01b8\3\u01b9\3\u01b9\7\u01b9\u1b42\n\u01b9\f\u01b9")
        buf.write("\16\u01b9\u1b45\13\u01b9\3\u01b9\3\u01b9\5\u01b9\u1b49")
        buf.write("\n\u01b9\3\u01b9\3\u01b9\5\u01b9\u1b4d\n\u01b9\3\u01b9")
        buf.write("\3\u01b9\3\u01b9\5\u01b9\u1b52\n\u01b9\3\u01b9\3\u01b9")
        buf.write("\7\u01b9\u1b56\n\u01b9\f\u01b9\16\u01b9\u1b59\13\u01b9")
        buf.write("\3\u01b9\3\u01b9\7\u01b9\u1b5d\n\u01b9\f\u01b9\16\u01b9")
        buf.write("\u1b60\13\u01b9\5\u01b9\u1b62\n\u01b9\5\u01b9\u1b64\n")
        buf.write("\u01b9\3\u01ba\5\u01ba\u1b67\n\u01ba\3\u01ba\3\u01ba\3")
        buf.write("\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\5\u01ba")
        buf.write("\u1b71\n\u01ba\3\u01ba\3\u01ba\5\u01ba\u1b75\n\u01ba\3")
        buf.write("\u01ba\3\u01ba\3\u01ba\3\u01ba\5\u01ba\u1b7b\n\u01ba\3")
        buf.write("\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\5\u01ba\u1b82\n")
        buf.write("\u01ba\3\u01ba\3\u01ba\3\u01ba\5\u01ba\u1b87\n\u01ba\3")
        buf.write("\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba")
        buf.write("\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\5\u01ba\u1b95")
        buf.write("\n\u01ba\3\u01ba\3\u01ba\3\u01ba\5\u01ba\u1b9a\n\u01ba")
        buf.write("\3\u01bb\3\u01bb\3\u01bc\3\u01bc\3\u01bd\3\u01bd\5\u01bd")
        buf.write("\u1ba2\n\u01bd\3\u01bd\3\u01bd\3\u01bd\5\u01bd\u1ba7\n")
        buf.write("\u01bd\3\u01bd\3\u01bd\5\u01bd\u1bab\n\u01bd\3\u01bd\5")
        buf.write("\u01bd\u1bae\n\u01bd\3\u01be\3\u01be\3\u01be\5\u01be\u1bb3")
        buf.write("\n\u01be\3\u01be\3\u01be\5\u01be\u1bb7\n\u01be\3\u01be")
        buf.write("\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\5\u01be\u1bbf")
        buf.write("\n\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be")
        buf.write("\5\u01be\u1bc7\n\u01be\5\u01be\u1bc9\n\u01be\3\u01bf\3")
        buf.write("\u01bf\3\u01bf\3\u01bf\3\u01bf\5\u01bf\u1bd0\n\u01bf\3")
        buf.write("\u01c0\3\u01c0\3\u01c0\3\u01c0\7\u01c0\u1bd6\n\u01c0\f")
        buf.write("\u01c0\16\u01c0\u1bd9\13\u01c0\3\u01c0\3\u01c0\3\u01c1")
        buf.write("\3\u01c1\5\u01c1\u1bdf\n\u01c1\3\u01c1\5\u01c1\u1be2\n")
        buf.write("\u01c1\3\u01c2\3\u01c2\3\u01c2\3\u01c2\7\u01c2\u1be8\n")
        buf.write("\u01c2\f\u01c2\16\u01c2\u1beb\13\u01c2\3\u01c2\3\u01c2")
        buf.write("\3\u01c3\3\u01c3\3\u01c3\5\u01c3\u1bf2\n\u01c3\5\u01c3")
        buf.write("\u1bf4\n\u01c3\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4")
        buf.write("\u1bfa\n\u01c4\3\u01c5\3\u01c5\3\u01c6\3\u01c6\5\u01c6")
        buf.write("\u1c00\n\u01c6\3\u01c7\3\u01c7\5\u01c7\u1c04\n\u01c7\3")
        buf.write("\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\5\u01c7\u1c0b\n")
        buf.write("\u01c7\3\u01c8\3\u01c8\3\u01c9\3\u01c9\3\u01c9\3\u01ca")
        buf.write("\3\u01ca\3\u01ca\3\u01ca\5\u01ca\u1c16\n\u01ca\3\u01cb")
        buf.write("\3\u01cb\3\u01cc\3\u01cc\3\u01cc\3\u01cd\3\u01cd\5\u01cd")
        buf.write("\u1c1f\n\u01cd\3\u01cd\5\u01cd\u1c22\n\u01cd\3\u01cd\3")
        buf.write("\u01cd\3\u01cd\5\u01cd\u1c27\n\u01cd\5\u01cd\u1c29\n\u01cd")
        buf.write("\3\u01cd\5\u01cd\u1c2c\n\u01cd\3\u01cd\5\u01cd\u1c2f\n")
        buf.write("\u01cd\3\u01cd\3\u01cd\5\u01cd\u1c33\n\u01cd\3\u01cd\5")
        buf.write("\u01cd\u1c36\n\u01cd\3\u01cd\3\u01cd\5\u01cd\u1c3a\n\u01cd")
        buf.write("\3\u01cd\3\u01cd\3\u01cd\5\u01cd\u1c3f\n\u01cd\3\u01cd")
        buf.write("\5\u01cd\u1c42\n\u01cd\3\u01cd\3\u01cd\5\u01cd\u1c46\n")
        buf.write("\u01cd\3\u01cd\5\u01cd\u1c49\n\u01cd\3\u01cd\3\u01cd\5")
        buf.write("\u01cd\u1c4d\n\u01cd\3\u01cd\3\u01cd\3\u01cd\5\u01cd\u1c52")
        buf.write("\n\u01cd\3\u01cd\3\u01cd\5\u01cd\u1c56\n\u01cd\3\u01cd")
        buf.write("\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd")
        buf.write("\3\u01cd\3\u01cd\5\u01cd\u1c62\n\u01cd\3\u01cd\3\u01cd")
        buf.write("\5\u01cd\u1c66\n\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd")
        buf.write("\5\u01cd\u1c6c\n\u01cd\3\u01cd\5\u01cd\u1c6f\n\u01cd\3")
        buf.write("\u01cd\3\u01cd\3\u01cd\5\u01cd\u1c74\n\u01cd\3\u01cd\3")
        buf.write("\u01cd\5\u01cd\u1c78\n\u01cd\3\u01cd\3\u01cd\5\u01cd\u1c7c")
        buf.write("\n\u01cd\3\u01cd\3\u01cd\3\u01cd\5\u01cd\u1c81\n\u01cd")
        buf.write("\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd")
        buf.write("\5\u01cd\u1c8a\n\u01cd\3\u01cd\5\u01cd\u1c8d\n\u01cd\3")
        buf.write("\u01cd\3\u01cd\5\u01cd\u1c91\n\u01cd\3\u01cd\3\u01cd\5")
        buf.write("\u01cd\u1c95\n\u01cd\3\u01cd\5\u01cd\u1c98\n\u01cd\3\u01cd")
        buf.write("\3\u01cd\5\u01cd\u1c9c\n\u01cd\3\u01cd\3\u01cd\5\u01cd")
        buf.write("\u1ca0\n\u01cd\3\u01cd\3\u01cd\3\u01cd\5\u01cd\u1ca5\n")
        buf.write("\u01cd\3\u01cd\3\u01cd\3\u01cd\5\u01cd\u1caa\n\u01cd\3")
        buf.write("\u01cd\3\u01cd\3\u01cd\3\u01cd\5\u01cd\u1cb0\n\u01cd\3")
        buf.write("\u01ce\3\u01ce\3\u01ce\5\u01ce\u1cb5\n\u01ce\3\u01cf\3")
        buf.write("\u01cf\3\u01cf\5\u01cf\u1cba\n\u01cf\5\u01cf\u1cbc\n\u01cf")
        buf.write("\3\u01d0\3\u01d0\3\u01d0\5\u01d0\u1cc1\n\u01d0\3\u01d0")
        buf.write("\3\u01d0\3\u01d1\6\u01d1\u1cc6\n\u01d1\r\u01d1\16\u01d1")
        buf.write("\u1cc7\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2")
        buf.write("\5\u01d2\u1cd0\n\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2")
        buf.write("\5\u01d2\u1cd6\n\u01d2\5\u01d2\u1cd8\n\u01d2\3\u01d3\3")
        buf.write("\u01d3\5\u01d3\u1cdc\n\u01d3\3\u01d3\3\u01d3\5\u01d3\u1ce0")
        buf.write("\n\u01d3\3\u01d4\3\u01d4\5\u01d4\u1ce4\n\u01d4\3\u01d4")
        buf.write("\3\u01d4\5\u01d4\u1ce8\n\u01d4\3\u01d5\3\u01d5\3\u01d5")
        buf.write("\3\u01d5\3\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d7\3\u01d7")
        buf.write("\3\u01d7\3\u01d7\5\u01d7\u1cf6\n\u01d7\3\u01d8\3\u01d8")
        buf.write("\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1cfd\n\u01d8\3\u01d9")
        buf.write("\3\u01d9\5\u01d9\u1d01\n\u01d9\3\u01d9\7\u01d9\u1d04\n")
        buf.write("\u01d9\f\u01d9\16\u01d9\u1d07\13\u01d9\3\u01da\6\u01da")
        buf.write("\u1d0a\n\u01da\r\u01da\16\u01da\u1d0b\3\u01db\3\u01db")
        buf.write("\5\u01db\u1d10\n\u01db\3\u01db\3\u01db\3\u01db\3\u01db")
        buf.write("\5\u01db\u1d16\n\u01db\3\u01db\3\u01db\5\u01db\u1d1a\n")
        buf.write("\u01db\3\u01db\3\u01db\5\u01db\u1d1e\n\u01db\3\u01db\3")
        buf.write("\u01db\3\u01db\5\u01db\u1d23\n\u01db\3\u01db\3\u01db\3")
        buf.write("\u01db\5\u01db\u1d28\n\u01db\3\u01db\3\u01db\3\u01db\5")
        buf.write("\u01db\u1d2d\n\u01db\3\u01db\3\u01db\3\u01db\5\u01db\u1d32")
        buf.write("\n\u01db\3\u01db\3\u01db\3\u01db\3\u01db\5\u01db\u1d38")
        buf.write("\n\u01db\3\u01db\3\u01db\3\u01db\3\u01db\5\u01db\u1d3e")
        buf.write("\n\u01db\3\u01db\3\u01db\3\u01db\5\u01db\u1d43\n\u01db")
        buf.write("\3\u01db\3\u01db\3\u01db\5\u01db\u1d48\n\u01db\3\u01db")
        buf.write("\3\u01db\3\u01db\5\u01db\u1d4d\n\u01db\3\u01db\3\u01db")
        buf.write("\3\u01db\5\u01db\u1d52\n\u01db\3\u01db\3\u01db\3\u01db")
        buf.write("\5\u01db\u1d57\n\u01db\3\u01db\3\u01db\3\u01db\5\u01db")
        buf.write("\u1d5c\n\u01db\3\u01db\3\u01db\3\u01db\5\u01db\u1d61\n")
        buf.write("\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db")
        buf.write("\3\u01db\3\u01db\5\u01db\u1d6b\n\u01db\3\u01db\3\u01db")
        buf.write("\3\u01db\3\u01db\5\u01db\u1d71\n\u01db\3\u01db\3\u01db")
        buf.write("\3\u01db\3\u01db\5\u01db\u1d77\n\u01db\3\u01db\3\u01db")
        buf.write("\3\u01db\3\u01db\5\u01db\u1d7d\n\u01db\3\u01db\5\u01db")
        buf.write("\u1d80\n\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db")
        buf.write("\5\u01db\u1d87\n\u01db\3\u01db\3\u01db\3\u01db\5\u01db")
        buf.write("\u1d8c\n\u01db\3\u01db\5\u01db\u1d8f\n\u01db\3\u01dc\3")
        buf.write("\u01dc\5\u01dc\u1d93\n\u01dc\3\u01dd\5\u01dd\u1d96\n\u01dd")
        buf.write("\3\u01dd\3\u01dd\5\u01dd\u1d9a\n\u01dd\3\u01dd\3\u01dd")
        buf.write("\3\u01de\5\u01de\u1d9f\n\u01de\3\u01de\3\u01de\5\u01de")
        buf.write("\u1da3\n\u01de\3\u01de\3\u01de\3\u01df\5\u01df\u1da8\n")
        buf.write("\u01df\3\u01df\3\u01df\5\u01df\u1dac\n\u01df\3\u01df\3")
        buf.write("\u01df\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\5\u01e0")
        buf.write("\u1db5\n\u01e0\3\u01e0\5\u01e0\u1db8\n\u01e0\3\u01e0\5")
        buf.write("\u01e0\u1dbb\n\u01e0\3\u01e1\5\u01e1\u1dbe\n\u01e1\3\u01e1")
        buf.write("\3\u01e1\5\u01e1\u1dc2\n\u01e1\3\u01e1\3\u01e1\5\u01e1")
        buf.write("\u1dc6\n\u01e1\3\u01e1\3\u01e1\5\u01e1\u1dca\n\u01e1\3")
        buf.write("\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1")
        buf.write("\3\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1\5\u01e1")
        buf.write("\u1dd9\n\u01e1\3\u01e1\5\u01e1\u1ddc\n\u01e1\5\u01e1\u1dde")
        buf.write("\n\u01e1\3\u01e2\3\u01e2\3\u01e2\5\u01e2\u1de3\n\u01e2")
        buf.write("\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2")
        buf.write("\5\u01e2\u1dec\n\u01e2\3\u01e2\5\u01e2\u1def\n\u01e2\3")
        buf.write("\u01e2\3\u01e2\5\u01e2\u1df3\n\u01e2\3\u01e3\3\u01e3\3")
        buf.write("\u01e3\3\u01e3\3\u01e3\3\u01e4\3\u01e4\3\u01e4\3\u01e4")
        buf.write("\7\u01e4\u1dfe\n\u01e4\f\u01e4\16\u01e4\u1e01\13\u01e4")
        buf.write("\3\u01e4\3\u01e4\3\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5")
        buf.write("\3\u01e5\3\u01e5\5\u01e5\u1e0c\n\u01e5\3\u01e5\3\u01e5")
        buf.write("\3\u01e5\5\u01e5\u1e11\n\u01e5\3\u01e5\7\u01e5\u1e14\n")
        buf.write("\u01e5\f\u01e5\16\u01e5\u1e17\13\u01e5\3\u01e5\3\u01e5")
        buf.write("\3\u01e5\3\u01e5\7\u01e5\u1e1d\n\u01e5\f\u01e5\16\u01e5")
        buf.write("\u1e20\13\u01e5\3\u01e5\3\u01e5\5\u01e5\u1e24\n\u01e5")
        buf.write("\3\u01e6\3\u01e6\3\u01e6\3\u01e6\3\u01e6\7\u01e6\u1e2b")
        buf.write("\n\u01e6\f\u01e6\16\u01e6\u1e2e\13\u01e6\3\u01e6\3\u01e6")
        buf.write("\5\u01e6\u1e32\n\u01e6\3\u01e7\3\u01e7\5\u01e7\u1e36\n")
        buf.write("\u01e7\3\u01e7\3\u01e7\5\u01e7\u1e3a\n\u01e7\3\u01e7\3")
        buf.write("\u01e7\5\u01e7\u1e3e\n\u01e7\3\u01e7\3\u01e7\3\u01e7\5")
        buf.write("\u01e7\u1e43\n\u01e7\3\u01e7\3\u01e7\3\u01e7\5\u01e7\u1e48")
        buf.write("\n\u01e7\3\u01e7\3\u01e7\3\u01e7\3\u01e7\5\u01e7\u1e4e")
        buf.write("\n\u01e7\3\u01e7\3\u01e7\3\u01e7\5\u01e7\u1e53\n\u01e7")
        buf.write("\3\u01e7\5\u01e7\u1e56\n\u01e7\3\u01e8\3\u01e8\3\u01e8")
        buf.write("\7\u01e8\u1e5b\n\u01e8\f\u01e8\16\u01e8\u1e5e\13\u01e8")
        buf.write("\3\u01e9\3\u01e9\3\u01e9\3\u01e9\7\u01e9\u1e64\n\u01e9")
        buf.write("\f\u01e9\16\u01e9\u1e67\13\u01e9\3\u01e9\3\u01e9\3\u01ea")
        buf.write("\3\u01ea\5\u01ea\u1e6d\n\u01ea\3\u01eb\3\u01eb\3\u01eb")
        buf.write("\3\u01eb\3\u01ec\3\u01ec\3\u01ec\3\u01ed\3\u01ed\3\u01ed")
        buf.write("\3\u01ed\3\u01ee\5\u01ee\u1e7b\n\u01ee\3\u01ee\3\u01ee")
        buf.write("\3\u01ef\3\u01ef\3\u01ef\3\u01f0\3\u01f0\3\u01f0\3\u01f1")
        buf.write("\3\u01f1\5\u01f1\u1e87\n\u01f1\3\u01f2\3\u01f2\3\u01f2")
        buf.write("\3\u01f2\3\u01f2\3\u01f2\3\u01f3\3\u01f3\3\u01f3\7\u01f3")
        buf.write("\u1e92\n\u01f3\f\u01f3\16\u01f3\u1e95\13\u01f3\3\u01f4")
        buf.write("\3\u01f4\3\u01f4\7\u01f4\u1e9a\n\u01f4\f\u01f4\16\u01f4")
        buf.write("\u1e9d\13\u01f4\3\u01f5\3\u01f5\3\u01f5\3\u01f5\5\u01f5")
        buf.write("\u1ea3\n\u01f5\3\u01f6\3\u01f6\3\u01f6\3\u01f7\3\u01f7")
        buf.write("\6\u01f7\u1eaa\n\u01f7\r\u01f7\16\u01f7\u1eab\3\u01f8")
        buf.write("\3\u01f8\3\u01f8\3\u01f8\5\u01f8\u1eb2\n\u01f8\3\u01f8")
        buf.write("\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8\5\u01f8\u1eba")
        buf.write("\n\u01f8\3\u01f9\3\u01f9\6\u01f9\u1ebe\n\u01f9\r\u01f9")
        buf.write("\16\u01f9\u1ebf\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fb")
        buf.write("\3\u01fb\3\u01fb\7\u01fb\u1ec9\n\u01fb\f\u01fb\16\u01fb")
        buf.write("\u1ecc\13\u01fb\3\u01fc\3\u01fc\3\u01fc\7\u01fc\u1ed1")
        buf.write("\n\u01fc\f\u01fc\16\u01fc\u1ed4\13\u01fc\3\u01fd\3\u01fd")
        buf.write("\3\u01fd\7\u01fd\u1ed9\n\u01fd\f\u01fd\16\u01fd\u1edc")
        buf.write("\13\u01fd\3\u01fe\3\u01fe\3\u01fe\3\u01fe\3\u01fe\5\u01fe")
        buf.write("\u1ee3\n\u01fe\3\u01fe\3\u01fe\3\u01fe\3\u01fe\3\u01fe")
        buf.write("\3\u01fe\3\u01fe\3\u01fe\5\u01fe\u1eed\n\u01fe\3\u01fe")
        buf.write("\3\u01fe\3\u01fe\5\u01fe\u1ef2\n\u01fe\3\u01fe\3\u01fe")
        buf.write("\3\u01fe\5\u01fe\u1ef7\n\u01fe\5\u01fe\u1ef9\n\u01fe\3")
        buf.write("\u01ff\3\u01ff\3\u01ff\3\u01ff\5\u01ff\u1eff\n\u01ff\3")
        buf.write("\u01ff\3\u01ff\3\u01ff\3\u01ff\5\u01ff\u1f05\n\u01ff\3")
        buf.write("\u01ff\5\u01ff\u1f08\n\u01ff\3\u01ff\3\u01ff\3\u01ff\3")
        buf.write("\u01ff\3\u01ff\5\u01ff\u1f0f\n\u01ff\5\u01ff\u1f11\n\u01ff")
        buf.write("\5\u01ff\u1f13\n\u01ff\3\u01ff\5\u01ff\u1f16\n\u01ff\5")
        buf.write("\u01ff\u1f18\n\u01ff\3\u0200\3\u0200\3\u0200\3\u0200\3")
        buf.write("\u0201\3\u0201\3\u0201\3\u0201\3\u0202\3\u0202\3\u0202")
        buf.write("\3\u0203\3\u0203\3\u0203\3\u0203\5\u0203\u1f29\n\u0203")
        buf.write("\3\u0204\3\u0204\3\u0204\5\u0204\u1f2e\n\u0204\5\u0204")
        buf.write("\u1f30\n\u0204\3\u0205\3\u0205\3\u0205\3\u0206\3\u0206")
        buf.write("\5\u0206\u1f37\n\u0206\3\u0207\3\u0207\3\u0208\3\u0208")
        buf.write("\3\u0209\3\u0209\3\u0209\3\u0209\3\u020a\3\u020a\3\u020a")
        buf.write("\5\u020a\u1f44\n\u020a\5\u020a\u1f46\n\u020a\3\u020b\3")
        buf.write("\u020b\3\u020b\3\u020b\5\u020b\u1f4c\n\u020b\3\u020c\3")
        buf.write("\u020c\3\u020d\3\u020d\3\u020d\3\u020d\7\u020d\u1f54\n")
        buf.write("\u020d\f\u020d\16\u020d\u1f57\13\u020d\3\u020d\3\u020d")
        buf.write("\3\u020e\3\u020e\3\u020f\3\u020f\5\u020f\u1f5f\n\u020f")
        buf.write("\3\u0210\3\u0210\3\u0211\3\u0211\3\u0212\3\u0212\3\u0212")
        buf.write("\3\u0212\3\u0212\5\u0212\u1f6a\n\u0212\3\u0212\3\u0212")
        buf.write("\3\u0213\3\u0213\3\u0214\3\u0214\3\u0215\3\u0215\3\u0216")
        buf.write("\3\u0216\3\u0217\3\u0217\3\u0218\3\u0218\3\u0219\3\u0219")
        buf.write("\3\u021a\3\u021a\3\u021b\3\u021b\5\u021b\u1f80\n\u021b")
        buf.write("\3\u021c\3\u021c\5\u021c\u1f84\n\u021c\3\u021d\3\u021d")
        buf.write("\3\u021e\3\u021e\3\u021f\3\u021f\3\u0220\3\u0220\3\u0221")
        buf.write("\3\u0221\3\u0222\3\u0222\3\u0223\3\u0223\3\u0224\3\u0224")
        buf.write("\3\u0225\3\u0225\3\u0226\3\u0226\3\u0227\3\u0227\5\u0227")
        buf.write("\u1f9c\n\u0227\3\u0228\3\u0228\3\u0228\3\u0229\3\u0229")
        buf.write("\3\u0229\3\u0229\3\u0229\3\u0229\5\u0229\u1fa7\n\u0229")
        buf.write("\5\u0229\u1fa9\n\u0229\3\u022a\3\u022a\5\u022a\u1fad\n")
        buf.write("\u022a\3\u022b\3\u022b\3\u022b\7\u022b\u1fb2\n\u022b\f")
        buf.write("\u022b\16\u022b\u1fb5\13\u022b\3\u022c\3\u022c\3\u022c")
        buf.write("\7\u022c\u1fba\n\u022c\f\u022c\16\u022c\u1fbd\13\u022c")
        buf.write("\3\u022d\3\u022d\3\u022e\3\u022e\5\u022e\u1fc3\n\u022e")
        buf.write("\3\u022f\3\u022f\3\u0230\3\u0230\5\u0230\u1fc9\n\u0230")
        buf.write("\3\u0231\3\u0231\3\u0232\3\u0232\3\u0233\3\u0233\3\u0234")
        buf.write("\3\u0234\3\u0235\3\u0235\3\u0236\3\u0236\3\u0236\5\u0236")
        buf.write("\u1fd8\n\u0236\3\u0237\3\u0237\5\u0237\u1fdc\n\u0237\3")
        buf.write("\u0238\3\u0238\3\u0238\7\u0238\u1fe1\n\u0238\f\u0238\16")
        buf.write("\u0238\u1fe4\13\u0238\3\u0239\3\u0239\3\u0239\3\u0239")
        buf.write("\3\u023a\3\u023a\5\u023a\u1fec\n\u023a\3\u023b\3\u023b")
        buf.write("\3\u023b\5\u023b\u1ff1\n\u023b\5\u023b\u1ff3\n\u023b\3")
        buf.write("\u023b\3\u023b\3\u023b\3\u023b\5\u023b\u1ff9\n\u023b\3")
        buf.write("\u023c\3\u023c\3\u023c\3\u023d\3\u023d\3\u023e\3\u023e")
        buf.write("\3\u023f\3\u023f\3\u0240\3\u0240\3\u0240\3\u0240\3\u0240")
        buf.write("\5\u0240\u2009\n\u0240\3\u0241\3\u0241\3\u0241\3\u0241")
        buf.write("\3\u0241\3\u0241\5\u0241\u2011\n\u0241\3\u0241\5\u0241")
        buf.write("\u2014\n\u0241\3\u0242\3\u0242\3\u0242\3\u0242\3\u0242")
        buf.write("\5\u0242\u201b\n\u0242\3\u0243\3\u0243\3\u0243\3\u0243")
        buf.write("\7\u0243\u2021\n\u0243\f\u0243\16\u0243\u2024\13\u0243")
        buf.write("\3\u0243\3\u0243\3\u0244\3\u0244\3\u0244\5\u0244\u202b")
        buf.write("\n\u0244\3\u0245\3\u0245\3\u0245\5\u0245\u2030\n\u0245")
        buf.write("\3\u0246\3\u0246\3\u0246\5\u0246\u2035\n\u0246\3\u0247")
        buf.write("\5\u0247\u2038\n\u0247\3\u0247\3\u0247\5\u0247\u203c\n")
        buf.write("\u0247\3\u0247\7\u0247\u203f\n\u0247\f\u0247\16\u0247")
        buf.write("\u2042\13\u0247\3\u0248\3\u0248\3\u0249\3\u0249\3\u0249")
        buf.write("\7\u0249\u2049\n\u0249\f\u0249\16\u0249\u204c\13\u0249")
        buf.write("\3\u024a\3\u024a\3\u024b\3\u024b\3\u024c\3\u024c\3\u024d")
        buf.write("\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\5\u024d\u205a")
        buf.write("\n\u024d\3\u024e\3\u024e\5\u024e\u205e\n\u024e\3\u024f")
        buf.write("\3\u024f\3\u0250\3\u0250\3\u0250\3\u0250\3\u0250\3\u0250")
        buf.write("\3\u0251\3\u0251\5\u0251\u206a\n\u0251\3\u0252\3\u0252")
        buf.write("\5\u0252\u206e\n\u0252\3\u0253\3\u0253\5\u0253\u2072\n")
        buf.write("\u0253\3\u0254\3\u0254\5\u0254\u2076\n\u0254\3\u0255\3")
        buf.write("\u0255\3\u0255\3\u0256\3\u0256\3\u0257\3\u0257\3\u0258")
        buf.write("\3\u0258\3\u0258\3\u0258\3\u0258\3\u0258\5\u0258\u2085")
        buf.write("\n\u0258\3\u0259\3\u0259\3\u0259\3\u0259\3\u0259\3\u0259")
        buf.write("\3\u0259\3\u0259\3\u0259\3\u0259\5\u0259\u2091\n\u0259")
        buf.write("\3\u025a\3\u025a\3\u025a\3\u025a\3\u025a\3\u025a\3\u025a")
        buf.write("\3\u025a\5\u025a\u209b\n\u025a\3\u025a\3\u025a\3\u025a")
        buf.write("\3\u025a\3\u025a\5\u025a\u20a2\n\u025a\5\u025a\u20a4\n")
        buf.write("\u025a\3\u025b\3\u025b\3\u025c\3\u025c\3\u025d\3\u025d")
        buf.write("\3\u025d\3\u025d\3\u025d\3\u025d\3\u025d\3\u025d\3\u025d")
        buf.write("\3\u025d\3\u025d\5\u025d\u20b5\n\u025d\3\u025d\3\u025d")
        buf.write("\3\u025d\5\u025d\u20ba\n\u025d\5\u025d\u20bc\n\u025d\3")
        buf.write("\u025e\3\u025e\3\u025f\3\u025f\3\u025f\5\u025f\u20c3\n")
        buf.write("\u025f\3\u0260\3\u0260\3\u0260\5\u0260\u20c8\n\u0260\3")
        buf.write("\u0260\3\u0260\3\u0260\5\u0260\u20cd\n\u0260\5\u0260\u20cf")
        buf.write("\n\u0260\3\u0261\3\u0261\3\u0261\3\u0261\5\u0261\u20d5")
        buf.write("\n\u0261\3\u0262\3\u0262\3\u0263\3\u0263\3\u0263\3\u0263")
        buf.write("\3\u0263\5\u0263\u20de\n\u0263\3\u0264\3\u0264\3\u0264")
        buf.write("\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\5\u0264")
        buf.write("\u20e9\n\u0264\3\u0264\2\6\u02a8\u02aa\u02b2\u02b4\u0265")
        buf.write("\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write("\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082")
        buf.write("\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094")
        buf.write("\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6")
        buf.write("\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8")
        buf.write("\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca")
        buf.write("\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc")
        buf.write("\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee")
        buf.write("\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100")
        buf.write("\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112")
        buf.write("\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124")
        buf.write("\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136")
        buf.write("\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148")
        buf.write("\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a")
        buf.write("\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c")
        buf.write("\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e")
        buf.write("\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190")
        buf.write("\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2")
        buf.write("\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4")
        buf.write("\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6")
        buf.write("\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8")
        buf.write("\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea")
        buf.write("\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc")
        buf.write("\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e")
        buf.write("\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220")
        buf.write("\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232")
        buf.write("\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244")
        buf.write("\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256")
        buf.write("\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268")
        buf.write("\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a")
        buf.write("\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c")
        buf.write("\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e")
        buf.write("\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0")
        buf.write("\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2")
        buf.write("\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4")
        buf.write("\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6")
        buf.write("\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8")
        buf.write("\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a")
        buf.write("\u030c\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c")
        buf.write("\u031e\u0320\u0322\u0324\u0326\u0328\u032a\u032c\u032e")
        buf.write("\u0330\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340")
        buf.write("\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350\u0352")
        buf.write("\u0354\u0356\u0358\u035a\u035c\u035e\u0360\u0362\u0364")
        buf.write("\u0366\u0368\u036a\u036c\u036e\u0370\u0372\u0374\u0376")
        buf.write("\u0378\u037a\u037c\u037e\u0380\u0382\u0384\u0386\u0388")
        buf.write("\u038a\u038c\u038e\u0390\u0392\u0394\u0396\u0398\u039a")
        buf.write("\u039c\u039e\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac")
        buf.write("\u03ae\u03b0\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc\u03be")
        buf.write("\u03c0\u03c2\u03c4\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0")
        buf.write("\u03d2\u03d4\u03d6\u03d8\u03da\u03dc\u03de\u03e0\u03e2")
        buf.write("\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4")
        buf.write("\u03f6\u03f8\u03fa\u03fc\u03fe\u0400\u0402\u0404\u0406")
        buf.write("\u0408\u040a\u040c\u040e\u0410\u0412\u0414\u0416\u0418")
        buf.write("\u041a\u041c\u041e\u0420\u0422\u0424\u0426\u0428\u042a")
        buf.write("\u042c\u042e\u0430\u0432\u0434\u0436\u0438\u043a\u043c")
        buf.write("\u043e\u0440\u0442\u0444\u0446\u0448\u044a\u044c\u044e")
        buf.write("\u0450\u0452\u0454\u0456\u0458\u045a\u045c\u045e\u0460")
        buf.write("\u0462\u0464\u0466\u0468\u046a\u046c\u046e\u0470\u0472")
        buf.write("\u0474\u0476\u0478\u047a\u047c\u047e\u0480\u0482\u0484")
        buf.write("\u0486\u0488\u048a\u048c\u048e\u0490\u0492\u0494\u0496")
        buf.write("\u0498\u049a\u049c\u049e\u04a0\u04a2\u04a4\u04a6\u04a8")
        buf.write("\u04aa\u04ac\u04ae\u04b0\u04b2\u04b4\u04b6\u04b8\u04ba")
        buf.write("\u04bc\u04be\u04c0\u04c2\u04c4\u04c6\2\u0094\3\2\u02d4")
        buf.write("\u02d5\4\2\23\23\u0250\u0250\4\2\63\63\u01d9\u01d9\3\2")
        buf.write("\u0287\u0288\4\2\6\6\u0096\u0096\4\2\u01b4\u01b4\u01b6")
        buf.write("\u01b6\3\2\u02d6\u02d7\4\2\64\64\u011e\u011e\4\2\u00ea")
        buf.write("\u00ea\u01cc\u01cc\6\2\u0080\u0080\u00fb\u00fb\u01b7\u01b7")
        buf.write("\u022e\u022e\4\2\u0084\u0084\u00fc\u00fc\4\2\u01ba\u01ba")
        buf.write("\u025d\u025d\4\2\u01bb\u01bb\u025e\u025e\4\2\u0178\u0178")
        buf.write("\u0280\u0280\5\2\u0151\u0151\u0244\u0244\u025c\u025c\4")
        buf.write("\2\b\b\36\36\5\2\u0087\u0087\u00f4\u00f4\u0268\u0268\4")
        buf.write("\2\u00c7\u00c7\u01a1\u01a1\4\2\u023d\u023d\u0240\u0240")
        buf.write("\5\2\u00ea\u00ea\u0129\u0129\u01b1\u01b1\4\2\u00c1\u00c1")
        buf.write("\u0171\u0171\6\2\u00c1\u00c1\u010e\u010e\u0171\u0171\u01a5")
        buf.write("\u01a5\4\2\u02f0\u02f0\u02f3\u02f6\5\2\u0085\u0085\u00e1")
        buf.write("\u00e1\u0129\u0129\3\2\u0274\u0275\4\2TT\u0129\u0129\4")
        buf.write("\2rr\u028f\u028f\4\2\u0118\u0118\u01e6\u01e6\4\2\u0085")
        buf.write("\u0085\u0129\u0129\t\2\f\f\u0091\u0091\u00e1\u00e1\u0215")
        buf.write("\u0216\u0218\u0218\u021a\u021a\u022d\u022d\4\2\u017f\u017f")
        buf.write("\u0307\u0307\4\2\u02ed\u02ef\u0315\u0315\5\2\u01b2\u01b2")
        buf.write("\u01e6\u01e6\u02ad\u02ad\4\2\24\24\u0088\u0088\4\2\u0112")
        buf.write("\u0112\u01e0\u01e0\4\2dd\u00f1\u00f1\4\2\f\f\u0091\u0091")
        buf.write("\4\2\u00c8\u00c8\u00ea\u00ea\4\2\u00ee\u00ee\u010b\u010b")
        buf.write("\4\2\u0184\u0184\u028b\u028b\4\2\37\37\u0221\u0221\4\2")
        buf.write("\u0107\u0107\u01da\u01da\4\2\"\"\u013e\u013e\4\2\u0181")
        buf.write("\u0181\u02e9\u02ea\4\2\u0212\u0212\u0214\u0214\4\2\u01c3")
        buf.write("\u01c3\u021c\u021c\4\2\u0221\u0221\u022a\u022a\4\2}}\u0096")
        buf.write("\u0096\5\2\u0173\u0173\u021d\u021d\u028c\u028c\4\2\u0121")
        buf.write("\u0121\u0265\u0265\4\2\u0082\u0082\u02d1\u02d1\5\2\u00d0")
        buf.write("\u00d0\u01a8\u01a8\u0240\u0240\6\2\u00f4\u00f4\u01bd\u01bd")
        buf.write("\u01f3\u01f3\u0268\u0268\17\2\u0087\u0087\u0096\u0096")
        buf.write("\u00ac\u00ac\u00af\u00af\u00be\u00be\u00ee\u00ee\u01a9")
        buf.write("\u01a9\u01ad\u01ad\u01c5\u01c5\u0200\u0200\u0237\u0237")
        buf.write("\u0254\u0254\u026a\u026a\6\2\u01e5\u01e5\u023e\u023e\u026c")
        buf.write("\u026c\u027e\u027e\4\2CC\u0204\u0204\4\2cc\u0096\u0096")
        buf.write("\4\2\u0082\u0082\u0173\u0173\4\2\u00b6\u00b6\u01b1\u01b1")
        buf.write("\7\2::\u00b6\u00b6\u00ba\u00ba\u014f\u014f\u01b1\u01b1")
        buf.write("\5\2\u00b6\u00b6\u01b1\u01b1\u026d\u026d\4\2NN\u025b\u025b")
        buf.write("\6\2\f\f\"\"\u0082\u0082\u0181\u0181\4\2\u01e9\u01e9\u02c8")
        buf.write("\u02c8\5\2\u0123\u0123\u0164\u0164\u0225\u0225\4\2\u00cd")
        buf.write("\u00cd\u00fd\u00fd\4\2##\u01c0\u01c0\4\2\u00ed\u00ee\u0109")
        buf.write("\u0109\4\2\u00a8\u00a8\u0281\u0281\4\2\u0225\u0225\u0279")
        buf.write("\u0279\b\2\f\fbb\u0102\u0102\u0150\u0150\u020c\u020c\u0239")
        buf.write("\u0239\4\2VV\u01b0\u01b0\7\2\u008a\u008a\u00e3\u00e3\u01a7")
        buf.write("\u01a7\u0225\u0225\u026b\u026b\7\2\"\"\u00a5\u00a5\u00a7")
        buf.write("\u00a7\u00d2\u00d2\u0205\u0205\4\2\u026c\u026c\u02c8\u02c8")
        buf.write("\4\2\u008e\u008e\u009e\u009e\4\2\u0088\u0089\u00b4\u00b4")
        buf.write("\5\2\u00b9\u00b9\u0256\u0256\u0264\u0264\4\2\21\21\u0301")
        buf.write("\u0301\4\2\u018c\u018c\u0304\u0304\4\2\f\f\22\22\4\2\u02f0")
        buf.write("\u02f0\u02f2\u02f7\5\2\u0093\u0093\u015f\u015f\u02fa\u02fc")
        buf.write("\3\2\u02f8\u02f9\3\2\u02ff\u0300\4\2\u02f8\u02f9\u02fe")
        buf.write("\u02fe\4\2%&((\6\2\u02a8\u02a9\u02b6\u02b6\u02b8\u02b8")
        buf.write("\u02ba\u02ba\4\2\u02ae\u02ae\u02b0\u02b0\4\2\u02ab\u02ab")
        buf.write("\u02af\u02af\4\2\u00c1\u00c1\u010e\u010e\4\2\u00ea\u00ea")
        buf.write("\u02b9\u02b9\4\2\7\7\u0230\u0230\3\2tu\3\2\u024a\u024b")
        buf.write("\6\2ssvv\u0249\u0249\u024c\u024c\4\2\u0175\u0175\u02eb")
        buf.write("\u02eb\4\2\u02eb\u02eb\u02fd\u02fd\7\2x{\u00e4\u00e6\u0157")
        buf.write("\u0158\u01f0\u01f0\u0291\u0291\13\2||\u00e7\u00e7\u0153")
        buf.write("\u0153\u0159\u0159\u0160\u0160\u01af\u01af\u01f1\u01f1")
        buf.write("\u0282\u0282\u0292\u0292\5\2^^\u00b1\u00b1\u025f\u025f")
        buf.write("\4\2\u017b\u017b\u01e7\u01e7\f\2\67\67BBKKY[mm\u0152\u0152")
        buf.write("\u0165\u0165\u01ee\u01ee\u022f\u022f\u0242\u0242\4\2\u022c")
        buf.write("\u022c\u027f\u027f\5\2\u0082\u0082\u009a\u009a\u00c2\u00c2")
        buf.write("\5\2\u0082\u0082\u0090\u0090\u0150\u0150\5\2\u00ce\u00ce")
        buf.write("\u0194\u0194\u0203\u0203\5\2..\u00de\u00de\u01ea\u01ea")
        buf.write("\3\2\u0297\u0298\4\2\u0259\u0259\u026f\u026f\7\2!!\u00fb")
        buf.write("\u00fb\u014d\u014d\u0206\u0206\u024e\u024e\6\2\u0080\u0080")
        buf.write("\u00c2\u00c2\u00c5\u00c5\u017c\u017c\3\2+,\4\2\u0124\u0124")
        buf.write("\u014c\u014c\6\2\u00d5\u00d6\u0119\u0119\u0161\u0163\u019d")
        buf.write("\u019e\5\2\u0202\u0202\u0266\u0266\u0293\u0293\3\2\u0222")
        buf.write("\u0224\4\2??\u0241\u0241\b\2PPRR\u0082\u0082\u009a\u009a")
        buf.write("\u00c2\u00c2\u01bc\u01bc\5\2\u00c1\u00c1\u010e\u010e\u0177")
        buf.write("\u0177\4\2\u0090\u0090\u0150\u0150\4\2\u011a\u011a\u01b2")
        buf.write("\u01b2\4\2\u0145\u0145\u015a\u015a\4\2rr\u00ee\u00ee\5")
        buf.write("\2\u00f2\u00f2\u00fd\u00fd\u018f\u018f\4\2\u021f\u021f")
        buf.write("\u0245\u0245\4\2\u017e\u017e\u0183\u0183\4\2\u011e\u011e")
        buf.write("\u0179\u0179\4\2\u031d\u031d\u031f\u031f\5\2\u02ed\u02ef")
        buf.write("\u0316\u0316\u0318\u0319\4\2\u02ed\u02ef\u0316\u0316\4")
        buf.write("\2\u02ed\u02ef\u0318\u0319\3\2\u0316\u0317\4\2\u00b9\u00b9")
        buf.write("\u0256\u0256\4\2\u017a\u017a\u0314\u0314\3\2\u02f0\u02f1")
        buf.write("\7\2\u00d8\u00d8\u011e\u011e\u01f8\u01f8\u0294\u0294\u02a3")
        buf.write("\u02a3\5\2\u00af\u00af\u0200\u0200\u02cc\u02cc\"\2\25")
        buf.write("\25\37\37\60\61<<??MMOO\\\\}}\u0095\u0095\u00a1\u00a1")
        buf.write("\u00c6\u00c7\u00dd\u00dd\u00e0\u00e0\u00ec\u00ec\u00f7")
        buf.write("\u00f7\u010d\u010d\u0177\u0177\u01a1\u01a1\u01a3\u01a3")
        buf.write("\u01c9\u01c9\u01d6\u01d6\u01e2\u01e2\u01eb\u01eb\u0202")
        buf.write("\u0202\u0204\u0204\u0221\u0221\u022a\u022a\u0257\u0257")
        buf.write("\u0260\u0261\u028d\u028d\u02a7\u02a7\13\2\u00ac\u00ac")
        buf.write("\u00be\u00be\u0173\u0173\u01a9\u01a9\u01ad\u01ad\u01c5")
        buf.write("\u01c5\u01cd\u01cd\u0237\u0237\u02c7\u02c7\u00a3\2\4\5")
        buf.write("\7\13\16\16\22\22\27\27\31\35##\'\'*,..\64\64\678:;AF")
        buf.write("HIKLNNPTVWY[]]bbggmmqsvv||\u0083\u0084\u0086\u0086\u008c")
        buf.write("\u0090\u0098\u009a\u009e\u009e\u00a0\u00a0\u00a2\u00a2")
        buf.write("\u00a4\u00a8\u00aa\u00ab\u00ad\u00ae\u00b2\u00b3\u00b5")
        buf.write("\u00b7\u00ba\u00bb\u00bf\u00c2\u00cb\u00cc\u00ce\u00ce")
        buf.write("\u00d2\u00d2\u00d4\u00d7\u00da\u00da\u00de\u00de\u00e2")
        buf.write("\u00e3\u00e7\u00e8\u00eb\u00eb\u00ed\u00ed\u00f0\u00f0")
        buf.write("\u00f5\u00f6\u00fc\u00fc\u0101\u0102\u0104\u0105\u0108")
        buf.write("\u0108\u010a\u010a\u010e\u010e\u0110\u0110\u0113\u0114")
        buf.write("\u0119\u011a\u0120\u0120\u0122\u0123\u012a\u012a\u012c")
        buf.write("\u013c\u013e\u0141\u0143\u0146\u0149\u014a\u014f\u0153")
        buf.write("\u0156\u0156\u0159\u015a\u015c\u015c\u015e\u015e\u0160")
        buf.write("\u0168\u016b\u016b\u016d\u016d\u016f\u0172\u0178\u0178")
        buf.write("\u017b\u017b\u017d\u017d\u017f\u017f\u0182\u0182\u0184")
        buf.write("\u0185\u0188\u0188\u0190\u0196\u0198\u019f\u01a4\u01a5")
        buf.write("\u01a7\u01a7\u01aa\u01ac\u01af\u01b1\u01b4\u01b4\u01b8")
        buf.write("\u01b9\u01bb\u01bc\u01bf\u01c3\u01c6\u01c6\u01c8\u01c8")
        buf.write("\u01ca\u01ca\u01ce\u01d4\u01d8\u01d8\u01da\u01dc\u01de")
        buf.write("\u01de\u01e3\u01e5\u01e7\u01e8\u01ea\u01ea\u01ec\u01ec")
        buf.write("\u01ee\u01ee\u01f1\u01f2\u01f6\u01f7\u01f9\u01f9\u01fe")
        buf.write("\u01fe\u0203\u0203\u0205\u0205\u0207\u0207\u0209\u020c")
        buf.write("\u0212\u0214\u0216\u0216\u0219\u0219\u021c\u021c\u021e")
        buf.write("\u021e\u0220\u0220\u0222\u0225\u022b\u022b\u022e\u0233")
        buf.write("\u0238\u023a\u023d\u023e\u0241\u0244\u0246\u0247\u0249")
        buf.write("\u024c\u0252\u0253\u0258\u0259\u025b\u025e\u0264\u0264")
        buf.write("\u0267\u0267\u0269\u0269\u026b\u026d\u0273\u0273\u0275")
        buf.write("\u0275\u0279\u0279\u027e\u027e\u0280\u0283\u0288\u028a")
        buf.write("\u028c\u028c\u028e\u028f\u0292\u0292\u0295\u0298\u029a")
        buf.write("\u029a\u029f\u02a1\u02a4\u02a5\u02aa\u02aa\u02ac\u02ac")
        buf.write("\u02b3\u02b4\u02b7\u02b7\u02b9\u02b9\u02bb\u02bc\u02c0")
        buf.write("\u02c6\u02c9\u02cb\u02cd\u02d7\u02d9\u02dc\u02de\u02de")
        buf.write("\u02e1\u02e4\6\2\u0249\u0249\u024c\u024c\u02dd\u02dd\u02df")
        buf.write("\u02ea8\2\4\4\16\16\25\25\35\35\37\37\60\61<<??DDMMOO")
        buf.write("\\\\}}\u0095\u0095\u00a1\u00a1\u00c6\u00c7\u00cb\u00cb")
        buf.write("\u00d4\u00d4\u00dd\u00dd\u00e0\u00e0\u00e2\u00e2\u00f7")
        buf.write("\u00f7\u010d\u010d\u0177\u0177\u0185\u0185\u0188\u0188")
        buf.write("\u0190\u0190\u0193\u0193\u0197\u0197\u019f\u019f\u01a1")
        buf.write("\u01a1\u01a3\u01a3\u01c6\u01c6\u01c9\u01c9\u01d6\u01d6")
        buf.write("\u01d8\u01d8\u01e2\u01e2\u01eb\u01eb\u01f2\u01f2\u01f9")
        buf.write("\u01f9\u0202\u0202\u0204\u0204\u0209\u020a\u0221\u0221")
        buf.write("\u022a\u022a\u0257\u0257\u0260\u0261\u0269\u0269\u028a")
        buf.write("\u028a\u028d\u028d\u0295\u0295\u0297\u0298\u02a7\u02a7")
        buf.write("\u02d2\u02d5\u009d\2\5\5\7\13\17\17\22\22\27\34##\'\'")
        buf.write("*,..\64\64\678:;ACEFHIKLNNPTVWY[]]__bbggmmqsvv||\u0083")
        buf.write("\u0084\u0086\u0086\u008a\u008a\u008c\u0090\u0098\u009a")
        buf.write("\u009e\u009e\u00a0\u00a0\u00a2\u00a2\u00a4\u00a8\u00aa")
        buf.write("\u00ab\u00ad\u00ad\u00b2\u00b2\u00b5\u00b7\u00ba\u00bb")
        buf.write("\u00bf\u00c2\u00cc\u00cc\u00ce\u00ce\u00d2\u00d2\u00d5")
        buf.write("\u00d8\u00da\u00da\u00de\u00de\u00e3\u00e3\u00e7\u00e8")
        buf.write("\u00eb\u00eb\u00ed\u00ed\u00f0\u00f0\u00f5\u00f6\u00fc")
        buf.write("\u00fc\u0101\u0102\u0104\u0105\u0108\u0108\u010a\u010a")
        buf.write("\u010e\u010e\u0110\u0110\u0113\u0114\u0119\u011a\u011e")
        buf.write("\u011e\u0120\u0120\u0122\u0123\u012a\u012a\u012c\u013c")
        buf.write("\u013e\u0141\u0143\u0147\u0149\u014a\u014f\u0153\u0156")
        buf.write("\u0156\u0159\u015a\u015c\u015c\u015e\u015e\u0160\u0168")
        buf.write("\u016b\u016b\u016d\u016d\u016f\u0172\u0178\u0178\u017b")
        buf.write("\u017b\u017d\u017d\u017f\u0180\u0182\u0182\u0191\u0192")
        buf.write("\u0194\u0196\u0198\u019e\u01a4\u01a5\u01a7\u01a7\u01aa")
        buf.write("\u01ac\u01af\u01b1\u01b4\u01b4\u01b8\u01bc\u01bf\u01c3")
        buf.write("\u01c8\u01c8\u01ca\u01ca\u01ce\u01d4\u01da\u01dc\u01de")
        buf.write("\u01de\u01e3\u01e5\u01e7\u01e8\u01ea\u01ea\u01ec\u01ec")
        buf.write("\u01ee\u01ee\u01f1\u01f1\u01f6\u01f8\u01fe\u01fe\u0203")
        buf.write("\u0203\u0205\u0205\u0207\u0207\u020b\u020c\u0212\u0214")
        buf.write("\u0216\u0217\u0219\u0219\u021c\u021c\u021e\u021e\u0220")
        buf.write("\u0220\u0222\u0225\u022b\u022b\u022e\u0233\u0237\u023a")
        buf.write("\u023d\u023e\u0241\u0244\u0246\u0247\u0249\u024c\u0252")
        buf.write("\u0253\u0258\u025e\u0264\u0264\u0267\u0267\u026b\u026d")
        buf.write("\u0275\u0275\u0279\u0279\u027e\u027e\u0280\u0283\u0289")
        buf.write("\u0289\u028c\u028c\u028e\u028f\u0292\u0292\u029a\u029a")
        buf.write("\u029f\u02a1\u02a4\u02a6\u02aa\u02aa\u02ac\u02ac\u02b3")
        buf.write("\u02b4\u02b7\u02b7\u02b9\u02b9\u02bb\u02bc\u02c0\u02c6")
        buf.write("\u02c9\u02ca\u02ce\u02cf\u02d1\u02d1\u02d6\u02d7\u02d9")
        buf.write("\u02da\7\2ee\u00d0\u00d0\u00ec\u00ec\u01e6\u01e6\u01e9")
        buf.write("\u01e9\b\2\u00ae\u00ae\u00b3\u00b3\u0184\u0184\u0237\u0237")
        buf.write("\u0273\u0273\u0288\u0288\2\u2549\2\u04d6\3\2\2\2\4\u04da")
        buf.write("\3\2\2\2\6\u04fe\3\2\2\2\b\u0500\3\2\2\2\n\u051d\3\2\2")
        buf.write("\2\f\u052c\3\2\2\2\16\u0552\3\2\2\2\20\u055b\3\2\2\2\22")
        buf.write("\u0568\3\2\2\2\24\u056a\3\2\2\2\26\u056f\3\2\2\2\30\u0587")
        buf.write("\3\2\2\2\32\u0590\3\2\2\2\34\u0592\3\2\2\2\36\u05a1\3")
        buf.write("\2\2\2 \u0603\3\2\2\2\"\u0607\3\2\2\2$\u0617\3\2\2\2&")
        buf.write("\u06aa\3\2\2\2(\u06af\3\2\2\2*\u06b1\3\2\2\2,\u06b3\3")
        buf.write("\2\2\2.\u06c1\3\2\2\2\60\u06c9\3\2\2\2\62\u06d9\3\2\2")
        buf.write("\2\64\u06db\3\2\2\2\66\u06df\3\2\2\28\u06e4\3\2\2\2:\u06e6")
        buf.write("\3\2\2\2<\u070b\3\2\2\2>\u0713\3\2\2\2@\u071d\3\2\2\2")
        buf.write("B\u071f\3\2\2\2D\u0733\3\2\2\2F\u073c\3\2\2\2H\u073f\3")
        buf.write("\2\2\2J\u074c\3\2\2\2L\u0751\3\2\2\2N\u0755\3\2\2\2P\u075c")
        buf.write("\3\2\2\2R\u0771\3\2\2\2T\u0780\3\2\2\2V\u0783\3\2\2\2")
        buf.write("X\u07a2\3\2\2\2Z\u07ac\3\2\2\2\\\u07af\3\2\2\2^\u07b8")
        buf.write("\3\2\2\2`\u07ba\3\2\2\2b\u07c6\3\2\2\2d\u07df\3\2\2\2")
        buf.write("f\u07fa\3\2\2\2h\u0808\3\2\2\2j\u080b\3\2\2\2l\u0820\3")
        buf.write("\2\2\2n\u0823\3\2\2\2p\u085c\3\2\2\2r\u085e\3\2\2\2t\u0862")
        buf.write("\3\2\2\2v\u086b\3\2\2\2x\u087b\3\2\2\2z\u087d\3\2\2\2")
        buf.write("|\u0885\3\2\2\2~\u089f\3\2\2\2\u0080\u08a1\3\2\2\2\u0082")
        buf.write("\u08ad\3\2\2\2\u0084\u08bc\3\2\2\2\u0086\u08be\3\2\2\2")
        buf.write("\u0088\u08c1\3\2\2\2\u008a\u08d7\3\2\2\2\u008c\u08d9\3")
        buf.write("\2\2\2\u008e\u08df\3\2\2\2\u0090\u08e5\3\2\2\2\u0092\u08eb")
        buf.write("\3\2\2\2\u0094\u08f1\3\2\2\2\u0096\u08f7\3\2\2\2\u0098")
        buf.write("\u08fe\3\2\2\2\u009a\u0906\3\2\2\2\u009c\u0908\3\2\2\2")
        buf.write("\u009e\u090e\3\2\2\2\u00a0\u0914\3\2\2\2\u00a2\u091b\3")
        buf.write("\2\2\2\u00a4\u092d\3\2\2\2\u00a6\u092f\3\2\2\2\u00a8\u0933")
        buf.write("\3\2\2\2\u00aa\u0938\3\2\2\2\u00ac\u0948\3\2\2\2\u00ae")
        buf.write("\u094d\3\2\2\2\u00b0\u096e\3\2\2\2\u00b2\u098d\3\2\2\2")
        buf.write("\u00b4\u099e\3\2\2\2\u00b6\u09a0\3\2\2\2\u00b8\u09b4\3")
        buf.write("\2\2\2\u00ba\u09ba\3\2\2\2\u00bc\u09c0\3\2\2\2\u00be\u09c6")
        buf.write("\3\2\2\2\u00c0\u09cd\3\2\2\2\u00c2\u09d6\3\2\2\2\u00c4")
        buf.write("\u09e7\3\2\2\2\u00c6\u09e9\3\2\2\2\u00c8\u09f0\3\2\2\2")
        buf.write("\u00ca\u09fa\3\2\2\2\u00cc\u0a08\3\2\2\2\u00ce\u0a0e\3")
        buf.write("\2\2\2\u00d0\u0a16\3\2\2\2\u00d2\u0a1c\3\2\2\2\u00d4\u0a24")
        buf.write("\3\2\2\2\u00d6\u0a2a\3\2\2\2\u00d8\u0a34\3\2\2\2\u00da")
        buf.write("\u0a38\3\2\2\2\u00dc\u0a3e\3\2\2\2\u00de\u0a43\3\2\2\2")
        buf.write("\u00e0\u0a4e\3\2\2\2\u00e2\u0a79\3\2\2\2\u00e4\u0a7f\3")
        buf.write("\2\2\2\u00e6\u0a81\3\2\2\2\u00e8\u0a88\3\2\2\2\u00ea\u0aa6")
        buf.write("\3\2\2\2\u00ec\u0aa8\3\2\2\2\u00ee\u0ac7\3\2\2\2\u00f0")
        buf.write("\u0ace\3\2\2\2\u00f2\u0ad2\3\2\2\2\u00f4\u0ada\3\2\2\2")
        buf.write("\u00f6\u0ae4\3\2\2\2\u00f8\u0ae6\3\2\2\2\u00fa\u0af8\3")
        buf.write("\2\2\2\u00fc\u0b04\3\2\2\2\u00fe\u0b09\3\2\2\2\u0100\u0b0f")
        buf.write("\3\2\2\2\u0102\u0b30\3\2\2\2\u0104\u0b32\3\2\2\2\u0106")
        buf.write("\u0b3a\3\2\2\2\u0108\u0b43\3\2\2\2\u010a\u0b4b\3\2\2\2")
        buf.write("\u010c\u0b57\3\2\2\2\u010e\u0b6e\3\2\2\2\u0110\u0b7c\3")
        buf.write("\2\2\2\u0112\u0b80\3\2\2\2\u0114\u0ba0\3\2\2\2\u0116\u0baf")
        buf.write("\3\2\2\2\u0118\u0bbe\3\2\2\2\u011a\u0bc0\3\2\2\2\u011c")
        buf.write("\u0bdb\3\2\2\2\u011e\u0bdd\3\2\2\2\u0120\u0bdf\3\2\2\2")
        buf.write("\u0122\u0be2\3\2\2\2\u0124\u0be5\3\2\2\2\u0126\u0bec\3")
        buf.write("\2\2\2\u0128\u0bee\3\2\2\2\u012a\u0c0c\3\2\2\2\u012c\u0c18")
        buf.write("\3\2\2\2\u012e\u0c1b\3\2\2\2\u0130\u0c24\3\2\2\2\u0132")
        buf.write("\u0c28\3\2\2\2\u0134\u0c2d\3\2\2\2\u0136\u0c3a\3\2\2\2")
        buf.write("\u0138\u0c3f\3\2\2\2\u013a\u0c43\3\2\2\2\u013c\u0c53\3")
        buf.write("\2\2\2\u013e\u0c55\3\2\2\2\u0140\u0c67\3\2\2\2\u0142\u0c69")
        buf.write("\3\2\2\2\u0144\u0c72\3\2\2\2\u0146\u0c7e\3\2\2\2\u0148")
        buf.write("\u0c85\3\2\2\2\u014a\u0c90\3\2\2\2\u014c\u0c92\3\2\2\2")
        buf.write("\u014e\u0c96\3\2\2\2\u0150\u0c98\3\2\2\2\u0152\u0c9d\3")
        buf.write("\2\2\2\u0154\u0ca5\3\2\2\2\u0156\u0cae\3\2\2\2\u0158\u0cb1")
        buf.write("\3\2\2\2\u015a\u0cc0\3\2\2\2\u015c\u0cc3\3\2\2\2\u015e")
        buf.write("\u0cd6\3\2\2\2\u0160\u0cdb\3\2\2\2\u0162\u0ce0\3\2\2\2")
        buf.write("\u0164\u0ce4\3\2\2\2\u0166\u0cf2\3\2\2\2\u0168\u0cf5\3")
        buf.write("\2\2\2\u016a\u0cfb\3\2\2\2\u016c\u0d08\3\2\2\2\u016e\u0d10")
        buf.write("\3\2\2\2\u0170\u0d2a\3\2\2\2\u0172\u0d37\3\2\2\2\u0174")
        buf.write("\u0d3e\3\2\2\2\u0176\u0d40\3\2\2\2\u0178\u0d4c\3\2\2\2")
        buf.write("\u017a\u0d4e\3\2\2\2\u017c\u0d58\3\2\2\2\u017e\u0d70\3")
        buf.write("\2\2\2\u0180\u0d72\3\2\2\2\u0182\u0d79\3\2\2\2\u0184\u0d83")
        buf.write("\3\2\2\2\u0186\u0da6\3\2\2\2\u0188\u0db0\3\2\2\2\u018a")
        buf.write("\u0db2\3\2\2\2\u018c\u0db6\3\2\2\2\u018e\u0dbe\3\2\2\2")
        buf.write("\u0190\u0dc0\3\2\2\2\u0192\u0dc5\3\2\2\2\u0194\u0dc9\3")
        buf.write("\2\2\2\u0196\u0de5\3\2\2\2\u0198\u0de7\3\2\2\2\u019a\u0de9")
        buf.write("\3\2\2\2\u019c\u0df1\3\2\2\2\u019e\u0df3\3\2\2\2\u01a0")
        buf.write("\u0dfb\3\2\2\2\u01a2\u0e05\3\2\2\2\u01a4\u0e09\3\2\2\2")
        buf.write("\u01a6\u0e22\3\2\2\2\u01a8\u0e3d\3\2\2\2\u01aa\u0e3f\3")
        buf.write("\2\2\2\u01ac\u0e49\3\2\2\2\u01ae\u0e68\3\2\2\2\u01b0\u0e80")
        buf.write("\3\2\2\2\u01b2\u0e82\3\2\2\2\u01b4\u0e90\3\2\2\2\u01b6")
        buf.write("\u0e92\3\2\2\2\u01b8\u0eb5\3\2\2\2\u01ba\u0eb7\3\2\2\2")
        buf.write("\u01bc\u0ee1\3\2\2\2\u01be\u0ef1\3\2\2\2\u01c0\u0ef3\3")
        buf.write("\2\2\2\u01c2\u0efb\3\2\2\2\u01c4\u0f04\3\2\2\2\u01c6\u0f0b")
        buf.write("\3\2\2\2\u01c8\u0f6e\3\2\2\2\u01ca\u0f72\3\2\2\2\u01cc")
        buf.write("\u0f74\3\2\2\2\u01ce\u0f78\3\2\2\2\u01d0\u0f86\3\2\2\2")
        buf.write("\u01d2\u0f88\3\2\2\2\u01d4\u0f95\3\2\2\2\u01d6\u0fd5\3")
        buf.write("\2\2\2\u01d8\u0fd7\3\2\2\2\u01da\u0fdf\3\2\2\2\u01dc\u0fe7")
        buf.write("\3\2\2\2\u01de\u0fef\3\2\2\2\u01e0\u0ff1\3\2\2\2\u01e2")
        buf.write("\u100e\3\2\2\2\u01e4\u1017\3\2\2\2\u01e6\u1036\3\2\2\2")
        buf.write("\u01e8\u1038\3\2\2\2\u01ea\u1040\3\2\2\2\u01ec\u1042\3")
        buf.write("\2\2\2\u01ee\u1050\3\2\2\2\u01f0\u1052\3\2\2\2\u01f2\u1058")
        buf.write("\3\2\2\2\u01f4\u1060\3\2\2\2\u01f6\u1085\3\2\2\2\u01f8")
        buf.write("\u1087\3\2\2\2\u01fa\u1096\3\2\2\2\u01fc\u1098\3\2\2\2")
        buf.write("\u01fe\u10d6\3\2\2\2\u0200\u10d8\3\2\2\2\u0202\u10db\3")
        buf.write("\2\2\2\u0204\u10f4\3\2\2\2\u0206\u10fd\3\2\2\2\u0208\u10ff")
        buf.write("\3\2\2\2\u020a\u1104\3\2\2\2\u020c\u1132\3\2\2\2\u020e")
        buf.write("\u1134\3\2\2\2\u0210\u113c\3\2\2\2\u0212\u116d\3\2\2\2")
        buf.write("\u0214\u117a\3\2\2\2\u0216\u117c\3\2\2\2\u0218\u117f\3")
        buf.write("\2\2\2\u021a\u118a\3\2\2\2\u021c\u118f\3\2\2\2\u021e\u1192")
        buf.write("\3\2\2\2\u0220\u11a1\3\2\2\2\u0222\u11d3\3\2\2\2\u0224")
        buf.write("\u11d5\3\2\2\2\u0226\u11d7\3\2\2\2\u0228\u1208\3\2\2\2")
        buf.write("\u022a\u121a\3\2\2\2\u022c\u121c\3\2\2\2\u022e\u122c\3")
        buf.write("\2\2\2\u0230\u1238\3\2\2\2\u0232\u1251\3\2\2\2\u0234\u1253")
        buf.write("\3\2\2\2\u0236\u125b\3\2\2\2\u0238\u128c\3\2\2\2\u023a")
        buf.write("\u129b\3\2\2\2\u023c\u12a0\3\2\2\2\u023e\u12a2\3\2\2\2")
        buf.write("\u0240\u12ba\3\2\2\2\u0242\u12bc\3\2\2\2\u0244\u12f7\3")
        buf.write("\2\2\2\u0246\u1302\3\2\2\2\u0248\u1304\3\2\2\2\u024a\u1307")
        buf.write("\3\2\2\2\u024c\u1314\3\2\2\2\u024e\u1330\3\2\2\2\u0250")
        buf.write("\u1338\3\2\2\2\u0252\u133a\3\2\2\2\u0254\u1345\3\2\2\2")
        buf.write("\u0256\u1347\3\2\2\2\u0258\u134f\3\2\2\2\u025a\u1351\3")
        buf.write("\2\2\2\u025c\u1435\3\2\2\2\u025e\u143c\3\2\2\2\u0260\u143e")
        buf.write("\3\2\2\2\u0262\u1440\3\2\2\2\u0264\u144a\3\2\2\2\u0266")
        buf.write("\u1471\3\2\2\2\u0268\u1475\3\2\2\2\u026a\u1477\3\2\2\2")
        buf.write("\u026c\u147f\3\2\2\2\u026e\u1483\3\2\2\2\u0270\u148b\3")
        buf.write("\2\2\2\u0272\u1494\3\2\2\2\u0274\u1496\3\2\2\2\u0276\u14ad")
        buf.write("\3\2\2\2\u0278\u14af\3\2\2\2\u027a\u14b1\3\2\2\2\u027c")
        buf.write("\u14c1\3\2\2\2\u027e\u14cd\3\2\2\2\u0280\u14cf\3\2\2\2")
        buf.write("\u0282\u14d7\3\2\2\2\u0284\u14df\3\2\2\2\u0286\u14e8\3")
        buf.write("\2\2\2\u0288\u14ea\3\2\2\2\u028a\u14fc\3\2\2\2\u028c\u150a")
        buf.write("\3\2\2\2\u028e\u150f\3\2\2\2\u0290\u1515\3\2\2\2\u0292")
        buf.write("\u1517\3\2\2\2\u0294\u1527\3\2\2\2\u0296\u152f\3\2\2\2")
        buf.write("\u0298\u1539\3\2\2\2\u029a\u1546\3\2\2\2\u029c\u1548\3")
        buf.write("\2\2\2\u029e\u154e\3\2\2\2\u02a0\u156e\3\2\2\2\u02a2\u1570")
        buf.write("\3\2\2\2\u02a4\u1573\3\2\2\2\u02a6\u1576\3\2\2\2\u02a8")
        buf.write("\u1583\3\2\2\2\u02aa\u1593\3\2\2\2\u02ac\u15aa\3\2\2\2")
        buf.write("\u02ae\u15ac\3\2\2\2\u02b0\u15d1\3\2\2\2\u02b2\u15d3\3")
        buf.write("\2\2\2\u02b4\u1660\3\2\2\2\u02b6\u166d\3\2\2\2\u02b8\u1676")
        buf.write("\3\2\2\2\u02ba\u16fb\3\2\2\2\u02bc\u16fd\3\2\2\2\u02be")
        buf.write("\u172c\3\2\2\2\u02c0\u172e\3\2\2\2\u02c2\u1733\3\2\2\2")
        buf.write("\u02c4\u173c\3\2\2\2\u02c6\u174f\3\2\2\2\u02c8\u1752\3")
        buf.write("\2\2\2\u02ca\u175b\3\2\2\2\u02cc\u175d\3\2\2\2\u02ce\u1774")
        buf.write("\3\2\2\2\u02d0\u1887\3\2\2\2\u02d2\u18a8\3\2\2\2\u02d4")
        buf.write("\u18aa\3\2\2\2\u02d6\u18b0\3\2\2\2\u02d8\u18b3\3\2\2\2")
        buf.write("\u02da\u18c2\3\2\2\2\u02dc\u18ca\3\2\2\2\u02de\u18cc\3")
        buf.write("\2\2\2\u02e0\u18e9\3\2\2\2\u02e2\u190a\3\2\2\2\u02e4\u190c")
        buf.write("\3\2\2\2\u02e6\u1914\3\2\2\2\u02e8\u191a\3\2\2\2\u02ea")
        buf.write("\u191f\3\2\2\2\u02ec\u1921\3\2\2\2\u02ee\u1937\3\2\2\2")
        buf.write("\u02f0\u1939\3\2\2\2\u02f2\u193c\3\2\2\2\u02f4\u193f\3")
        buf.write("\2\2\2\u02f6\u196f\3\2\2\2\u02f8\u1971\3\2\2\2\u02fa\u197c")
        buf.write("\3\2\2\2\u02fc\u197e\3\2\2\2\u02fe\u1980\3\2\2\2\u0300")
        buf.write("\u1984\3\2\2\2\u0302\u1986\3\2\2\2\u0304\u1988\3\2\2\2")
        buf.write("\u0306\u198c\3\2\2\2\u0308\u1990\3\2\2\2\u030a\u1994\3")
        buf.write("\2\2\2\u030c\u199c\3\2\2\2\u030e\u19a0\3\2\2\2\u0310\u19a8")
        buf.write("\3\2\2\2\u0312\u19aa\3\2\2\2\u0314\u19bc\3\2\2\2\u0316")
        buf.write("\u19be\3\2\2\2\u0318\u19c1\3\2\2\2\u031a\u19c6\3\2\2\2")
        buf.write("\u031c\u19ce\3\2\2\2\u031e\u19d4\3\2\2\2\u0320\u19d8\3")
        buf.write("\2\2\2\u0322\u19e9\3\2\2\2\u0324\u19ec\3\2\2\2\u0326\u19f1")
        buf.write("\3\2\2\2\u0328\u19f3\3\2\2\2\u032a\u19f6\3\2\2\2\u032c")
        buf.write("\u19ff\3\2\2\2\u032e\u1a07\3\2\2\2\u0330\u1a09\3\2\2\2")
        buf.write("\u0332\u1a0e\3\2\2\2\u0334\u1a15\3\2\2\2\u0336\u1a1f\3")
        buf.write("\2\2\2\u0338\u1a27\3\2\2\2\u033a\u1a29\3\2\2\2\u033c\u1a33")
        buf.write("\3\2\2\2\u033e\u1a3b\3\2\2\2\u0340\u1a3d\3\2\2\2\u0342")
        buf.write("\u1a43\3\2\2\2\u0344\u1a58\3\2\2\2\u0346\u1a5a\3\2\2\2")
        buf.write("\u0348\u1a60\3\2\2\2\u034a\u1a63\3\2\2\2\u034c\u1a66\3")
        buf.write("\2\2\2\u034e\u1a84\3\2\2\2\u0350\u1a88\3\2\2\2\u0352\u1a8f")
        buf.write("\3\2\2\2\u0354\u1a96\3\2\2\2\u0356\u1a98\3\2\2\2\u0358")
        buf.write("\u1aa8\3\2\2\2\u035a\u1ab8\3\2\2\2\u035c\u1abc\3\2\2\2")
        buf.write("\u035e\u1abf\3\2\2\2\u0360\u1ac2\3\2\2\2\u0362\u1ada\3")
        buf.write("\2\2\2\u0364\u1adc\3\2\2\2\u0366\u1ae4\3\2\2\2\u0368\u1ae6")
        buf.write("\3\2\2\2\u036a\u1aea\3\2\2\2\u036c\u1b39\3\2\2\2\u036e")
        buf.write("\u1b3b\3\2\2\2\u0370\u1b3f\3\2\2\2\u0372\u1b99\3\2\2\2")
        buf.write("\u0374\u1b9b\3\2\2\2\u0376\u1b9d\3\2\2\2\u0378\u1bad\3")
        buf.write("\2\2\2\u037a\u1baf\3\2\2\2\u037c\u1bcf\3\2\2\2\u037e\u1bd1")
        buf.write("\3\2\2\2\u0380\u1bdc\3\2\2\2\u0382\u1be3\3\2\2\2\u0384")
        buf.write("\u1bf3\3\2\2\2\u0386\u1bf9\3\2\2\2\u0388\u1bfb\3\2\2\2")
        buf.write("\u038a\u1bff\3\2\2\2\u038c\u1c0a\3\2\2\2\u038e\u1c0c\3")
        buf.write("\2\2\2\u0390\u1c0e\3\2\2\2\u0392\u1c15\3\2\2\2\u0394\u1c17")
        buf.write("\3\2\2\2\u0396\u1c19\3\2\2\2\u0398\u1caf\3\2\2\2\u039a")
        buf.write("\u1cb4\3\2\2\2\u039c\u1cbb\3\2\2\2\u039e\u1cbd\3\2\2\2")
        buf.write("\u03a0\u1cc5\3\2\2\2\u03a2\u1cd7\3\2\2\2\u03a4\u1cdf\3")
        buf.write("\2\2\2\u03a6\u1ce7\3\2\2\2\u03a8\u1ce9\3\2\2\2\u03aa\u1ced")
        buf.write("\3\2\2\2\u03ac\u1cf5\3\2\2\2\u03ae\u1cfc\3\2\2\2\u03b0")
        buf.write("\u1cfe\3\2\2\2\u03b2\u1d09\3\2\2\2\u03b4\u1d8e\3\2\2\2")
        buf.write("\u03b6\u1d92\3\2\2\2\u03b8\u1d95\3\2\2\2\u03ba\u1d9e\3")
        buf.write("\2\2\2\u03bc\u1da7\3\2\2\2\u03be\u1daf\3\2\2\2\u03c0\u1ddd")
        buf.write("\3\2\2\2\u03c2\u1ddf\3\2\2\2\u03c4\u1df4\3\2\2\2\u03c6")
        buf.write("\u1df9\3\2\2\2\u03c8\u1e04\3\2\2\2\u03ca\u1e31\3\2\2\2")
        buf.write("\u03cc\u1e55\3\2\2\2\u03ce\u1e57\3\2\2\2\u03d0\u1e5f\3")
        buf.write("\2\2\2\u03d2\u1e6c\3\2\2\2\u03d4\u1e6e\3\2\2\2\u03d6\u1e72")
        buf.write("\3\2\2\2\u03d8\u1e75\3\2\2\2\u03da\u1e7a\3\2\2\2\u03dc")
        buf.write("\u1e7e\3\2\2\2\u03de\u1e81\3\2\2\2\u03e0\u1e84\3\2\2\2")
        buf.write("\u03e2\u1e88\3\2\2\2\u03e4\u1e8e\3\2\2\2\u03e6\u1e96\3")
        buf.write("\2\2\2\u03e8\u1e9e\3\2\2\2\u03ea\u1ea4\3\2\2\2\u03ec\u1ea7")
        buf.write("\3\2\2\2\u03ee\u1eb9\3\2\2\2\u03f0\u1ebb\3\2\2\2\u03f2")
        buf.write("\u1ec1\3\2\2\2\u03f4\u1ec5\3\2\2\2\u03f6\u1ecd\3\2\2\2")
        buf.write("\u03f8\u1ed5\3\2\2\2\u03fa\u1edd\3\2\2\2\u03fc\u1efa\3")
        buf.write("\2\2\2\u03fe\u1f19\3\2\2\2\u0400\u1f1d\3\2\2\2\u0402\u1f21")
        buf.write("\3\2\2\2\u0404\u1f24\3\2\2\2\u0406\u1f2f\3\2\2\2\u0408")
        buf.write("\u1f31\3\2\2\2\u040a\u1f36\3\2\2\2\u040c\u1f38\3\2\2\2")
        buf.write("\u040e\u1f3a\3\2\2\2\u0410\u1f3c\3\2\2\2\u0412\u1f45\3")
        buf.write("\2\2\2\u0414\u1f4b\3\2\2\2\u0416\u1f4d\3\2\2\2\u0418\u1f4f")
        buf.write("\3\2\2\2\u041a\u1f5a\3\2\2\2\u041c\u1f5e\3\2\2\2\u041e")
        buf.write("\u1f60\3\2\2\2\u0420\u1f62\3\2\2\2\u0422\u1f64\3\2\2\2")
        buf.write("\u0424\u1f6d\3\2\2\2\u0426\u1f6f\3\2\2\2\u0428\u1f71\3")
        buf.write("\2\2\2\u042a\u1f73\3\2\2\2\u042c\u1f75\3\2\2\2\u042e\u1f77")
        buf.write("\3\2\2\2\u0430\u1f79\3\2\2\2\u0432\u1f7b\3\2\2\2\u0434")
        buf.write("\u1f7f\3\2\2\2\u0436\u1f83\3\2\2\2\u0438\u1f85\3\2\2\2")
        buf.write("\u043a\u1f87\3\2\2\2\u043c\u1f89\3\2\2\2\u043e\u1f8b\3")
        buf.write("\2\2\2\u0440\u1f8d\3\2\2\2\u0442\u1f8f\3\2\2\2\u0444\u1f91")
        buf.write("\3\2\2\2\u0446\u1f93\3\2\2\2\u0448\u1f95\3\2\2\2\u044a")
        buf.write("\u1f97\3\2\2\2\u044c\u1f9b\3\2\2\2\u044e\u1f9d\3\2\2\2")
        buf.write("\u0450\u1fa0\3\2\2\2\u0452\u1fac\3\2\2\2\u0454\u1fae\3")
        buf.write("\2\2\2\u0456\u1fb6\3\2\2\2\u0458\u1fbe\3\2\2\2\u045a\u1fc2")
        buf.write("\3\2\2\2\u045c\u1fc4\3\2\2\2\u045e\u1fc8\3\2\2\2\u0460")
        buf.write("\u1fca\3\2\2\2\u0462\u1fcc\3\2\2\2\u0464\u1fce\3\2\2\2")
        buf.write("\u0466\u1fd0\3\2\2\2\u0468\u1fd2\3\2\2\2\u046a\u1fd7\3")
        buf.write("\2\2\2\u046c\u1fdb\3\2\2\2\u046e\u1fdd\3\2\2\2\u0470\u1fe5")
        buf.write("\3\2\2\2\u0472\u1fe9\3\2\2\2\u0474\u1ff8\3\2\2\2\u0476")
        buf.write("\u1ffa\3\2\2\2\u0478\u1ffd\3\2\2\2\u047a\u1fff\3\2\2\2")
        buf.write("\u047c\u2001\3\2\2\2\u047e\u2008\3\2\2\2\u0480\u2013\3")
        buf.write("\2\2\2\u0482\u201a\3\2\2\2\u0484\u201c\3\2\2\2\u0486\u202a")
        buf.write("\3\2\2\2\u0488\u202f\3\2\2\2\u048a\u2034\3\2\2\2\u048c")
        buf.write("\u203b\3\2\2\2\u048e\u2043\3\2\2\2\u0490\u2045\3\2\2\2")
        buf.write("\u0492\u204d\3\2\2\2\u0494\u204f\3\2\2\2\u0496\u2051\3")
        buf.write("\2\2\2\u0498\u2059\3\2\2\2\u049a\u205d\3\2\2\2\u049c\u205f")
        buf.write("\3\2\2\2\u049e\u2061\3\2\2\2\u04a0\u2069\3\2\2\2\u04a2")
        buf.write("\u206d\3\2\2\2\u04a4\u2071\3\2\2\2\u04a6\u2075\3\2\2\2")
        buf.write("\u04a8\u2077\3\2\2\2\u04aa\u207a\3\2\2\2\u04ac\u207c\3")
        buf.write("\2\2\2\u04ae\u2084\3\2\2\2\u04b0\u2090\3\2\2\2\u04b2\u20a3")
        buf.write("\3\2\2\2\u04b4\u20a5\3\2\2\2\u04b6\u20a7\3\2\2\2\u04b8")
        buf.write("\u20bb\3\2\2\2\u04ba\u20bd\3\2\2\2\u04bc\u20c2\3\2\2\2")
        buf.write("\u04be\u20ce\3\2\2\2\u04c0\u20d4\3\2\2\2\u04c2\u20d6\3")
        buf.write("\2\2\2\u04c4\u20dd\3\2\2\2\u04c6\u20e8\3\2\2\2\u04c8\u04d7")
        buf.write("\7\2\2\3\u04c9\u04ce\5\4\3\2\u04ca\u04cb\7\u0308\2\2\u04cb")
        buf.write("\u04cd\5\4\3\2\u04cc\u04ca\3\2\2\2\u04cd\u04d0\3\2\2\2")
        buf.write("\u04ce\u04cc\3\2\2\2\u04ce\u04cf\3\2\2\2\u04cf\u04d2\3")
        buf.write("\2\2\2\u04d0\u04ce\3\2\2\2\u04d1\u04d3\7\u0308\2\2\u04d2")
        buf.write("\u04d1\3\2\2\2\u04d2\u04d3\3\2\2\2\u04d3\u04d4\3\2\2\2")
        buf.write("\u04d4\u04d5\7\2\2\3\u04d5\u04d7\3\2\2\2\u04d6\u04c8\3")
        buf.write("\2\2\2\u04d6\u04c9\3\2\2\2\u04d7\3\3\2\2\2\u04d8\u04db")
        buf.write("\5\6\4\2\u04d9\u04db\5\u01aa\u00d6\2\u04da\u04d8\3\2\2")
        buf.write("\2\u04da\u04d9\3\2\2\2\u04db\5\3\2\2\2\u04dc\u04ff\5\b")
        buf.write("\5\2\u04dd\u04ff\5P)\2\u04de\u04ff\5\u00b6\\\2\u04df\u04ff")
        buf.write("\5\u00d6l\2\u04e0\u04ff\5\u00dan\2\u04e1\u04e2\6\4\2\2")
        buf.write("\u04e2\u04ff\5\u00dco\2\u04e3\u04ff\5\u00dep\2\u04e4\u04ff")
        buf.write("\5\u00e0q\2\u04e5\u04ff\5\u00e6t\2\u04e6\u04ff\5\u00e8")
        buf.write("u\2\u04e7\u04ff\5\u00ecw\2\u04e8\u04ff\5\u0100\u0081\2")
        buf.write("\u04e9\u04ff\5\u010c\u0087\2\u04ea\u04ff\5\u010e\u0088")
        buf.write("\2\u04eb\u04ff\5\u01a4\u00d3\2\u04ec\u04ff\5\u01a6\u00d4")
        buf.write("\2\u04ed\u04ff\5\u01bc\u00df\2\u04ee\u04ff\5\u01ee\u00f8")
        buf.write("\2\u04ef\u04f0\6\4\3\2\u04f0\u04ff\5\u01f4\u00fb\2\u04f1")
        buf.write("\u04ff\5\u01fa\u00fe\2\u04f2\u04ff\5\u0238\u011d\2\u04f3")
        buf.write("\u04ff\5\u0240\u0121\2\u04f4\u04ff\5\u0242\u0122\2\u04f5")
        buf.write("\u04ff\5\u025a\u012e\2\u04f6\u04f7\6\4\4\2\u04f7\u04ff")
        buf.write("\5\u0286\u0144\2\u04f8\u04ff\5\u0266\u0134\2\u04f9\u04ff")
        buf.write("\5\u029a\u014e\2\u04fa\u04fb\6\4\5\2\u04fb\u04ff\5\u034c")
        buf.write("\u01a7\2\u04fc\u04ff\5\u0356\u01ac\2\u04fd\u04ff\5\u0358")
        buf.write("\u01ad\2\u04fe\u04dc\3\2\2\2\u04fe\u04dd\3\2\2\2\u04fe")
        buf.write("\u04de\3\2\2\2\u04fe\u04df\3\2\2\2\u04fe\u04e0\3\2\2\2")
        buf.write("\u04fe\u04e1\3\2\2\2\u04fe\u04e3\3\2\2\2\u04fe\u04e4\3")
        buf.write("\2\2\2\u04fe\u04e5\3\2\2\2\u04fe\u04e6\3\2\2\2\u04fe\u04e7")
        buf.write("\3\2\2\2\u04fe\u04e8\3\2\2\2\u04fe\u04e9\3\2\2\2\u04fe")
        buf.write("\u04ea\3\2\2\2\u04fe\u04eb\3\2\2\2\u04fe\u04ec\3\2\2\2")
        buf.write("\u04fe\u04ed\3\2\2\2\u04fe\u04ee\3\2\2\2\u04fe\u04ef\3")
        buf.write("\2\2\2\u04fe\u04f1\3\2\2\2\u04fe\u04f2\3\2\2\2\u04fe\u04f3")
        buf.write("\3\2\2\2\u04fe\u04f4\3\2\2\2\u04fe\u04f5\3\2\2\2\u04fe")
        buf.write("\u04f6\3\2\2\2\u04fe\u04f8\3\2\2\2\u04fe\u04f9\3\2\2\2")
        buf.write("\u04fe\u04fa\3\2\2\2\u04fe\u04fc\3\2\2\2\u04fe\u04fd\3")
        buf.write("\2\2\2\u04ff\7\3\2\2\2\u0500\u051b\7\r\2\2\u0501\u051c")
        buf.write("\5\26\f\2\u0502\u051c\5\n\6\2\u0503\u0504\7\u01a8\2\2")
        buf.write("\u0504\u0506\5\u042a\u0216\2\u0505\u0507\5j\66\2\u0506")
        buf.write("\u0505\3\2\2\2\u0506\u0507\3\2\2\2\u0507\u051c\3\2\2\2")
        buf.write("\u0508\u0509\7\u00d0\2\2\u0509\u050b\5\u042e\u0218\2\u050a")
        buf.write("\u050c\5j\66\2\u050b\u050a\3\2\2\2\u050b\u050c\3\2\2\2")
        buf.write("\u050c\u051c\3\2\2\2\u050d\u051c\5H%\2\u050e\u051c\5\f")
        buf.write("\7\2\u050f\u051c\5:\36\2\u0510\u0511\6\5\6\2\u0511\u051c")
        buf.write("\5<\37\2\u0512\u051c\5\16\b\2\u0513\u051c\5\24\13\2\u0514")
        buf.write("\u0515\6\5\7\2\u0515\u0516\7\u00f6\2\2\u0516\u0517\7\u01e4")
        buf.write("\2\2\u0517\u0518\5\u04a0\u0251\2\u0518\u0519\7\u013e\2")
        buf.write("\2\u0519\u051a\7\u010b\2\2\u051a\u051c\3\2\2\2\u051b\u0501")
        buf.write("\3\2\2\2\u051b\u0502\3\2\2\2\u051b\u0503\3\2\2\2\u051b")
        buf.write("\u0508\3\2\2\2\u051b\u050d\3\2\2\2\u051b\u050e\3\2\2\2")
        buf.write("\u051b\u050f\3\2\2\2\u051b\u0510\3\2\2\2\u051b\u0512\3")
        buf.write("\2\2\2\u051b\u0513\3\2\2\2\u051b\u0514\3\2\2\2\u051c\t")
        buf.write("\3\2\2\2\u051d\u051e\7o\2\2\u051e\u0529\5\u0426\u0214")
        buf.write("\2\u051f\u0521\5T+\2\u0520\u051f\3\2\2\2\u0521\u0522\3")
        buf.write("\2\2\2\u0522\u0520\3\2\2\2\u0522\u0523\3\2\2\2\u0523\u052a")
        buf.write("\3\2\2\2\u0524\u0525\6\6\b\2\u0525\u0526\7\u0269\2\2\u0526")
        buf.write("\u0527\7r\2\2\u0527\u0528\7\u008d\2\2\u0528\u052a\7\u0167")
        buf.write("\2\2\u0529\u0520\3\2\2\2\u0529\u0524\3\2\2\2\u052a\13")
        buf.write("\3\2\2\2\u052b\u052d\5\u03d4\u01eb\2\u052c\u052b\3\2\2")
        buf.write("\2\u052c\u052d\3\2\2\2\u052d\u052e\3\2\2\2\u052e\u052f")
        buf.write("\7\u00ac\2\2\u052f\u0533\5\u0442\u0222\2\u0530\u0531\7")
        buf.write("\u0181\2\2\u0531\u0532\7\u01ec\2\2\u0532\u0534\5\u0362")
        buf.write("\u01b2\2\u0533\u0530\3\2\2\2\u0533\u0534\3\2\2\2\u0534")
        buf.write("\u053b\3\2\2\2\u0535\u0536\7\u0181\2\2\u0536\u0538\7Q")
        buf.write("\2\2\u0537\u0539\7\u0175\2\2\u0538\u0537\3\2\2\2\u0538")
        buf.write("\u0539\3\2\2\2\u0539\u053a\3\2\2\2\u053a\u053c\7\u01a4")
        buf.write("\2\2\u053b\u0535\3\2\2\2\u053b\u053c\3\2\2\2\u053c\u0540")
        buf.write("\3\2\2\2\u053d\u053e\7\u01c7\2\2\u053e\u053f\7\u0250\2")
        buf.write("\2\u053f\u0541\5\u046c\u0237\2\u0540\u053d\3\2\2\2\u0540")
        buf.write("\u0541\3\2\2\2\u0541\u0548\3\2\2\2\u0542\u0549\7\u009e")
        buf.write("\2\2\u0543\u0546\7\u008e\2\2\u0544\u0545\7\u0181\2\2\u0545")
        buf.write("\u0547\7\u0204\2\2\u0546\u0544\3\2\2\2\u0546\u0547\3\2")
        buf.write("\2\2\u0547\u0549\3\2\2\2\u0548\u0542\3\2\2\2\u0548\u0543")
        buf.write("\3\2\2\2\u0548\u0549\3\2\2\2\u0549\u054c\3\2\2\2\u054a")
        buf.write("\u054b\7M\2\2\u054b\u054d\5\u048c\u0247\2\u054c\u054a")
        buf.write("\3\2\2\2\u054c\u054d\3\2\2\2\u054d\u0550\3\2\2\2\u054e")
        buf.write("\u054f\7\u0095\2\2\u054f\u0551\5\u0314\u018b\2\u0550\u054e")
        buf.write("\3\2\2\2\u0550\u0551\3\2\2\2\u0551\r\3\2\2\2\u0552\u0553")
        buf.write("\7\u0122\2\2\u0553\u0554\7\u00db\2\2\u0554\u0555\5\u043e")
        buf.write("\u0220\2\u0555\u0556\7\6\2\2\u0556\u0557\7\u025d\2\2\u0557")
        buf.write("\u0559\5\u048c\u0247\2\u0558\u055a\5\20\t\2\u0559\u0558")
        buf.write("\3\2\2\2\u0559\u055a\3\2\2\2\u055a\17\3\2\2\2\u055b\u0562")
        buf.write("\5\22\n\2\u055c\u055e\7\u0307\2\2\u055d\u055c\3\2\2\2")
        buf.write("\u055d\u055e\3\2\2\2\u055e\u055f\3\2\2\2\u055f\u0561\5")
        buf.write("\22\n\2\u0560\u055d\3\2\2\2\u0561\u0564\3\2\2\2\u0562")
        buf.write("\u0560\3\2\2\2\u0562\u0563\3\2\2\2\u0563\21\3\2\2\2\u0564")
        buf.write("\u0562\3\2\2\2\u0565\u0569\5\u008cG\2\u0566\u0569\5\u0098")
        buf.write("M\2\u0567\u0569\5\u009aN\2\u0568\u0565\3\2\2\2\u0568\u0566")
        buf.write("\3\2\2\2\u0568\u0567\3\2\2\2\u0569\23\3\2\2\2\u056a\u056b")
        buf.write("\7\u01f9\2\2\u056b\u056c\5\u0448\u0225\2\u056c\u056d\5")
        buf.write("|?\2\u056d\25\3\2\2\2\u056e\u0570\5\u040c\u0207\2\u056f")
        buf.write("\u056e\3\2\2\2\u056f\u0570\3\2\2\2\u0570\u0573\3\2\2\2")
        buf.write("\u0571\u0572\6\f\t\2\u0572\u0574\7\u00ea\2\2\u0573\u0571")
        buf.write("\3\2\2\2\u0573\u0574\3\2\2\2\u0574\u0575\3\2\2\2\u0575")
        buf.write("\u0576\7\u0240\2\2\u0576\u0578\5\u0452\u022a\2\u0577\u0579")
        buf.write("\5\30\r\2\u0578\u0577\3\2\2\2\u0578\u0579\3\2\2\2\u0579")
        buf.write("\27\3\2\2\2\u057a\u057d\5\32\16\2\u057b\u057e\5\u03be")
        buf.write("\u01e0\2\u057c\u057e\5\66\34\2\u057d\u057b\3\2\2\2\u057d")
        buf.write("\u057c\3\2\2\2\u057d\u057e\3\2\2\2\u057e\u0588\3\2\2\2")
        buf.write("\u057f\u0588\5\u03be\u01e0\2\u0580\u0588\5\66\34\2\u0581")
        buf.write("\u0582\5\34\17\2\u0582\u0583\7\u0307\2\2\u0583\u0585\3")
        buf.write("\2\2\2\u0584\u0581\3\2\2\2\u0584\u0585\3\2\2\2\u0585\u0586")
        buf.write("\3\2\2\2\u0586\u0588\5\36\20\2\u0587\u057a\3\2\2\2\u0587")
        buf.write("\u057f\3\2\2\2\u0587\u0580\3\2\2\2\u0587\u0584\3\2\2\2")
        buf.write("\u0588\31\3\2\2\2\u0589\u0591\5\34\17\2\u058a\u058b\5")
        buf.write("\34\17\2\u058b\u058c\7\u0307\2\2\u058c\u058e\3\2\2\2\u058d")
        buf.write("\u058a\3\2\2\2\u058d\u058e\3\2\2\2\u058e\u058f\3\2\2\2")
        buf.write("\u058f\u0591\5\"\22\2\u0590\u0589\3\2\2\2\u0590\u058d")
        buf.write("\3\2\2\2\u0591\33\3\2\2\2\u0592\u0597\5$\23\2\u0593\u0594")
        buf.write("\7\u0307\2\2\u0594\u0596\5$\23\2\u0595\u0593\3\2\2\2\u0596")
        buf.write("\u0599\3\2\2\2\u0597\u0595\3\2\2\2\u0597\u0598\3\2\2\2")
        buf.write("\u0598\35\3\2\2\2\u0599\u0597\3\2\2\2\u059a\u059b\7\u008f")
        buf.write("\2\2\u059b\u05a2\7\u023e\2\2\u059c\u059d\7\u00ec\2\2\u059d")
        buf.write("\u05a2\7\u023e\2\2\u059e\u05a2\5 \21\2\u059f\u05a0\6\20")
        buf.write("\n\2\u05a0\u05a2\t\2\2\2\u05a1\u059a\3\2\2\2\u05a1\u059c")
        buf.write("\3\2\2\2\u05a1\u059e\3\2\2\2\u05a1\u059f\3\2\2\2\u05a2")
        buf.write("\37\3\2\2\2\u05a3\u05a4\7\6\2\2\u05a4\u05a6\7\u0197\2")
        buf.write("\2\u05a5\u05a7\5\u040e\u0208\2\u05a6\u05a5\3\2\2\2\u05a6")
        buf.write("\u05a7\3\2\2\2\u05a7\u05ab\3\2\2\2\u05a8\u05ac\5\u03c6")
        buf.write("\u01e4\2\u05a9\u05aa\7\u0196\2\2\u05aa\u05ac\5\u047a\u023e")
        buf.write("\2\u05ab\u05a8\3\2\2\2\u05ab\u05a9\3\2\2\2\u05ac\u0604")
        buf.write("\3\2\2\2\u05ad\u05ae\7\u0096\2\2\u05ae\u05af\7\u0197\2")
        buf.write("\2\u05af\u0604\5\u046e\u0238\2\u05b0\u05b1\7\u01b8\2\2")
        buf.write("\u05b1\u05b3\7\u0197\2\2\u05b2\u05b4\5\u040e\u0208\2\u05b3")
        buf.write("\u05b2\3\2\2\2\u05b3\u05b4\3\2\2\2\u05b4\u05b5\3\2\2\2")
        buf.write("\u05b5\u0604\58\35\2\u05b6\u05b7\7\u0186\2\2\u05b7\u05b9")
        buf.write("\7\u0197\2\2\u05b8\u05ba\5\u040e\u0208\2\u05b9\u05b8\3")
        buf.write("\2\2\2\u05b9\u05ba\3\2\2\2\u05ba\u05bb\3\2\2\2\u05bb\u05bd")
        buf.write("\58\35\2\u05bc\u05be\5\u040e\u0208\2\u05bd\u05bc\3\2\2")
        buf.write("\2\u05bd\u05be\3\2\2\2\u05be\u0604\3\2\2\2\u05bf\u05c0")
        buf.write("\7\20\2\2\u05c0\u05c2\7\u0197\2\2\u05c1\u05c3\5\u040e")
        buf.write("\u0208\2\u05c2\u05c1\3\2\2\2\u05c2\u05c3\3\2\2\2\u05c3")
        buf.write("\u05c4\3\2\2\2\u05c4\u0604\58\35\2\u05c5\u05c6\7@\2\2")
        buf.write("\u05c6\u05c7\7\u0197\2\2\u05c7\u05cb\58\35\2\u05c8\u05ca")
        buf.write("\5\u023c\u011f\2\u05c9\u05c8\3\2\2\2\u05ca\u05cd\3\2\2")
        buf.write("\2\u05cb\u05c9\3\2\2\2\u05cb\u05cc\3\2\2\2\u05cc\u0604")
        buf.write("\3\2\2\2\u05cd\u05cb\3\2\2\2\u05ce\u05cf\7\u01c9\2\2\u05cf")
        buf.write("\u05d1\7\u0197\2\2\u05d0\u05d2\5\u040e\u0208\2\u05d1\u05d0")
        buf.write("\3\2\2\2\u05d1\u05d2\3\2\2\2\u05d2\u05d3\3\2\2\2\u05d3")
        buf.write("\u05d7\58\35\2\u05d4\u05d6\5\u023e\u0120\2\u05d5\u05d4")
        buf.write("\3\2\2\2\u05d6\u05d9\3\2\2\2\u05d7\u05d5\3\2\2\2\u05d7")
        buf.write("\u05d8\3\2\2\2\u05d8\u0604\3\2\2\2\u05d9\u05d7\3\2\2\2")
        buf.write("\u05da\u05db\7E\2\2\u05db\u05dd\7\u0197\2\2\u05dc\u05de")
        buf.write("\5\u040e\u0208\2\u05dd\u05dc\3\2\2\2\u05dd\u05de\3\2\2")
        buf.write("\2\u05de\u05df\3\2\2\2\u05df\u0604\5\u047a\u023e\2\u05e0")
        buf.write("\u05e1\7\u0257\2\2\u05e1\u05e2\7\u0197\2\2\u05e2\u0604")
        buf.write("\58\35\2\u05e3\u05e4\7\u01c8\2\2\u05e4\u05e6\7\u0197\2")
        buf.write("\2\u05e5\u05e7\5\u040e\u0208\2\u05e6\u05e5\3\2\2\2\u05e6")
        buf.write("\u05e7\3\2\2\2\u05e7\u05ec\3\2\2\2\u05e8\u05e9\5\u046e")
        buf.write("\u0238\2\u05e9\u05ea\7\u00fa\2\2\u05ea\u05eb\5\u03c6\u01e4")
        buf.write("\2\u05eb\u05ed\3\2\2\2\u05ec\u05e8\3\2\2\2\u05ec\u05ed")
        buf.write("\3\2\2\2\u05ed\u0604\3\2\2\2\u05ee\u05ef\7\u00ae\2\2\u05ef")
        buf.write("\u05f0\7\u0197\2\2\u05f0\u05f1\5\u046c\u0237\2\u05f1\u05f2")
        buf.write("\7\u0287\2\2\u05f2\u05f3\7\u0240\2\2\u05f3\u05f5\5\u0452")
        buf.write("\u022a\2\u05f4\u05f6\5\64\33\2\u05f5\u05f4\3\2\2\2\u05f5")
        buf.write("\u05f6\3\2\2\2\u05f6\u0604\3\2\2\2\u05f7\u05f8\6\21\13")
        buf.write("\2\u05f8\u05f9\7\u008f\2\2\u05f9\u05fa\7\u0197\2\2\u05fa")
        buf.write("\u05fb\58\35\2\u05fb\u05fc\7\u023e\2\2\u05fc\u0604\3\2")
        buf.write("\2\2\u05fd\u05fe\6\21\f\2\u05fe\u05ff\7\u00ec\2\2\u05ff")
        buf.write("\u0600\7\u0197\2\2\u0600\u0601\58\35\2\u0601\u0602\7\u023e")
        buf.write("\2\2\u0602\u0604\3\2\2\2\u0603\u05a3\3\2\2\2\u0603\u05ad")
        buf.write("\3\2\2\2\u0603\u05b0\3\2\2\2\u0603\u05b6\3\2\2\2\u0603")
        buf.write("\u05bf\3\2\2\2\u0603\u05c5\3\2\2\2\u0603\u05ce\3\2\2\2")
        buf.write("\u0603\u05da\3\2\2\2\u0603\u05e0\3\2\2\2\u0603\u05e3\3")
        buf.write("\2\2\2\u0603\u05ee\3\2\2\2\u0603\u05f7\3\2\2\2\u0603\u05fd")
        buf.write("\3\2\2\2\u0604!\3\2\2\2\u0605\u0608\5&\24\2\u0606\u0608")
        buf.write("\5\u03b2\u01da\2\u0607\u0605\3\2\2\2\u0607\u0606\3\2\2")
        buf.write("\2\u0608\u0611\3\2\2\2\u0609\u060d\7\u0307\2\2\u060a\u060e")
        buf.write("\5&\24\2\u060b\u060e\5$\23\2\u060c\u060e\5\u03b2\u01da")
        buf.write("\2\u060d\u060a\3\2\2\2\u060d\u060b\3\2\2\2\u060d\u060c")
        buf.write("\3\2\2\2\u060e\u0610\3\2\2\2\u060f\u0609\3\2\2\2\u0610")
        buf.write("\u0613\3\2\2\2\u0611\u060f\3\2\2\2\u0611\u0612\3\2\2\2")
        buf.write("\u0612#\3\2\2\2\u0613\u0611\3\2\2\2\u0614\u0618\5.\30")
        buf.write("\2\u0615\u0618\5\60\31\2\u0616\u0618\5\64\33\2\u0617\u0614")
        buf.write("\3\2\2\2\u0617\u0615\3\2\2\2\u0617\u0616\3\2\2\2\u0618")
        buf.write("%\3\2\2\2\u0619\u061b\7\6\2\2\u061a\u061c\7J\2\2\u061b")
        buf.write("\u061a\3\2\2\2\u061b\u061c\3\2\2\2\u061c\u0629\3\2\2\2")
        buf.write("\u061d\u061e\5\u046c\u0237\2\u061e\u0620\5\u0370\u01b9")
        buf.write("\2\u061f\u0621\5\u0366\u01b4\2\u0620\u061f\3\2\2\2\u0620")
        buf.write("\u0621\3\2\2\2\u0621\u0623\3\2\2\2\u0622\u0624\5(\25\2")
        buf.write("\u0623\u0622\3\2\2\2\u0623\u0624\3\2\2\2\u0624\u062a\3")
        buf.write("\2\2\2\u0625\u0626\7\u030a\2\2\u0626\u0627\5X-\2\u0627")
        buf.write("\u0628\7\u030b\2\2\u0628\u062a\3\2\2\2\u0629\u061d\3\2")
        buf.write("\2\2\u0629\u0625\3\2\2\2\u062a\u06ab\3\2\2\2\u062b\u062c")
        buf.write("\7\6\2\2\u062c\u06ab\5\u036c\u01b7\2\u062d\u062f\79\2")
        buf.write("\2\u062e\u0630\7J\2\2\u062f\u062e\3\2\2\2\u062f\u0630")
        buf.write("\3\2\2\2\u0630\u0631\3\2\2\2\u0631\u0632\5\u0416\u020c")
        buf.write("\2\u0632\u0633\5\u046c\u0237\2\u0633\u0635\5\u0370\u01b9")
        buf.write("\2\u0634\u0636\5(\25\2\u0635\u0634\3\2\2\2\u0635\u0636")
        buf.write("\3\2\2\2\u0636\u06ab\3\2\2\2\u0637\u0639\7\u015e\2\2\u0638")
        buf.write("\u063a\7J\2\2\u0639\u0638\3\2\2\2\u0639\u063a\3\2\2\2")
        buf.write("\u063a\u063b\3\2\2\2\u063b\u063c\5\u0416\u020c\2\u063c")
        buf.write("\u063e\5\u0370\u01b9\2\u063d\u063f\5(\25\2\u063e\u063d")
        buf.write("\3\2\2\2\u063e\u063f\3\2\2\2\u063f\u06ab\3\2\2\2\u0640")
        buf.write("\u065d\7\u0096\2\2\u0641\u0643\7J\2\2\u0642\u0641\3\2")
        buf.write("\2\2\u0642\u0643\3\2\2\2\u0643\u0644\3\2\2\2\u0644\u0646")
        buf.write("\5\u0416\u020c\2\u0645\u0647\5*\26\2\u0646\u0645\3\2\2")
        buf.write("\2\u0646\u0647\3\2\2\2\u0647\u065e\3\2\2\2\u0648\u0649")
        buf.write("\7\u00c9\2\2\u0649\u0650\7\u010b\2\2\u064a\u064b\6\24")
        buf.write("\r\2\u064b\u0651\5\u0416\u020c\2\u064c\u064e\6\24\16\2")
        buf.write("\u064d\u064f\5\u0416\u020c\2\u064e\u064d\3\2\2\2\u064e")
        buf.write("\u064f\3\2\2\2\u064f\u0651\3\2\2\2\u0650\u064a\3\2\2\2")
        buf.write("\u0650\u064c\3\2\2\2\u0651\u065e\3\2\2\2\u0652\u0653\7")
        buf.write("\u01a6\2\2\u0653\u065e\7\u010b\2\2\u0654\u0655\5\u019a")
        buf.write("\u00ce\2\u0655\u0656\5\u0420\u0211\2\u0656\u065e\3\2\2")
        buf.write("\2\u0657\u0658\6\24\17\2\u0658\u0659\7@\2\2\u0659\u065e")
        buf.write("\5\u046c\u0237\2\u065a\u065b\6\24\20\2\u065b\u065c\7X")
        buf.write("\2\2\u065c\u065e\5\u046c\u0237\2\u065d\u0642\3\2\2\2\u065d")
        buf.write("\u0648\3\2\2\2\u065d\u0652\3\2\2\2\u065d\u0654\3\2\2\2")
        buf.write("\u065d\u0657\3\2\2\2\u065d\u065a\3\2\2\2\u065e\u06ab\3")
        buf.write("\2\2\2\u065f\u0660\7\u008e\2\2\u0660\u06ab\7\u0109\2\2")
        buf.write("\u0661\u0662\7\u009e\2\2\u0662\u06ab\7\u0109\2\2\u0663")
        buf.write("\u0665\7\r\2\2\u0664\u0666\7J\2\2\u0665\u0664\3\2\2\2")
        buf.write("\u0665\u0666\3\2\2\2\u0666\u0667\3\2\2\2\u0667\u0671\5")
        buf.write("\u0416\u020c\2\u0668\u0669\7\u01fc\2\2\u0669\u066d\7\u0082")
        buf.write("\2\2\u066a\u066b\6\24\21\2\u066b\u066e\5\u0306\u0184\2")
        buf.write("\u066c\u066e\5\u0482\u0242\2\u066d\u066a\3\2\2\2\u066d")
        buf.write("\u066c\3\2\2\2\u066e\u0672\3\2\2\2\u066f\u0670\7\u0096")
        buf.write("\2\2\u0670\u0672\7\u0082\2\2\u0671\u0668\3\2\2\2\u0671")
        buf.write("\u066f\3\2\2\2\u0672\u06ab\3\2\2\2\u0673\u0674\6\24\22")
        buf.write("\2\u0674\u0675\7\r\2\2\u0675\u0676\7\u00ee\2\2\u0676\u0677")
        buf.write("\5\u0420\u0211\2\u0677\u0678\5\u038e\u01c8\2\u0678\u06ab")
        buf.write("\3\2\2\2\u0679\u067a\6\24\23\2\u067a\u067b\7\r\2\2\u067b")
        buf.write("\u067c\7@\2\2\u067c\u067d\5\u046c\u0237\2\u067d\u067e")
        buf.write("\5\u036a\u01b6\2\u067e\u06ab\3\2\2\2\u067f\u0680\6\24")
        buf.write("\24\2\u0680\u0681\7\r\2\2\u0681\u0682\7X\2\2\u0682\u0683")
        buf.write("\5\u046c\u0237\2\u0683\u0684\5\u036a\u01b6\2\u0684\u06ab")
        buf.write("\3\2\2\2\u0685\u0686\6\24\25\2\u0686\u0687\7\u01c7\2\2")
        buf.write("\u0687\u0688\7J\2\2\u0688\u0689\5\u0416\u020c\2\u0689")
        buf.write("\u068a\7\u0250\2\2\u068a\u068b\5\u046c\u0237\2\u068b\u06ab")
        buf.write("\3\2\2\2\u068c\u068e\7\u01c7\2\2\u068d\u068f\t\3\2\2\u068e")
        buf.write("\u068d\3\2\2\2\u068e\u068f\3\2\2\2\u068f\u0690\3\2\2\2")
        buf.write("\u0690\u06ab\5\u044c\u0227\2\u0691\u0692\6\24\26\2\u0692")
        buf.write("\u0693\7\u01c7\2\2\u0693\u0694\5\u019a\u00ce\2\u0694\u0695")
        buf.write("\5\u0420\u0211\2\u0695\u0696\7\u0250\2\2\u0696\u0697\5")
        buf.write("\u041e\u0210\2\u0697\u06ab\3\2\2\2\u0698\u0699\7`\2\2")
        buf.write("\u0699\u069a\7\u0250\2\2\u069a\u069e\5\u02fa\u017e\2\u069b")
        buf.write("\u069c\6\24\27\2\u069c\u069f\7\u0082\2\2\u069d\u069f\5")
        buf.write("\u03ac\u01d7\2\u069e\u069b\3\2\2\2\u069e\u069d\3\2\2\2")
        buf.write("\u069f\u06a1\3\2\2\2\u06a0\u06a2\5\u03de\u01f0\2\u06a1")
        buf.write("\u06a0\3\2\2\2\u06a1\u06a2\3\2\2\2\u06a2\u06ab\3\2\2\2")
        buf.write("\u06a3\u06ab\7\u00c8\2\2\u06a4\u06a5\7\u018b\2\2\u06a5")
        buf.write("\u06a6\7/\2\2\u06a6\u06ab\5,\27\2\u06a7\u06a8\6\24\30")
        buf.write("\2\u06a8\u06a9\7\u0269\2\2\u06a9\u06ab\7\u0195\2\2\u06aa")
        buf.write("\u0619\3\2\2\2\u06aa\u062b\3\2\2\2\u06aa\u062d\3\2\2\2")
        buf.write("\u06aa\u0637\3\2\2\2\u06aa\u0640\3\2\2\2\u06aa\u065f\3")
        buf.write("\2\2\2\u06aa\u0661\3\2\2\2\u06aa\u0663\3\2\2\2\u06aa\u0673")
        buf.write("\3\2\2\2\u06aa\u0679\3\2\2\2\u06aa\u067f\3\2\2\2\u06aa")
        buf.write("\u0685\3\2\2\2\u06aa\u068c\3\2\2\2\u06aa\u0691\3\2\2\2")
        buf.write("\u06aa\u0698\3\2\2\2\u06aa\u06a3\3\2\2\2\u06aa\u06a4\3")
        buf.write("\2\2\2\u06aa\u06a7\3\2\2\2\u06ab\'\3\2\2\2\u06ac\u06ad")
        buf.write("\7\b\2\2\u06ad\u06b0\5\u046c\u0237\2\u06ae\u06b0\7\u00c1")
        buf.write("\2\2\u06af\u06ac\3\2\2\2\u06af\u06ae\3\2\2\2\u06b0)\3")
        buf.write("\2\2\2\u06b1\u06b2\t\4\2\2\u06b2+\3\2\2\2\u06b3\u06b5")
        buf.write("\5\u046c\u0237\2\u06b4\u06b6\5\u014e\u00a8\2\u06b5\u06b4")
        buf.write("\3\2\2\2\u06b5\u06b6\3\2\2\2\u06b6\u06be\3\2\2\2\u06b7")
        buf.write("\u06b8\7\u0307\2\2\u06b8\u06ba\5\u046c\u0237\2\u06b9\u06bb")
        buf.write("\5\u014e\u00a8\2\u06ba\u06b9\3\2\2\2\u06ba\u06bb\3\2\2")
        buf.write("\2\u06bb\u06bd\3\2\2\2\u06bc\u06b7\3\2\2\2\u06bd\u06c0")
        buf.write("\3\2\2\2\u06be\u06bc\3\2\2\2\u06be\u06bf\3\2\2\2\u06bf")
        buf.write("-\3\2\2\2\u06c0\u06be\3\2\2\2\u06c1\u06c3\7\13\2\2\u06c2")
        buf.write("\u06c4\7\u02f0\2\2\u06c3\u06c2\3\2\2\2\u06c3\u06c4\3\2")
        buf.write("\2\2\u06c4\u06c7\3\2\2\2\u06c5\u06c8\7\u0082\2\2\u06c6")
        buf.write("\u06c8\5\u046c\u0237\2\u06c7\u06c5\3\2\2\2\u06c7\u06c6")
        buf.write("\3\2\2\2\u06c8/\3\2\2\2\u06c9\u06cb\7\u0121\2\2\u06ca")
        buf.write("\u06cc\7\u02f0\2\2\u06cb\u06ca\3\2\2\2\u06cb\u06cc\3\2")
        buf.write("\2\2\u06cc\u06cf\3\2\2\2\u06cd\u06d0\7\u0082\2\2\u06ce")
        buf.write("\u06d0\5\u046c\u0237\2\u06cf\u06cd\3\2\2\2\u06cf\u06ce")
        buf.write("\3\2\2\2\u06d0\61\3\2\2\2\u06d1\u06d3\5.\30\2\u06d2\u06d4")
        buf.write("\5\60\31\2\u06d3\u06d2\3\2\2\2\u06d3\u06d4\3\2\2\2\u06d4")
        buf.write("\u06da\3\2\2\2\u06d5\u06d7\5\60\31\2\u06d6\u06d8\5.\30")
        buf.write("\2\u06d7\u06d6\3\2\2\2\u06d7\u06d8\3\2\2\2\u06d8\u06da")
        buf.write("\3\2\2\2\u06d9\u06d1\3\2\2\2\u06d9\u06d5\3\2\2\2\u06da")
        buf.write("\63\3\2\2\2\u06db\u06dc\6\33\31\2\u06dc\u06dd\t\5\2\2")
        buf.write("\u06dd\u06de\7\u0273\2\2\u06de\65\3\2\2\2\u06df\u06e0")
        buf.write("\7\u01c6\2\2\u06e0\u06e1\7\u0195\2\2\u06e1\67\3\2\2\2")
        buf.write("\u06e2\u06e5\7\f\2\2\u06e3\u06e5\5\u046e\u0238\2\u06e4")
        buf.write("\u06e2\3\2\2\2\u06e4\u06e3\3\2\2\2\u06e59\3\2\2\2\u06e6")
        buf.write("\u06e7\7\u023e\2\2\u06e7\u0709\5\u043a\u021e\2\u06e8\u06e9")
        buf.write("\t\6\2\2\u06e9\u06ea\7q\2\2\u06ea\u06ec\5\u048c\u0247")
        buf.write("\2\u06eb\u06ed\5B\"\2\u06ec\u06eb\3\2\2\2\u06ec\u06ed")
        buf.write("\3\2\2\2\u06ed\u070a\3\2\2\2\u06ee\u0702\6\36\32\2\u06ef")
        buf.write("\u0703\3\2\2\2\u06f0\u06f1\79\2\2\u06f1\u06f2\7q\2\2\u06f2")
        buf.write("\u06fd\5\u048c\u0247\2\u06f3\u06fa\5F$\2\u06f4\u06f6\7")
        buf.write("\u0307\2\2\u06f5\u06f4\3\2\2\2\u06f5\u06f6\3\2\2\2\u06f6")
        buf.write("\u06f7\3\2\2\2\u06f7\u06f9\5F$\2\u06f8\u06f5\3\2\2\2\u06f9")
        buf.write("\u06fc\3\2\2\2\u06fa\u06f8\3\2\2\2\u06fa\u06fb\3\2\2\2")
        buf.write("\u06fb\u06fe\3\2\2\2\u06fc\u06fa\3\2\2\2\u06fd\u06f3\3")
        buf.write("\2\2\2\u06fd\u06fe\3\2\2\2\u06fe\u0703\3\2\2\2\u06ff\u0703")
        buf.write("\t\7\2\2\u0700\u0701\7\u0175\2\2\u0701\u0703\7\3\2\2\u0702")
        buf.write("\u06ef\3\2\2\2\u0702\u06f0\3\2\2\2\u0702\u06ff\3\2\2\2")
        buf.write("\u0702\u0700\3\2\2\2\u0703\u070a\3\2\2\2\u0704\u0705\7")
        buf.write("\u01c7\2\2\u0705\u0706\7\u0250\2\2\u0706\u070a\5\u046c")
        buf.write("\u0237\2\u0707\u0708\6\36\33\2\u0708\u070a\5B\"\2\u0709")
        buf.write("\u06e8\3\2\2\2\u0709\u06ee\3\2\2\2\u0709\u0704\3\2\2\2")
        buf.write("\u0709\u0707\3\2\2\2\u070a;\3\2\2\2\u070b\u070c\7\u025f")
        buf.write("\2\2\u070c\u070d\7\u023e\2\2\u070d\u070e\5\u043a\u021e")
        buf.write("\2\u070e\u070f\7\u01fc\2\2\u070f\u0711\t\b\2\2\u0710\u0712")
        buf.write("\5> \2\u0711\u0710\3\2\2\2\u0711\u0712\3\2\2\2\u0712=")
        buf.write("\3\2\2\2\u0713\u071a\5@!\2\u0714\u0716\7\u0307\2\2\u0715")
        buf.write("\u0714\3\2\2\2\u0715\u0716\3\2\2\2\u0716\u0717\3\2\2\2")
        buf.write("\u0717\u0719\5@!\2\u0718\u0715\3\2\2\2\u0719\u071c\3\2")
        buf.write("\2\2\u071a\u0718\3\2\2\2\u071a\u071b\3\2\2\2\u071b?\3")
        buf.write("\2\2\2\u071c\u071a\3\2\2\2\u071d\u071e\5\u0098M\2\u071e")
        buf.write("A\3\2\2\2\u071f\u0726\5D#\2\u0720\u0722\7\u0307\2\2\u0721")
        buf.write("\u0720\3\2\2\2\u0721\u0722\3\2\2\2\u0722\u0723\3\2\2\2")
        buf.write("\u0723\u0725\5D#\2\u0724\u0721\3\2\2\2\u0725\u0728\3\2")
        buf.write("\2\2\u0726\u0724\3\2\2\2\u0726\u0727\3\2\2\2\u0727C\3")
        buf.write("\2\2\2\u0728\u0726\3\2\2\2\u0729\u072b\7\u00f0\2\2\u072a")
        buf.write("\u072c\7\u02f0\2\2\u072b\u072a\3\2\2\2\u072b\u072c\3\2")
        buf.write("\2\2\u072c\u072d\3\2\2\2\u072d\u0734\5\u04a6\u0254\2\u072e")
        buf.write("\u0734\5\u0090I\2\u072f\u0734\5\u0092J\2\u0730\u0734\5")
        buf.write("\u0098M\2\u0731\u0734\5\u009aN\2\u0732\u0734\5\u00a0Q")
        buf.write("\2\u0733\u0729\3\2\2\2\u0733\u072e\3\2\2\2\u0733\u072f")
        buf.write("\3\2\2\2\u0733\u0730\3\2\2\2\u0733\u0731\3\2\2\2\u0733")
        buf.write("\u0732\3\2\2\2\u0734E\3\2\2\2\u0735\u0737\7\u00f0\2\2")
        buf.write("\u0736\u0738\7\u02f0\2\2\u0737\u0736\3\2\2\2\u0737\u0738")
        buf.write("\3\2\2\2\u0738\u0739\3\2\2\2\u0739\u073d\5\u04a6\u0254")
        buf.write("\2\u073a\u073d\5\u0090I\2\u073b\u073d\5\u0092J\2\u073c")
        buf.write("\u0735\3\2\2\2\u073c\u073a\3\2\2\2\u073c\u073b\3\2\2\2")
        buf.write("\u073dG\3\2\2\2\u073e\u0740\5\u00a6T\2\u073f\u073e\3\2")
        buf.write("\2\2\u073f\u0740\3\2\2\2\u0740\u0742\3\2\2\2\u0741\u0743")
        buf.write("\5\u03d4\u01eb\2\u0742\u0741\3\2\2\2\u0742\u0743\3\2\2")
        buf.write("\2\u0743\u0745\3\2\2\2\u0744\u0746\5\u00a8U\2\u0745\u0744")
        buf.write("\3\2\2\2\u0745\u0746\3\2\2\2\u0746\u0747\3\2\2\2\u0747")
        buf.write("\u0748\7\u027e\2\2\u0748\u0749\5\u0436\u021c\2\u0749\u074a")
        buf.write("\5J&\2\u074aI\3\2\2\2\u074b\u074d\5\u0418\u020d\2\u074c")
        buf.write("\u074b\3\2\2\2\u074c\u074d\3\2\2\2\u074d\u074e\3\2\2\2")
        buf.write("\u074e\u074f\7\23\2\2\u074f\u0750\5L\'\2\u0750K\3\2\2")
        buf.write("\2\u0751\u0753\5^\60\2\u0752\u0754\5N(\2\u0753\u0752\3")
        buf.write("\2\2\2\u0753\u0754\3\2\2\2\u0754M\3\2\2\2\u0755\u0757")
        buf.write("\7\u0287\2\2\u0756\u0758\t\t\2\2\u0757\u0756\3\2\2\2\u0757")
        buf.write("\u0758\3\2\2\2\u0758\u0759\3\2\2\2\u0759\u075a\7@\2\2")
        buf.write("\u075a\u075b\7\u0189\2\2\u075bO\3\2\2\2\u075c\u076f\7")
        buf.write("c\2\2\u075d\u0770\5R*\2\u075e\u0770\5V,\2\u075f\u0770")
        buf.write("\5d\63\2\u0760\u0770\5b\62\2\u0761\u0770\5f\64\2\u0762")
        buf.write("\u0770\5t;\2\u0763\u0770\5\u00a2R\2\u0764\u0770\5\u00aa")
        buf.write("V\2\u0765\u0770\5n8\2\u0766\u0770\5z>\2\u0767\u0770\5")
        buf.write("\u0080A\2\u0768\u0770\5\u00aeX\2\u0769\u076a\6)\34\2\u076a")
        buf.write("\u0770\5\u00b0Y\2\u076b\u076c\6)\35\2\u076c\u0770\5\u00b2")
        buf.write("Z\2\u076d\u076e\6)\36\2\u076e\u0770\5\u0082B\2\u076f\u075d")
        buf.write("\3\2\2\2\u076f\u075e\3\2\2\2\u076f\u075f\3\2\2\2\u076f")
        buf.write("\u0760\3\2\2\2\u076f\u0761\3\2\2\2\u076f\u0762\3\2\2\2")
        buf.write("\u076f\u0763\3\2\2\2\u076f\u0764\3\2\2\2\u076f\u0765\3")
        buf.write("\2\2\2\u076f\u0766\3\2\2\2\u076f\u0767\3\2\2\2\u076f\u0768")
        buf.write("\3\2\2\2\u076f\u0769\3\2\2\2\u076f\u076b\3\2\2\2\u076f")
        buf.write("\u076d\3\2\2\2\u0770Q\3\2\2\2\u0771\u0773\7o\2\2\u0772")
        buf.write("\u0774\5\u03d8\u01ed\2\u0773\u0772\3\2\2\2\u0773\u0774")
        buf.write("\3\2\2\2\u0774\u0775\3\2\2\2\u0775\u0779\5\u0424\u0213")
        buf.write("\2\u0776\u0778\5T+\2\u0777\u0776\3\2\2\2\u0778\u077b\3")
        buf.write("\2\2\2\u0779\u0777\3\2\2\2\u0779\u077a\3\2\2\2\u077aS")
        buf.write("\3\2\2\2\u077b\u0779\3\2\2\2\u077c\u0781\5\u03bc\u01df")
        buf.write("\2\u077d\u0781\5\u03b8\u01dd\2\u077e\u077f\6+\37\2\u077f")
        buf.write("\u0781\5\u03ba\u01de\2\u0780\u077c\3\2\2\2\u0780\u077d")
        buf.write("\3\2\2\2\u0780\u077e\3\2\2\2\u0781U\3\2\2\2\u0782\u0784")
        buf.write("\7\u0243\2\2\u0783\u0782\3\2\2\2\u0783\u0784\3\2\2\2\u0784")
        buf.write("\u0785\3\2\2\2\u0785\u0787\7\u0240\2\2\u0786\u0788\5\u03d8")
        buf.write("\u01ed\2\u0787\u0786\3\2\2\2\u0787\u0788\3\2\2\2\u0788")
        buf.write("\u0789\3\2\2\2\u0789\u07a0\5\u044c\u0227\2\u078a\u078b")
        buf.write("\7\u030a\2\2\u078b\u078c\5X-\2\u078c\u078d\7\u030b\2\2")
        buf.write("\u078d\u078f\3\2\2\2\u078e\u078a\3\2\2\2\u078e\u078f\3")
        buf.write("\2\2\2\u078f\u0791\3\2\2\2\u0790\u0792\5\u03b0\u01d9\2")
        buf.write("\u0791\u0790\3\2\2\2\u0791\u0792\3\2\2\2\u0792\u0794\3")
        buf.write("\2\2\2\u0793\u0795\5\u03be\u01e0\2\u0794\u0793\3\2\2\2")
        buf.write("\u0794\u0795\3\2\2\2\u0795\u0797\3\2\2\2\u0796\u0798\5")
        buf.write("\\/\2\u0797\u0796\3\2\2\2\u0797\u0798\3\2\2\2\u0798\u07a1")
        buf.write("\3\2\2\2\u0799\u079a\7\u0115\2\2\u079a\u07a1\5\u0452\u022a")
        buf.write("\2\u079b\u079c\7\u030a\2\2\u079c\u079d\7\u0115\2\2\u079d")
        buf.write("\u079e\5\u0452\u022a\2\u079e\u079f\7\u030b\2\2\u079f\u07a1")
        buf.write("\3\2\2\2\u07a0\u078e\3\2\2\2\u07a0\u0799\3\2\2\2\u07a0")
        buf.write("\u079b\3\2\2\2\u07a1W\3\2\2\2\u07a2\u07a7\5Z.\2\u07a3")
        buf.write("\u07a4\7\u0307\2\2\u07a4\u07a6\5Z.\2\u07a5\u07a3\3\2\2")
        buf.write("\2\u07a6\u07a9\3\2\2\2\u07a7\u07a5\3\2\2\2\u07a7\u07a8")
        buf.write("\3\2\2\2\u07a8Y\3\2\2\2\u07a9\u07a7\3\2\2\2\u07aa\u07ad")
        buf.write("\5\u0364\u01b3\2\u07ab\u07ad\5\u036c\u01b7\2\u07ac\u07aa")
        buf.write("\3\2\2\2\u07ac\u07ab\3\2\2\2\u07ad[\3\2\2\2\u07ae\u07b0")
        buf.write("\t\n\2\2\u07af\u07ae\3\2\2\2\u07af\u07b0\3\2\2\2\u07b0")
        buf.write("\u07b2\3\2\2\2\u07b1\u07b3\7\23\2\2\u07b2\u07b1\3\2\2")
        buf.write("\2\u07b2\u07b3\3\2\2\2\u07b3\u07b4\3\2\2\2\u07b4\u07b5")
        buf.write("\5^\60\2\u07b5]\3\2\2\2\u07b6\u07b9\5\u0112\u008a\2\u07b7")
        buf.write("\u07b9\5\u0116\u008c\2\u07b8\u07b6\3\2\2\2\u07b8\u07b7")
        buf.write("\3\2\2\2\u07b9_\3\2\2\2\u07ba\u07be\7c\2\2\u07bb\u07bf")
        buf.write("\5b\62\2\u07bc\u07bf\5d\63\2\u07bd\u07bf\5f\64\2\u07be")
        buf.write("\u07bb\3\2\2\2\u07be\u07bc\3\2\2\2\u07be\u07bd\3\2\2\2")
        buf.write("\u07bf\u07c1\3\2\2\2\u07c0\u07c2\7\u0308\2\2\u07c1\u07c0")
        buf.write("\3\2\2\2\u07c1\u07c2\3\2\2\2\u07c2\u07c3\3\2\2\2\u07c3")
        buf.write("\u07c4\7\2\2\3\u07c4a\3\2\2\2\u07c5\u07c7\5\u03d4\u01eb")
        buf.write("\2\u07c6\u07c5\3\2\2\2\u07c6\u07c7\3\2\2\2\u07c7\u07c8")
        buf.write("\3\2\2\2\u07c8\u07c9\7\u01a8\2\2\u07c9\u07ca\5\u0428\u0215")
        buf.write("\2\u07ca\u07d3\7\u030a\2\2\u07cb\u07d0\5\u03da\u01ee\2")
        buf.write("\u07cc\u07cd\7\u0307\2\2\u07cd\u07cf\5\u03da\u01ee\2\u07ce")
        buf.write("\u07cc\3\2\2\2\u07cf\u07d2\3\2\2\2\u07d0\u07ce\3\2\2\2")
        buf.write("\u07d0\u07d1\3\2\2\2\u07d1\u07d4\3\2\2\2\u07d2\u07d0\3")
        buf.write("\2\2\2\u07d3\u07cb\3\2\2\2\u07d3\u07d4\3\2\2\2\u07d4\u07d5")
        buf.write("\3\2\2\2\u07d5\u07d9\7\u030b\2\2\u07d6\u07d8\5h\65\2\u07d7")
        buf.write("\u07d6\3\2\2\2\u07d8\u07db\3\2\2\2\u07d9\u07d7\3\2\2\2")
        buf.write("\u07d9\u07da\3\2\2\2\u07da\u07dc\3\2\2\2\u07db\u07d9\3")
        buf.write("\2\2\2\u07dc\u07dd\5\u0314\u018b\2\u07ddc\3\2\2\2\u07de")
        buf.write("\u07e0\5\u03d4\u01eb\2\u07df\u07de\3\2\2\2\u07df\u07e0")
        buf.write("\3\2\2\2\u07e0\u07e1\3\2\2\2\u07e1\u07e2\7\u00d0\2\2\u07e2")
        buf.write("\u07e3\5\u042c\u0217\2\u07e3\u07ec\7\u030a\2\2\u07e4\u07e9")
        buf.write("\5\u03dc\u01ef\2\u07e5\u07e6\7\u0307\2\2\u07e6\u07e8\5")
        buf.write("\u03dc\u01ef\2\u07e7\u07e5\3\2\2\2\u07e8\u07eb\3\2\2\2")
        buf.write("\u07e9\u07e7\3\2\2\2\u07e9\u07ea\3\2\2\2\u07ea\u07ed\3")
        buf.write("\2\2\2\u07eb\u07e9\3\2\2\2\u07ec\u07e4\3\2\2\2\u07ec\u07ed")
        buf.write("\3\2\2\2\u07ed\u07ee\3\2\2\2\u07ee\u07ef\7\u030b\2\2\u07ef")
        buf.write("\u07f0\7\u01dc\2\2\u07f0\u07f4\5\u03e0\u01f1\2\u07f1\u07f3")
        buf.write("\5h\65\2\u07f2\u07f1\3\2\2\2\u07f3\u07f6\3\2\2\2\u07f4")
        buf.write("\u07f2\3\2\2\2\u07f4\u07f5\3\2\2\2\u07f5\u07f7\3\2\2\2")
        buf.write("\u07f6\u07f4\3\2\2\2\u07f7\u07f8\5\u0314\u018b\2\u07f8")
        buf.write("e\3\2\2\2\u07f9\u07fb\7\n\2\2\u07fa\u07f9\3\2\2\2\u07fa")
        buf.write("\u07fb\3\2\2\2\u07fb\u07fc\3\2\2\2\u07fc\u07fd\7\u00d0")
        buf.write("\2\2\u07fd\u07fe\5\u0444\u0223\2\u07fe\u07ff\7\u01dc\2")
        buf.write("\2\u07ff\u0800\t\13\2\2\u0800\u0801\7\u020a\2\2\u0801")
        buf.write("\u0802\5\u048c\u0247\2\u0802g\3\2\2\2\u0803\u0809\5l\67")
        buf.write("\2\u0804\u0806\7\u0175\2\2\u0805\u0804\3\2\2\2\u0805\u0806")
        buf.write("\3\2\2\2\u0806\u0807\3\2\2\2\u0807\u0809\7\u008b\2\2\u0808")
        buf.write("\u0803\3\2\2\2\u0808\u0805\3\2\2\2\u0809i\3\2\2\2\u080a")
        buf.write("\u080c\5h\65\2\u080b\u080a\3\2\2\2\u080c\u080d\3\2\2\2")
        buf.write("\u080d\u080b\3\2\2\2\u080d\u080e\3\2\2\2\u080ek\3\2\2")
        buf.write("\2\u080f\u0810\7M\2\2\u0810\u0821\5\u048c\u0247\2\u0811")
        buf.write("\u0812\7\u010d\2\2\u0812\u0821\7\u021b\2\2\u0813\u0814")
        buf.write("\7\u0177\2\2\u0814\u0821\7\u021b\2\2\u0815\u0816\7\\\2")
        buf.write("\2\u0816\u0821\7\u021b\2\2\u0817\u0818\7\u01b3\2\2\u0818")
        buf.write("\u0819\7\u021b\2\2\u0819\u0821\7r\2\2\u081a\u081b\7\u015d")
        buf.write("\2\2\u081b\u081c\7\u021b\2\2\u081c\u0821\7r\2\2\u081d")
        buf.write("\u081e\7\u021b\2\2\u081e\u081f\7\u01f2\2\2\u081f\u0821")
        buf.write("\t\f\2\2\u0820\u080f\3\2\2\2\u0820\u0811\3\2\2\2\u0820")
        buf.write("\u0813\3\2\2\2\u0820\u0815\3\2\2\2\u0820\u0817\3\2\2\2")
        buf.write("\u0820\u081a\3\2\2\2\u0820\u081d\3\2\2\2\u0821m\3\2\2")
        buf.write("\2\u0822\u0824\5\u040c\u0207\2\u0823\u0822\3\2\2\2\u0823")
        buf.write("\u0824\3\2\2\2\u0824\u084e\3\2\2\2\u0825\u0827\7\u0263")
        buf.write("\2\2\u0826\u0825\3\2\2\2\u0826\u0827\3\2\2\2\u0827\u0828")
        buf.write("\3\2\2\2\u0828\u0831\7\u00ee\2\2\u0829\u082a\68 \2\u082a")
        buf.write("\u082c\5\u041e\u0210\2\u082b\u082d\5\u0390\u01c9\2\u082c")
        buf.write("\u082b\3\2\2\2\u082c\u082d\3\2\2\2\u082d\u0832\3\2\2\2")
        buf.write("\u082e\u0830\5p9\2\u082f\u082e\3\2\2\2\u082f\u0830\3\2")
        buf.write("\2\2\u0830\u0832\3\2\2\2\u0831\u0829\3\2\2\2\u0831\u082f")
        buf.write("\3\2\2\2\u0832\u0833\3\2\2\2\u0833\u0837\5r:\2\u0834\u0836")
        buf.write("\5\u038a\u01c6\2\u0835\u0834\3\2\2\2\u0836\u0839\3\2\2")
        buf.write("\2\u0837\u0835\3\2\2\2\u0837\u0838\3\2\2\2\u0838\u084f")
        buf.write("\3\2\2\2\u0839\u0837\3\2\2\2\u083a\u083b\7\u00cf\2\2\u083b")
        buf.write("\u083c\7\u00ee\2\2\u083c\u083d\5\u041e\u0210\2\u083d\u0841")
        buf.write("\5r:\2\u083e\u0840\5\u0392\u01ca\2\u083f\u083e\3\2\2\2")
        buf.write("\u0840\u0843\3\2\2\2\u0841\u083f\3\2\2\2\u0841\u0842\3")
        buf.write("\2\2\2\u0842\u084f\3\2\2\2\u0843\u0841\3\2\2\2\u0844\u0845")
        buf.write("\7\u020d\2\2\u0845\u0846\7\u00ee\2\2\u0846\u0847\5\u041e")
        buf.write("\u0210\2\u0847\u084b\5r:\2\u0848\u084a\5\u0394\u01cb\2")
        buf.write("\u0849\u0848\3\2\2\2\u084a\u084d\3\2\2\2\u084b\u0849\3")
        buf.write("\2\2\2\u084b\u084c\3\2\2\2\u084c\u084f\3\2\2\2\u084d\u084b")
        buf.write("\3\2\2\2\u084e\u0826\3\2\2\2\u084e\u083a\3\2\2\2\u084e")
        buf.write("\u0844\3\2\2\2\u084f\u0851\3\2\2\2\u0850\u0852\5\62\32")
        buf.write("\2\u0851\u0850\3\2\2\2\u0851\u0852\3\2\2\2\u0852o\3\2")
        buf.write("\2\2\u0853\u0856\5\u041e\u0210\2\u0854\u0855\7\u026f\2")
        buf.write("\2\u0855\u0857\5\u0388\u01c5\2\u0856\u0854\3\2\2\2\u0856")
        buf.write("\u0857\3\2\2\2\u0857\u085d\3\2\2\2\u0858\u0859\5\u041e")
        buf.write("\u0210\2\u0859\u085a\7\u0259\2\2\u085a\u085b\5\u0388\u01c5")
        buf.write("\2\u085b\u085d\3\2\2\2\u085c\u0853\3\2\2\2\u085c\u0858")
        buf.write("\3\2\2\2\u085dq\3\2\2\2\u085e\u085f\7\u0181\2\2\u085f")
        buf.write("\u0860\5\u0452\u022a\2\u0860\u0861\5\u0386\u01c4\2\u0861")
        buf.write("s\3\2\2\2\u0862\u0863\7\u0122\2\2\u0863\u0864\7\u00db")
        buf.write("\2\2\u0864\u0865\5\u043c\u021f\2\u0865\u0866\7\6\2\2\u0866")
        buf.write("\u0867\t\r\2\2\u0867\u0869\5\u048c\u0247\2\u0868\u086a")
        buf.write("\5v<\2\u0869\u0868\3\2\2\2\u0869\u086a\3\2\2\2\u086au")
        buf.write("\3\2\2\2\u086b\u0872\5x=\2\u086c\u086e\7\u0307\2\2\u086d")
        buf.write("\u086c\3\2\2\2\u086d\u086e\3\2\2\2\u086e\u086f\3\2\2\2")
        buf.write("\u086f\u0871\5x=\2\u0870\u086d\3\2\2\2\u0871\u0874\3\2")
        buf.write("\2\2\u0872\u0870\3\2\2\2\u0872\u0873\3\2\2\2\u0873w\3")
        buf.write("\2\2\2\u0874\u0872\3\2\2\2\u0875\u087c\5\u008cG\2\u0876")
        buf.write("\u087c\5\u008eH\2\u0877\u087c\5\u0096L\2\u0878\u087c\5")
        buf.write("\u0098M\2\u0879\u087c\5\u009aN\2\u087a\u087c\5\u009cO")
        buf.write("\2\u087b\u0875\3\2\2\2\u087b\u0876\3\2\2\2\u087b\u0877")
        buf.write("\3\2\2\2\u087b\u0878\3\2\2\2\u087b\u0879\3\2\2\2\u087b")
        buf.write("\u087a\3\2\2\2\u087cy\3\2\2\2\u087d\u087e\7\u01f9\2\2")
        buf.write("\u087e\u087f\5\u0446\u0224\2\u087f\u0880\7\u00c9\2\2\u0880")
        buf.write("\u0881\7r\2\2\u0881\u0882\7\u028a\2\2\u0882\u0883\5\u04a0")
        buf.write("\u0251\2\u0883\u0884\5|?\2\u0884{\3\2\2\2\u0885\u0886")
        buf.write("\7\u0188\2\2\u0886\u0887\7\u030a\2\2\u0887\u088c\5~@\2")
        buf.write("\u0888\u0889\7\u0307\2\2\u0889\u088b\5~@\2\u088a\u0888")
        buf.write("\3\2\2\2\u088b\u088e\3\2\2\2\u088c\u088a\3\2\2\2\u088c")
        buf.write("\u088d\3\2\2\2\u088d\u088f\3\2\2\2\u088e\u088c\3\2\2\2")
        buf.write("\u088f\u0890\7\u030b\2\2\u0890}\3\2\2\2\u0891\u0892\7")
        buf.write("\u00e2\2\2\u0892\u08a0\5\u048c\u0247\2\u0893\u0894\7o")
        buf.write("\2\2\u0894\u08a0\5\u048c\u0247\2\u0895\u0896\7\u026c\2")
        buf.write("\2\u0896\u08a0\5\u048c\u0247\2\u0897\u0898\7\u0198\2\2")
        buf.write("\u0898\u08a0\5\u048c\u0247\2\u0899\u089a\7\u0209\2\2\u089a")
        buf.write("\u08a0\5\u048c\u0247\2\u089b\u089c\7\u0190\2\2\u089c\u08a0")
        buf.write("\5\u048c\u0247\2\u089d\u089e\7\u019f\2\2\u089e\u08a0\5")
        buf.write("\u0478\u023d\2\u089f\u0891\3\2\2\2\u089f\u0893\3\2\2\2")
        buf.write("\u089f\u0895\3\2\2\2\u089f\u0897\3\2\2\2\u089f\u0899\3")
        buf.write("\2\2\2\u089f\u089b\3\2\2\2\u089f\u089d\3\2\2\2\u08a0\177")
        buf.write("\3\2\2\2\u08a1\u08a2\7\u023e\2\2\u08a2\u08a3\5\u0438\u021d")
        buf.write("\2\u08a3\u08a8\5\u0084C\2\u08a4\u08a5\7\u026e\2\2\u08a5")
        buf.write("\u08a6\7\u0122\2\2\u08a6\u08a7\7\u00db\2\2\u08a7\u08a9")
        buf.write("\5\u043e\u0220\2\u08a8\u08a4\3\2\2\2\u08a8\u08a9\3\2\2")
        buf.write("\2\u08a9\u08ab\3\2\2\2\u08aa\u08ac\5\u0088E\2\u08ab\u08aa")
        buf.write("\3\2\2\2\u08ab\u08ac\3\2\2\2\u08ac\u0081\3\2\2\2\u08ad")
        buf.write("\u08ae\7\u025f\2\2\u08ae\u08af\7\u023e\2\2\u08af\u08b0")
        buf.write("\5\u0438\u021d\2\u08b0\u08b1\7\6\2\2\u08b1\u08b3\5\u0086")
        buf.write("D\2\u08b2\u08b4\5> \2\u08b3\u08b2\3\2\2\2\u08b3\u08b4")
        buf.write("\3\2\2\2\u08b4\u0083\3\2\2\2\u08b5\u08b8\6C!\2\u08b6\u08b7")
        buf.write("\7\6\2\2\u08b7\u08b9\5\u0086D\2\u08b8\u08b6\3\2\2\2\u08b8")
        buf.write("\u08b9\3\2\2\2\u08b9\u08bd\3\2\2\2\u08ba\u08bb\7\6\2\2")
        buf.write("\u08bb\u08bd\5\u0086D\2\u08bc\u08b5\3\2\2\2\u08bc\u08ba")
        buf.write("\3\2\2\2\u08bd\u0085\3\2\2\2\u08be\u08bf\7q\2\2\u08bf")
        buf.write("\u08c0\5\u048c\u0247\2\u08c0\u0087\3\2\2\2\u08c1\u08c8")
        buf.write("\5\u008aF\2\u08c2\u08c4\7\u0307\2\2\u08c3\u08c2\3\2\2")
        buf.write("\2\u08c3\u08c4\3\2\2\2\u08c4\u08c5\3\2\2\2\u08c5\u08c7")
        buf.write("\5\u008aF\2\u08c6\u08c3\3\2\2\2\u08c7\u08ca\3\2\2\2\u08c8")
        buf.write("\u08c6\3\2\2\2\u08c8\u08c9\3\2\2\2\u08c9\u0089\3\2\2\2")
        buf.write("\u08ca\u08c8\3\2\2\2\u08cb\u08d8\5\u008cG\2\u08cc\u08d8")
        buf.write("\5\u0090I\2\u08cd\u08d8\5\u0092J\2\u08ce\u08d8\5\u0094")
        buf.write("K\2\u08cf\u08d8\5\u0096L\2\u08d0\u08d8\5\u0098M\2\u08d1")
        buf.write("\u08d8\5\u009aN\2\u08d2\u08d8\5\u009cO\2\u08d3\u08d4\6")
        buf.write("F\"\2\u08d4\u08d8\5\u009eP\2\u08d5\u08d6\6F#\2\u08d6\u08d8")
        buf.write("\5\u00a0Q\2\u08d7\u08cb\3\2\2\2\u08d7\u08cc\3\2\2\2\u08d7")
        buf.write("\u08cd\3\2\2\2\u08d7\u08ce\3\2\2\2\u08d7\u08cf\3\2\2\2")
        buf.write("\u08d7\u08d0\3\2\2\2\u08d7\u08d1\3\2\2\2\u08d7\u08d2\3")
        buf.write("\2\2\2\u08d7\u08d3\3\2\2\2\u08d7\u08d5\3\2\2\2\u08d8\u008b")
        buf.write("\3\2\2\2\u08d9\u08db\7\u00f0\2\2\u08da\u08dc\7\u02f0\2")
        buf.write("\2\u08db\u08da\3\2\2\2\u08db\u08dc\3\2\2\2\u08dc\u08dd")
        buf.write("\3\2\2\2\u08dd\u08de\5\u04a6\u0254\2\u08de\u008d\3\2\2")
        buf.write("\2\u08df\u08e1\t\16\2\2\u08e0\u08e2\7\u02f0\2\2\u08e1")
        buf.write("\u08e0\3\2\2\2\u08e1\u08e2\3\2\2\2\u08e2\u08e3\3\2\2\2")
        buf.write("\u08e3\u08e4\5\u04a6\u0254\2\u08e4\u008f\3\2\2\2\u08e5")
        buf.write("\u08e7\7\31\2\2\u08e6\u08e8\7\u02f0\2\2\u08e7\u08e6\3")
        buf.write("\2\2\2\u08e7\u08e8\3\2\2\2\u08e8\u08e9\3\2\2\2\u08e9\u08ea")
        buf.write("\5\u04a6\u0254\2\u08ea\u0091\3\2\2\2\u08eb\u08ed\7\u0146")
        buf.write("\2\2\u08ec\u08ee\7\u02f0\2\2\u08ed\u08ec\3\2\2\2\u08ed")
        buf.write("\u08ee\3\2\2\2\u08ee\u08ef\3\2\2\2\u08ef\u08f0\5\u04a6")
        buf.write("\u0254\2\u08f0\u0093\3\2\2\2\u08f1\u08f3\7\u00b7\2\2\u08f2")
        buf.write("\u08f4\7\u02f0\2\2\u08f3\u08f2\3\2\2\2\u08f3\u08f4\3\2")
        buf.write("\2\2\u08f4\u08f5\3\2\2\2\u08f5\u08f6\5\u04a6\u0254\2\u08f6")
        buf.write("\u0095\3\2\2\2\u08f7\u08f9\7\u0172\2\2\u08f8\u08fa\7\u02f0")
        buf.write("\2\2\u08f9\u08f8\3\2\2\2\u08f9\u08fa\3\2\2\2\u08fa\u08fb")
        buf.write("\3\2\2\2\u08fb\u08fc\5\u047a\u023e\2\u08fc\u0097\3\2\2")
        buf.write("\2\u08fd\u08ff\7\u022b\2\2\u08fe\u08fd\3\2\2\2\u08fe\u08ff")
        buf.write("\3\2\2\2\u08ff\u0900\3\2\2\2\u0900\u0902\7\u00a5\2\2\u0901")
        buf.write("\u0903\7\u02f0\2\2\u0902\u0901\3\2\2\2\u0902\u0903\3\2")
        buf.write("\2\2\u0903\u0904\3\2\2\2\u0904\u0905\5\u044a\u0226\2\u0905")
        buf.write("\u0099\3\2\2\2\u0906\u0907\t\17\2\2\u0907\u009b\3\2\2")
        buf.write("\2\u0908\u090a\7M\2\2\u0909\u090b\7\u02f0\2\2\u090a\u0909")
        buf.write("\3\2\2\2\u090a\u090b\3\2\2\2\u090b\u090c\3\2\2\2\u090c")
        buf.write("\u090d\5\u048c\u0247\2\u090d\u009d\3\2\2\2\u090e\u0910")
        buf.write("\7\u00bf\2\2\u090f\u0911\7\u02f0\2\2\u0910\u090f\3\2\2")
        buf.write("\2\u0910\u0911\3\2\2\2\u0911\u0912\3\2\2\2\u0912\u0913")
        buf.write("\5\u04a6\u0254\2\u0913\u009f\3\2\2\2\u0914\u0916\7\u00a0")
        buf.write("\2\2\u0915\u0917\7\u02f0\2\2\u0916\u0915\3\2\2\2\u0916")
        buf.write("\u0917\3\2\2\2\u0917\u0918\3\2\2\2\u0918\u0919\5\u0486")
        buf.write("\u0244\2\u0919\u00a1\3\2\2\2\u091a\u091c\5\u00a4S\2\u091b")
        buf.write("\u091a\3\2\2\2\u091b\u091c\3\2\2\2\u091c\u091e\3\2\2\2")
        buf.write("\u091d\u091f\5\u03d4\u01eb\2\u091e\u091d\3\2\2\2\u091e")
        buf.write("\u091f\3\2\2\2\u091f\u0921\3\2\2\2\u0920\u0922\5\u00a8")
        buf.write("U\2\u0921\u0920\3\2\2\2\u0921\u0922\3\2\2\2\u0922\u0923")
        buf.write("\3\2\2\2\u0923\u0924\7\u027e\2\2\u0924\u0925\5\u0434\u021b")
        buf.write("\2\u0925\u0926\5J&\2\u0926\u00a3\3\2\2\2\u0927\u0928\7")
        buf.write("\u018c\2\2\u0928\u092a\7\u01cc\2\2\u0929\u092b\5\u00a6")
        buf.write("T\2\u092a\u0929\3\2\2\2\u092a\u092b\3\2\2\2\u092b\u092e")
        buf.write("\3\2\2\2\u092c\u092e\5\u00a6T\2\u092d\u0927\3\2\2\2\u092d")
        buf.write("\u092c\3\2\2\2\u092e\u00a5\3\2\2\2\u092f\u0930\7\13\2")
        buf.write("\2\u0930\u0931\7\u02f0\2\2\u0931\u0932\t\20\2\2\u0932")
        buf.write("\u00a7\3\2\2\2\u0933\u0934\7\u021b\2\2\u0934\u0935\7\u01f2")
        buf.write("\2\2\u0935\u0936\t\f\2\2\u0936\u00a9\3\2\2\2\u0937\u0939")
        buf.write("\5\u03d4\u01eb\2\u0938\u0937\3\2\2\2\u0938\u0939\3\2\2")
        buf.write("\2\u0939\u093a\3\2\2\2\u093a\u093b\7\u0254\2\2\u093b\u093c")
        buf.write("\5\u0430\u0219\2\u093c\u093d\t\21\2\2\u093d\u093e\t\22")
        buf.write("\2\2\u093e\u093f\7\u0181\2\2\u093f\u0940\5\u0452\u022a")
        buf.write("\2\u0940\u0941\7\u00ca\2\2\u0941\u0942\7\u009b\2\2\u0942")
        buf.write("\u0944\7\u01e9\2\2\u0943\u0945\5\u00acW\2\u0944\u0943")
        buf.write("\3\2\2\2\u0944\u0945\3\2\2\2\u0945\u0946\3\2\2\2\u0946")
        buf.write("\u0947\5\u0314\u018b\2\u0947\u00ab\3\2\2\2\u0948\u0949")
        buf.write("\6W$\2\u0949\u094a\t\23\2\2\u094a\u094b\5\u04a0\u0251")
        buf.write("\2\u094b\u00ad\3\2\2\2\u094c\u094e\5\u03d4\u01eb\2\u094d")
        buf.write("\u094c\3\2\2\2\u094d\u094e\3\2\2\2\u094e\u094f\3\2\2\2")
        buf.write("\u094f\u0951\7\u00ac\2\2\u0950\u0952\5\u03d8\u01ed\2\u0951")
        buf.write("\u0950\3\2\2\2\u0951\u0952\3\2\2\2\u0952\u0953\3\2\2\2")
        buf.write("\u0953\u0954\5\u0440\u0221\2\u0954\u0955\7\u0181\2\2\u0955")
        buf.write("\u0956\7\u01ec\2\2\u0956\u095d\5\u0362\u01b2\2\u0957\u0958")
        buf.write("\7\u0181\2\2\u0958\u095a\7Q\2\2\u0959\u095b\7\u0175\2")
        buf.write("\2\u095a\u0959\3\2\2\2\u095a\u095b\3\2\2\2\u095b\u095c")
        buf.write("\3\2\2\2\u095c\u095e\7\u01a4\2\2\u095d\u0957\3\2\2\2\u095d")
        buf.write("\u095e\3\2\2\2\u095e\u0965\3\2\2\2\u095f\u0966\7\u009e")
        buf.write("\2\2\u0960\u0963\7\u008e\2\2\u0961\u0962\7\u0181\2\2\u0962")
        buf.write("\u0964\7\u0204\2\2\u0963\u0961\3\2\2\2\u0963\u0964\3\2")
        buf.write("\2\2\u0964\u0966\3\2\2\2\u0965\u095f\3\2\2\2\u0965\u0960")
        buf.write("\3\2\2\2\u0965\u0966\3\2\2\2\u0966\u0969\3\2\2\2\u0967")
        buf.write("\u0968\7M\2\2\u0968\u096a\5\u048c\u0247\2\u0969\u0967")
        buf.write("\3\2\2\2\u0969\u096a\3\2\2\2\u096a\u096b\3\2\2\2\u096b")
        buf.write("\u096c\7\u0095\2\2\u096c\u096d\5\u0314\u018b\2\u096d\u00af")
        buf.write("\3\2\2\2\u096e\u0970\7\u0295\2\2\u096f\u0971\5\u03d8\u01ed")
        buf.write("\2\u0970\u096f\3\2\2\2\u0970\u0971\3\2\2\2\u0971\u0972")
        buf.write("\3\2\2\2\u0972\u0973\5\u0234\u011b\2\u0973\u00b1\3\2\2")
        buf.write("\2\u0974\u0975\7\u018c\2\2\u0975\u0976\7\u01cc\2\2\u0976")
        buf.write("\u0977\7\u020d\2\2\u0977\u0978\7\u02d0\2\2\u0978\u0979")
        buf.write("\7\u02c8\2\2\u0979\u097d\5\u047e\u0240\2\u097a\u097c\5")
        buf.write("\u00b4[\2\u097b\u097a\3\2\2\2\u097c\u097f\3\2\2\2\u097d")
        buf.write("\u097b\3\2\2\2\u097d\u097e\3\2\2\2\u097e\u098e\3\2\2\2")
        buf.write("\u097f\u097d\3\2\2\2\u0980\u0981\7\u020d\2\2\u0981\u0982")
        buf.write("\7\u02d0\2\2\u0982\u0984\7\u02c8\2\2\u0983\u0985\5\u03d8")
        buf.write("\u01ed\2\u0984\u0983\3\2\2\2\u0984\u0985\3\2\2\2\u0985")
        buf.write("\u0986\3\2\2\2\u0986\u098a\5\u047e\u0240\2\u0987\u0989")
        buf.write("\5\u00b4[\2\u0988\u0987\3\2\2\2\u0989\u098c\3\2\2\2\u098a")
        buf.write("\u0988\3\2\2\2\u098a\u098b\3\2\2\2\u098b\u098e\3\2\2\2")
        buf.write("\u098c\u098a\3\2\2\2\u098d\u0974\3\2\2\2\u098d\u0980\3")
        buf.write("\2\2\2\u098e\u00b3\3\2\2\2\u098f\u0990\7\u0167\2\2\u0990")
        buf.write("\u0991\7\u0246\2\2\u0991\u099f\5\u048e\u0248\2\u0992\u0993")
        buf.write("\7\u02cd\2\2\u0993\u0994\7\u0246\2\2\u0994\u099f\5\u048e")
        buf.write("\u0248\2\u0995\u0996\7\u02cf\2\2\u0996\u0997\5\u048e\u0248")
        buf.write("\2\u0997\u0998\7\u00e8\2\2\u0998\u0999\7/\2\2\u0999\u099a")
        buf.write("\5\u047e\u0240\2\u099a\u099f\3\2\2\2\u099b\u099c\7\u02ce")
        buf.write("\2\2\u099c\u099d\7\u0246\2\2\u099d\u099f\5\u048e\u0248")
        buf.write("\2\u099e\u098f\3\2\2\2\u099e\u0992\3\2\2\2\u099e\u0995")
        buf.write("\3\2\2\2\u099e\u099b\3\2\2\2\u099f\u00b5\3\2\2\2\u09a0")
        buf.write("\u09b2\7\u0096\2\2\u09a1\u09b3\5\u00b8]\2\u09a2\u09b3")
        buf.write("\5\u00ba^\2\u09a3\u09b3\5\u00bc_\2\u09a4\u09b3\5\u00be")
        buf.write("`\2\u09a5\u09b3\5\u00c0a\2\u09a6\u09b3\5\u00c2b\2\u09a7")
        buf.write("\u09b3\5\u00c6d\2\u09a8\u09b3\5\u00c8e\2\u09a9\u09b3\5")
        buf.write("\u00caf\2\u09aa\u09b3\5\u00ccg\2\u09ab\u09b3\5\u00ceh")
        buf.write("\2\u09ac\u09ad\6\\%\2\u09ad\u09b3\5\u00d0i\2\u09ae\u09af")
        buf.write("\6\\&\2\u09af\u09b3\5\u00d2j\2\u09b0\u09b1\6\\\'\2\u09b1")
        buf.write("\u09b3\5\u00d4k\2\u09b2\u09a1\3\2\2\2\u09b2\u09a2\3\2")
        buf.write("\2\2\u09b2\u09a3\3\2\2\2\u09b2\u09a4\3\2\2\2\u09b2\u09a5")
        buf.write("\3\2\2\2\u09b2\u09a6\3\2\2\2\u09b2\u09a7\3\2\2\2\u09b2")
        buf.write("\u09a8\3\2\2\2\u09b2\u09a9\3\2\2\2\u09b2\u09aa\3\2\2\2")
        buf.write("\u09b2\u09ab\3\2\2\2\u09b2\u09ac\3\2\2\2\u09b2\u09ae\3")
        buf.write("\2\2\2\u09b2\u09b0\3\2\2\2\u09b3\u00b7\3\2\2\2\u09b4\u09b6")
        buf.write("\7o\2\2\u09b5\u09b7\5\u03d6\u01ec\2\u09b6\u09b5\3\2\2")
        buf.write("\2\u09b6\u09b7\3\2\2\2\u09b7\u09b8\3\2\2\2\u09b8\u09b9")
        buf.write("\5\u0426\u0214\2\u09b9\u00b9\3\2\2\2\u09ba\u09bc\7\u00ac")
        buf.write("\2\2\u09bb\u09bd\5\u03d6\u01ec\2\u09bc\u09bb\3\2\2\2\u09bc")
        buf.write("\u09bd\3\2\2\2\u09bd\u09be\3\2\2\2\u09be\u09bf\5\u0442")
        buf.write("\u0222\2\u09bf\u00bb\3\2\2\2\u09c0\u09c2\7\u00d0\2\2\u09c1")
        buf.write("\u09c3\5\u03d6\u01ec\2\u09c2\u09c1\3\2\2\2\u09c2\u09c3")
        buf.write("\3\2\2\2\u09c3\u09c4\3\2\2\2\u09c4\u09c5\5\u042e\u0218")
        buf.write("\2\u09c5\u00bd\3\2\2\2\u09c6\u09c8\7\u01a8\2\2\u09c7\u09c9")
        buf.write("\5\u03d6\u01ec\2\u09c8\u09c7\3\2\2\2\u09c8\u09c9\3\2\2")
        buf.write("\2\u09c9\u09ca\3\2\2\2\u09ca\u09cb\5\u042a\u0216\2\u09cb")
        buf.write("\u00bf\3\2\2\2\u09cc\u09ce\5\u040c\u0207\2\u09cd\u09cc")
        buf.write("\3\2\2\2\u09cd\u09ce\3\2\2\2\u09ce\u09cf\3\2\2\2\u09cf")
        buf.write("\u09d0\7\u00ee\2\2\u09d0\u09d1\5\u0420\u0211\2\u09d1\u09d2")
        buf.write("\7\u0181\2\2\u09d2\u09d4\5\u0452\u022a\2\u09d3\u09d5\5")
        buf.write("\62\32\2\u09d4\u09d3\3\2\2\2\u09d4\u09d5\3\2\2\2\u09d5")
        buf.write("\u00c1\3\2\2\2\u09d6\u09d7\7\u0122\2\2\u09d7\u09d8\7\u00db")
        buf.write("\2\2\u09d8\u09e3\5\u043e\u0220\2\u09d9\u09e0\5\u00c4c")
        buf.write("\2\u09da\u09dc\7\u0307\2\2\u09db\u09da\3\2\2\2\u09db\u09dc")
        buf.write("\3\2\2\2\u09dc\u09dd\3\2\2\2\u09dd\u09df\5\u00c4c\2\u09de")
        buf.write("\u09db\3\2\2\2\u09df\u09e2\3\2\2\2\u09e0\u09de\3\2\2\2")
        buf.write("\u09e0\u09e1\3\2\2\2\u09e1\u09e4\3\2\2\2\u09e2\u09e0\3")
        buf.write("\2\2\2\u09e3\u09d9\3\2\2\2\u09e3\u09e4\3\2\2\2\u09e4\u00c3")
        buf.write("\3\2\2\2\u09e5\u09e8\5\u009aN\2\u09e6\u09e8\5\u0098M\2")
        buf.write("\u09e7\u09e5\3\2\2\2\u09e7\u09e6\3\2\2\2\u09e8\u00c5\3")
        buf.write("\2\2\2\u09e9\u09eb\7\u01f9\2\2\u09ea\u09ec\5\u03d6\u01ec")
        buf.write("\2\u09eb\u09ea\3\2\2\2\u09eb\u09ec\3\2\2\2\u09ec\u09ed")
        buf.write("\3\2\2\2\u09ed\u09ee\5\u0448\u0225\2\u09ee\u00c7\3\2\2")
        buf.write("\2\u09ef\u09f1\7\u0243\2\2\u09f0\u09ef\3\2\2\2\u09f0\u09f1")
        buf.write("\3\2\2\2\u09f1\u09f2\3\2\2\2\u09f2\u09f4\t\24\2\2\u09f3")
        buf.write("\u09f5\5\u03d6\u01ec\2\u09f4\u09f3\3\2\2\2\u09f4\u09f5")
        buf.write("\3\2\2\2\u09f5\u09f6\3\2\2\2\u09f6\u09f8\5\u0454\u022b")
        buf.write("\2\u09f7\u09f9\t\4\2\2\u09f8\u09f7\3\2\2\2\u09f8\u09f9")
        buf.write("\3\2\2\2\u09f9\u00c9\3\2\2\2\u09fa\u09fb\7\u023e\2\2\u09fb")
        buf.write("\u0a06\5\u043a\u021e\2\u09fc\u0a03\5\u00c4c\2\u09fd\u09ff")
        buf.write("\7\u0307\2\2\u09fe\u09fd\3\2\2\2\u09fe\u09ff\3\2\2\2\u09ff")
        buf.write("\u0a00\3\2\2\2\u0a00\u0a02\5\u00c4c\2\u0a01\u09fe\3\2")
        buf.write("\2\2\u0a02\u0a05\3\2\2\2\u0a03\u0a01\3\2\2\2\u0a03\u0a04")
        buf.write("\3\2\2\2\u0a04\u0a07\3\2\2\2\u0a05\u0a03\3\2\2\2\u0a06")
        buf.write("\u09fc\3\2\2\2\u0a06\u0a07\3\2\2\2\u0a07\u00cb\3\2\2\2")
        buf.write("\u0a08\u0a0a\7\u0254\2\2\u0a09\u0a0b\5\u03d6\u01ec\2\u0a0a")
        buf.write("\u0a09\3\2\2\2\u0a0a\u0a0b\3\2\2\2\u0a0b\u0a0c\3\2\2\2")
        buf.write("\u0a0c\u0a0d\5\u0432\u021a\2\u0a0d\u00cd\3\2\2\2\u0a0e")
        buf.write("\u0a10\7\u027e\2\2\u0a0f\u0a11\5\u03d6\u01ec\2\u0a10\u0a0f")
        buf.write("\3\2\2\2\u0a10\u0a11\3\2\2\2\u0a11\u0a12\3\2\2\2\u0a12")
        buf.write("\u0a14\5\u03e4\u01f3\2\u0a13\u0a15\t\4\2\2\u0a14\u0a13")
        buf.write("\3\2\2\2\u0a14\u0a15\3\2\2\2\u0a15\u00cf\3\2\2\2\u0a16")
        buf.write("\u0a18\7\u0295\2\2\u0a17\u0a19\5\u03d6\u01ec\2\u0a18\u0a17")
        buf.write("\3\2\2\2\u0a18\u0a19\3\2\2\2\u0a19\u0a1a\3\2\2\2\u0a1a")
        buf.write("\u0a1b\5\u0234\u011b\2\u0a1b\u00d1\3\2\2\2\u0a1c\u0a1d")
        buf.write("\7\u020d\2\2\u0a1d\u0a1e\7\u02d0\2\2\u0a1e\u0a20\7\u02c8")
        buf.write("\2\2\u0a1f\u0a21\5\u03d6\u01ec\2\u0a20\u0a1f\3\2\2\2\u0a20")
        buf.write("\u0a21\3\2\2\2\u0a21\u0a22\3\2\2\2\u0a22\u0a23\5\u047e")
        buf.write("\u0240\2\u0a23\u00d3\3\2\2\2\u0a24\u0a25\7\u025f\2\2\u0a25")
        buf.write("\u0a26\7\u023e\2\2\u0a26\u0a28\5\u043a\u021e\2\u0a27\u0a29")
        buf.write("\5> \2\u0a28\u0a27\3\2\2\2\u0a28\u0a29\3\2\2\2\u0a29\u00d5")
        buf.write("\3\2\2\2\u0a2a\u0a2b\7\u01c7\2\2\u0a2b\u0a2c\t\24\2\2")
        buf.write("\u0a2c\u0a31\5\u00d8m\2\u0a2d\u0a2e\7\u0307\2\2\u0a2e")
        buf.write("\u0a30\5\u00d8m\2\u0a2f\u0a2d\3\2\2\2\u0a30\u0a33\3\2")
        buf.write("\2\2\u0a31\u0a2f\3\2\2\2\u0a31\u0a32\3\2\2\2\u0a32\u00d7")
        buf.write("\3\2\2\2\u0a33\u0a31\3\2\2\2\u0a34\u0a35\5\u0452\u022a")
        buf.write("\2\u0a35\u0a36\7\u0250\2\2\u0a36\u0a37\5\u044c\u0227\2")
        buf.write("\u0a37\u00d9\3\2\2\2\u0a38\u0a3a\7\u0257\2\2\u0a39\u0a3b")
        buf.write("\7\u0240\2\2\u0a3a\u0a39\3\2\2\2\u0a3a\u0a3b\3\2\2\2\u0a3b")
        buf.write("\u0a3c\3\2\2\2\u0a3c\u0a3d\5\u0452\u022a\2\u0a3d\u00db")
        buf.write("\3\2\2\2\u0a3e\u0a3f\7\u00ec\2\2\u0a3f\u0a40\7\u0240\2")
        buf.write("\2\u0a40\u0a41\7\u00cd\2\2\u0a41\u0a42\5\u0490\u0249\2")
        buf.write("\u0a42\u00dd\3\2\2\2\u0a43\u0a44\7\62\2\2\u0a44\u0a4a")
        buf.write("\5\u042a\u0216\2\u0a45\u0a47\7\u030a\2\2\u0a46\u0a48\5")
        buf.write("\u02f8\u017d\2\u0a47\u0a46\3\2\2\2\u0a47\u0a48\3\2\2\2")
        buf.write("\u0a48\u0a49\3\2\2\2\u0a49\u0a4b\7\u030b\2\2\u0a4a\u0a45")
        buf.write("\3\2\2\2\u0a4a\u0a4b\3\2\2\2\u0a4b\u00df\3\2\2\2\u0a4c")
        buf.write("\u0a4d\6q(\2\u0a4d\u0a4f\5\u0144\u00a3\2\u0a4e\u0a4c\3")
        buf.write("\2\2\2\u0a4e\u0a4f\3\2\2\2\u0a4f\u0a50\3\2\2\2\u0a50\u0a54")
        buf.write("\7\u0087\2\2\u0a51\u0a53\5\u00e4s\2\u0a52\u0a51\3\2\2")
        buf.write("\2\u0a53\u0a56\3\2\2\2\u0a54\u0a52\3\2\2\2\u0a54\u0a55")
        buf.write("\3\2\2\2\u0a55\u0a77\3\2\2\2\u0a56\u0a54\3\2\2\2\u0a57")
        buf.write("\u0a6f\7\u00cd\2\2\u0a58\u0a59\5\u0456\u022c\2\u0a59\u0a5a")
        buf.write("\7\u026f\2\2\u0a5a\u0a5c\5\u0152\u00aa\2\u0a5b\u0a5d\5")
        buf.write("\u016a\u00b6\2\u0a5c\u0a5b\3\2\2\2\u0a5c\u0a5d\3\2\2\2")
        buf.write("\u0a5d\u0a70\3\2\2\2\u0a5e\u0a61\5\u0452\u022a\2\u0a5f")
        buf.write("\u0a60\6q)\2\u0a60\u0a62\5\u0192\u00ca\2\u0a61\u0a5f\3")
        buf.write("\2\2\2\u0a61\u0a62\3\2\2\2\u0a62\u0a64\3\2\2\2\u0a63\u0a65")
        buf.write("\5\u00e2r\2\u0a64\u0a63\3\2\2\2\u0a64\u0a65\3\2\2\2\u0a65")
        buf.write("\u0a67\3\2\2\2\u0a66\u0a68\5\u016a\u00b6\2\u0a67\u0a66")
        buf.write("\3\2\2\2\u0a67\u0a68\3\2\2\2\u0a68\u0a6a\3\2\2\2\u0a69")
        buf.write("\u0a6b\5\u014c\u00a7\2\u0a6a\u0a69\3\2\2\2\u0a6a\u0a6b")
        buf.write("\3\2\2\2\u0a6b\u0a6d\3\2\2\2\u0a6c\u0a6e\5\u0122\u0092")
        buf.write("\2\u0a6d\u0a6c\3\2\2\2\u0a6d\u0a6e\3\2\2\2\u0a6e\u0a70")
        buf.write("\3\2\2\2\u0a6f\u0a58\3\2\2\2\u0a6f\u0a5e\3\2\2\2\u0a70")
        buf.write("\u0a78\3\2\2\2\u0a71\u0a72\5\u0456\u022c\2\u0a72\u0a73")
        buf.write("\7\u00cd\2\2\u0a73\u0a75\5\u0152\u00aa\2\u0a74\u0a76\5")
        buf.write("\u016a\u00b6\2\u0a75\u0a74\3\2\2\2\u0a75\u0a76\3\2\2\2")
        buf.write("\u0a76\u0a78\3\2\2\2\u0a77\u0a57\3\2\2\2\u0a77\u0a71\3")
        buf.write("\2\2\2\u0a78\u00e1\3\2\2\2\u0a79\u0a7a\6r*\2\u0a7a\u0a7b")
        buf.write("\7\u0197\2\2\u0a7b\u0a7c\7\u030a\2\2\u0a7c\u0a7d\5\u046e")
        buf.write("\u0238\2\u0a7d\u0a7e\7\u030b\2\2\u0a7e\u00e3\3\2\2\2\u0a7f")
        buf.write("\u0a80\t\25\2\2\u0a80\u00e5\3\2\2\2\u0a81\u0a86\7\u0095")
        buf.write("\2\2\u0a82\u0a83\6t+\2\u0a83\u0a87\5\u02f8\u017d\2\u0a84")
        buf.write("\u0a85\6t,\2\u0a85\u0a87\5\u0164\u00b3\2\u0a86\u0a82\3")
        buf.write("\2\2\2\u0a86\u0a84\3\2\2\2\u0a87\u00e7\3\2\2\2\u0a88\u0a9a")
        buf.write("\7\u00dd\2\2\u0a89\u0a8a\5\u0452\u022a\2\u0a8a\u0a8c\7")
        buf.write("\u0185\2\2\u0a8b\u0a8d\5\u0192\u00ca\2\u0a8c\u0a8b\3\2")
        buf.write("\2\2\u0a8c\u0a8d\3\2\2\2\u0a8d\u0a9b\3\2\2\2\u0a8e\u0a98")
        buf.write("\5\u046c\u0237\2\u0a8f\u0a99\7D\2\2\u0a90\u0a91\7\u01b5")
        buf.write("\2\2\u0a91\u0a93\5\u00eav\2\u0a92\u0a94\5\u016a\u00b6")
        buf.write("\2\u0a93\u0a92\3\2\2\2\u0a93\u0a94\3\2\2\2\u0a94\u0a96")
        buf.write("\3\2\2\2\u0a95\u0a97\5\u0120\u0091\2\u0a96\u0a95\3\2\2")
        buf.write("\2\u0a96\u0a97\3\2\2\2\u0a97\u0a99\3\2\2\2\u0a98\u0a8f")
        buf.write("\3\2\2\2\u0a98\u0a90\3\2\2\2\u0a99\u0a9b\3\2\2\2\u0a9a")
        buf.write("\u0a89\3\2\2\2\u0a9a\u0a8e\3\2\2\2\u0a9b\u00e9\3\2\2\2")
        buf.write("\u0a9c\u0aa7\t\26\2\2\u0a9d\u0aa4\5\u046c\u0237\2\u0a9e")
        buf.write("\u0aa5\t\27\2\2\u0a9f\u0aa0\t\30\2\2\u0aa0\u0aa1\7\u030a")
        buf.write("\2\2\u0aa1\u0aa2\5\u00fa~\2\u0aa2\u0aa3\7\u030b\2\2\u0aa3")
        buf.write("\u0aa5\3\2\2\2\u0aa4\u0a9e\3\2\2\2\u0aa4\u0a9f\3\2\2\2")
        buf.write("\u0aa5\u0aa7\3\2\2\2\u0aa6\u0a9c\3\2\2\2\u0aa6\u0a9d\3")
        buf.write("\2\2\2\u0aa7\u00eb\3\2\2\2\u0aa8\u0aaa\7\u00f4\2\2\u0aa9")
        buf.write("\u0aab\5\u00eex\2\u0aaa\u0aa9\3\2\2\2\u0aaa\u0aab\3\2")
        buf.write("\2\2\u0aab\u0aad\3\2\2\2\u0aac\u0aae\7\u00ea\2\2\u0aad")
        buf.write("\u0aac\3\2\2\2\u0aad\u0aae\3\2\2\2\u0aae\u0ab0\3\2\2\2")
        buf.write("\u0aaf\u0ab1\7\u00fa\2\2\u0ab0\u0aaf\3\2\2\2\u0ab0\u0ab1")
        buf.write("\3\2\2\2\u0ab1\u0ab2\3\2\2\2\u0ab2\u0ab4\5\u0452\u022a")
        buf.write("\2\u0ab3\u0ab5\5\u0410\u0209\2\u0ab4\u0ab3\3\2\2\2\u0ab4")
        buf.write("\u0ab5\3\2\2\2\u0ab5\u0ac2\3\2\2\2\u0ab6\u0ab9\5\u00f0")
        buf.write("y\2\u0ab7\u0ab8\6w-\2\u0ab8\u0aba\5\u00fc\177\2\u0ab9")
        buf.write("\u0ab7\3\2\2\2\u0ab9\u0aba\3\2\2\2\u0aba\u0ac3\3\2\2\2")
        buf.write("\u0abb\u0abc\7\u01fc\2\2\u0abc\u0abf\5\u03e6\u01f4\2\u0abd")
        buf.write("\u0abe\6w.\2\u0abe\u0ac0\5\u00fc\177\2\u0abf\u0abd\3\2")
        buf.write("\2\2\u0abf\u0ac0\3\2\2\2\u0ac0\u0ac3\3\2\2\2\u0ac1\u0ac3")
        buf.write("\5\u00f6|\2\u0ac2\u0ab6\3\2\2\2\u0ac2\u0abb\3\2\2\2\u0ac2")
        buf.write("\u0ac1\3\2\2\2\u0ac3\u0ac5\3\2\2\2\u0ac4\u0ac6\5\u00fe")
        buf.write("\u0080\2\u0ac5\u0ac4\3\2\2\2\u0ac5\u0ac6\3\2\2\2\u0ac6")
        buf.write("\u00ed\3\2\2\2\u0ac7\u0ac8\t\31\2\2\u0ac8\u00ef\3\2\2")
        buf.write("\2\u0ac9\u0acb\7\u030a\2\2\u0aca\u0acc\5\u00f2z\2\u0acb")
        buf.write("\u0aca\3\2\2\2\u0acb\u0acc\3\2\2\2\u0acc\u0acd\3\2\2\2")
        buf.write("\u0acd\u0acf\7\u030b\2\2\u0ace\u0ac9\3\2\2\2\u0ace\u0acf")
        buf.write("\3\2\2\2\u0acf\u0ad0\3\2\2\2\u0ad0\u0ad1\5\u00f4{\2\u0ad1")
        buf.write("\u00f1\3\2\2\2\u0ad2\u0ad7\5\u041c\u020f\2\u0ad3\u0ad4")
        buf.write("\7\u0307\2\2\u0ad4\u0ad6\5\u041c\u020f\2\u0ad5\u0ad3\3")
        buf.write("\2\2\2\u0ad6\u0ad9\3\2\2\2\u0ad7\u0ad5\3\2\2\2\u0ad7\u0ad8")
        buf.write("\3\2\2\2\u0ad8\u00f3\3\2\2\2\u0ad9\u0ad7\3\2\2\2\u0ada")
        buf.write("\u0adb\t\32\2\2\u0adb\u0adc\5\u00f8}\2\u0adc\u00f5\3\2")
        buf.write("\2\2\u0add\u0ae5\5^\60\2\u0ade\u0ae0\7\u030a\2\2\u0adf")
        buf.write("\u0ae1\5\u00f2z\2\u0ae0\u0adf\3\2\2\2\u0ae0\u0ae1\3\2")
        buf.write("\2\2\u0ae1\u0ae2\3\2\2\2\u0ae2\u0ae3\7\u030b\2\2\u0ae3")
        buf.write("\u0ae5\5^\60\2\u0ae4\u0add\3\2\2\2\u0ae4\u0ade\3\2\2\2")
        buf.write("\u0ae5\u00f7\3\2\2\2\u0ae6\u0ae8\7\u030a\2\2\u0ae7\u0ae9")
        buf.write("\5\u00fa~\2\u0ae8\u0ae7\3\2\2\2\u0ae8\u0ae9\3\2\2\2\u0ae9")
        buf.write("\u0aea\3\2\2\2\u0aea\u0af3\7\u030b\2\2\u0aeb\u0aec\7\u0307")
        buf.write("\2\2\u0aec\u0aee\7\u030a\2\2\u0aed\u0aef\5\u00fa~\2\u0aee")
        buf.write("\u0aed\3\2\2\2\u0aee\u0aef\3\2\2\2\u0aef\u0af0\3\2\2\2")
        buf.write("\u0af0\u0af2\7\u030b\2\2\u0af1\u0aeb\3\2\2\2\u0af2\u0af5")
        buf.write("\3\2\2\2\u0af3\u0af1\3\2\2\2\u0af3\u0af4\3\2\2\2\u0af4")
        buf.write("\u00f9\3\2\2\2\u0af5\u0af3\3\2\2\2\u0af6\u0af9\5\u02a8")
        buf.write("\u0155\2\u0af7\u0af9\7\u0082\2\2\u0af8\u0af6\3\2\2\2\u0af8")
        buf.write("\u0af7\3\2\2\2\u0af9\u0b01\3\2\2\2\u0afa\u0afd\7\u0307")
        buf.write("\2\2\u0afb\u0afe\5\u02a8\u0155\2\u0afc\u0afe\7\u0082\2")
        buf.write("\2\u0afd\u0afb\3\2\2\2\u0afd\u0afc\3\2\2\2\u0afe\u0b00")
        buf.write("\3\2\2\2\u0aff\u0afa\3\2\2\2\u0b00\u0b03\3\2\2\2\u0b01")
        buf.write("\u0aff\3\2\2\2\u0b01\u0b02\3\2\2\2\u0b02\u00fb\3\2\2\2")
        buf.write("\u0b03\u0b01\3\2\2\2\u0b04\u0b05\7\23\2\2\u0b05\u0b07")
        buf.write("\5\u046c\u0237\2\u0b06\u0b08\5\u0418\u020d\2\u0b07\u0b06")
        buf.write("\3\2\2\2\u0b07\u0b08\3\2\2\2\u0b08\u00fd\3\2\2\2\u0b09")
        buf.write("\u0b0a\7\u0181\2\2\u0b0a\u0b0b\7\u0099\2\2\u0b0b\u0b0c")
        buf.write("\7\u010b\2\2\u0b0c\u0b0d\7\u0268\2\2\u0b0d\u0b0e\5\u03e6")
        buf.write("\u01f4\2\u0b0e\u00ff\3\2\2\2\u0b0f\u0b10\7\u011b\2\2\u0b10")
        buf.write("\u0b12\5\u0102\u0082\2\u0b11\u0b13\t\33\2\2\u0b12\u0b11")
        buf.write("\3\2\2\2\u0b12\u0b13\3\2\2\2\u0b13\u0b15\3\2\2\2\u0b14")
        buf.write("\u0b16\7\u011e\2\2\u0b15\u0b14\3\2\2\2\u0b15\u0b16\3\2")
        buf.write("\2\2\u0b16\u0b17\3\2\2\2\u0b17\u0b18\7\u00ef\2\2\u0b18")
        buf.write("\u0b1a\5\u048c\u0247\2\u0b19\u0b1b\t\n\2\2\u0b1a\u0b19")
        buf.write("\3\2\2\2\u0b1a\u0b1b\3\2\2\2\u0b1b\u0b1c\3\2\2\2\u0b1c")
        buf.write("\u0b1d\7\u00fa\2\2\u0b1d\u0b1e\7\u0240\2\2\u0b1e\u0b20")
        buf.write("\5\u0452\u022a\2\u0b1f\u0b21\5\u0410\u0209\2\u0b20\u0b1f")
        buf.write("\3\2\2\2\u0b20\u0b21\3\2\2\2\u0b21\u0b23\3\2\2\2\u0b22")
        buf.write("\u0b24\5\u03ea\u01f6\2\u0b23\u0b22\3\2\2\2\u0b23\u0b24")
        buf.write("\3\2\2\2\u0b24\u0b26\3\2\2\2\u0b25\u0b27\5\u0104\u0083")
        buf.write("\2\u0b26\u0b25\3\2\2\2\u0b26\u0b27\3\2\2\2\u0b27\u0b29")
        buf.write("\3\2\2\2\u0b28\u0b2a\5\u03ec\u01f7\2\u0b29\u0b28\3\2\2")
        buf.write("\2\u0b29\u0b2a\3\2\2\2\u0b2a\u0b2c\3\2\2\2\u0b2b\u0b2d")
        buf.write("\5\u03f0\u01f9\2\u0b2c\u0b2b\3\2\2\2\u0b2c\u0b2d\3\2\2")
        buf.write("\2\u0b2d\u0b2e\3\2\2\2\u0b2e\u0b2f\5\u0106\u0084\2\u0b2f")
        buf.write("\u0101\3\2\2\2\u0b30\u0b31\t\34\2\2\u0b31\u0103\3\2\2")
        buf.write("\2\u0b32\u0b33\7\u01e6\2\2\u0b33\u0b34\7\u00e8\2\2\u0b34")
        buf.write("\u0b35\7/\2\2\u0b35\u0b36\5\u0488\u0245\2\u0b36\u0105")
        buf.write("\3\2\2\2\u0b37\u0b38\7\u00ea\2\2\u0b38\u0b39\7\u02ed\2")
        buf.write("\2\u0b39\u0b3b\t\35\2\2\u0b3a\u0b37\3\2\2\2\u0b3a\u0b3b")
        buf.write("\3\2\2\2\u0b3b\u0b3d\3\2\2\2\u0b3c\u0b3e\5\u0108\u0085")
        buf.write("\2\u0b3d\u0b3c\3\2\2\2\u0b3d\u0b3e\3\2\2\2\u0b3e\u0b41")
        buf.write("\3\2\2\2\u0b3f\u0b40\7\u01fc\2\2\u0b40\u0b42\5\u03e6\u01f4")
        buf.write("\2\u0b41\u0b3f\3\2\2\2\u0b41\u0b42\3\2\2\2\u0b42\u0107")
        buf.write("\3\2\2\2\u0b43\u0b45\7\u030a\2\2\u0b44\u0b46\5\u010a\u0086")
        buf.write("\2\u0b45\u0b44\3\2\2\2\u0b45\u0b46\3\2\2\2\u0b46\u0b47")
        buf.write("\3\2\2\2\u0b47\u0b48\7\u030b\2\2\u0b48\u0109\3\2\2\2\u0b49")
        buf.write("\u0b4c\5\u041a\u020e\2\u0b4a\u0b4c\5\u02ea\u0176\2\u0b4b")
        buf.write("\u0b49\3\2\2\2\u0b4b\u0b4a\3\2\2\2\u0b4c\u0b54\3\2\2\2")
        buf.write("\u0b4d\u0b50\7\u0307\2\2\u0b4e\u0b51\5\u041a\u020e\2\u0b4f")
        buf.write("\u0b51\5\u02ea\u0176\2\u0b50\u0b4e\3\2\2\2\u0b50\u0b4f")
        buf.write("\3\2\2\2\u0b51\u0b53\3\2\2\2\u0b52\u0b4d\3\2\2\2\u0b53")
        buf.write("\u0b56\3\2\2\2\u0b54\u0b52\3\2\2\2\u0b54\u0b55\3\2\2\2")
        buf.write("\u0b55\u010b\3\2\2\2\u0b56\u0b54\3\2\2\2\u0b57\u0b59\7")
        buf.write("\u01cc\2\2\u0b58\u0b5a\t\36\2\2\u0b59\u0b58\3\2\2\2\u0b59")
        buf.write("\u0b5a\3\2\2\2\u0b5a\u0b5c\3\2\2\2\u0b5b\u0b5d\7\u00fa")
        buf.write("\2\2\u0b5c\u0b5b\3\2\2\2\u0b5c\u0b5d\3\2\2\2\u0b5d\u0b5e")
        buf.write("\3\2\2\2\u0b5e\u0b60\5\u0452\u022a\2\u0b5f\u0b61\5\u0410")
        buf.write("\u0209\2\u0b60\u0b5f\3\2\2\2\u0b60\u0b61\3\2\2\2\u0b61")
        buf.write("\u0b66\3\2\2\2\u0b62\u0b67\5\u00f0y\2\u0b63\u0b64\7\u01fc")
        buf.write("\2\2\u0b64\u0b67\5\u03e6\u01f4\2\u0b65\u0b67\5\u00f6|")
        buf.write("\2\u0b66\u0b62\3\2\2\2\u0b66\u0b63\3\2\2\2\u0b66\u0b65")
        buf.write("\3\2\2\2\u0b67\u010d\3\2\2\2\u0b68\u0b6a\5\u0112\u008a")
        buf.write("\2\u0b69\u0b6b\5\u015c\u00af\2\u0b6a\u0b69\3\2\2\2\u0b6a")
        buf.write("\u0b6b\3\2\2\2\u0b6b\u0b6f\3\2\2\2\u0b6c\u0b6f\5\u0116")
        buf.write("\u008c\2\u0b6d\u0b6f\5\u0110\u0089\2\u0b6e\u0b68\3\2\2")
        buf.write("\2\u0b6e\u0b6c\3\2\2\2\u0b6e\u0b6d\3\2\2\2\u0b6f\u010f")
        buf.write("\3\2\2\2\u0b70\u0b71\7\u030a\2\2\u0b71\u0b72\5\u0110\u0089")
        buf.write("\2\u0b72\u0b73\7\u030b\2\2\u0b73\u0b7d\3\2\2\2\u0b74\u0b75")
        buf.write("\5\u0112\u008a\2\u0b75\u0b77\5\u0128\u0095\2\u0b76\u0b78")
        buf.write("\5\u015c\u00af\2\u0b77\u0b76\3\2\2\2\u0b77\u0b78\3\2\2")
        buf.write("\2\u0b78\u0b7d\3\2\2\2\u0b79\u0b7a\5\u015c\u00af\2\u0b7a")
        buf.write("\u0b7b\5\u0128\u0095\2\u0b7b\u0b7d\3\2\2\2\u0b7c\u0b70")
        buf.write("\3\2\2\2\u0b7c\u0b74\3\2\2\2\u0b7c\u0b79\3\2\2\2\u0b7d")
        buf.write("\u0111\3\2\2\2\u0b7e\u0b7f\6\u008a/\2\u0b7f\u0b81\5\u0144")
        buf.write("\u00a3\2\u0b80\u0b7e\3\2\2\2\u0b80\u0b81\3\2\2\2\u0b81")
        buf.write("\u0b90\3\2\2\2\u0b82\u0b84\5\u0114\u008b\2\u0b83\u0b85")
        buf.write("\5\u014c\u00a7\2\u0b84\u0b83\3\2\2\2\u0b84\u0b85\3\2\2")
        buf.write("\2\u0b85\u0b87\3\2\2\2\u0b86\u0b88\5\u0120\u0091\2\u0b87")
        buf.write("\u0b86\3\2\2\2\u0b87\u0b88\3\2\2\2\u0b88\u0b91\3\2\2\2")
        buf.write("\u0b89\u0b8b\5\u0116\u008c\2\u0b8a\u0b8c\5\u014c\u00a7")
        buf.write("\2\u0b8b\u0b8a\3\2\2\2\u0b8b\u0b8c\3\2\2\2\u0b8c\u0b8e")
        buf.write("\3\2\2\2\u0b8d\u0b8f\5\u0120\u0091\2\u0b8e\u0b8d\3\2\2")
        buf.write("\2\u0b8e\u0b8f\3\2\2\2\u0b8f\u0b91\3\2\2\2\u0b90\u0b82")
        buf.write("\3\2\2\2\u0b90\u0b89\3\2\2\2\u0b91\u0b94\3\2\2\2\u0b92")
        buf.write("\u0b93\6\u008a\60\2\u0b93\u0b95\5\u012a\u0096\2\u0b94")
        buf.write("\u0b92\3\2\2\2\u0b94\u0b95\3\2\2\2\u0b95\u0113\3\2\2\2")
        buf.write("\u0b96\u0ba1\5\u0118\u008d\2\u0b97\u0b98\5\u0116\u008c")
        buf.write("\2\u0b98\u0b9a\7\u0262\2\2\u0b99\u0b9b\5\u0190\u00c9\2")
        buf.write("\u0b9a\u0b99\3\2\2\2\u0b9a\u0b9b\3\2\2\2\u0b9b\u0b9e\3")
        buf.write("\2\2\2\u0b9c\u0b9f\5\u0118\u008d\2\u0b9d\u0b9f\5\u0116")
        buf.write("\u008c\2\u0b9e\u0b9c\3\2\2\2\u0b9e\u0b9d\3\2\2\2\u0b9f")
        buf.write("\u0ba1\3\2\2\2\u0ba0\u0b96\3\2\2\2\u0ba0\u0b97\3\2\2\2")
        buf.write("\u0ba1\u0bac\3\2\2\2\u0ba2\u0ba4\7\u0262\2\2\u0ba3\u0ba5")
        buf.write("\5\u0190\u00c9\2\u0ba4\u0ba3\3\2\2\2\u0ba4\u0ba5\3\2\2")
        buf.write("\2\u0ba5\u0ba8\3\2\2\2\u0ba6\u0ba9\5\u0118\u008d\2\u0ba7")
        buf.write("\u0ba9\5\u0116\u008c\2\u0ba8\u0ba6\3\2\2\2\u0ba8\u0ba7")
        buf.write("\3\2\2\2\u0ba9\u0bab\3\2\2\2\u0baa\u0ba2\3\2\2\2\u0bab")
        buf.write("\u0bae\3\2\2\2\u0bac\u0baa\3\2\2\2\u0bac\u0bad\3\2\2\2")
        buf.write("\u0bad\u0115\3\2\2\2\u0bae\u0bac\3\2\2\2\u0baf\u0bb5\7")
        buf.write("\u030a\2\2\u0bb0\u0bb6\5\u0116\u008c\2\u0bb1\u0bb3\5\u0112")
        buf.write("\u008a\2\u0bb2\u0bb4\5\u015c\u00af\2\u0bb3\u0bb2\3\2\2")
        buf.write("\2\u0bb3\u0bb4\3\2\2\2\u0bb4\u0bb6\3\2\2\2\u0bb5\u0bb0")
        buf.write("\3\2\2\2\u0bb5\u0bb1\3\2\2\2\u0bb6\u0bb7\3\2\2\2\u0bb7")
        buf.write("\u0bb8\7\u030b\2\2\u0bb8\u0117\3\2\2\2\u0bb9\u0bbf\5\u011a")
        buf.write("\u008e\2\u0bba\u0bbb\6\u008d\61\2\u0bbb\u0bbf\5\u0154")
        buf.write("\u00ab\2\u0bbc\u0bbd\6\u008d\62\2\u0bbd\u0bbf\5\u0156")
        buf.write("\u00ac\2\u0bbe\u0bb9\3\2\2\2\u0bbe\u0bba\3\2\2\2\u0bbe")
        buf.write("\u0bbc\3\2\2\2\u0bbf\u0119\3\2\2\2\u0bc0\u0bc4\7\u01f3")
        buf.write("\2\2\u0bc1\u0bc3\5\u015a\u00ae\2\u0bc2\u0bc1\3\2\2\2\u0bc3")
        buf.write("\u0bc6\3\2\2\2\u0bc4\u0bc2\3\2\2\2\u0bc4\u0bc5\3\2\2\2")
        buf.write("\u0bc5\u0bc7\3\2\2\2\u0bc6\u0bc4\3\2\2\2\u0bc7\u0bc9\5")
        buf.write("\u0164\u00b3\2\u0bc8\u0bca\5\u0128\u0095\2\u0bc9\u0bc8")
        buf.write("\3\2\2\2\u0bc9\u0bca\3\2\2\2\u0bca\u0bcc\3\2\2\2\u0bcb")
        buf.write("\u0bcd\5\u0150\u00a9\2\u0bcc\u0bcb\3\2\2\2\u0bcc\u0bcd")
        buf.write("\3\2\2\2\u0bcd\u0bcf\3\2\2\2\u0bce\u0bd0\5\u016a\u00b6")
        buf.write("\2\u0bcf\u0bce\3\2\2\2\u0bcf\u0bd0\3\2\2\2\u0bd0\u0bd2")
        buf.write("\3\2\2\2\u0bd1\u0bd3\5\u0148\u00a5\2\u0bd2\u0bd1\3\2\2")
        buf.write("\2\u0bd2\u0bd3\3\2\2\2\u0bd3\u0bd5\3\2\2\2\u0bd4\u0bd6")
        buf.write("\5\u012c\u0097\2\u0bd5\u0bd4\3\2\2\2\u0bd5\u0bd6\3\2\2")
        buf.write("\2\u0bd6\u0bd9\3\2\2\2\u0bd7\u0bd8\6\u008e\63\2\u0bd8")
        buf.write("\u0bda\5\u012e\u0098\2\u0bd9\u0bd7\3\2\2\2\u0bd9\u0bda")
        buf.write("\3\2\2\2\u0bda\u011b\3\2\2\2\u0bdb\u0bdc\5\u0116\u008c")
        buf.write("\2\u0bdc\u011d\3\2\2\2\u0bdd\u0bde\t\37\2\2\u0bde\u011f")
        buf.write("\3\2\2\2\u0bdf\u0be0\7\u0116\2\2\u0be0\u0be1\5\u0124\u0093")
        buf.write("\2\u0be1\u0121\3\2\2\2\u0be2\u0be3\7\u0116\2\2\u0be3\u0be4")
        buf.write("\5\u0126\u0094\2\u0be4\u0123\3\2\2\2\u0be5\u0be8\5\u0126")
        buf.write("\u0094\2\u0be6\u0be7\t \2\2\u0be7\u0be9\5\u0126\u0094")
        buf.write("\2\u0be8\u0be6\3\2\2\2\u0be8\u0be9\3\2\2\2\u0be9\u0125")
        buf.write("\3\2\2\2\u0bea\u0bed\5\u046c\u0237\2\u0beb\u0bed\t!\2")
        buf.write("\2\u0bec\u0bea\3\2\2\2\u0bec\u0beb\3\2\2\2\u0bed\u0127")
        buf.write("\3\2\2\2\u0bee\u0c0a\7\u00fa\2\2\u0bef\u0bf0\7\u018e\2")
        buf.write("\2\u0bf0\u0bf2\5\u0486\u0244\2\u0bf1\u0bf3\5\u03ea\u01f6")
        buf.write("\2\u0bf2\u0bf1\3\2\2\2\u0bf2\u0bf3\3\2\2\2\u0bf3\u0bf5")
        buf.write("\3\2\2\2\u0bf4\u0bf6\5\u03ec\u01f7\2\u0bf5\u0bf4\3\2\2")
        buf.write("\2\u0bf5\u0bf6\3\2\2\2\u0bf6\u0bf8\3\2\2\2\u0bf7\u0bf9")
        buf.write("\5\u03f0\u01f9\2\u0bf8\u0bf7\3\2\2\2\u0bf8\u0bf9\3\2\2")
        buf.write("\2\u0bf9\u0c0b\3\2\2\2\u0bfa\u0bfb\7\u0098\2\2\u0bfb\u0c0b")
        buf.write("\5\u0486\u0244\2\u0bfc\u0bff\5\u04a0\u0251\2\u0bfd\u0bff")
        buf.write("\5\u02ea\u0176\2\u0bfe\u0bfc\3\2\2\2\u0bfe\u0bfd\3\2\2")
        buf.write("\2\u0bff\u0c07\3\2\2\2\u0c00\u0c03\7\u0307\2\2\u0c01\u0c04")
        buf.write("\5\u04a0\u0251\2\u0c02\u0c04\5\u02ea\u0176\2\u0c03\u0c01")
        buf.write("\3\2\2\2\u0c03\u0c02\3\2\2\2\u0c04\u0c06\3\2\2\2\u0c05")
        buf.write("\u0c00\3\2\2\2\u0c06\u0c09\3\2\2\2\u0c07\u0c05\3\2\2\2")
        buf.write("\u0c07\u0c08\3\2\2\2\u0c08\u0c0b\3\2\2\2\u0c09\u0c07\3")
        buf.write("\2\2\2\u0c0a\u0bef\3\2\2\2\u0c0a\u0bfa\3\2\2\2\u0c0a\u0bfe")
        buf.write("\3\2\2\2\u0c0b\u0129\3\2\2\2\u0c0c\u0c0d\7\u01a8\2\2\u0c0d")
        buf.write("\u0c0e\7\17\2\2\u0c0e\u0c14\7\u030a\2\2\u0c0f\u0c12\7")
        buf.write("\u02ed\2\2\u0c10\u0c11\7\u0307\2\2\u0c11\u0c13\7\u02ed")
        buf.write("\2\2\u0c12\u0c10\3\2\2\2\u0c12\u0c13\3\2\2\2\u0c13\u0c15")
        buf.write("\3\2\2\2\u0c14\u0c0f\3\2\2\2\u0c14\u0c15\3\2\2\2\u0c15")
        buf.write("\u0c16\3\2\2\2\u0c16\u0c17\7\u030b\2\2\u0c17\u012b\3\2")
        buf.write("\2\2\u0c18\u0c19\7\u00df\2\2\u0c19\u0c1a\5\u02a8\u0155")
        buf.write("\2\u0c1a\u012d\3\2\2\2\u0c1b\u0c1c\7\u02bd\2\2\u0c1c\u0c21")
        buf.write("\5\u0130\u0099\2\u0c1d\u0c1e\7\u0307\2\2\u0c1e\u0c20\5")
        buf.write("\u0130\u0099\2\u0c1f\u0c1d\3\2\2\2\u0c20\u0c23\3\2\2\2")
        buf.write("\u0c21\u0c1f\3\2\2\2\u0c21\u0c22\3\2\2\2\u0c22\u012f\3")
        buf.write("\2\2\2\u0c23\u0c21\3\2\2\2\u0c24\u0c25\5\u0468\u0235\2")
        buf.write("\u0c25\u0c26\7\23\2\2\u0c26\u0c27\5\u0132\u009a\2\u0c27")
        buf.write("\u0131\3\2\2\2\u0c28\u0c29\7\u030a\2\2\u0c29\u0c2a\5\u0134")
        buf.write("\u009b\2\u0c2a\u0c2b\7\u030b\2\2\u0c2b\u0133\3\2\2\2\u0c2c")
        buf.write("\u0c2e\5\u0468\u0235\2\u0c2d\u0c2c\3\2\2\2\u0c2d\u0c2e")
        buf.write("\3\2\2\2\u0c2e\u0c32\3\2\2\2\u0c2f\u0c30\7\u0197\2\2\u0c30")
        buf.write("\u0c31\7/\2\2\u0c31\u0c33\5\u030a\u0186\2\u0c32\u0c2f")
        buf.write("\3\2\2\2\u0c32\u0c33\3\2\2\2\u0c33\u0c35\3\2\2\2\u0c34")
        buf.write("\u0c36\5\u014c\u00a7\2\u0c35\u0c34\3\2\2\2\u0c35\u0c36")
        buf.write("\3\2\2\2\u0c36\u0c38\3\2\2\2\u0c37\u0c39\5\u0136\u009c")
        buf.write("\2\u0c38\u0c37\3\2\2\2\u0c38\u0c39\3\2\2\2\u0c39\u0135")
        buf.write("\3\2\2\2\u0c3a\u0c3b\5\u0138\u009d\2\u0c3b\u0c3d\5\u013a")
        buf.write("\u009e\2\u0c3c\u0c3e\5\u0142\u00a2\2\u0c3d\u0c3c\3\2\2")
        buf.write("\2\u0c3d\u0c3e\3\2\2\2\u0c3e\u0137\3\2\2\2\u0c3f\u0c40")
        buf.write("\t\"\2\2\u0c40\u0139\3\2\2\2\u0c41\u0c44\5\u013c\u009f")
        buf.write("\2\u0c42\u0c44\5\u013e\u00a0\2\u0c43\u0c41\3\2\2\2\u0c43")
        buf.write("\u0c42\3\2\2\2\u0c44\u013b\3\2\2\2\u0c45\u0c46\7\u02bc")
        buf.write("\2\2\u0c46\u0c54\7\u02b7\2\2\u0c47\u0c48\5\u047c\u023f")
        buf.write("\2\u0c48\u0c49\7\u02b7\2\2\u0c49\u0c54\3\2\2\2\u0c4a\u0c4b")
        buf.write("\7\u0315\2\2\u0c4b\u0c54\7\u02b7\2\2\u0c4c\u0c4d\7\u00f9")
        buf.write("\2\2\u0c4d\u0c4e\5\u02a8\u0155\2\u0c4e\u0c4f\5\u0300\u0181")
        buf.write("\2\u0c4f\u0c50\7\u02b7\2\2\u0c50\u0c54\3\2\2\2\u0c51\u0c52")
        buf.write("\7g\2\2\u0c52\u0c54\7\u01e9\2\2\u0c53\u0c45\3\2\2\2\u0c53")
        buf.write("\u0c47\3\2\2\2\u0c53\u0c4a\3\2\2\2\u0c53\u0c4c\3\2\2\2")
        buf.write("\u0c53\u0c51\3\2\2\2\u0c54\u013d\3\2\2\2\u0c55\u0c56\7")
        buf.write(" \2\2\u0c56\u0c57\5\u0140\u00a1\2\u0c57\u0c58\7\21\2\2")
        buf.write("\u0c58\u0c59\5\u0140\u00a1\2\u0c59\u013f\3\2\2\2\u0c5a")
        buf.write("\u0c68\5\u013c\u009f\2\u0c5b\u0c5c\7\u02bc\2\2\u0c5c\u0c68")
        buf.write("\7\u02ac\2\2\u0c5d\u0c5e\5\u047c\u023f\2\u0c5e\u0c5f\7")
        buf.write("\u02ac\2\2\u0c5f\u0c68\3\2\2\2\u0c60\u0c61\7\u0315\2\2")
        buf.write("\u0c61\u0c68\7\u02ac\2\2\u0c62\u0c63\7\u00f9\2\2\u0c63")
        buf.write("\u0c64\5\u02a8\u0155\2\u0c64\u0c65\5\u0300\u0181\2\u0c65")
        buf.write("\u0c66\7\u02ac\2\2\u0c66\u0c68\3\2\2\2\u0c67\u0c5a\3\2")
        buf.write("\2\2\u0c67\u0c5b\3\2\2\2\u0c67\u0c5d\3\2\2\2\u0c67\u0c60")
        buf.write("\3\2\2\2\u0c67\u0c62\3\2\2\2\u0c68\u0141\3\2\2\2\u0c69")
        buf.write("\u0c70\7\u02aa\2\2\u0c6a\u0c6b\7g\2\2\u0c6b\u0c71\7\u01e9")
        buf.write("\2\2\u0c6c\u0c71\7\u00db\2\2\u0c6d\u0c71\7\u02bb\2\2\u0c6e")
        buf.write("\u0c6f\7\u0177\2\2\u0c6f\u0c71\7\u02b4\2\2\u0c70\u0c6a")
        buf.write("\3\2\2\2\u0c70\u0c6c\3\2\2\2\u0c70\u0c6d\3\2\2\2\u0c70")
        buf.write("\u0c6e\3\2\2\2\u0c71\u0143\3\2\2\2\u0c72\u0c74\7\u0287")
        buf.write("\2\2\u0c73\u0c75\7\u029b\2\2\u0c74\u0c73\3\2\2\2\u0c74")
        buf.write("\u0c75\3\2\2\2\u0c75\u0c76\3\2\2\2\u0c76\u0c7b\5\u0146")
        buf.write("\u00a4\2\u0c77\u0c78\7\u0307\2\2\u0c78\u0c7a\5\u0146\u00a4")
        buf.write("\2\u0c79\u0c77\3\2\2\2\u0c7a\u0c7d\3\2\2\2\u0c7b\u0c79")
        buf.write("\3\2\2\2\u0c7b\u0c7c\3\2\2\2\u0c7c\u0145\3\2\2\2\u0c7d")
        buf.write("\u0c7b\3\2\2\2\u0c7e\u0c80\5\u046c\u0237\2\u0c7f\u0c81")
        buf.write("\5\u0418\u020d\2\u0c80\u0c7f\3\2\2\2\u0c80\u0c81\3\2\2")
        buf.write("\2\u0c81\u0c82\3\2\2\2\u0c82\u0c83\7\23\2\2\u0c83\u0c84")
        buf.write("\5\u011c\u008f\2\u0c84\u0147\3\2\2\2\u0c85\u0c86\7\u00db")
        buf.write("\2\2\u0c86\u0c87\7/\2\2\u0c87\u0c89\5\u030a\u0186\2\u0c88")
        buf.write("\u0c8a\5\u014a\u00a6\2\u0c89\u0c88\3\2\2\2\u0c89\u0c8a")
        buf.write("\3\2\2\2\u0c8a\u0149\3\2\2\2\u0c8b\u0c8c\7\u0287\2\2\u0c8c")
        buf.write("\u0c91\7\u01e3\2\2\u0c8d\u0c8e\6\u00a6\64\2\u0c8e\u0c8f")
        buf.write("\7\u0287\2\2\u0c8f\u0c91\7e\2\2\u0c90\u0c8b\3\2\2\2\u0c90")
        buf.write("\u0c8d\3\2\2\2\u0c91\u014b\3\2\2\2\u0c92\u0c93\7\u018b")
        buf.write("\2\2\u0c93\u0c94\7/\2\2\u0c94\u0c95\5\u030a\u0186\2\u0c95")
        buf.write("\u014d\3\2\2\2\u0c96\u0c97\t#\2\2\u0c97\u014f\3\2\2\2")
        buf.write("\u0c98\u0c9b\7\u00cd\2\2\u0c99\u0c9c\7\u0097\2\2\u0c9a")
        buf.write("\u0c9c\5\u0152\u00aa\2\u0c9b\u0c99\3\2\2\2\u0c9b\u0c9a")
        buf.write("\3\2\2\2\u0c9c\u0151\3\2\2\2\u0c9d\u0ca2\5\u016c\u00b7")
        buf.write("\2\u0c9e\u0c9f\7\u0307\2\2\u0c9f\u0ca1\5\u016c\u00b7\2")
        buf.write("\u0ca0\u0c9e\3\2\2\2\u0ca1\u0ca4\3\2\2\2\u0ca2\u0ca0\3")
        buf.write("\2\2\2\u0ca2\u0ca3\3\2\2\2\u0ca3\u0153\3\2\2\2\u0ca4\u0ca2")
        buf.write("\3\2\2\2\u0ca5\u0ca6\7\u0274\2\2\u0ca6\u0cab\5\u0158\u00ad")
        buf.write("\2\u0ca7\u0ca8\7\u0307\2\2\u0ca8\u0caa\5\u0158\u00ad\2")
        buf.write("\u0ca9\u0ca7\3\2\2\2\u0caa\u0cad\3\2\2\2\u0cab\u0ca9\3")
        buf.write("\2\2\2\u0cab\u0cac\3\2\2\2\u0cac\u0155\3\2\2\2\u0cad\u0cab")
        buf.write("\3\2\2\2\u0cae\u0caf\7\u0240\2\2\u0caf\u0cb0\5\u0452\u022a")
        buf.write("\2\u0cb0\u0157\3\2\2\2\u0cb1\u0cb2\7\u01e9\2\2\u0cb2\u0cb4")
        buf.write("\7\u030a\2\2\u0cb3\u0cb5\5\u00fa~\2\u0cb4\u0cb3\3\2\2")
        buf.write("\2\u0cb4\u0cb5\3\2\2\2\u0cb5\u0cb6\3\2\2\2\u0cb6\u0cb7")
        buf.write("\7\u030b\2\2\u0cb7\u0159\3\2\2\2\u0cb8\u0cc1\5\u011e\u0090")
        buf.write("\2\u0cb9\u0cc1\7\u0219\2\2\u0cba\u0cbb\6\u00ae\65\2\u0cbb")
        buf.write("\u0cc1\7\u0217\2\2\u0cbc\u0cbd\6\u00ae\66\2\u0cbd\u0cbe")
        buf.write("\7\u0147\2\2\u0cbe\u0cbf\7\u02f0\2\2\u0cbf\u0cc1\5\u047a")
        buf.write("\u023e\2\u0cc0\u0cb8\3\2\2\2\u0cc0\u0cb9\3\2\2\2\u0cc0")
        buf.write("\u0cba\3\2\2\2\u0cc0\u0cbc\3\2\2\2\u0cc1\u015b\3\2\2\2")
        buf.write("\u0cc2\u0cc4\5\u015e\u00b0\2\u0cc3\u0cc2\3\2\2\2\u0cc4")
        buf.write("\u0cc5\3\2\2\2\u0cc5\u0cc3\3\2\2\2\u0cc5\u0cc6\3\2\2\2")
        buf.write("\u0cc6\u015d\3\2\2\2\u0cc7\u0cc8\7\u00ca\2\2\u0cc8\u0ccc")
        buf.write("\5\u0160\u00b1\2\u0cc9\u0cca\6\u00b0\67\2\u0cca\u0ccb")
        buf.write("\7\u029e\2\2\u0ccb\u0ccd\5\u0456\u022c\2\u0ccc\u0cc9\3")
        buf.write("\2\2\2\u0ccc\u0ccd\3\2\2\2\u0ccd\u0cd0\3\2\2\2\u0cce\u0ccf")
        buf.write("\6\u00b08\2\u0ccf\u0cd1\5\u0162\u00b2\2\u0cd0\u0cce\3")
        buf.write("\2\2\2\u0cd0\u0cd1\3\2\2\2\u0cd1\u0cd7\3\2\2\2\u0cd2\u0cd3")
        buf.write("\7\u0121\2\2\u0cd3\u0cd4\7\u00fd\2\2\u0cd4\u0cd5\7\u01fe")
        buf.write("\2\2\u0cd5\u0cd7\7\u015c\2\2\u0cd6\u0cc7\3\2\2\2\u0cd6")
        buf.write("\u0cd2\3\2\2\2\u0cd7\u015f\3\2\2\2\u0cd8\u0cdc\7\u0268")
        buf.write("\2\2\u0cd9\u0cda\6\u00b19\2\u0cda\u0cdc\7\u01fe\2\2\u0cdb")
        buf.write("\u0cd8\3\2\2\2\u0cdb\u0cd9\3\2\2\2\u0cdc\u0161\3\2\2\2")
        buf.write("\u0cdd\u0cde\7\u029f\2\2\u0cde\u0ce1\7\u02a0\2\2\u0cdf")
        buf.write("\u0ce1\7\u02a1\2\2\u0ce0\u0cdd\3\2\2\2\u0ce0\u0cdf\3\2")
        buf.write("\2\2\u0ce1\u0163\3\2\2\2\u0ce2\u0ce5\5\u0166\u00b4\2\u0ce3")
        buf.write("\u0ce5\7\u02fa\2\2\u0ce4\u0ce2\3\2\2\2\u0ce4\u0ce3\3\2")
        buf.write("\2\2\u0ce5\u0cea\3\2\2\2\u0ce6\u0ce7\7\u0307\2\2\u0ce7")
        buf.write("\u0ce9\5\u0166\u00b4\2\u0ce8\u0ce6\3\2\2\2\u0ce9\u0cec")
        buf.write("\3\2\2\2\u0cea\u0ce8\3\2\2\2\u0cea\u0ceb\3\2\2\2\u0ceb")
        buf.write("\u0165\3\2\2\2\u0cec\u0cea\3\2\2\2\u0ced\u0cf3\5\u0422")
        buf.write("\u0212\2\u0cee\u0cf0\5\u02a8\u0155\2\u0cef\u0cf1\5\u0168")
        buf.write("\u00b5\2\u0cf0\u0cef\3\2\2\2\u0cf0\u0cf1\3\2\2\2\u0cf1")
        buf.write("\u0cf3\3\2\2\2\u0cf2\u0ced\3\2\2\2\u0cf2\u0cee\3\2\2\2")
        buf.write("\u0cf3\u0167\3\2\2\2\u0cf4\u0cf6\7\23\2\2\u0cf5\u0cf4")
        buf.write("\3\2\2\2\u0cf5\u0cf6\3\2\2\2\u0cf6\u0cf9\3\2\2\2\u0cf7")
        buf.write("\u0cfa\5\u046c\u0237\2\u0cf8\u0cfa\5\u0486\u0244\2\u0cf9")
        buf.write("\u0cf7\3\2\2\2\u0cf9\u0cf8\3\2\2\2\u0cfa\u0169\3\2\2\2")
        buf.write("\u0cfb\u0cfc\7\u0285\2\2\u0cfc\u0cfd\5\u02a8\u0155\2\u0cfd")
        buf.write("\u016b\3\2\2\2\u0cfe\u0d09\5\u0178\u00bd\2\u0cff\u0d03")
        buf.write("\7\u030c\2\2\u0d00\u0d01\6\u00b7:\2\u0d01\u0d04\5\u046c")
        buf.write("\u0237\2\u0d02\u0d04\7\u02de\2\2\u0d03\u0d00\3\2\2\2\u0d03")
        buf.write("\u0d02\3\2\2\2\u0d04\u0d05\3\2\2\2\u0d05\u0d06\5\u016e")
        buf.write("\u00b8\2\u0d06\u0d07\7\u030d\2\2\u0d07\u0d09\3\2\2\2\u0d08")
        buf.write("\u0cfe\3\2\2\2\u0d08\u0cff\3\2\2\2\u0d09\u0d0d\3\2\2\2")
        buf.write("\u0d0a\u0d0c\5\u0170\u00b9\2\u0d0b\u0d0a\3\2\2\2\u0d0c")
        buf.write("\u0d0f\3\2\2\2\u0d0d\u0d0b\3\2\2\2\u0d0d\u0d0e\3\2\2\2")
        buf.write("\u0d0e\u016d\3\2\2\2\u0d0f\u0d0d\3\2\2\2\u0d10\u0d14\5")
        buf.write("\u0178\u00bd\2\u0d11\u0d13\5\u0170\u00b9\2\u0d12\u0d11")
        buf.write("\3\2\2\2\u0d13\u0d16\3\2\2\2\u0d14\u0d12\3\2\2\2\u0d14")
        buf.write("\u0d15\3\2\2\2\u0d15\u016f\3\2\2\2\u0d16\u0d14\3\2\2\2")
        buf.write("\u0d17\u0d18\5\u0174\u00bb\2\u0d18\u0d1d\5\u016c\u00b7")
        buf.write("\2\u0d19\u0d1a\7\u0181\2\2\u0d1a\u0d1e\5\u02a8\u0155\2")
        buf.write("\u0d1b\u0d1c\7\u026f\2\2\u0d1c\u0d1e\5\u0470\u0239\2\u0d1d")
        buf.write("\u0d19\3\2\2\2\u0d1d\u0d1b\3\2\2\2\u0d1d\u0d1e\3\2\2\2")
        buf.write("\u0d1e\u0d2b\3\2\2\2\u0d1f\u0d20\5\u0176\u00bc\2\u0d20")
        buf.write("\u0d25\5\u016c\u00b7\2\u0d21\u0d22\7\u0181\2\2\u0d22\u0d26")
        buf.write("\5\u02a8\u0155\2\u0d23\u0d24\7\u026f\2\2\u0d24\u0d26\5")
        buf.write("\u0470\u0239\2\u0d25\u0d21\3\2\2\2\u0d25\u0d23\3\2\2\2")
        buf.write("\u0d26\u0d2b\3\2\2\2\u0d27\u0d28\5\u0172\u00ba\2\u0d28")
        buf.write("\u0d29\5\u0178\u00bd\2\u0d29\u0d2b\3\2\2\2\u0d2a\u0d17")
        buf.write("\3\2\2\2\u0d2a\u0d1f\3\2\2\2\u0d2a\u0d27\3\2\2\2\u0d2b")
        buf.write("\u0171\3\2\2\2\u0d2c\u0d2e\7\u0169\2\2\u0d2d\u0d2f\7\u00f1")
        buf.write("\2\2\u0d2e\u0d2d\3\2\2\2\u0d2e\u0d2f\3\2\2\2\u0d2f\u0d30")
        buf.write("\3\2\2\2\u0d30\u0d38\7\u0107\2\2\u0d31\u0d32\7\u0169\2")
        buf.write("\2\u0d32\u0d34\t$\2\2\u0d33\u0d35\7\u018d\2\2\u0d34\u0d33")
        buf.write("\3\2\2\2\u0d34\u0d35\3\2\2\2\u0d35\u0d36\3\2\2\2\u0d36")
        buf.write("\u0d38\7\u0107\2\2\u0d37\u0d2c\3\2\2\2\u0d37\u0d31\3\2")
        buf.write("\2\2\u0d38\u0173\3\2\2\2\u0d39\u0d3b\t%\2\2\u0d3a\u0d39")
        buf.write("\3\2\2\2\u0d3a\u0d3b\3\2\2\2\u0d3b\u0d3c\3\2\2\2\u0d3c")
        buf.write("\u0d3f\7\u0107\2\2\u0d3d\u0d3f\7\u022d\2\2\u0d3e\u0d3a")
        buf.write("\3\2\2\2\u0d3e\u0d3d\3\2\2\2\u0d3f\u0175\3\2\2\2\u0d40")
        buf.write("\u0d42\t$\2\2\u0d41\u0d43\7\u018d\2\2\u0d42\u0d41\3\2")
        buf.write("\2\2\u0d42\u0d43\3\2\2\2\u0d43\u0d44\3\2\2\2\u0d44\u0d45")
        buf.write("\7\u0107\2\2\u0d45\u0177\3\2\2\2\u0d46\u0d4d\5\u017a\u00be")
        buf.write("\2\u0d47\u0d4d\5\u017c\u00bf\2\u0d48\u0d4d\5\u017e\u00c0")
        buf.write("\2\u0d49\u0d4d\5\u0180\u00c1\2\u0d4a\u0d4b\6\u00bd;\2")
        buf.write("\u0d4b\u0d4d\5\u0182\u00c2\2\u0d4c\u0d46\3\2\2\2\u0d4c")
        buf.write("\u0d47\3\2\2\2\u0d4c\u0d48\3\2\2\2\u0d4c\u0d49\3\2\2\2")
        buf.write("\u0d4c\u0d4a\3\2\2\2\u0d4d\u0179\3\2\2\2\u0d4e\u0d50\5")
        buf.write("\u0452\u022a\2\u0d4f\u0d51\5\u0410\u0209\2\u0d50\u0d4f")
        buf.write("\3\2\2\2\u0d50\u0d51\3\2\2\2\u0d51\u0d53\3\2\2\2\u0d52")
        buf.write("\u0d54\5\u0192\u00ca\2\u0d53\u0d52\3\2\2\2\u0d53\u0d54")
        buf.write("\3\2\2\2\u0d54\u0d56\3\2\2\2\u0d55\u0d57\5\u0194\u00cb")
        buf.write("\2\u0d56\u0d55\3\2\2\2\u0d56\u0d57\3\2\2\2\u0d57\u017b")
        buf.write("\3\2\2\2\u0d58\u0d5b\7\u030a\2\2\u0d59\u0d5c\5\u017a\u00be")
        buf.write("\2\u0d5a\u0d5c\5\u017c\u00bf\2\u0d5b\u0d59\3\2\2\2\u0d5b")
        buf.write("\u0d5a\3\2\2\2\u0d5c\u0d5d\3\2\2\2\u0d5d\u0d5e\7\u030b")
        buf.write("\2\2\u0d5e\u017d\3\2\2\2\u0d5f\u0d61\5\u011c\u008f\2\u0d60")
        buf.write("\u0d62\5\u0192\u00ca\2\u0d61\u0d60\3\2\2\2\u0d61\u0d62")
        buf.write("\3\2\2\2\u0d62\u0d65\3\2\2\2\u0d63\u0d64\6\u00c0<\2\u0d64")
        buf.write("\u0d66\5\u0418\u020d\2\u0d65\u0d63\3\2\2\2\u0d65\u0d66")
        buf.write("\3\2\2\2\u0d66\u0d71\3\2\2\2\u0d67\u0d68\6\u00c0=\2\u0d68")
        buf.write("\u0d69\7\u02d8\2\2\u0d69\u0d6b\5\u011c\u008f\2\u0d6a\u0d6c")
        buf.write("\5\u0192\u00ca\2\u0d6b\u0d6a\3\2\2\2\u0d6b\u0d6c\3\2\2")
        buf.write("\2\u0d6c\u0d6e\3\2\2\2\u0d6d\u0d6f\5\u0418\u020d\2\u0d6e")
        buf.write("\u0d6d\3\2\2\2\u0d6e\u0d6f\3\2\2\2\u0d6f\u0d71\3\2\2\2")
        buf.write("\u0d70\u0d5f\3\2\2\2\u0d70\u0d67\3\2\2\2\u0d71\u017f\3")
        buf.write("\2\2\2\u0d72\u0d75\7\u030a\2\2\u0d73\u0d76\5\u0152\u00aa")
        buf.write("\2\u0d74\u0d76\5\u0180\u00c1\2\u0d75\u0d73\3\2\2\2\u0d75")
        buf.write("\u0d74\3\2\2\2\u0d76\u0d77\3\2\2\2\u0d77\u0d78\7\u030b")
        buf.write("\2\2\u0d78\u0181\3\2\2\2\u0d79\u0d7a\7\u02bf\2\2\u0d7a")
        buf.write("\u0d7b\7\u030a\2\2\u0d7b\u0d7c\5\u02a8\u0155\2\u0d7c\u0d7d")
        buf.write("\7\u0307\2\2\u0d7d\u0d7e\5\u0486\u0244\2\u0d7e\u0d7f\5")
        buf.write("\u0184\u00c3\2\u0d7f\u0d81\7\u030b\2\2\u0d80\u0d82\5\u0192")
        buf.write("\u00ca\2\u0d81\u0d80\3\2\2\2\u0d81\u0d82\3\2\2\2\u0d82")
        buf.write("\u0183\3\2\2\2\u0d83\u0d84\7I\2\2\u0d84\u0d85\7\u030a")
        buf.write("\2\2\u0d85\u0d8a\5\u0186\u00c4\2\u0d86\u0d87\7\u0307\2")
        buf.write("\2\u0d87\u0d89\5\u0186\u00c4\2\u0d88\u0d86\3\2\2\2\u0d89")
        buf.write("\u0d8c\3\2\2\2\u0d8a\u0d88\3\2\2\2\u0d8a\u0d8b\3\2\2\2")
        buf.write("\u0d8b\u0d8d\3\2\2\2\u0d8c\u0d8a\3\2\2\2\u0d8d\u0d8e\7")
        buf.write("\u030b\2\2\u0d8e\u0185\3\2\2\2\u0d8f\u0d90\5\u046c\u0237")
        buf.write("\2\u0d90\u0d91\7\u00ca\2\2\u0d91\u0d92\7\u02c1\2\2\u0d92")
        buf.write("\u0da7\3\2\2\2\u0d93\u0d94\5\u046c\u0237\2\u0d94\u0d97")
        buf.write("\5\u0398\u01cd\2\u0d95\u0d96\6\u00c4>\2\u0d96\u0d98\5")
        buf.write("\u03de\u01f0\2\u0d97\u0d95\3\2\2\2\u0d97\u0d98\3\2\2\2")
        buf.write("\u0d98\u0d9a\3\2\2\2\u0d99\u0d9b\7\u00b0\2\2\u0d9a\u0d99")
        buf.write("\3\2\2\2\u0d9a\u0d9b\3\2\2\2\u0d9b\u0d9c\3\2\2\2\u0d9c")
        buf.write("\u0d9d\7\u02c2\2\2\u0d9d\u0d9f\5\u0486\u0244\2\u0d9e\u0da0")
        buf.write("\5\u0188\u00c5\2\u0d9f\u0d9e\3\2\2\2\u0d9f\u0da0\3\2\2")
        buf.write("\2\u0da0\u0da7\3\2\2\2\u0da1\u0da2\7\u02c0\2\2\u0da2\u0da3")
        buf.write("\7\u02c2\2\2\u0da3\u0da4\5\u0486\u0244\2\u0da4\u0da5\5")
        buf.write("\u0184\u00c3\2\u0da5\u0da7\3\2\2\2\u0da6\u0d8f\3\2\2\2")
        buf.write("\u0da6\u0d93\3\2\2\2\u0da6\u0da1\3\2\2\2\u0da7\u0187\3")
        buf.write("\2\2\2\u0da8\u0daa\5\u018a\u00c6\2\u0da9\u0dab\5\u018c")
        buf.write("\u00c7\2\u0daa\u0da9\3\2\2\2\u0daa\u0dab\3\2\2\2\u0dab")
        buf.write("\u0db1\3\2\2\2\u0dac\u0dae\5\u018c\u00c7\2\u0dad\u0daf")
        buf.write("\5\u018a\u00c6\2\u0dae\u0dad\3\2\2\2\u0dae\u0daf\3\2\2")
        buf.write("\2\u0daf\u0db1\3\2\2\2\u0db0\u0da8\3\2\2\2\u0db0\u0dac")
        buf.write("\3\2\2\2\u0db1\u0189\3\2\2\2\u0db2\u0db3\5\u018e\u00c8")
        buf.write("\2\u0db3\u0db4\7\u0181\2\2\u0db4\u0db5\7\u02be\2\2\u0db5")
        buf.write("\u018b\3\2\2\2\u0db6\u0db7\5\u018e\u00c8\2\u0db7\u0db8")
        buf.write("\7\u0181\2\2\u0db8\u0db9\7\u00a7\2\2\u0db9\u018d\3\2\2")
        buf.write("\2\u0dba\u0dbf\7\u00a7\2\2\u0dbb\u0dbf\7\u017a\2\2\u0dbc")
        buf.write("\u0dbd\7\u0082\2\2\u0dbd\u0dbf\5\u0486\u0244\2\u0dbe\u0dba")
        buf.write("\3\2\2\2\u0dbe\u0dbb\3\2\2\2\u0dbe\u0dbc\3\2\2\2\u0dbf")
        buf.write("\u018f\3\2\2\2\u0dc0\u0dc1\t&\2\2\u0dc1\u0191\3\2\2\2")
        buf.write("\u0dc2\u0dc6\7\23\2\2\u0dc3\u0dc4\6\u00ca?\2\u0dc4\u0dc6")
        buf.write("\7\u02f0\2\2\u0dc5\u0dc2\3\2\2\2\u0dc5\u0dc3\3\2\2\2\u0dc5")
        buf.write("\u0dc6\3\2\2\2\u0dc6\u0dc7\3\2\2\2\u0dc7\u0dc8\5\u046c")
        buf.write("\u0237\2\u0dc8\u0193\3\2\2\2\u0dc9\u0dce\5\u0196\u00cc")
        buf.write("\2\u0dca\u0dcb\7\u0307\2\2\u0dcb\u0dcd\5\u0196\u00cc\2")
        buf.write("\u0dcc\u0dca\3\2\2\2\u0dcd\u0dd0\3\2\2\2\u0dce\u0dcc\3")
        buf.write("\2\2\2\u0dce\u0dcf\3\2\2\2\u0dcf\u0195\3\2\2\2\u0dd0\u0dce")
        buf.write("\3\2\2\2\u0dd1\u0dd2\5\u0198\u00cd\2\u0dd2\u0dd4\5\u019a")
        buf.write("\u00ce\2\u0dd3\u0dd5\5\u019e\u00d0\2\u0dd4\u0dd3\3\2\2")
        buf.write("\2\u0dd4\u0dd5\3\2\2\2\u0dd5\u0dd6\3\2\2\2\u0dd6\u0dd7")
        buf.write("\7\u030a\2\2\u0dd7\u0dd8\5\u01a0\u00d1\2\u0dd8\u0dd9\7")
        buf.write("\u030b\2\2\u0dd9\u0de6\3\2\2\2\u0dda\u0ddb\7\u026e\2\2")
        buf.write("\u0ddb\u0ddd\5\u019a\u00ce\2\u0ddc\u0dde\5\u019e\u00d0")
        buf.write("\2\u0ddd\u0ddc\3\2\2\2\u0ddd\u0dde\3\2\2\2\u0dde\u0ddf")
        buf.write("\3\2\2\2\u0ddf\u0de1\7\u030a\2\2\u0de0\u0de2\5\u01a0\u00d1")
        buf.write("\2\u0de1\u0de0\3\2\2\2\u0de1\u0de2\3\2\2\2\u0de2\u0de3")
        buf.write("\3\2\2\2\u0de3\u0de4\7\u030b\2\2\u0de4\u0de6\3\2\2\2\u0de5")
        buf.write("\u0dd1\3\2\2\2\u0de5\u0dda\3\2\2\2\u0de6\u0197\3\2\2\2")
        buf.write("\u0de7\u0de8\t\'\2\2\u0de8\u0199\3\2\2\2\u0de9\u0dea\t")
        buf.write("(\2\2\u0dea\u019b\3\2\2\2\u0deb\u0dec\7\u01a6\2\2\u0dec")
        buf.write("\u0df2\7\u010b\2\2\u0ded\u0def\7\u0263\2\2\u0dee\u0df0")
        buf.write("\5\u019a\u00ce\2\u0def\u0dee\3\2\2\2\u0def\u0df0\3\2\2")
        buf.write("\2\u0df0\u0df2\3\2\2\2\u0df1\u0deb\3\2\2\2\u0df1\u0ded")
        buf.write("\3\2\2\2\u0df2\u019d\3\2\2\2\u0df3\u0df9\7\u00ca\2\2\u0df4")
        buf.write("\u0dfa\7\u0107\2\2\u0df5\u0df6\7\u018b\2\2\u0df6\u0dfa")
        buf.write("\7/\2\2\u0df7\u0df8\7\u00db\2\2\u0df8\u0dfa\7/\2\2\u0df9")
        buf.write("\u0df4\3\2\2\2\u0df9\u0df5\3\2\2\2\u0df9\u0df7\3\2\2\2")
        buf.write("\u0dfa\u019f\3\2\2\2\u0dfb\u0e00\5\u01a2\u00d2\2\u0dfc")
        buf.write("\u0dfd\7\u0307\2\2\u0dfd\u0dff\5\u01a2\u00d2\2\u0dfe\u0dfc")
        buf.write("\3\2\2\2\u0dff\u0e02\3\2\2\2\u0e00\u0dfe\3\2\2\2\u0e00")
        buf.write("\u0e01\3\2\2\2\u0e01\u01a1\3\2\2\2\u0e02\u0e00\3\2\2\2")
        buf.write("\u0e03\u0e06\5\u046c\u0237\2\u0e04\u0e06\7\u01a6\2\2\u0e05")
        buf.write("\u0e03\3\2\2\2\u0e05\u0e04\3\2\2\2\u0e06\u01a3\3\2\2\2")
        buf.write("\u0e07\u0e08\6\u00d3@\2\u0e08\u0e0a\5\u0144\u00a3\2\u0e09")
        buf.write("\u0e07\3\2\2\2\u0e09\u0e0a\3\2\2\2\u0e0a\u0e0b\3\2\2\2")
        buf.write("\u0e0b\u0e0d\7\u0268\2\2\u0e0c\u0e0e\7\u0129\2\2\u0e0d")
        buf.write("\u0e0c\3\2\2\2\u0e0d\u0e0e\3\2\2\2\u0e0e\u0e10\3\2\2\2")
        buf.write("\u0e0f\u0e11\7\u00ea\2\2\u0e10\u0e0f\3\2\2\2\u0e10\u0e11")
        buf.write("\3\2\2\2\u0e11\u0e12\3\2\2\2\u0e12\u0e13\5\u0152\u00aa")
        buf.write("\2\u0e13\u0e14\7\u01fc\2\2\u0e14\u0e16\5\u03e6\u01f4\2")
        buf.write("\u0e15\u0e17\5\u016a\u00b6\2\u0e16\u0e15\3\2\2\2\u0e16")
        buf.write("\u0e17\3\2\2\2\u0e17\u0e19\3\2\2\2\u0e18\u0e1a\5\u014c")
        buf.write("\u00a7\2\u0e19\u0e18\3\2\2\2\u0e19\u0e1a\3\2\2\2\u0e1a")
        buf.write("\u0e1c\3\2\2\2\u0e1b\u0e1d\5\u0122\u0092\2\u0e1c\u0e1b")
        buf.write("\3\2\2\2\u0e1c\u0e1d\3\2\2\2\u0e1d\u01a5\3\2\2\2\u0e1e")
        buf.write("\u0e23\5\u01a8\u00d5\2\u0e1f\u0e23\5\u01ae\u00d8\2\u0e20")
        buf.write("\u0e23\5\u01b0\u00d9\2\u0e21\u0e23\5\u01b6\u00dc\2\u0e22")
        buf.write("\u0e1e\3\2\2\2\u0e22\u0e1f\3\2\2\2\u0e22\u0e20\3\2\2\2")
        buf.write("\u0e22\u0e21\3\2\2\2\u0e23\u01a7\3\2\2\2\u0e24\u0e25\7")
        buf.write("\u0221\2\2\u0e25\u0e29\7\u0252\2\2\u0e26\u0e28\5\u01ac")
        buf.write("\u00d7\2\u0e27\u0e26\3\2\2\2\u0e28\u0e2b\3\2\2\2\u0e29")
        buf.write("\u0e27\3\2\2\2\u0e29\u0e2a\3\2\2\2\u0e2a\u0e3e\3\2\2\2")
        buf.write("\u0e2b\u0e29\3\2\2\2\u0e2c\u0e2e\7O\2\2\u0e2d\u0e2f\7")
        buf.write("\u0289\2\2\u0e2e\u0e2d\3\2\2\2\u0e2e\u0e2f\3\2\2\2\u0e2f")
        buf.write("\u0e35\3\2\2\2\u0e30\u0e32\7\21\2\2\u0e31\u0e33\7\u0177")
        buf.write("\2\2\u0e32\u0e31\3\2\2\2\u0e32\u0e33\3\2\2\2\u0e33\u0e34")
        buf.write("\3\2\2\2\u0e34\u0e36\78\2\2\u0e35\u0e30\3\2\2\2\u0e35")
        buf.write("\u0e36\3\2\2\2\u0e36\u0e3b\3\2\2\2\u0e37\u0e39\7\u0177")
        buf.write("\2\2\u0e38\u0e37\3\2\2\2\u0e38\u0e39\3\2\2\2\u0e39\u0e3a")
        buf.write("\3\2\2\2\u0e3a\u0e3c\7\u01c4\2\2\u0e3b\u0e38\3\2\2\2\u0e3b")
        buf.write("\u0e3c\3\2\2\2\u0e3c\u0e3e\3\2\2\2\u0e3d\u0e24\3\2\2\2")
        buf.write("\u0e3d\u0e2c\3\2\2\2\u0e3e\u01a9\3\2\2\2\u0e3f\u0e41\7")
        buf.write("\37\2\2\u0e40\u0e42\7\u0289\2\2\u0e41\u0e40\3\2\2\2\u0e41")
        buf.write("\u0e42\3\2\2\2\u0e42\u01ab\3\2\2\2\u0e43\u0e44\7\u0287")
        buf.write("\2\2\u0e44\u0e45\7W\2\2\u0e45\u0e4a\7\u0207\2\2\u0e46")
        buf.write("\u0e47\6\u00d7A\2\u0e47\u0e48\7\u01b5\2\2\u0e48\u0e4a")
        buf.write("\t)\2\2\u0e49\u0e43\3\2\2\2\u0e49\u0e46\3\2\2\2\u0e4a")
        buf.write("\u01ad\3\2\2\2\u0e4b\u0e4c\7\u01eb\2\2\u0e4c\u0e69\5\u046c")
        buf.write("\u0237\2\u0e4d\u0e4f\7\u01e2\2\2\u0e4e\u0e50\7\u0289\2")
        buf.write("\2\u0e4f\u0e4e\3\2\2\2\u0e4f\u0e50\3\2\2\2\u0e50\u0e63")
        buf.write("\3\2\2\2\u0e51\u0e53\7\u0250\2\2\u0e52\u0e54\7\u01eb\2")
        buf.write("\2\u0e53\u0e52\3\2\2\2\u0e53\u0e54\3\2\2\2\u0e54\u0e55")
        buf.write("\3\2\2\2\u0e55\u0e64\5\u046c\u0237\2\u0e56\u0e58\7\21")
        buf.write("\2\2\u0e57\u0e59\7\u0177\2\2\u0e58\u0e57\3\2\2\2\u0e58")
        buf.write("\u0e59\3\2\2\2\u0e59\u0e5a\3\2\2\2\u0e5a\u0e5c\78\2\2")
        buf.write("\u0e5b\u0e56\3\2\2\2\u0e5b\u0e5c\3\2\2\2\u0e5c\u0e61\3")
        buf.write("\2\2\2\u0e5d\u0e5f\7\u0177\2\2\u0e5e\u0e5d\3\2\2\2\u0e5e")
        buf.write("\u0e5f\3\2\2\2\u0e5f\u0e60\3\2\2\2\u0e60\u0e62\7\u01c4")
        buf.write("\2\2\u0e61\u0e5e\3\2\2\2\u0e61\u0e62\3\2\2\2\u0e62\u0e64")
        buf.write("\3\2\2\2\u0e63\u0e51\3\2\2\2\u0e63\u0e5b\3\2\2\2\u0e64")
        buf.write("\u0e69\3\2\2\2\u0e65\u0e66\7\u01c4\2\2\u0e66\u0e67\7\u01eb")
        buf.write("\2\2\u0e67\u0e69\5\u046c\u0237\2\u0e68\u0e4b\3\2\2\2\u0e68")
        buf.write("\u0e4d\3\2\2\2\u0e68\u0e65\3\2\2\2\u0e69\u01af\3\2\2\2")
        buf.write("\u0e6a\u0e6b\7\u0121\2\2\u0e6b\u0e6c\t\24\2\2\u0e6c\u0e71")
        buf.write("\5\u01b2\u00da\2\u0e6d\u0e6e\7\u0307\2\2\u0e6e\u0e70\5")
        buf.write("\u01b2\u00da\2\u0e6f\u0e6d\3\2\2\2\u0e70\u0e73\3\2\2\2")
        buf.write("\u0e71\u0e6f\3\2\2\2\u0e71\u0e72\3\2\2\2\u0e72\u0e81\3")
        buf.write("\2\2\2\u0e73\u0e71\3\2\2\2\u0e74\u0e75\6\u00d9B\2\u0e75")
        buf.write("\u0e76\7\u0121\2\2\u0e76\u0e77\7\u00f6\2\2\u0e77\u0e78")
        buf.write("\7\u00ca\2\2\u0e78\u0e81\7\35\2\2\u0e79\u0e7e\7\u0265")
        buf.write("\2\2\u0e7a\u0e7f\7\u023d\2\2\u0e7b\u0e7f\7\u0240\2\2\u0e7c")
        buf.write("\u0e7d\6\u00d9C\2\u0e7d\u0e7f\7\u00f6\2\2\u0e7e\u0e7a")
        buf.write("\3\2\2\2\u0e7e\u0e7b\3\2\2\2\u0e7e\u0e7c\3\2\2\2\u0e7f")
        buf.write("\u0e81\3\2\2\2\u0e80\u0e6a\3\2\2\2\u0e80\u0e74\3\2\2\2")
        buf.write("\u0e80\u0e79\3\2\2\2\u0e81\u01b1\3\2\2\2\u0e82\u0e84\5")
        buf.write("\u0452\u022a\2\u0e83\u0e85\5\u0192\u00ca\2\u0e84\u0e83")
        buf.write("\3\2\2\2\u0e84\u0e85\3\2\2\2\u0e85\u0e86\3\2\2\2\u0e86")
        buf.write("\u0e87\5\u01b4\u00db\2\u0e87\u01b3\3\2\2\2\u0e88\u0e8a")
        buf.write("\7\u01b5\2\2\u0e89\u0e8b\7\u011e\2\2\u0e8a\u0e89\3\2\2")
        buf.write("\2\u0e8a\u0e8b\3\2\2\2\u0e8b\u0e91\3\2\2\2\u0e8c\u0e8e")
        buf.write("\7\u0129\2\2\u0e8d\u0e8c\3\2\2\2\u0e8d\u0e8e\3\2\2\2\u0e8e")
        buf.write("\u0e8f\3\2\2\2\u0e8f\u0e91\7\u028b\2\2\u0e90\u0e88\3\2")
        buf.write("\2\2\u0e90\u0e8d\3\2\2\2\u0e91\u01b5\3\2\2\2\u0e92\u0ead")
        buf.write("\7\u028d\2\2\u0e93\u0e94\t*\2\2\u0e94\u0e96\5\u01ba\u00de")
        buf.write("\2\u0e95\u0e97\t+\2\2\u0e96\u0e95\3\2\2\2\u0e96\u0e97")
        buf.write("\3\2\2\2\u0e97\u0eae\3\2\2\2\u0e98\u0e99\7\u00a1\2\2\u0e99")
        buf.write("\u0e9f\5\u01ba\u00de\2\u0e9a\u0e9d\7\u0238\2\2\u0e9b\u0e9c")
        buf.write("\7\u00ca\2\2\u0e9c\u0e9e\7\u0156\2\2\u0e9d\u0e9b\3\2\2")
        buf.write("\2\u0e9d\u0e9e\3\2\2\2\u0e9e\u0ea0\3\2\2\2\u0e9f\u0e9a")
        buf.write("\3\2\2\2\u0e9f\u0ea0\3\2\2\2\u0ea0\u0eae\3\2\2\2\u0ea1")
        buf.write("\u0ea2\7\u01a3\2\2\u0ea2\u0eae\5\u01ba\u00de\2\u0ea3\u0ea4")
        buf.write("\7O\2\2\u0ea4\u0ea7\5\u01ba\u00de\2\u0ea5\u0ea6\7\u0182")
        buf.write("\2\2\u0ea6\u0ea8\7\u0199\2\2\u0ea7\u0ea5\3\2\2\2\u0ea7")
        buf.write("\u0ea8\3\2\2\2\u0ea8\u0eae\3\2\2\2\u0ea9\u0eaa\7\u01e2")
        buf.write("\2\2\u0eaa\u0eae\5\u01ba\u00de\2\u0eab\u0eac\7\u01b9\2")
        buf.write("\2\u0eac\u0eae\5\u01b8\u00dd\2\u0ead\u0e93\3\2\2\2\u0ead")
        buf.write("\u0e98\3\2\2\2\u0ead\u0ea1\3\2\2\2\u0ead\u0ea3\3\2\2\2")
        buf.write("\u0ead\u0ea9\3\2\2\2\u0ead\u0eab\3\2\2\2\u0eae\u01b7\3")
        buf.write("\2\2\2\u0eaf\u0eb2\6\u00ddD\2\u0eb0\u0eb1\7`\2\2\u0eb1")
        buf.write("\u0eb3\7\u028e\2\2\u0eb2\u0eb0\3\2\2\2\u0eb2\u0eb3\3\2")
        buf.write("\2\2\u0eb3\u0eb6\3\2\2\2\u0eb4\u0eb6\3\2\2\2\u0eb5\u0eaf")
        buf.write("\3\2\2\2\u0eb5\u0eb4\3\2\2\2\u0eb6\u01b9\3\2\2\2\u0eb7")
        buf.write("\u0ebe\5\u0488\u0245\2\u0eb8\u0eb9\7\u0307\2\2\u0eb9\u0ebc")
        buf.write("\5\u0488\u0245\2\u0eba\u0ebb\7\u0307\2\2\u0ebb\u0ebd\5")
        buf.write("\u0478\u023d\2\u0ebc\u0eba\3\2\2\2\u0ebc\u0ebd\3\2\2\2")
        buf.write("\u0ebd\u0ebf\3\2\2\2\u0ebe\u0eb8\3\2\2\2\u0ebe\u0ebf\3")
        buf.write("\2\2\2\u0ebf\u01bb\3\2\2\2\u0ec0\u0ec1\7\u01ae\2\2\u0ec1")
        buf.write("\u0ec2\t,\2\2\u0ec2\u0ec7\7\u0123\2\2\u0ec3\u0ec4\7\u0250")
        buf.write("\2\2\u0ec4\u0ec8\5\u048c\u0247\2\u0ec5\u0ec6\7\36\2\2")
        buf.write("\u0ec6\u0ec8\5\u02a8\u0155\2\u0ec7\u0ec3\3\2\2\2\u0ec7")
        buf.write("\u0ec5\3\2\2\2\u0ec8\u0ee2\3\2\2\2\u0ec9\u0ee2\5\u01c4")
        buf.write("\u00e3\2\u0eca\u0ecb\7\u01d6\2\2\u0ecb\u0ed0\5\u01be\u00e0")
        buf.write("\2\u0ecc\u0ecd\7\u0307\2\2\u0ecd\u0ecf\5\u01be\u00e0\2")
        buf.write("\u0ece\u0ecc\3\2\2\2\u0ecf\u0ed2\3\2\2\2\u0ed0\u0ece\3")
        buf.write("\2\2\2\u0ed0\u0ed1\3\2\2\2\u0ed1\u0ee2\3\2\2\2\u0ed2\u0ed0")
        buf.write("\3\2\2\2\u0ed3\u0ed4\6\u00dfE\2\u0ed4\u0ed5\7\u01d6\2")
        buf.write("\2\u0ed5\u0ed9\7\u0294\2\2\u0ed6\u0ed7\5\u03d6\u01ec\2")
        buf.write("\u0ed7\u0ed8\5\u046c\u0237\2\u0ed8\u0eda\3\2\2\2\u0ed9")
        buf.write("\u0ed6\3\2\2\2\u0ed9\u0eda\3\2\2\2\u0eda\u0ee2\3\2\2\2")
        buf.write("\u0edb\u0ee2\5\u01e2\u00f2\2\u0edc\u0edd\6\u00dfF\2\u0edd")
        buf.write("\u0ee2\5\u01d4\u00eb\2\u0ede\u0ee2\5\u01c2\u00e2\2\u0edf")
        buf.write("\u0ee0\6\u00dfG\2\u0ee0\u0ee2\5\u01ec\u00f7\2\u0ee1\u0ec0")
        buf.write("\3\2\2\2\u0ee1\u0ec9\3\2\2\2\u0ee1\u0eca\3\2\2\2\u0ee1")
        buf.write("\u0ed3\3\2\2\2\u0ee1\u0edb\3\2\2\2\u0ee1\u0edc\3\2\2\2")
        buf.write("\u0ee1\u0ede\3\2\2\2\u0ee1\u0edf\3\2\2\2\u0ee2\u01bd\3")
        buf.write("\2\2\2\u0ee3\u0ee5\7\u013e\2\2\u0ee4\u0ee6\5\u01c0\u00e1")
        buf.write("\2\u0ee5\u0ee4\3\2\2\2\u0ee5\u0ee6\3\2\2\2\u0ee6\u0ef2")
        buf.write("\3\2\2\2\u0ee7\u0ee8\6\u00e0H\2\u0ee8\u0ee9\7\u01b0\2")
        buf.write("\2\u0ee9\u0ef2\7\61\2\2\u0eea\u0eec\7\u0204\2\2\u0eeb")
        buf.write("\u0eed\7\f\2\2\u0eec\u0eeb\3\2\2\2\u0eec\u0eed\3\2\2\2")
        buf.write("\u0eed\u0eef\3\2\2\2\u0eee\u0ef0\5\u0312\u018a\2\u0eef")
        buf.write("\u0eee\3\2\2\2\u0eef\u0ef0\3\2\2\2\u0ef0\u0ef2\3\2\2\2")
        buf.write("\u0ef1\u0ee3\3\2\2\2\u0ef1\u0ee7\3\2\2\2\u0ef1\u0eea\3")
        buf.write("\2\2\2\u0ef2\u01bf\3\2\2\2\u0ef3\u0ef4\6\u00e1I\2\u0ef4")
        buf.write("\u0ef9\7\u0250\2\2\u0ef5\u0ef6\6\u00e1J\2\u0ef6\u0efa")
        buf.write("\5\u047a\u023e\2\u0ef7\u0ef8\6\u00e1K\2\u0ef8\u0efa\5")
        buf.write("\u047e\u0240\2\u0ef9\u0ef5\3\2\2\2\u0ef9\u0ef7\3\2\2\2")
        buf.write("\u0efa\u01c1\3\2\2\2\u0efb\u0eff\7\u011b\2\2\u0efc\u0f00")
        buf.write("\7r\2\2\u0efd\u0efe\7\u0240\2\2\u0efe\u0f00\5\u0452\u022a")
        buf.write("\2\u0eff\u0efc\3\2\2\2\u0eff\u0efd\3\2\2\2\u0f00\u0f01")
        buf.write("\3\2\2\2\u0f01\u0f02\7\u00cd\2\2\u0f02\u0f03\7\u013e\2")
        buf.write("\2\u0f03\u01c3\3\2\2\2\u0f04\u0f05\79\2\2\u0f05\u0f06")
        buf.write("\7\u013e\2\2\u0f06\u0f07\7\u0250\2\2\u0f07\u0f09\5\u01c6")
        buf.write("\u00e4\2\u0f08\u0f0a\5\u0312\u018a\2\u0f09\u0f08\3\2\2")
        buf.write("\2\u0f09\u0f0a\3\2\2\2\u0f0a\u01c5\3\2\2\2\u0f0b\u0f10")
        buf.write("\5\u01c8\u00e5\2\u0f0c\u0f0d\7\u0307\2\2\u0f0d\u0f0f\5")
        buf.write("\u01c8\u00e5\2\u0f0e\u0f0c\3\2\2\2\u0f0f\u0f12\3\2\2\2")
        buf.write("\u0f10\u0f0e\3\2\2\2\u0f10\u0f11\3\2\2\2\u0f11\u01c7\3")
        buf.write("\2\2\2\u0f12\u0f10\3\2\2\2\u0f13\u0f14\7\u012e\2\2\u0f14")
        buf.write("\u0f15\7\u02f0\2\2\u0f15\u0f6f\5\u048e\u0248\2\u0f16\u0f17")
        buf.write("\7\u02db\2\2\u0f17\u0f18\7\u02f0\2\2\u0f18\u0f6f\5\u048e")
        buf.write("\u0248\2\u0f19\u0f1a\7\u012b\2\2\u0f1a\u0f1b\7\u02f0\2")
        buf.write("\2\u0f1b\u0f6f\5\u048e\u0248\2\u0f1c\u0f1d\7\u0140\2\2")
        buf.write("\u0f1d\u0f1e\7\u02f0\2\2\u0f1e\u0f6f\5\u048e\u0248\2\u0f1f")
        buf.write("\u0f20\7\u0131\2\2\u0f20\u0f21\7\u02f0\2\2\u0f21\u0f6f")
        buf.write("\5\u048e\u0248\2\u0f22\u0f23\7\u0132\2\2\u0f23\u0f24\7")
        buf.write("\u02f0\2\2\u0f24\u0f6f\5\u0478\u023d\2\u0f25\u0f26\7\u012c")
        buf.write("\2\2\u0f26\u0f27\7\u02f0\2\2\u0f27\u0f6f\5\u0478\u023d")
        buf.write("\2\u0f28\u0f29\7\u0133\2\2\u0f29\u0f2a\7\u02f0\2\2\u0f2a")
        buf.write("\u0f6f\5\u0478\u023d\2\u0f2b\u0f2c\7\u012d\2\2\u0f2c\u0f2d")
        buf.write("\7\u02f0\2\2\u0f2d\u0f6f\5\u0478\u023d\2\u0f2e\u0f2f\7")
        buf.write("\u013c\2\2\u0f2f\u0f30\7\u02f0\2\2\u0f30\u0f6f\5\u0478")
        buf.write("\u023d\2\u0f31\u0f32\7\u0136\2\2\u0f32\u0f33\7\u02f0\2")
        buf.write("\2\u0f33\u0f6f\5\u048e\u0248\2\u0f34\u0f35\7\u0135\2\2")
        buf.write("\u0f35\u0f36\7\u02f0\2\2\u0f36\u0f6f\5\u048e\u0248\2\u0f37")
        buf.write("\u0f38\7\u013f\2\2\u0f38\u0f39\7\u02f0\2\2\u0f39\u0f6f")
        buf.write("\5\u048e\u0248\2\u0f3a\u0f3b\7\u0137\2\2\u0f3b\u0f3c\7")
        buf.write("\u02f0\2\2\u0f3c\u0f6f\5\u048e\u0248\2\u0f3d\u0f3e\7\u02e4")
        buf.write("\2\2\u0f3e\u0f3f\7\u02f0\2\2\u0f3f\u0f6f\5\u01ce\u00e8")
        buf.write("\2\u0f40\u0f41\7\u0138\2\2\u0f41\u0f42\7\u02f0\2\2\u0f42")
        buf.write("\u0f6f\5\u048e\u0248\2\u0f43\u0f44\7\u013b\2\2\u0f44\u0f45")
        buf.write("\7\u02f0\2\2\u0f45\u0f6f\5\u048e\u0248\2\u0f46\u0f47\7")
        buf.write("\u013d\2\2\u0f47\u0f48\7\u02f0\2\2\u0f48\u0f6f\5\u0478")
        buf.write("\u023d\2\u0f49\u0f4a\7\u0139\2\2\u0f4a\u0f4b\7\u02f0\2")
        buf.write("\2\u0f4b\u0f6f\5\u048c\u0247\2\u0f4c\u0f4d\7\u013a\2\2")
        buf.write("\u0f4d\u0f4e\7\u02f0\2\2\u0f4e\u0f6f\5\u048e\u0248\2\u0f4f")
        buf.write("\u0f50\7\u02ca\2\2\u0f50\u0f51\7\u02f0\2\2\u0f51\u0f6f")
        buf.write("\5\u048e\u0248\2\u0f52\u0f53\7\u02cb\2\2\u0f53\u0f54\7")
        buf.write("\u02f0\2\2\u0f54\u0f6f\5\u0478\u023d\2\u0f55\u0f56\7\u0141")
        buf.write("\2\2\u0f56\u0f57\7\u02f0\2\2\u0f57\u0f6f\5\u0478\u023d")
        buf.write("\2\u0f58\u0f59\7\u00eb\2\2\u0f59\u0f5a\7\u02f0\2\2\u0f5a")
        buf.write("\u0f6f\5\u01d2\u00ea\2\u0f5b\u0f5c\7\u02e1\2\2\u0f5c\u0f5d")
        buf.write("\7\u02f0\2\2\u0f5d\u0f6f\5\u0486\u0244\2\u0f5e\u0f5f\7")
        buf.write("\u02e2\2\2\u0f5f\u0f60\7\u02f0\2\2\u0f60\u0f6f\5\u0478")
        buf.write("\u023d\2\u0f61\u0f62\7\u012a\2\2\u0f62\u0f63\7\u02f0\2")
        buf.write("\2\u0f63\u0f6f\5\u0478\u023d\2\u0f64\u0f65\7\u02e3\2\2")
        buf.write("\u0f65\u0f66\7\u02f0\2\2\u0f66\u0f6f\5\u01ca\u00e6\2\u0f67")
        buf.write("\u0f68\7\u02e5\2\2\u0f68\u0f69\7\u02f0\2\2\u0f69\u0f6f")
        buf.write("\5\u0478\u023d\2\u0f6a\u0f6b\7\u02e8\2\2\u0f6b\u0f6c\7")
        buf.write("\u02f0\2\2\u0f6c\u0f6f\5\u01cc\u00e7\2\u0f6d\u0f6f\5\u01d0")
        buf.write("\u00e9\2\u0f6e\u0f13\3\2\2\2\u0f6e\u0f16\3\2\2\2\u0f6e")
        buf.write("\u0f19\3\2\2\2\u0f6e\u0f1c\3\2\2\2\u0f6e\u0f1f\3\2\2\2")
        buf.write("\u0f6e\u0f22\3\2\2\2\u0f6e\u0f25\3\2\2\2\u0f6e\u0f28\3")
        buf.write("\2\2\2\u0f6e\u0f2b\3\2\2\2\u0f6e\u0f2e\3\2\2\2\u0f6e\u0f31")
        buf.write("\3\2\2\2\u0f6e\u0f34\3\2\2\2\u0f6e\u0f37\3\2\2\2\u0f6e")
        buf.write("\u0f3a\3\2\2\2\u0f6e\u0f3d\3\2\2\2\u0f6e\u0f40\3\2\2\2")
        buf.write("\u0f6e\u0f43\3\2\2\2\u0f6e\u0f46\3\2\2\2\u0f6e\u0f49\3")
        buf.write("\2\2\2\u0f6e\u0f4c\3\2\2\2\u0f6e\u0f4f\3\2\2\2\u0f6e\u0f52")
        buf.write("\3\2\2\2\u0f6e\u0f55\3\2\2\2\u0f6e\u0f58\3\2\2\2\u0f6e")
        buf.write("\u0f5b\3\2\2\2\u0f6e\u0f5e\3\2\2\2\u0f6e\u0f61\3\2\2\2")
        buf.write("\u0f6e\u0f64\3\2\2\2\u0f6e\u0f67\3\2\2\2\u0f6e\u0f6a\3")
        buf.write("\2\2\2\u0f6e\u0f6d\3\2\2\2\u0f6f\u01c9\3\2\2\2\u0f70\u0f73")
        buf.write("\5\u0404\u0203\2\u0f71\u0f73\7\u017a\2\2\u0f72\u0f70\3")
        buf.write("\2\2\2\u0f72\u0f71\3\2\2\2\u0f73\u01cb\3\2\2\2\u0f74\u0f75")
        buf.write("\t-\2\2\u0f75\u01cd\3\2\2\2\u0f76\u0f79\5\u048e\u0248")
        buf.write("\2\u0f77\u0f79\7\u017a\2\2\u0f78\u0f76\3\2\2\2\u0f78\u0f77")
        buf.write("\3\2\2\2\u0f79\u01cf\3\2\2\2\u0f7a\u0f7b\7\u012f\2\2\u0f7b")
        buf.write("\u0f7c\7\u02f0\2\2\u0f7c\u0f87\5\u048e\u0248\2\u0f7d\u0f7e")
        buf.write("\7\u0130\2\2\u0f7e\u0f7f\7\u02f0\2\2\u0f7f\u0f87\5\u047c")
        buf.write("\u023f\2\u0f80\u0f81\7\u01c1\2\2\u0f81\u0f82\7\u02f0\2")
        buf.write("\2\u0f82\u0f87\5\u048e\u0248\2\u0f83\u0f84\7\u01c2\2\2")
        buf.write("\u0f84\u0f85\7\u02f0\2\2\u0f85\u0f87\5\u0478\u023d\2\u0f86")
        buf.write("\u0f7a\3\2\2\2\u0f86\u0f7d\3\2\2\2\u0f86\u0f80\3\2\2\2")
        buf.write("\u0f86\u0f83\3\2\2\2\u0f87\u01d1\3\2\2\2\u0f88\u0f91\7")
        buf.write("\u030a\2\2\u0f89\u0f8e\5\u0478\u023d\2\u0f8a\u0f8b\7\u0307")
        buf.write("\2\2\u0f8b\u0f8d\5\u0478\u023d\2\u0f8c\u0f8a\3\2\2\2\u0f8d")
        buf.write("\u0f90\3\2\2\2\u0f8e\u0f8c\3\2\2\2\u0f8e\u0f8f\3\2\2\2")
        buf.write("\u0f8f\u0f92\3\2\2\2\u0f90\u0f8e\3\2\2\2\u0f91\u0f89\3")
        buf.write("\2\2\2\u0f91\u0f92\3\2\2\2\u0f92\u0f93\3\2\2\2\u0f93\u0f94")
        buf.write("\7\u030b\2\2\u0f94\u01d3\3\2\2\2\u0f95\u0f96\79\2\2\u0f96")
        buf.write("\u0f97\7\u01cd\2\2\u0f97\u0f98\7\u00c0\2\2\u0f98\u0f9d")
        buf.write("\5\u01d6\u00ec\2\u0f99\u0f9a\7\u0307\2\2\u0f9a\u0f9c\5")
        buf.write("\u01d6\u00ec\2\u0f9b\u0f99\3\2\2\2\u0f9c\u0f9f\3\2\2\2")
        buf.write("\u0f9d\u0f9b\3\2\2\2\u0f9d\u0f9e\3\2\2\2\u0f9e\u0fa2\3")
        buf.write("\2\2\2\u0f9f\u0f9d\3\2\2\2\u0fa0\u0fa1\6\u00ebL\2\u0fa1")
        buf.write("\u0fa3\5\u0312\u018a\2\u0fa2\u0fa0\3\2\2\2\u0fa2\u0fa3")
        buf.write("\3\2\2\2\u0fa3\u01d5\3\2\2\2\u0fa4\u0fa5\7\u01ce\2\2\u0fa5")
        buf.write("\u0fa6\7\u02f0\2\2\u0fa6\u0fa8\7\u030a\2\2\u0fa7\u0fa9")
        buf.write("\5\u01d8\u00ed\2\u0fa8\u0fa7\3\2\2\2\u0fa8\u0fa9\3\2\2")
        buf.write("\2\u0fa9\u0faa\3\2\2\2\u0faa\u0fd6\7\u030b\2\2\u0fab\u0fac")
        buf.write("\7\u01cf\2\2\u0fac\u0fad\7\u02f0\2\2\u0fad\u0faf\7\u030a")
        buf.write("\2\2\u0fae\u0fb0\5\u01d8\u00ed\2\u0faf\u0fae\3\2\2\2\u0faf")
        buf.write("\u0fb0\3\2\2\2\u0fb0\u0fb1\3\2\2\2\u0fb1\u0fd6\7\u030b")
        buf.write("\2\2\u0fb2\u0fb3\7\u01d0\2\2\u0fb3\u0fb4\7\u02f0\2\2\u0fb4")
        buf.write("\u0fb6\7\u030a\2\2\u0fb5\u0fb7\5\u01da\u00ee\2\u0fb6\u0fb5")
        buf.write("\3\2\2\2\u0fb6\u0fb7\3\2\2\2\u0fb7\u0fb8\3\2\2\2\u0fb8")
        buf.write("\u0fd6\7\u030b\2\2\u0fb9\u0fba\7\u01d1\2\2\u0fba\u0fbb")
        buf.write("\7\u02f0\2\2\u0fbb\u0fbd\7\u030a\2\2\u0fbc\u0fbe\5\u01da")
        buf.write("\u00ee\2\u0fbd\u0fbc\3\2\2\2\u0fbd\u0fbe\3\2\2\2\u0fbe")
        buf.write("\u0fbf\3\2\2\2\u0fbf\u0fd6\7\u030b\2\2\u0fc0\u0fc1\7\u01d2")
        buf.write("\2\2\u0fc1\u0fc2\7\u02f0\2\2\u0fc2\u0fc4\7\u030a\2\2\u0fc3")
        buf.write("\u0fc5\5\u01dc\u00ef\2\u0fc4\u0fc3\3\2\2\2\u0fc4\u0fc5")
        buf.write("\3\2\2\2\u0fc5\u0fc6\3\2\2\2\u0fc6\u0fd6\7\u030b\2\2\u0fc7")
        buf.write("\u0fc8\7\u01d3\2\2\u0fc8\u0fc9\7\u02f0\2\2\u0fc9\u0fcb")
        buf.write("\7\u030a\2\2\u0fca\u0fcc\5\u01dc\u00ef\2\u0fcb\u0fca\3")
        buf.write("\2\2\2\u0fcb\u0fcc\3\2\2\2\u0fcc\u0fcd\3\2\2\2\u0fcd\u0fd6")
        buf.write("\7\u030b\2\2\u0fce\u0fcf\7\u01d4\2\2\u0fcf\u0fd0\7\u02f0")
        buf.write("\2\2\u0fd0\u0fd2\7\u030a\2\2\u0fd1\u0fd3\5\u01e0\u00f1")
        buf.write("\2\u0fd2\u0fd1\3\2\2\2\u0fd2\u0fd3\3\2\2\2\u0fd3\u0fd4")
        buf.write("\3\2\2\2\u0fd4\u0fd6\7\u030b\2\2\u0fd5\u0fa4\3\2\2\2\u0fd5")
        buf.write("\u0fab\3\2\2\2\u0fd5\u0fb2\3\2\2\2\u0fd5\u0fb9\3\2\2\2")
        buf.write("\u0fd5\u0fc0\3\2\2\2\u0fd5\u0fc7\3\2\2\2\u0fd5\u0fce\3")
        buf.write("\2\2\2\u0fd6\u01d7\3\2\2\2\u0fd7\u0fdc\5\u0426\u0214\2")
        buf.write("\u0fd8\u0fd9\7\u0307\2\2\u0fd9\u0fdb\5\u0426\u0214\2\u0fda")
        buf.write("\u0fd8\3\2\2\2\u0fdb\u0fde\3\2\2\2\u0fdc\u0fda\3\2\2\2")
        buf.write("\u0fdc\u0fdd\3\2\2\2\u0fdd\u01d9\3\2\2\2\u0fde\u0fdc\3")
        buf.write("\2\2\2\u0fdf\u0fe4\5\u044e\u0228\2\u0fe0\u0fe1\7\u0307")
        buf.write("\2\2\u0fe1\u0fe3\5\u044e\u0228\2\u0fe2\u0fe0\3\2\2\2\u0fe3")
        buf.write("\u0fe6\3\2\2\2\u0fe4\u0fe2\3\2\2\2\u0fe4\u0fe5\3\2\2\2")
        buf.write("\u0fe5\u01db\3\2\2\2\u0fe6\u0fe4\3\2\2\2\u0fe7\u0fec\5")
        buf.write("\u01de\u00f0\2\u0fe8\u0fe9\7\u0307\2\2\u0fe9\u0feb\5\u01de")
        buf.write("\u00f0\2\u0fea\u0fe8\3\2\2\2\u0feb\u0fee\3\2\2\2\u0fec")
        buf.write("\u0fea\3\2\2\2\u0fec\u0fed\3\2\2\2\u0fed\u01dd\3\2\2\2")
        buf.write("\u0fee\u0fec\3\2\2\2\u0fef\u0ff0\5\u048e\u0248\2\u0ff0")
        buf.write("\u01df\3\2\2\2\u0ff1\u0ff6\5\u03e2\u01f2\2\u0ff2\u0ff3")
        buf.write("\7\u0307\2\2\u0ff3\u0ff5\5\u03e2\u01f2\2\u0ff4\u0ff2\3")
        buf.write("\2\2\2\u0ff5\u0ff8\3\2\2\2\u0ff6\u0ff4\3\2\2\2\u0ff6\u0ff7")
        buf.write("\3\2\2\2\u0ff7\u01e1\3\2\2\2\u0ff8\u0ff6\3\2\2\2\u0ff9")
        buf.write("\u0ffa\7\u0221\2\2\u0ffa\u0ffc\7\u0204\2\2\u0ffb\u0ffd")
        buf.write("\5\u01e8\u00f5\2\u0ffc\u0ffb\3\2\2\2\u0ffc\u0ffd\3\2\2")
        buf.write("\2\u0ffd\u1000\3\2\2\2\u0ffe\u0fff\7\u0267\2\2\u0fff\u1001")
        buf.write("\5\u01e4\u00f3\2\u1000\u0ffe\3\2\2\2\u1000\u1001\3\2\2")
        buf.write("\2\u1001\u1002\3\2\2\2\u1002\u1004\5\u01e6\u00f4\2\u1003")
        buf.write("\u1005\5\u0312\u018a\2\u1004\u1003\3\2\2\2\u1004\u1005")
        buf.write("\3\2\2\2\u1005\u100f\3\2\2\2\u1006\u1007\7\u022a\2\2\u1007")
        buf.write("\u1009\7\u0204\2\2\u1008\u100a\5\u01e8\u00f5\2\u1009\u1008")
        buf.write("\3\2\2\2\u1009\u100a\3\2\2\2\u100a\u100c\3\2\2\2\u100b")
        buf.write("\u100d\5\u0312\u018a\2\u100c\u100b\3\2\2\2\u100c\u100d")
        buf.write("\3\2\2\2\u100d\u100f\3\2\2\2\u100e\u0ff9\3\2\2\2\u100e")
        buf.write("\u1006\3\2\2\2\u100f\u01e3\3\2\2\2\u1010\u1018\5\u01d0")
        buf.write("\u00e9\2\u1011\u1012\6\u00f3M\2\u1012\u1013\t.\2\2\u1013")
        buf.write("\u1014\7\u02f0\2\2\u1014\u1018\5\u0488\u0245\2\u1015\u1016")
        buf.write("\6\u00f3N\2\u1016\u1018\7\u0213\2\2\u1017\u1010\3\2\2")
        buf.write("\2\u1017\u1011\3\2\2\2\u1017\u1015\3\2\2\2\u1018\u101d")
        buf.write("\3\2\2\2\u1019\u101a\7\u0307\2\2\u101a\u101c\5\u01d0\u00e9")
        buf.write("\2\u101b\u1019\3\2\2\2\u101c\u101f\3\2\2\2\u101d\u101b")
        buf.write("\3\2\2\2\u101d\u101e\3\2\2\2\u101e\u01e5\3\2\2\2\u101f")
        buf.write("\u101d\3\2\2\2\u1020\u1024\6\u00f4O\2\u1021\u1022\7\u026c")
        buf.write("\2\2\u1022\u1023\7\u02f0\2\2\u1023\u1025\5\u0488\u0245")
        buf.write("\2\u1024\u1021\3\2\2\2\u1024\u1025\3\2\2\2\u1025\u1029")
        buf.write("\3\2\2\2\u1026\u1027\7\u0198\2\2\u1027\u1028\7\u02f0\2")
        buf.write("\2\u1028\u102a\5\u0488\u0245\2\u1029\u1026\3\2\2\2\u1029")
        buf.write("\u102a\3\2\2\2\u102a\u102e\3\2\2\2\u102b\u102c\7\u0083")
        buf.write("\2\2\u102c\u102d\7\u02f0\2\2\u102d\u102f\5\u0488\u0245")
        buf.write("\2\u102e\u102b\3\2\2\2\u102e\u102f\3\2\2\2\u102f\u1033")
        buf.write("\3\2\2\2\u1030\u1031\7\u019b\2\2\u1031\u1032\7\u02f0\2")
        buf.write("\2\u1032\u1034\5\u0488\u0245\2\u1033\u1030\3\2\2\2\u1033")
        buf.write("\u1034\3\2\2\2\u1034\u1037\3\2\2\2\u1035\u1037\3\2\2\2")
        buf.write("\u1036\u1020\3\2\2\2\u1036\u1035\3\2\2\2\u1037\u01e7\3")
        buf.write("\2\2\2\u1038\u103d\5\u01ea\u00f6\2\u1039\u103a\7\u0307")
        buf.write("\2\2\u103a\u103c\5\u01ea\u00f6\2\u103b\u1039\3\2\2\2\u103c")
        buf.write("\u103f\3\2\2\2\u103d\u103b\3\2\2\2\u103d\u103e\3\2\2\2")
        buf.write("\u103e\u01e9\3\2\2\2\u103f\u103d\3\2\2\2\u1040\u1041\t")
        buf.write("/\2\2\u1041\u01eb\3\2\2\2\u1042\u1043\t\60\2\2\u1043\u1044")
        buf.write("\7\u00d4\2\2\u1044\u01ed\3\2\2\2\u1045\u1046\7\u01a3\2")
        buf.write("\2\u1046\u1047\5\u046c\u0237\2\u1047\u104a\7\u00cd\2\2")
        buf.write("\u1048\u104b\5\u048c\u0247\2\u1049\u104b\5\u02ea\u0176")
        buf.write("\2\u104a\u1048\3\2\2\2\u104a\u1049\3\2\2\2\u104b\u1051")
        buf.write("\3\2\2\2\u104c\u1051\5\u01f0\u00f9\2\u104d\u104e\t\61")
        buf.write("\2\2\u104e\u104f\7\u01a3\2\2\u104f\u1051\5\u046c\u0237")
        buf.write("\2\u1050\u1045\3\2\2\2\u1050\u104c\3\2\2\2\u1050\u104d")
        buf.write("\3\2\2\2\u1051\u01ef\3\2\2\2\u1052\u1053\7\u00af\2\2\u1053")
        buf.write("\u1056\5\u046c\u0237\2\u1054\u1055\7\u026f\2\2\u1055\u1057")
        buf.write("\5\u01f2\u00fa\2\u1056\u1054\3\2\2\2\u1056\u1057\3\2\2")
        buf.write("\2\u1057\u01f1\3\2\2\2\u1058\u105d\5\u02ea\u0176\2\u1059")
        buf.write("\u105a\7\u0307\2\2\u105a\u105c\5\u02ea\u0176\2\u105b\u1059")
        buf.write("\3\2\2\2\u105c\u105f\3\2\2\2\u105d\u105b\3\2\2\2\u105d")
        buf.write("\u105e\3\2\2\2\u105e\u01f3\3\2\2\2\u105f\u105d\3\2\2\2")
        buf.write("\u1060\u1079\7\u02a7\2\2\u1061\u1062\7\u011e\2\2\u1062")
        buf.write("\u1063\7r\2\2\u1063\u1065\7\u008d\2\2\u1064\u1066\5\u04aa")
        buf.write("\u0256\2\u1065\u1064\3\2\2\2\u1065\u1066\3\2\2\2\u1066")
        buf.write("\u1067\3\2\2\2\u1067\u107a\5\u0486\u0244\2\u1068\u106b")
        buf.write("\7\u02a6\2\2\u1069\u106a\7\u00ca\2\2\u106a\u106c\7\u01cd")
        buf.write("\2\2\u106b\u1069\3\2\2\2\u106b\u106c\3\2\2\2\u106c\u107a")
        buf.write("\3\2\2\2\u106d\u106e\6\u00fbP\2\u106e\u106f\7\u00f6\2")
        buf.write("\2\u106f\u1070\7\u00cd\2\2\u1070\u1071\5\u0406\u0204\2")
        buf.write("\u1071\u1072\7\u0309\2\2\u1072\u1073\5\u0478\u023d\2\u1073")
        buf.write("\u1074\7\u00e8\2\2\u1074\u1075\7/\2\2\u1075\u1077\5\u0486")
        buf.write("\u0244\2\u1076\u1078\5\u01f6\u00fc\2\u1077\u1076\3\2\2")
        buf.write("\2\u1077\u1078\3\2\2\2\u1078\u107a\3\2\2\2\u1079\u1061")
        buf.write("\3\2\2\2\u1079\u1068\3\2\2\2\u1079\u106d\3\2\2\2\u107a")
        buf.write("\u01f5\3\2\2\2\u107b\u1086\5\u01f8\u00fd\2\u107c\u107d")
        buf.write("\7r\2\2\u107d\u107f\7\u008d\2\2\u107e\u1080\5\u04aa\u0256")
        buf.write("\2\u107f\u107e\3\2\2\2\u107f\u1080\3\2\2\2\u1080\u1081")
        buf.write("\3\2\2\2\u1081\u1083\5\u0486\u0244\2\u1082\u1084\5\u01f8")
        buf.write("\u00fd\2\u1083\u1082\3\2\2\2\u1083\u1084\3\2\2\2\u1084")
        buf.write("\u1086\3\2\2\2\u1085\u107b\3\2\2\2\u1085\u107c\3\2\2\2")
        buf.write("\u1086\u01f7\3\2\2\2\u1087\u1089\7\u01d5\2\2\u1088\u108a")
        buf.write("\7\u0177\2\2\u1089\u1088\3\2\2\2\u1089\u108a\3\2\2\2\u108a")
        buf.write("\u108b\3\2\2\2\u108b\u108c\7\u021d\2\2\u108c\u01f9\3\2")
        buf.write("\2\2\u108d\u108e\6\u00feQ\2\u108e\u1097\5\u01fc\u00ff")
        buf.write("\2\u108f\u1097\5\u0202\u0102\2\u1090\u1097\5\u020e\u0108")
        buf.write("\2\u1091\u1097\5\u0210\u0109\2\u1092\u1097\5\u021e\u0110")
        buf.write("\2\u1093\u1097\5\u0220\u0111\2\u1094\u1095\6\u00feR\2")
        buf.write("\u1095\u1097\5\u0232\u011a\2\u1096\u108d\3\2\2\2\u1096")
        buf.write("\u108f\3\2\2\2\u1096\u1090\3\2\2\2\u1096\u1091\3\2\2\2")
        buf.write("\u1096\u1092\3\2\2\2\u1096\u1093\3\2\2\2\u1096\u1094\3")
        buf.write("\2\2\2\u1097\u01fb\3\2\2\2\u1098\u1099\7\r\2\2\u1099\u109c")
        buf.write("\7\u026c\2\2\u109a\u109b\6\u00ffS\2\u109b\u109d\5\u03d6")
        buf.write("\u01ec\2\u109c\u109a\3\2\2\2\u109c\u109d\3\2\2\2\u109d")
        buf.write("\u109e\3\2\2\2\u109e\u109f\5\u01fe\u0100\2\u109f\u01fd")
        buf.write("\3\2\2\2\u10a0\u10a1\6\u0100T\2\u10a1\u10a5\5\u03f6\u01fc")
        buf.write("\2\u10a2\u10a3\6\u0100U\2\u10a3\u10a5\5\u03f8\u01fd\2")
        buf.write("\u10a4\u10a0\3\2\2\2\u10a4\u10a2\3\2\2\2\u10a5\u10a6\3")
        buf.write("\2\2\2\u10a6\u10a7\5\u0204\u0103\2\u10a7\u10d7\3\2\2\2")
        buf.write("\u10a8\u10a9\6\u0100V\2\u10a9\u10aa\5\u0406\u0204\2\u10aa")
        buf.write("\u10ab\7\u00e8\2\2\u10ab\u10ac\7/\2\2\u10ac\u10af\5\u0488")
        buf.write("\u0245\2\u10ad\u10ae\6\u0100W\2\u10ae\u10b0\5\u0402\u0202")
        buf.write("\2\u10af\u10ad\3\2\2\2\u10af\u10b0\3\2\2\2\u10b0\u10b3")
        buf.write("\3\2\2\2\u10b1\u10b2\6\u0100X\2\u10b2\u10b4\5\u03fe\u0200")
        buf.write("\2\u10b3\u10b1\3\2\2\2\u10b3\u10b4\3\2\2\2\u10b4\u10d7")
        buf.write("\3\2\2\2\u10b5\u10b6\6\u0100Y\2\u10b6\u10b7\5\u0406\u0204")
        buf.write("\2\u10b7\u10b8\5\u0400\u0201\2\u10b8\u10d7\3\2\2\2\u10b9")
        buf.write("\u10ba\6\u0100Z\2\u10ba\u10bb\5\u0406\u0204\2\u10bb\u10bc")
        buf.write("\7\u0082\2\2\u10bc\u10c0\7\u0295\2\2\u10bd\u10c1\7\f\2")
        buf.write("\2\u10be\u10c1\7\u0173\2\2\u10bf\u10c1\5\u0234\u011b\2")
        buf.write("\u10c0\u10bd\3\2\2\2\u10c0\u10be\3\2\2\2\u10c0\u10bf\3")
        buf.write("\2\2\2\u10c1\u10d7\3\2\2\2\u10c2\u10c3\6\u0100[\2\u10c3")
        buf.write("\u10c4\5\u0406\u0204\2\u10c4\u10c7\7\u00e8\2\2\u10c5\u10c6")
        buf.write("\7\u0287\2\2\u10c6\u10c8\5\u04a0\u0251\2\u10c7\u10c5\3")
        buf.write("\2\2\2\u10c7\u10c8\3\2\2\2\u10c8\u10c9\3\2\2\2\u10c9\u10ca")
        buf.write("\7/\2\2\u10ca\u10cb\7\u02e0\2\2\u10cb\u10cd\7\u0198\2")
        buf.write("\2\u10cc\u10ce\5\u03fe\u0200\2\u10cd\u10cc\3\2\2\2\u10cd")
        buf.write("\u10ce\3\2\2\2\u10ce\u10d7\3\2\2\2\u10cf\u10d0\7\u02e7")
        buf.write("\2\2\u10d0\u10d7\5\u047a\u023e\2\u10d1\u10d4\7\u02e6\2")
        buf.write("\2\u10d2\u10d5\5\u047a\u023e\2\u10d3\u10d5\7\u02bc\2\2")
        buf.write("\u10d4\u10d2\3\2\2\2\u10d4\u10d3\3\2\2\2\u10d5\u10d7\3")
        buf.write("\2\2\2\u10d6\u10a4\3\2\2\2\u10d6\u10a8\3\2\2\2\u10d6\u10b5")
        buf.write("\3\2\2\2\u10d6\u10b9\3\2\2\2\u10d6\u10c2\3\2\2\2\u10d6")
        buf.write("\u10cf\3\2\2\2\u10d6\u10d1\3\2\2\2\u10d7\u01ff\3\2\2\2")
        buf.write("\u10d8\u10d9\7\u026c\2\2\u10d9\u10da\5\u04a8\u0255\2\u10da")
        buf.write("\u0201\3\2\2\2\u10db\u10dc\7c\2\2\u10dc\u10e0\7\u026c")
        buf.write("\2\2\u10dd\u10de\6\u0102\\\2\u10de\u10e1\5\u03d8\u01ed")
        buf.write("\2\u10df\u10e1\3\2\2\2\u10e0\u10dd\3\2\2\2\u10e0\u10df")
        buf.write("\3\2\2\2\u10e1\u10e2\3\2\2\2\u10e2\u10e3\5\u03f6\u01fc")
        buf.write("\2\u10e3\u10e4\5\u0206\u0104\2\u10e4\u10e5\5\u0204\u0103")
        buf.write("\2\u10e5\u0203\3\2\2\2\u10e6\u10e8\6\u0103]\2\u10e7\u10e9")
        buf.write("\5\u0208\u0105\2\u10e8\u10e7\3\2\2\2\u10e8\u10e9\3\2\2")
        buf.write("\2\u10e9\u10eb\3\2\2\2\u10ea\u10ec\5\u020a\u0106\2\u10eb")
        buf.write("\u10ea\3\2\2\2\u10eb\u10ec\3\2\2\2\u10ec\u10f0\3\2\2\2")
        buf.write("\u10ed\u10ef\5\u020c\u0107\2\u10ee\u10ed\3\2\2\2\u10ef")
        buf.write("\u10f2\3\2\2\2\u10f0\u10ee\3\2\2\2\u10f0\u10f1\3\2\2\2")
        buf.write("\u10f1\u10f5\3\2\2\2\u10f2\u10f0\3\2\2\2\u10f3\u10f5\3")
        buf.write("\2\2\2\u10f4\u10e6\3\2\2\2\u10f4\u10f3\3\2\2\2\u10f5\u0205")
        buf.write("\3\2\2\2\u10f6\u10fa\6\u0104^\2\u10f7\u10f8\7\u0082\2")
        buf.write("\2\u10f8\u10f9\7\u0295\2\2\u10f9\u10fb\5\u0234\u011b\2")
        buf.write("\u10fa\u10f7\3\2\2\2\u10fa\u10fb\3\2\2\2\u10fb\u10fe\3")
        buf.write("\2\2\2\u10fc\u10fe\3\2\2\2\u10fd\u10f6\3\2\2\2\u10fd\u10fc")
        buf.write("\3\2\2\2\u10fe\u0207\3\2\2\2\u10ff\u1102\7\u01d5\2\2\u1100")
        buf.write("\u1103\5\u022c\u0117\2\u1101\u1103\t\62\2\2\u1102\u1100")
        buf.write("\3\2\2\2\u1102\u1101\3\2\2\2\u1103\u0209\3\2\2\2\u1104")
        buf.write("\u110d\7\u0287\2\2\u1105\u1106\7\u0144\2\2\u1106\u110e")
        buf.write("\5\u0478\u023d\2\u1107\u1108\7\u0149\2\2\u1108\u110e\5")
        buf.write("\u0478\u023d\2\u1109\u110a\7\u0143\2\2\u110a\u110e\5\u0478")
        buf.write("\u023d\2\u110b\u110c\7\u014a\2\2\u110c\u110e\5\u0478\u023d")
        buf.write("\2\u110d\u1105\3\2\2\2\u110d\u1107\3\2\2\2\u110d\u1109")
        buf.write("\3\2\2\2\u110d\u110b\3\2\2\2\u110e\u110f\3\2\2\2\u110f")
        buf.write("\u110d\3\2\2\2\u110f\u1110\3\2\2\2\u1110\u020b\3\2\2\2")
        buf.write("\u1111\u1112\7\4\2\2\u1112\u1133\t\63\2\2\u1113\u1130")
        buf.write("\7\u0198\2\2\u1114\u111b\7\u00b3\2\2\u1115\u1116\7\u00f9")
        buf.write("\2\2\u1116\u1117\5\u047a\u023e\2\u1117\u1118\7|\2\2\u1118")
        buf.write("\u111c\3\2\2\2\u1119\u111c\7\u016f\2\2\u111a\u111c\7\u0082")
        buf.write("\2\2\u111b\u1115\3\2\2\2\u111b\u1119\3\2\2\2\u111b\u111a")
        buf.write("\3\2\2\2\u111b\u111c\3\2\2\2\u111c\u1131\3\2\2\2\u111d")
        buf.write("\u1120\7\u02c3\2\2\u111e\u1121\5\u047a\u023e\2\u111f\u1121")
        buf.write("\7\u0082\2\2\u1120\u111e\3\2\2\2\u1120\u111f\3\2\2\2\u1121")
        buf.write("\u1131\3\2\2\2\u1122\u1123\7\u02c4\2\2\u1123\u1128\7\u00f9")
        buf.write("\2\2\u1124\u1125\5\u047a\u023e\2\u1125\u1126\7|\2\2\u1126")
        buf.write("\u1129\3\2\2\2\u1127\u1129\7\u0082\2\2\u1128\u1124\3\2")
        buf.write("\2\2\u1128\u1127\3\2\2\2\u1129\u1131\3\2\2\2\u112a\u112b")
        buf.write("\6\u0107_\2\u112b\u112c\7\u01d5\2\2\u112c\u112e\7g\2\2")
        buf.write("\u112d\u112f\t\64\2\2\u112e\u112d\3\2\2\2\u112e\u112f")
        buf.write("\3\2\2\2\u112f\u1131\3\2\2\2\u1130\u1114\3\2\2\2\u1130")
        buf.write("\u111d\3\2\2\2\u1130\u1122\3\2\2\2\u1130\u112a\3\2\2\2")
        buf.write("\u1131\u1133\3\2\2\2\u1132\u1111\3\2\2\2\u1132\u1113\3")
        buf.write("\2\2\2\u1133\u020d\3\2\2\2\u1134\u1135\7\u0096\2\2\u1135")
        buf.write("\u1138\7\u026c\2\2\u1136\u1137\6\u0108`\2\u1137\u1139")
        buf.write("\5\u03d6\u01ec\2\u1138\u1136\3\2\2\2\u1138\u1139\3\2\2")
        buf.write("\2\u1139\u113a\3\2\2\2\u113a\u113b\5\u03f4\u01fb\2\u113b")
        buf.write("\u020f\3\2\2\2\u113c\u1167\7\u00d9\2\2\u113d\u113e\6\u0109")
        buf.write("a\2\u113e\u113f\5\u0226\u0114\2\u113f\u1140\7\u0250\2")
        buf.write("\2\u1140\u1144\5\u03f4\u01fb\2\u1141\u1142\7\u0287\2\2")
        buf.write("\u1142\u1143\7\u0296\2\2\u1143\u1145\7\u0189\2\2\u1144")
        buf.write("\u1141\3\2\2\2\u1144\u1145\3\2\2\2\u1145\u1168\3\2\2\2")
        buf.write("\u1146\u114c\5\u0226\u0114\2\u1147\u1149\7\f\2\2\u1148")
        buf.write("\u114a\7\u01a7\2\2\u1149\u1148\3\2\2\2\u1149\u114a\3\2")
        buf.write("\2\2\u114a\u114c\3\2\2\2\u114b\u1146\3\2\2\2\u114b\u1147")
        buf.write("\3\2\2\2\u114c\u114d\3\2\2\2\u114d\u114f\7\u0181\2\2\u114e")
        buf.write("\u1150\5\u0224\u0113\2\u114f\u114e\3\2\2\2\u114f\u1150")
        buf.write("\3\2\2\2\u1150\u1151\3\2\2\2\u1151\u1152\5\u022a\u0116")
        buf.write("\2\u1152\u1153\7\u0250\2\2\u1153\u1155\5\u0212\u010a\2")
        buf.write("\u1154\u1156\5\u021c\u010f\2\u1155\u1154\3\2\2\2\u1155")
        buf.write("\u1156\3\2\2\2\u1156\u1158\3\2\2\2\u1157\u1159\5\u0214")
        buf.write("\u010b\2\u1158\u1157\3\2\2\2\u1158\u1159\3\2\2\2\u1159")
        buf.write("\u115b\3\2\2\2\u115a\u115c\5\u021a\u010e\2\u115b\u115a")
        buf.write("\3\2\2\2\u115b\u115c\3\2\2\2\u115c\u1168\3\2\2\2\u115d")
        buf.write("\u115e\7\u01ad\2\2\u115e\u115f\7\u0181\2\2\u115f\u1160")
        buf.write("\5\u0406\u0204\2\u1160\u1161\7\u0250\2\2\u1161\u1165\5")
        buf.write("\u0212\u010a\2\u1162\u1163\7\u0287\2\2\u1163\u1164\7\u00d9")
        buf.write("\2\2\u1164\u1166\7\u0189\2\2\u1165\u1162\3\2\2\2\u1165")
        buf.write("\u1166\3\2\2\2\u1166\u1168\3\2\2\2\u1167\u113d\3\2\2\2")
        buf.write("\u1167\u114b\3\2\2\2\u1167\u115d\3\2\2\2\u1168\u0211\3")
        buf.write("\2\2\2\u1169\u116a\6\u010ab\2\u116a\u116e\5\u03f6\u01fc")
        buf.write("\2\u116b\u116c\6\u010ac\2\u116c\u116e\5\u03f4\u01fb\2")
        buf.write("\u116d\u1169\3\2\2\2\u116d\u116b\3\2\2\2\u116e\u0213\3")
        buf.write("\2\2\2\u116f\u1170\6\u010bd\2\u1170\u1172\7\u0287\2\2")
        buf.write("\u1171\u1173\5\u0230\u0119\2\u1172\u1171\3\2\2\2\u1173")
        buf.write("\u1174\3\2\2\2\u1174\u1172\3\2\2\2\u1174\u1175\3\2\2\2")
        buf.write("\u1175\u117b\3\2\2\2\u1176\u1177\6\u010be\2\u1177\u1178")
        buf.write("\7\u0287\2\2\u1178\u1179\7\u00d9\2\2\u1179\u117b\7\u0189")
        buf.write("\2\2\u117a\u116f\3\2\2\2\u117a\u1176\3\2\2\2\u117b\u0215")
        buf.write("\3\2\2\2\u117c\u117d\7\u0299\2\2\u117d\u117e\5\u0234\u011b")
        buf.write("\2\u117e\u0217\3\2\2\2\u117f\u1180\7\u0287\2\2\u1180\u1188")
        buf.write("\7\u0295\2\2\u1181\u1189\5\u0234\u011b\2\u1182\u1184\7")
        buf.write("\f\2\2\u1183\u1185\5\u0216\u010c\2\u1184\u1183\3\2\2\2")
        buf.write("\u1184\u1185\3\2\2\2\u1185\u1189\3\2\2\2\u1186\u1189\7")
        buf.write("\u0173\2\2\u1187\u1189\7\u0082\2\2\u1188\u1181\3\2\2\2")
        buf.write("\u1188\u1182\3\2\2\2\u1188\u1186\3\2\2\2\u1188\u1187\3")
        buf.write("\2\2\2\u1189\u0219\3\2\2\2\u118a\u118b\7\23\2\2\u118b")
        buf.write("\u118d\7\u026c\2\2\u118c\u118e\5\u0218\u010d\2\u118d\u118c")
        buf.write("\3\2\2\2\u118d\u118e\3\2\2\2\u118e\u021b\3\2\2\2\u118f")
        buf.write("\u1190\6\u010ff\2\u1190\u1191\5\u0208\u0105\2\u1191\u021d")
        buf.write("\3\2\2\2\u1192\u1193\7\u01c7\2\2\u1193\u1194\7\u026c\2")
        buf.write("\2\u1194\u1195\5\u0406\u0204\2\u1195\u1196\7\u0250\2\2")
        buf.write("\u1196\u119e\5\u0406\u0204\2\u1197\u1198\7\u0307\2\2\u1198")
        buf.write("\u1199\5\u0406\u0204\2\u1199\u119a\7\u0250\2\2\u119a\u119b")
        buf.write("\5\u0406\u0204\2\u119b\u119d\3\2\2\2\u119c\u1197\3\2\2")
        buf.write("\2\u119d\u11a0\3\2\2\2\u119e\u119c\3\2\2\2\u119e\u119f")
        buf.write("\3\2\2\2\u119f\u021f\3\2\2\2\u11a0\u119e\3\2\2\2\u11a1")
        buf.write("\u11c3\7\u01df\2\2\u11a2\u11a3\6\u0111g\2\u11a3\u11a4")
        buf.write("\5\u0226\u0114\2\u11a4\u11a5\7\u00cd\2\2\u11a5\u11a6\5")
        buf.write("\u03f4\u01fb\2\u11a6\u11c4\3\2\2\2\u11a7\u11a8\5\u0226")
        buf.write("\u0114\2\u11a8\u11a9\5\u0222\u0112\2\u11a9\u11aa\7\u00cd")
        buf.write("\2\2\u11aa\u11ab\5\u03f4\u01fb\2\u11ab\u11c4\3\2\2\2\u11ac")
        buf.write("\u11ae\7\f\2\2\u11ad\u11af\7\u01a7\2\2\u11ae\u11ad\3\2")
        buf.write("\2\2\u11ae\u11af\3\2\2\2\u11af\u11bb\3\2\2\2\u11b0\u11b1")
        buf.write("\6\u0111h\2\u11b1\u11b3\7\u0181\2\2\u11b2\u11b4\5\u0224")
        buf.write("\u0113\2\u11b3\u11b2\3\2\2\2\u11b3\u11b4\3\2\2\2\u11b4")
        buf.write("\u11b5\3\2\2\2\u11b5\u11bc\5\u022a\u0116\2\u11b6\u11b7")
        buf.write("\7\u0307\2\2\u11b7\u11b8\7\u00d9\2\2\u11b8\u11b9\7\u0189")
        buf.write("\2\2\u11b9\u11ba\7\u00cd\2\2\u11ba\u11bc\5\u03f4\u01fb")
        buf.write("\2\u11bb\u11b0\3\2\2\2\u11bb\u11b6\3\2\2\2\u11bc\u11c4")
        buf.write("\3\2\2\2\u11bd\u11be\7\u01ad\2\2\u11be\u11bf\7\u0181\2")
        buf.write("\2\u11bf\u11c0\5\u0406\u0204\2\u11c0\u11c1\7\u00cd\2\2")
        buf.write("\u11c1\u11c2\5\u03f4\u01fb\2\u11c2\u11c4\3\2\2\2\u11c3")
        buf.write("\u11a2\3\2\2\2\u11c3\u11a7\3\2\2\2\u11c3\u11ac\3\2\2\2")
        buf.write("\u11c3\u11bd\3\2\2\2\u11c4\u0221\3\2\2\2\u11c5\u11c6\6")
        buf.write("\u0112i\2\u11c6\u11c8\7\u0181\2\2\u11c7\u11c9\5\u0224")
        buf.write("\u0113\2\u11c8\u11c7\3\2\2\2\u11c8\u11c9\3\2\2\2\u11c9")
        buf.write("\u11ca\3\2\2\2\u11ca\u11d4\5\u022a\u0116\2\u11cb\u11d1")
        buf.write("\6\u0112j\2\u11cc\u11ce\7\u0181\2\2\u11cd\u11cf\5\u0224")
        buf.write("\u0113\2\u11ce\u11cd\3\2\2\2\u11ce\u11cf\3\2\2\2\u11cf")
        buf.write("\u11d0\3\2\2\2\u11d0\u11d2\5\u022a\u0116\2\u11d1\u11cc")
        buf.write("\3\2\2\2\u11d1\u11d2\3\2\2\2\u11d2\u11d4\3\2\2\2\u11d3")
        buf.write("\u11c5\3\2\2\2\u11d3\u11cb\3\2\2\2\u11d4\u0223\3\2\2\2")
        buf.write("\u11d5\u11d6\t\65\2\2\u11d6\u0225\3\2\2\2\u11d7\u11dc")
        buf.write("\5\u0228\u0115\2\u11d8\u11d9\7\u0307\2\2\u11d9\u11db\5")
        buf.write("\u0228\u0115\2\u11da\u11d8\3\2\2\2\u11db\u11de\3\2\2\2")
        buf.write("\u11dc\u11da\3\2\2\2\u11dc\u11dd\3\2\2\2\u11dd\u0227\3")
        buf.write("\2\2\2\u11de\u11dc\3\2\2\2\u11df\u11ea\6\u0115k\2\u11e0")
        buf.write("\u11e2\5\u04a4\u0253\2\u11e1\u11e3\5\u0418\u020d\2\u11e2")
        buf.write("\u11e1\3\2\2\2\u11e2\u11e3\3\2\2\2\u11e3\u11eb\3\2\2\2")
        buf.write("\u11e4\u11e8\5\u04a4\u0253\2\u11e5\u11e9\7\u0312\2\2\u11e6")
        buf.write("\u11e7\7\u0311\2\2\u11e7\u11e9\5\u04a0\u0251\2\u11e8\u11e5")
        buf.write("\3\2\2\2\u11e8\u11e6\3\2\2\2\u11e9\u11eb\3\2\2\2\u11ea")
        buf.write("\u11e0\3\2\2\2\u11ea\u11e4\3\2\2\2\u11eb\u1209\3\2\2\2")
        buf.write("\u11ec\u11ee\t\66\2\2\u11ed\u11ef\5\u0418\u020d\2\u11ee")
        buf.write("\u11ed\3\2\2\2\u11ee\u11ef\3\2\2\2\u11ef\u1209\3\2\2\2")
        buf.write("\u11f0\u1209\t\67\2\2\u11f1\u11f2\7\u00d9\2\2\u11f2\u1209")
        buf.write("\7\u0189\2\2\u11f3\u11f4\7\u01ff\2\2\u11f4\u1209\7p\2")
        buf.write("\2\u11f5\u11f9\7c\2\2\u11f6\u11f7\7\u0243\2\2\u11f7\u11fa")
        buf.write("\7\u023d\2\2\u11f8\u11fa\t8\2\2\u11f9\u11f6\3\2\2\2\u11f9")
        buf.write("\u11f8\3\2\2\2\u11f9\u11fa\3\2\2\2\u11fa\u1209\3\2\2\2")
        buf.write("\u11fb\u11fc\7\u0121\2\2\u11fc\u1209\7\u023d\2\2\u11fd")
        buf.write("\u11fe\7\u01cd\2\2\u11fe\u1209\t9\2\2\u11ff\u1200\7\u01ff")
        buf.write("\2\2\u1200\u1209\7\u027e\2\2\u1201\u1203\7\r\2\2\u1202")
        buf.write("\u1204\7\u01e5\2\2\u1203\u1202\3\2\2\2\u1203\u1204\3\2")
        buf.write("\2\2\u1204\u1209\3\2\2\2\u1205\u1206\6\u0115l\2\u1206")
        buf.write("\u1207\t:\2\2\u1207\u1209\7\u0295\2\2\u1208\u11df\3\2")
        buf.write("\2\2\u1208\u11ec\3\2\2\2\u1208\u11f0\3\2\2\2\u1208\u11f1")
        buf.write("\3\2\2\2\u1208\u11f3\3\2\2\2\u1208\u11f5\3\2\2\2\u1208")
        buf.write("\u11fb\3\2\2\2\u1208\u11fd\3\2\2\2\u1208\u11ff\3\2\2\2")
        buf.write("\u1208\u1201\3\2\2\2\u1208\u1205\3\2\2\2\u1209\u0229\3")
        buf.write("\2\2\2\u120a\u120d\7\u02fa\2\2\u120b\u120c\7\u0306\2\2")
        buf.write("\u120c\u120e\7\u02fa\2\2\u120d\u120b\3\2\2\2\u120d\u120e")
        buf.write("\3\2\2\2\u120e\u121b\3\2\2\2\u120f\u1212\5\u0426\u0214")
        buf.write("\2\u1210\u1211\7\u0306\2\2\u1211\u1213\7\u02fa\2\2\u1212")
        buf.write("\u1210\3\2\2\2\u1212\u1213\3\2\2\2\u1213\u121b\3\2\2\2")
        buf.write("\u1214\u121b\5\u0452\u022a\2\u1215\u1216\6\u0116m\2\u1216")
        buf.write("\u1217\5\u0426\u0214\2\u1217\u1218\7\u0306\2\2\u1218\u1219")
        buf.write("\5\u0452\u022a\2\u1219\u121b\3\2\2\2\u121a\u120a\3\2\2")
        buf.write("\2\u121a\u120f\3\2\2\2\u121a\u1214\3\2\2\2\u121a\u1215")
        buf.write("\3\2\2\2\u121b\u022b\3\2\2\2\u121c\u1223\5\u022e\u0118")
        buf.write("\2\u121d\u121f\7\21\2\2\u121e\u121d\3\2\2\2\u121e\u121f")
        buf.write("\3\2\2\2\u121f\u1220\3\2\2\2\u1220\u1222\5\u022e\u0118")
        buf.write("\2\u1221\u121e\3\2\2\2\u1222\u1225\3\2\2\2\u1223\u1221")
        buf.write("\3\2\2\2\u1223\u1224\3\2\2\2\u1224\u022d\3\2\2\2\u1225")
        buf.write("\u1223\3\2\2\2\u1226\u1227\7A\2\2\u1227\u122d\5\u0488")
        buf.write("\u0245\2\u1228\u1229\7\u0105\2\2\u1229\u122d\5\u0488\u0245")
        buf.write("\2\u122a\u122b\7\u0231\2\2\u122b\u122d\5\u0488\u0245\2")
        buf.write("\u122c\u1226\3\2\2\2\u122c\u1228\3\2\2\2\u122c\u122a\3")
        buf.write("\2\2\2\u122d\u022f\3\2\2\2\u122e\u122f\7\u00d9\2\2\u122f")
        buf.write("\u1239\7\u0189\2\2\u1230\u1231\7\u0144\2\2\u1231\u1239")
        buf.write("\5\u0478\u023d\2\u1232\u1233\7\u0149\2\2\u1233\u1239\5")
        buf.write("\u0478\u023d\2\u1234\u1235\7\u0143\2\2\u1235\u1239\5\u0478")
        buf.write("\u023d\2\u1236\u1237\7\u014a\2\2\u1237\u1239\5\u0478\u023d")
        buf.write("\2\u1238\u122e\3\2\2\2\u1238\u1230\3\2\2\2\u1238\u1232")
        buf.write("\3\2\2\2\u1238\u1234\3\2\2\2\u1238\u1236\3\2\2\2\u1239")
        buf.write("\u0231\3\2\2\2\u123a\u123b\7\u01fc\2\2\u123b\u123c\7\u0295")
        buf.write("\2\2\u123c\u1252\5\u0234\u011b\2\u123d\u123e\7\u01fc\2")
        buf.write("\2\u123e\u123f\7\u0295\2\2\u123f\u1252\t;\2\2\u1240\u1241")
        buf.write("\7\u01fc\2\2\u1241\u1242\7\u0082\2\2\u1242\u1246\7\u0295")
        buf.write("\2\2\u1243\u1247\5\u0234\u011b\2\u1244\u1247\7\u0173\2")
        buf.write("\2\u1245\u1247\7\f\2\2\u1246\u1243\3\2\2\2\u1246\u1244")
        buf.write("\3\2\2\2\u1246\u1245\3\2\2\2\u1247\u1248\3\2\2\2\u1248")
        buf.write("\u1249\7\u0250\2\2\u1249\u1252\5\u0234\u011b\2\u124a\u124b")
        buf.write("\7\u01fc\2\2\u124b\u124c\7\u0295\2\2\u124c\u124f\7\f\2")
        buf.write("\2\u124d\u124e\7\u0299\2\2\u124e\u1250\5\u0234\u011b\2")
        buf.write("\u124f\u124d\3\2\2\2\u124f\u1250\3\2\2\2\u1250\u1252\3")
        buf.write("\2\2\2\u1251\u123a\3\2\2\2\u1251\u123d\3\2\2\2\u1251\u1240")
        buf.write("\3\2\2\2\u1251\u124a\3\2\2\2\u1252\u0233\3\2\2\2\u1253")
        buf.write("\u1258\5\u0236\u011c\2\u1254\u1255\7\u0307\2\2\u1255\u1257")
        buf.write("\5\u0236\u011c\2\u1256\u1254\3\2\2\2\u1257\u125a\3\2\2")
        buf.write("\2\u1258\u1256\3\2\2\2\u1258\u1259\3\2\2\2\u1259\u0235")
        buf.write("\3\2\2\2\u125a\u1258\3\2\2\2\u125b\u125f\5\u04a4\u0253")
        buf.write("\2\u125c\u125d\7\u0311\2\2\u125d\u1260\5\u04a0\u0251\2")
        buf.write("\u125e\u1260\7\u0312\2\2\u125f\u125c\3\2\2\2\u125f\u125e")
        buf.write("\3\2\2\2\u125f\u1260\3\2\2\2\u1260\u0237\3\2\2\2\u1261")
        buf.write("\u1263\7\20\2\2\u1262\u1264\5\u040e\u0208\2\u1263\u1262")
        buf.write("\3\2\2\2\u1263\u1264\3\2\2\2\u1264\u1265\3\2\2\2\u1265")
        buf.write("\u1266\7\u0240\2\2\u1266\u1269\5\u0454\u022b\2\u1267\u1268")
        buf.write("\6\u011dn\2\u1268\u126a\5\u023a\u011e\2\u1269\u1267\3")
        buf.write("\2\2\2\u1269\u126a\3\2\2\2\u126a\u128d\3\2\2\2\u126b\u126c")
        buf.write("\7@\2\2\u126c\u126d\7\u0240\2\2\u126d\u1271\5\u0454\u022b")
        buf.write("\2\u126e\u1270\5\u023c\u011f\2\u126f\u126e\3\2\2\2\u1270")
        buf.write("\u1273\3\2\2\2\u1271\u126f\3\2\2\2\u1271\u1272\3\2\2\2")
        buf.write("\u1272\u128d\3\2\2\2\u1273\u1271\3\2\2\2\u1274\u1275\7")
        buf.write("?\2\2\u1275\u1276\7\u0240\2\2\u1276\u1278\5\u0454\u022b")
        buf.write("\2\u1277\u1279\t<\2\2\u1278\u1277\3\2\2\2\u1278\u1279")
        buf.write("\3\2\2\2\u1279\u128d\3\2\2\2\u127a\u127c\7\u0186\2\2\u127b")
        buf.write("\u127d\5\u040e\u0208\2\u127c\u127b\3\2\2\2\u127c\u127d")
        buf.write("\3\2\2\2\u127d\u127e\3\2\2\2\u127e\u127f\7\u0240\2\2\u127f")
        buf.write("\u128d\5\u0454\u022b\2\u1280\u1282\7\u01c9\2\2\u1281\u1283")
        buf.write("\5\u040e\u0208\2\u1282\u1281\3\2\2\2\u1282\u1283\3\2\2")
        buf.write("\2\u1283\u1284\3\2\2\2\u1284\u1285\7\u0240\2\2\u1285\u1289")
        buf.write("\5\u0454\u022b\2\u1286\u1288\5\u023e\u0120\2\u1287\u1286")
        buf.write("\3\2\2\2\u1288\u128b\3\2\2\2\u1289\u1287\3\2\2\2\u1289")
        buf.write("\u128a\3\2\2\2\u128a\u128d\3\2\2\2\u128b\u1289\3\2\2\2")
        buf.write("\u128c\u1261\3\2\2\2\u128c\u126b\3\2\2\2\u128c\u1274\3")
        buf.write("\2\2\2\u128c\u127a\3\2\2\2\u128c\u1280\3\2\2\2\u128d\u0239")
        buf.write("\3\2\2\2\u128e\u128f\7\u0268\2\2\u128f\u1290\7\u02a4\2")
        buf.write("\2\u1290\u1291\7\u0181\2\2\u1291\u1295\5\u046e\u0238\2")
        buf.write("\u1292\u1293\7\u0287\2\2\u1293\u1294\7\u02ed\2\2\u1294")
        buf.write("\u1296\7\u02a5\2\2\u1295\u1292\3\2\2\2\u1295\u1296\3\2")
        buf.write("\2\2\u1296\u129c\3\2\2\2\u1297\u1298\7\u0096\2\2\u1298")
        buf.write("\u1299\7\u02a4\2\2\u1299\u129a\7\u0181\2\2\u129a\u129c")
        buf.write("\5\u046e\u0238\2\u129b\u128e\3\2\2\2\u129b\u1297\3\2\2")
        buf.write("\2\u129c\u023b\3\2\2\2\u129d\u129e\7\u00ca\2\2\u129e\u12a1")
        buf.write("\7\u0269\2\2\u129f\u12a1\t=\2\2\u12a0\u129d\3\2\2\2\u12a0")
        buf.write("\u129f\3\2\2\2\u12a1\u023d\3\2\2\2\u12a2\u12a3\t>\2\2")
        buf.write("\u12a3\u023f\3\2\2\2\u12a4\u12a5\7\u00f7\2\2\u12a5\u12a6")
        buf.write("\7\u019c\2\2\u12a6\u12a7\5\u046c\u0237\2\u12a7\u12a8\7")
        buf.write("\u020a\2\2\u12a8\u12a9\5\u0486\u0244\2\u12a9\u12bb\3\2")
        buf.write("\2\2\u12aa\u12ab\7\u00f7\2\2\u12ab\u12ac\7\u029a\2\2\u12ac")
        buf.write("\u12bb\5\u0490\u0249\2\u12ad\u12ae\7\u0261\2\2\u12ae\u12af")
        buf.write("\7\u019c\2\2\u12af\u12bb\5\u0462\u0232\2\u12b0\u12b1\7")
        buf.write("\u0261\2\2\u12b1\u12b2\7\u029a\2\2\u12b2\u12b7\5\u0464")
        buf.write("\u0233\2\u12b3\u12b4\7\u0307\2\2\u12b4\u12b6\5\u0464\u0233")
        buf.write("\2\u12b5\u12b3\3\2\2\2\u12b6\u12b9\3\2\2\2\u12b7\u12b5")
        buf.write("\3\2\2\2\u12b7\u12b8\3\2\2\2\u12b8\u12bb\3\2\2\2\u12b9")
        buf.write("\u12b7\3\2\2\2\u12ba\u12a4\3\2\2\2\u12ba\u12aa\3\2\2\2")
        buf.write("\u12ba\u12ad\3\2\2\2\u12ba\u12b0\3\2\2\2\u12bb\u0241\3")
        buf.write("\2\2\2\u12bc\u12bd\7\u01fc\2\2\u12bd\u12be\5\u0244\u0123")
        buf.write("\2\u12be\u0243\3\2\2\2\u12bf\u12c0\5\u024e\u0128\2\u12c0")
        buf.write("\u12c1\5\u024c\u0127\2\u12c1\u12f8\3\2\2\2\u12c2\u12c3")
        buf.write("\7\u0252\2\2\u12c3\u12f8\5\u0246\u0124\2\u12c4\u12c5\5")
        buf.write("\u04ac\u0257\2\u12c5\u12c6\5\u0254\u012b\2\u12c6\u12f8")
        buf.write("\3\2\2\2\u12c7\u12ca\7\u0198\2\2\u12c8\u12c9\7\u00ca\2")
        buf.write("\2\u12c9\u12cb\5\u0406\u0204\2\u12ca\u12c8\3\2\2\2\u12ca")
        buf.write("\u12cb\3\2\2\2\u12cb\u12cc\3\2\2\2\u12cc\u12e7\5\u04aa")
        buf.write("\u0256\2\u12cd\u12cf\5\u0488\u0245\2\u12ce\u12d0\5\u0402")
        buf.write("\u0202\2\u12cf\u12ce\3\2\2\2\u12cf\u12d0\3\2\2\2\u12d0")
        buf.write("\u12d2\3\2\2\2\u12d1\u12d3\5\u03fe\u0200\2\u12d2\u12d1")
        buf.write("\3\2\2\2\u12d2\u12d3\3\2\2\2\u12d3\u12e8\3\2\2\2\u12d4")
        buf.write("\u12d6\5\u0488\u0245\2\u12d5\u12d7\5\u0402\u0202\2\u12d6")
        buf.write("\u12d5\3\2\2\2\u12d6\u12d7\3\2\2\2\u12d7\u12d9\3\2\2\2")
        buf.write("\u12d8\u12da\5\u03fe\u0200\2\u12d9\u12d8\3\2\2\2\u12d9")
        buf.write("\u12da\3\2\2\2\u12da\u12e8\3\2\2\2\u12db\u12dc\6\u0123")
        buf.write("o\2\u12dc\u12dd\7\u0180\2\2\u12dd\u12de\7\u030a\2\2\u12de")
        buf.write("\u12df\5\u0488\u0245\2\u12df\u12e0\7\u030b\2\2\u12e0\u12e8")
        buf.write("\3\2\2\2\u12e1\u12e2\6\u0123p\2\u12e2\u12e3\7\u0198\2")
        buf.write("\2\u12e3\u12e4\7\u030a\2\2\u12e4\u12e5\5\u0488\u0245\2")
        buf.write("\u12e5\u12e6\7\u030b\2\2\u12e6\u12e8\3\2\2\2\u12e7\u12cd")
        buf.write("\3\2\2\2\u12e7\u12d4\3\2\2\2\u12e7\u12db\3\2\2\2\u12e7")
        buf.write("\u12e1\3\2\2\2\u12e8\u12f8\3\2\2\2\u12e9\u12ea\6\u0123")
        buf.write("q\2\u12ea\u12ed\7\u0198\2\2\u12eb\u12ec\7\u00ca\2\2\u12ec")
        buf.write("\u12ee\5\u0406\u0204\2\u12ed\u12eb\3\2\2\2\u12ed\u12ee")
        buf.write("\3\2\2\2\u12ee\u12ef\3\2\2\2\u12ef\u12f0\7\u0250\2\2\u12f0")
        buf.write("\u12f2\7\u02e0\2\2\u12f1\u12f3\5\u0402\u0202\2\u12f2\u12f1")
        buf.write("\3\2\2\2\u12f2\u12f3\3\2\2\2\u12f3\u12f5\3\2\2\2\u12f4")
        buf.write("\u12f6\5\u03fe\u0200\2\u12f5\u12f4\3\2\2\2\u12f5\u12f6")
        buf.write("\3\2\2\2\u12f6\u12f8\3\2\2\2\u12f7\u12bf\3\2\2\2\u12f7")
        buf.write("\u12c2\3\2\2\2\u12f7\u12c4\3\2\2\2\u12f7\u12c7\3\2\2\2")
        buf.write("\u12f7\u12e9\3\2\2\2\u12f8\u0245\3\2\2\2\u12f9\u12fb\5")
        buf.write("\u0248\u0125\2\u12fa\u12fc\5\u024a\u0126\2\u12fb\u12fa")
        buf.write("\3\2\2\2\u12fb\u12fc\3\2\2\2\u12fc\u1303\3\2\2\2\u12fd")
        buf.write("\u1300\5\u024a\u0126\2\u12fe\u12ff\7\u0307\2\2\u12ff\u1301")
        buf.write("\5\u0248\u0125\2\u1300\u12fe\3\2\2\2\u1300\u1301\3\2\2")
        buf.write("\2\u1301\u1303\3\2\2\2\u1302\u12f9\3\2\2\2\u1302\u12fd")
        buf.write("\3\2\2\2\u1303\u0247\3\2\2\2\u1304\u1305\7\u01b5\2\2\u1305")
        buf.write("\u1306\t)\2\2\u1306\u0249\3\2\2\2\u1307\u1308\7\u0104")
        buf.write("\2\2\u1308\u130e\7\u0114\2\2\u1309\u130a\7\u01ca\2\2\u130a")
        buf.write("\u130f\7\u01b5\2\2\u130b\u130c\7\u01b5\2\2\u130c\u130f")
        buf.write("\t?\2\2\u130d\u130f\7\u01f6\2\2\u130e\u1309\3\2\2\2\u130e")
        buf.write("\u130b\3\2\2\2\u130e\u130d\3\2\2\2\u130f\u024b\3\2\2\2")
        buf.write("\u1310\u1311\7\u0307\2\2\u1311\u1313\5\u0250\u0129\2\u1312")
        buf.write("\u1310\3\2\2\2\u1313\u1316\3\2\2\2\u1314\u1312\3\2\2\2")
        buf.write("\u1314\u1315\3\2\2\2\u1315\u024d\3\2\2\2\u1316\u1314\3")
        buf.write("\2\2\2\u1317\u1318\5\u02ee\u0178\2\u1318\u1319\5\u04aa")
        buf.write("\u0256\2\u1319\u131a\5\u0258\u012d\2\u131a\u1331\3\2\2")
        buf.write("\2\u131b\u1331\5\u03ea\u01f6\2\u131c\u131d\5\u02ea\u0176")
        buf.write("\2\u131d\u131e\5\u04aa\u0256\2\u131e\u131f\5\u02a8\u0155")
        buf.write("\2\u131f\u1331\3\2\2\2\u1320\u1321\5\u0252\u012a\2\u1321")
        buf.write("\u1322\5\u04aa\u0256\2\u1322\u1323\5\u0258\u012d\2\u1323")
        buf.write("\u1331\3\2\2\2\u1324\u132e\7\u0166\2\2\u1325\u1326\5\u04aa")
        buf.write("\u0256\2\u1326\u1327\5\u02a8\u0155\2\u1327\u132f\3\2\2")
        buf.write("\2\u1328\u132a\5\u03ac\u01d7\2\u1329\u132b\5\u03de\u01f0")
        buf.write("\2\u132a\u1329\3\2\2\2\u132a\u132b\3\2\2\2\u132b\u132f")
        buf.write("\3\2\2\2\u132c\u132d\6\u0128r\2\u132d\u132f\7\u0082\2")
        buf.write("\2\u132e\u1325\3\2\2\2\u132e\u1328\3\2\2\2\u132e\u132c")
        buf.write("\3\2\2\2\u132f\u1331\3\2\2\2\u1330\u1317\3\2\2\2\u1330")
        buf.write("\u131b\3\2\2\2\u1330\u131c\3\2\2\2\u1330\u1320\3\2\2\2")
        buf.write("\u1330\u1324\3\2\2\2\u1331\u024f\3\2\2\2\u1332\u1333\5")
        buf.write("\u04ac\u0257\2\u1333\u1334\5\u02ee\u0178\2\u1334\u1335")
        buf.write("\5\u04aa\u0256\2\u1335\u1336\5\u0258\u012d\2\u1336\u1339")
        buf.write("\3\2\2\2\u1337\u1339\5\u024e\u0128\2\u1338\u1332\3\2\2")
        buf.write("\2\u1338\u1337\3\2\2\2\u1339\u0251\3\2\2\2\u133a\u133c")
        buf.write("\7\u0313\2\2\u133b\u133d\5\u04b0\u0259\2\u133c\u133b\3")
        buf.write("\2\2\2\u133c\u133d\3\2\2\2\u133d\u133e\3\2\2\2\u133e\u133f")
        buf.write("\5\u02ee\u0178\2\u133f\u0253\3\2\2\2\u1340\u1341\5\u0256")
        buf.write("\u012c\2\u1341\u1342\5\u024c\u0127\2\u1342\u1346\3\2\2")
        buf.write("\2\u1343\u1344\7\u0252\2\2\u1344\u1346\5\u0246\u0124\2")
        buf.write("\u1345\u1340\3\2\2\2\u1345\u1343\3\2\2\2\u1346\u0255\3")
        buf.write("\2\2\2\u1347\u1348\5\u02ee\u0178\2\u1348\u1349\5\u04aa")
        buf.write("\u0256\2\u1349\u134a\5\u0258\u012d\2\u134a\u0257\3\2\2")
        buf.write("\2\u134b\u1350\5\u02a8\u0155\2\u134c\u1350\t@\2\2\u134d")
        buf.write("\u134e\6\u012ds\2\u134e\u1350\tA\2\2\u134f\u134b\3\2\2")
        buf.write("\2\u134f\u134c\3\2\2\2\u134f\u134d\3\2\2\2\u1350\u0259")
        buf.write("\3\2\2\2\u1351\u142d\7\u01ff\2\2\u1352\u1353\6\u012et")
        buf.write("\2\u1353\u142e\7\30\2\2\u1354\u1356\7p\2\2\u1355\u1357")
        buf.write("\5\u040a\u0206\2\u1356\u1355\3\2\2\2\u1356\u1357\3\2\2")
        buf.write("\2\u1357\u142e\3\2\2\2\u1358\u135a\5\u025c\u012f\2\u1359")
        buf.write("\u1358\3\2\2\2\u1359\u135a\3\2\2\2\u135a\u135b\3\2\2\2")
        buf.write("\u135b\u135d\7\u023d\2\2\u135c\u135e\5\u0262\u0132\2\u135d")
        buf.write("\u135c\3\2\2\2\u135d\u135e\3\2\2\2\u135e\u1360\3\2\2\2")
        buf.write("\u135f\u1361\5\u040a\u0206\2\u1360\u135f\3\2\2\2\u1360")
        buf.write("\u1361\3\2\2\2\u1361\u142e\3\2\2\2\u1362\u1364\7\u00ce")
        buf.write("\2\2\u1363\u1362\3\2\2\2\u1363\u1364\3\2\2\2\u1364\u1365")
        buf.write("\3\2\2\2\u1365\u1367\7\u0253\2\2\u1366\u1368\5\u0262\u0132")
        buf.write("\2\u1367\u1366\3\2\2\2\u1367\u1368\3\2\2\2\u1368\u136a")
        buf.write("\3\2\2\2\u1369\u136b\5\u040a\u0206\2\u136a\u1369\3\2\2")
        buf.write("\2\u136a\u136b\3\2\2\2\u136b\u142e\3\2\2\2\u136c\u136e")
        buf.write("\7\u00ab\2\2\u136d\u136f\5\u0262\u0132\2\u136e\u136d\3")
        buf.write("\2\2\2\u136e\u136f\3\2\2\2\u136f\u1371\3\2\2\2\u1370\u1372")
        buf.write("\5\u040a\u0206\2\u1371\u1370\3\2\2\2\u1371\u1372\3\2\2")
        buf.write("\2\u1372\u142e\3\2\2\2\u1373\u1374\7\u0240\2\2\u1374\u1376")
        buf.write("\7\u0225\2\2\u1375\u1377\5\u0262\u0132\2\u1376\u1375\3")
        buf.write("\2\2\2\u1376\u1377\3\2\2\2\u1377\u1379\3\2\2\2\u1378\u137a")
        buf.write("\5\u040a\u0206\2\u1379\u1378\3\2\2\2\u1379\u137a\3\2\2")
        buf.write("\2\u137a\u142e\3\2\2\2\u137b\u137c\7\u0185\2\2\u137c\u137e")
        buf.write("\7\u023d\2\2\u137d\u137f\5\u0262\u0132\2\u137e\u137d\3")
        buf.write("\2\2\2\u137e\u137f\3\2\2\2\u137f\u1381\3\2\2\2\u1380\u1382")
        buf.write("\5\u040a\u0206\2\u1381\u1380\3\2\2\2\u1381\u1382\3\2\2")
        buf.write("\2\u1382\u142e\3\2\2\2\u1383\u142e\7\u019a\2\2\u1384\u1387")
        buf.write("\7\u00a5\2\2\u1385\u1388\5\u044a\u0226\2\u1386\u1388\7")
        buf.write("\f\2\2\u1387\u1385\3\2\2\2\u1387\u1386\3\2\2\2\u1388\u1389")
        buf.write("\3\2\2\2\u1389\u142e\tB\2\2\u138a\u138c\5\u025c\u012f")
        buf.write("\2\u138b\u138a\3\2\2\2\u138b\u138c\3\2\2\2\u138c\u138d")
        buf.write("\3\2\2\2\u138d\u138e\7I\2\2\u138e\u138f\tC\2\2\u138f\u1391")
        buf.write("\5\u0452\u022a\2\u1390\u1392\5\u0262\u0132\2\u1391\u1390")
        buf.write("\3\2\2\2\u1391\u1392\3\2\2\2\u1392\u1394\3\2\2\2\u1393")
        buf.write("\u1395\5\u040a\u0206\2\u1394\u1393\3\2\2\2\u1394\u1395")
        buf.write("\3\2\2\2\u1395\u142e\3\2\2\2\u1396\u1397\t,\2\2\u1397")
        buf.write("\u142e\7\u0123\2\2\u1398\u139f\7\u0204\2\2\u1399\u13a0")
        buf.write("\7\u00e3\2\2\u139a\u139b\7\u0225\2\2\u139b\u139d\5\u025e")
        buf.write("\u0130\2\u139c\u139e\5\u0312\u018a\2\u139d\u139c\3\2\2")
        buf.write("\2\u139d\u139e\3\2\2\2\u139e\u13a0\3\2\2\2\u139f\u1399")
        buf.write("\3\2\2\2\u139f\u139a\3\2\2\2\u13a0\u142e\3\2\2\2\u13a1")
        buf.write("\u13a2\tD\2\2\u13a2\u13a5\7\u00ab\2\2\u13a3\u13a4\7\u00fd")
        buf.write("\2\2\u13a4\u13a6\5\u0488\u0245\2\u13a5\u13a3\3\2\2\2\u13a5")
        buf.write("\u13a6\3\2\2\2\u13a6\u13a9\3\2\2\2\u13a7\u13a8\7\u00cd")
        buf.write("\2\2\u13a8\u13aa\5\u047c\u023f\2\u13a9\u13a7\3\2\2\2\u13a9")
        buf.write("\u13aa\3\2\2\2\u13aa\u13ac\3\2\2\2\u13ab\u13ad\5\u0120")
        buf.write("\u0091\2\u13ac\u13ab\3\2\2\2\u13ac\u13ad\3\2\2\2\u13ad")
        buf.write("\u13af\3\2\2\2\u13ae\u13b0\5\u0312\u018a\2\u13af\u13ae")
        buf.write("\3\2\2\2\u13af\u13b0\3\2\2\2\u13b0\u142e\3\2\2\2\u13b1")
        buf.write("\u13b2\6\u012eu\2\u13b2\u13b4\7\u00b6\2\2\u13b3\u13b1")
        buf.write("\3\2\2\2\u13b3\u13b4\3\2\2\2\u13b4\u13b5\3\2\2\2\u13b5")
        buf.write("\u13b6\tE\2\2\u13b6\u13b7\5\u0260\u0131\2\u13b7\u13b9")
        buf.write("\5\u0452\u022a\2\u13b8\u13ba\5\u0262\u0132\2\u13b9\u13b8")
        buf.write("\3\2\2\2\u13b9\u13ba\3\2\2\2\u13ba\u13bc\3\2\2\2\u13bb")
        buf.write("\u13bd\5\u016a\u00b6\2\u13bc\u13bb\3\2\2\2\u13bc\u13bd")
        buf.write("\3\2\2\2\u13bd\u142e\3\2\2\2\u13be\u13c0\7\u022b\2\2\u13bf")
        buf.write("\u13be\3\2\2\2\u13bf\u13c0\3\2\2\2\u13c0\u13c1\3\2\2\2")
        buf.write("\u13c1\u142e\7\u00a4\2\2\u13c2\u13c3\7a\2\2\u13c3\u13c4")
        buf.write("\7\u030a\2\2\u13c4\u13c5\7\u02fa\2\2\u13c5\u13c6\7\u030b")
        buf.write("\2\2\u13c6\u142e\tF\2\2\u13c7\u13c9\7\u0281\2\2\u13c8")
        buf.write("\u13ca\5\u0120\u0091\2\u13c9\u13c8\3\2\2\2\u13c9\u13ca")
        buf.write("\3\2\2\2\u13ca\u142e\3\2\2\2\u13cb\u13cd\7\u00a8\2\2\u13cc")
        buf.write("\u13ce\5\u0120\u0091\2\u13cd\u13cc\3\2\2\2\u13cd\u13ce")
        buf.write("\3\2\2\2\u13ce\u142e\3\2\2\2\u13cf\u142e\7\u01ac\2\2\u13d0")
        buf.write("\u13d9\7\u01ab\2\2\u13d1\u13d6\5\u0264\u0133\2\u13d2\u13d3")
        buf.write("\7\u0307\2\2\u13d3\u13d5\5\u0264\u0133\2\u13d4\u13d2\3")
        buf.write("\2\2\2\u13d5\u13d8\3\2\2\2\u13d6\u13d4\3\2\2\2\u13d6\u13d7")
        buf.write("\3\2\2\2\u13d7\u13da\3\2\2\2\u13d8\u13d6\3\2\2\2\u13d9")
        buf.write("\u13d1\3\2\2\2\u13d9\u13da\3\2\2\2\u13da\u13de\3\2\2\2")
        buf.write("\u13db\u13dc\7\u00ca\2\2\u13dc\u13dd\7\u01b0\2\2\u13dd")
        buf.write("\u13df\7\u02ed\2\2\u13de\u13db\3\2\2\2\u13de\u13df\3\2")
        buf.write("\2\2\u13df\u13e1\3\2\2\2\u13e0\u13e2\5\u0120\u0091\2\u13e1")
        buf.write("\u13e0\3\2\2\2\u13e1\u13e2\3\2\2\2\u13e2\u142e\3\2\2\2")
        buf.write("\u13e3\u13e5\5\u04ac\u0257\2\u13e4\u13e3\3\2\2\2\u13e4")
        buf.write("\u13e5\3\2\2\2\u13e5\u13e6\3\2\2\2\u13e6\u13e8\tG\2\2")
        buf.write("\u13e7\u13e9\5\u040a\u0206\2\u13e8\u13e7\3\2\2\2\u13e8")
        buf.write("\u13e9\3\2\2\2\u13e9\u142e\3\2\2\2\u13ea\u13ec\7\u00ce")
        buf.write("\2\2\u13eb\u13ea\3\2\2\2\u13eb\u13ec\3\2\2\2\u13ec\u13ed")
        buf.write("\3\2\2\2\u13ed\u142e\7\u01aa\2\2\u13ee\u13f0\5\u02fa\u017e")
        buf.write("\2\u13ef\u13f1\5\u040a\u0206\2\u13f0\u13ef\3\2\2\2\u13f0")
        buf.write("\u13f1\3\2\2\2\u13f1\u142e\3\2\2\2\u13f2\u13f4\7H\2\2")
        buf.write("\u13f3\u13f5\5\u040a\u0206\2\u13f4\u13f3\3\2\2\2\u13f4")
        buf.write("\u13f5\3\2\2\2\u13f5\u142e\3\2\2\2\u13f6\u13f7\6\u012e")
        buf.write("v\2\u13f7\u142e\7_\2\2\u13f8\u142e\7\u01a7\2\2\u13f9\u13fc")
        buf.write("\7\u00da\2\2\u13fa\u13fb\7\u00ca\2\2\u13fb\u13fd\5\u0406")
        buf.write("\u0204\2\u13fc\u13fa\3\2\2\2\u13fc\u13fd\3\2\2\2\u13fd")
        buf.write("\u142e\3\2\2\2\u13fe\u13ff\7\u00da\2\2\u13ff\u1400\7\u00ca")
        buf.write("\2\2\u1400\u1401\5\u0406\u0204\2\u1401\u1402\7\u026f\2")
        buf.write("\2\u1402\u1403\5\u03f4\u01fb\2\u1403\u142e\3\2\2\2\u1404")
        buf.write("\u1405\7\u013e\2\2\u1405\u142e\7\u0225\2\2\u1406\u141b")
        buf.write("\7c\2\2\u1407\u1409\7o\2\2\u1408\u140a\5\u03d8\u01ed\2")
        buf.write("\u1409\u1408\3\2\2\2\u1409\u140a\3\2\2\2\u140a\u140b\3")
        buf.write("\2\2\2\u140b\u141c\5\u0426\u0214\2\u140c\u140d\7\u00ac")
        buf.write("\2\2\u140d\u141c\5\u0442\u0222\2\u140e\u140f\7\u00d0\2")
        buf.write("\2\u140f\u141c\5\u042e\u0218\2\u1410\u1411\7\u01a8\2\2")
        buf.write("\u1411\u141c\5\u042a\u0216\2\u1412\u1413\7\u0240\2\2\u1413")
        buf.write("\u141c\5\u0452\u022a\2\u1414\u1415\7\u0254\2\2\u1415\u141c")
        buf.write("\5\u0432\u021a\2\u1416\u1417\7\u027e\2\2\u1417\u141c\5")
        buf.write("\u0436\u021c\2\u1418\u1419\6\u012ew\2\u1419\u141a\7\u026c")
        buf.write("\2\2\u141a\u141c\5\u0406\u0204\2\u141b\u1407\3\2\2\2\u141b")
        buf.write("\u140c\3\2\2\2\u141b\u140e\3\2\2\2\u141b\u1410\3\2\2\2")
        buf.write("\u141b\u1412\3\2\2\2\u141b\u1414\3\2\2\2\u141b\u1416\3")
        buf.write("\2\2\2\u141b\u1418\3\2\2\2\u141c\u142e\3\2\2\2\u141d\u141e")
        buf.write("\7\u01a8\2\2\u141e\u1420\7\u0225\2\2\u141f\u1421\5\u040a")
        buf.write("\u0206\2\u1420\u141f\3\2\2\2\u1420\u1421\3\2\2\2\u1421")
        buf.write("\u142e\3\2\2\2\u1422\u1423\7\u00d0\2\2\u1423\u1425\7\u0225")
        buf.write("\2\2\u1424\u1426\5\u040a\u0206\2\u1425\u1424\3\2\2\2\u1425")
        buf.write("\u1426\3\2\2\2\u1426\u142e\3\2\2\2\u1427\u1428\7\u01a8")
        buf.write("\2\2\u1428\u1429\7F\2\2\u1429\u142e\5\u042a\u0216\2\u142a")
        buf.write("\u142b\7\u00d0\2\2\u142b\u142c\7F\2\2\u142c\u142e\5\u042e")
        buf.write("\u0218\2\u142d\u1352\3\2\2\2\u142d\u1354\3\2\2\2\u142d")
        buf.write("\u1359\3\2\2\2\u142d\u1363\3\2\2\2\u142d\u136c\3\2\2\2")
        buf.write("\u142d\u1373\3\2\2\2\u142d\u137b\3\2\2\2\u142d\u1383\3")
        buf.write("\2\2\2\u142d\u1384\3\2\2\2\u142d\u138b\3\2\2\2\u142d\u1396")
        buf.write("\3\2\2\2\u142d\u1398\3\2\2\2\u142d\u13a1\3\2\2\2\u142d")
        buf.write("\u13b3\3\2\2\2\u142d\u13bf\3\2\2\2\u142d\u13c2\3\2\2\2")
        buf.write("\u142d\u13c7\3\2\2\2\u142d\u13cb\3\2\2\2\u142d\u13cf\3")
        buf.write("\2\2\2\u142d\u13d0\3\2\2\2\u142d\u13e4\3\2\2\2\u142d\u13eb")
        buf.write("\3\2\2\2\u142d\u13ee\3\2\2\2\u142d\u13f2\3\2\2\2\u142d")
        buf.write("\u13f6\3\2\2\2\u142d\u13f8\3\2\2\2\u142d\u13f9\3\2\2\2")
        buf.write("\u142d\u13fe\3\2\2\2\u142d\u1404\3\2\2\2\u142d\u1406\3")
        buf.write("\2\2\2\u142d\u141d\3\2\2\2\u142d\u1422\3\2\2\2\u142d\u1427")
        buf.write("\3\2\2\2\u142d\u142a\3\2\2\2\u142e\u025b\3\2\2\2\u142f")
        buf.write("\u1436\7\u00ce\2\2\u1430\u1431\6\u012fx\2\u1431\u1433")
        buf.write("\7\u00b6\2\2\u1432\u1434\7\u00ce\2\2\u1433\u1432\3\2\2")
        buf.write("\2\u1433\u1434\3\2\2\2\u1434\u1436\3\2\2\2\u1435\u142f")
        buf.write("\3\2\2\2\u1435\u1430\3\2\2\2\u1436\u025d\3\2\2\2\u1437")
        buf.write("\u1439\6\u0130y\2\u1438\u143a\7\u0174\2\2\u1439\u1438")
        buf.write("\3\2\2\2\u1439\u143a\3\2\2\2\u143a\u143d\3\2\2\2\u143b")
        buf.write("\u143d\3\2\2\2\u143c\u1437\3\2\2\2\u143c\u143b\3\2\2\2")
        buf.write("\u143d\u025f\3\2\2\2\u143e\u143f\tC\2\2\u143f\u0261\3")
        buf.write("\2\2\2\u1440\u1441\5\u0260\u0131\2\u1441\u1442\5\u046c")
        buf.write("\u0237\2\u1442\u0263\3\2\2\2\u1443\u1444\7*\2\2\u1444")
        buf.write("\u144b\7\u0101\2\2\u1445\u1446\7]\2\2\u1446\u144b\7\u023a")
        buf.write("\2\2\u1447\u1448\7\u0192\2\2\u1448\u144b\7\u00bb\2\2\u1449")
        buf.write("\u144b\tH\2\2\u144a\u1443\3\2\2\2\u144a\u1445\3\2\2\2")
        buf.write("\u144a\u1447\3\2\2\2\u144a\u1449\3\2\2\2\u144b\u0265\3")
        buf.write("\2\2\2\u144c\u144d\7#\2\2\u144d\u1472\5\u048c\u0247\2")
        buf.write("\u144e\u144f\7\61\2\2\u144f\u1450\7\u00ee\2\2\u1450\u1451")
        buf.write("\5\u0268\u0135\2\u1451\u1454\7\u00fd\2\2\u1452\u1455\5")
        buf.write("\u046c\u0237\2\u1453\u1455\7\u0082\2\2\u1454\u1452\3\2")
        buf.write("\2\2\u1454\u1453\3\2\2\2\u1455\u1472\3\2\2\2\u1456\u1458")
        buf.write("\7\u00c6\2\2\u1457\u1459\5\u040e\u0208\2\u1458\u1457\3")
        buf.write("\2\2\2\u1458\u1459\3\2\2\2\u1459\u1463\3\2\2\2\u145a\u1464")
        buf.write("\5\u027a\u013e\2\u145b\u1460\5\u0276\u013c\2\u145c\u145d")
        buf.write("\7\u0307\2\2\u145d\u145f\5\u0276\u013c\2\u145e\u145c\3")
        buf.write("\2\2\2\u145f\u1462\3\2\2\2\u1460\u145e\3\2\2\2\u1460\u1461")
        buf.write("\3\2\2\2\u1461\u1464\3\2\2\2\u1462\u1460\3\2\2\2\u1463")
        buf.write("\u145a\3\2\2\2\u1463\u145b\3\2\2\2\u1464\u1472\3\2\2\2")
        buf.write("\u1465\u1467\7\u010c\2\2\u1466\u1468\tI\2\2\u1467\u1466")
        buf.write("\3\2\2\2\u1467\u1468\3\2\2\2\u1468\u1469\3\2\2\2\u1469")
        buf.write("\u1472\5\u02a8\u0155\2\u146a\u146b\7\u011b\2\2\u146b\u146c")
        buf.write("\7\u00ee\2\2\u146c\u146d\7\u00fa\2\2\u146d\u146e\7\61")
        buf.write("\2\2\u146e\u1472\5\u027e\u0140\2\u146f\u1470\6\u0134z")
        buf.write("\2\u1470\u1472\7\u0200\2\2\u1471\u144c\3\2\2\2\u1471\u144e")
        buf.write("\3\2\2\2\u1471\u1456\3\2\2\2\u1471\u1465\3\2\2\2\u1471")
        buf.write("\u146a\3\2\2\2\u1471\u146f\3\2\2\2\u1472\u0267\3\2\2\2")
        buf.write("\u1473\u1476\5\u026a\u0136\2\u1474\u1476\5\u026e\u0138")
        buf.write("\2\u1475\u1473\3\2\2\2\u1475\u1474\3\2\2\2\u1476\u0269")
        buf.write("\3\2\2\2\u1477\u147c\5\u026c\u0137\2\u1478\u1479\7\u0307")
        buf.write("\2\2\u1479\u147b\5\u026c\u0137\2\u147a\u1478\3\2\2\2\u147b")
        buf.write("\u147e\3\2\2\2\u147c\u147a\3\2\2\2\u147c\u147d\3\2\2\2")
        buf.write("\u147d\u026b\3\2\2\2\u147e\u147c\3\2\2\2\u147f\u1481\5")
        buf.write("\u0452\u022a\2\u1480\u1482\5\u0270\u0139\2\u1481\u1480")
        buf.write("\3\2\2\2\u1481\u1482\3\2\2\2\u1482\u026d\3\2\2\2\u1483")
        buf.write("\u1484\5\u0452\u022a\2\u1484\u1485\7\u0197\2\2\u1485\u1486")
        buf.write("\7\u030a\2\2\u1486\u1487\58\35\2\u1487\u1489\7\u030b\2")
        buf.write("\2\u1488\u148a\5\u0270\u0139\2\u1489\u1488\3\2\2\2\u1489")
        buf.write("\u148a\3\2\2\2\u148a\u026f\3\2\2\2\u148b\u148c\5\u019a")
        buf.write("\u00ce\2\u148c\u148e\7\u030a\2\2\u148d\u148f\5\u0274\u013b")
        buf.write("\2\u148e\u148d\3\2\2\2\u148e\u148f\3\2\2\2\u148f\u1490")
        buf.write("\3\2\2\2\u1490\u1491\7\u030b\2\2\u1491\u0271\3\2\2\2\u1492")
        buf.write("\u1495\5\u046c\u0237\2\u1493\u1495\7\u01a6\2\2\u1494\u1492")
        buf.write("\3\2\2\2\u1494\u1493\3\2\2\2\u1495\u0273\3\2\2\2\u1496")
        buf.write("\u149b\5\u0272\u013a\2\u1497\u1498\7\u0307\2\2\u1498\u149a")
        buf.write("\5\u0272\u013a\2\u1499\u1497\3\2\2\2\u149a\u149d\3\2\2")
        buf.write("\2\u149b\u1499\3\2\2\2\u149b\u149c\3\2\2\2\u149c\u0275")
        buf.write("\3\2\2\2\u149d\u149b\3\2\2\2\u149e\u14ae\tJ\2\2\u149f")
        buf.write("\u14a1\5\u0278\u013d\2\u14a0\u149f\3\2\2\2\u14a0\u14a1")
        buf.write("\3\2\2\2\u14a1\u14a2\3\2\2\2\u14a2\u14ae\7\u0123\2\2\u14a3")
        buf.write("\u14a4\7\u01bf\2\2\u14a4\u14a6\7\u0123\2\2\u14a5\u14a7")
        buf.write("\5\u0312\u018a\2\u14a6\u14a5\3\2\2\2\u14a6\u14a7\3\2\2")
        buf.write("\2\u14a7\u14ae\3\2\2\2\u14a8\u14a9\6\u013c{\2\u14a9\u14aa")
        buf.write("\7\u01b0\2\2\u14aa\u14ae\7\61\2\2\u14ab\u14ac\6\u013c")
        buf.write("|\2\u14ac\u14ae\7\u0187\2\2\u14ad\u149e\3\2\2\2\u14ad")
        buf.write("\u14a0\3\2\2\2\u14ad\u14a3\3\2\2\2\u14ad\u14a8\3\2\2\2")
        buf.write("\u14ad\u14ab\3\2\2\2\u14ae\u0277\3\2\2\2\u14af\u14b0\t")
        buf.write("K\2\2\u14b0\u0279\3\2\2\2\u14b1\u14b9\t\24\2\2\u14b2\u14b3")
        buf.write("\7\u0287\2\2\u14b3\u14b4\7\u01b5\2\2\u14b4\u14ba\7\u0121")
        buf.write("\2\2\u14b5\u14b7\5\u046e\u0238\2\u14b6\u14b8\5\u027c\u013f")
        buf.write("\2\u14b7\u14b6\3\2\2\2\u14b7\u14b8\3\2\2\2\u14b8\u14ba")
        buf.write("\3\2\2\2\u14b9\u14b2\3\2\2\2\u14b9\u14b5\3\2\2\2\u14b9")
        buf.write("\u14ba\3\2\2\2\u14ba\u027b\3\2\2\2\u14bb\u14bc\6\u013f")
        buf.write("}\2\u14bc\u14bd\7\u00ca\2\2\u14bd\u14c2\7\u00b5\2\2\u14be")
        buf.write("\u14bf\7\u0287\2\2\u14bf\u14c0\7\u01b5\2\2\u14c0\u14c2")
        buf.write("\7\u0121\2\2\u14c1\u14bb\3\2\2\2\u14c1\u14be\3\2\2\2\u14c2")
        buf.write("\u027d\3\2\2\2\u14c3\u14c4\5\u0452\u022a\2\u14c4\u14c6")
        buf.write("\5\u0284\u0143\2\u14c5\u14c7\5\u0270\u0139\2\u14c6\u14c5")
        buf.write("\3\2\2\2\u14c6\u14c7\3\2\2\2\u14c7\u14ca\3\2\2\2\u14c8")
        buf.write("\u14c9\7\u00ea\2\2\u14c9\u14cb\7\u0110\2\2\u14ca\u14c8")
        buf.write("\3\2\2\2\u14ca\u14cb\3\2\2\2\u14cb\u14ce\3\2\2\2\u14cc")
        buf.write("\u14ce\5\u0280\u0141\2\u14cd\u14c3\3\2\2\2\u14cd\u14cc")
        buf.write("\3\2\2\2\u14ce\u027f\3\2\2\2\u14cf\u14d4\5\u0282\u0142")
        buf.write("\2\u14d0\u14d1\7\u0307\2\2\u14d1\u14d3\5\u0282\u0142\2")
        buf.write("\u14d2\u14d0\3\2\2\2\u14d3\u14d6\3\2\2\2\u14d4\u14d2\3")
        buf.write("\2\2\2\u14d4\u14d5\3\2\2\2\u14d5\u0281\3\2\2\2\u14d6\u14d4")
        buf.write("\3\2\2\2\u14d7\u14d9\5\u0452\u022a\2\u14d8\u14da\5\u0270")
        buf.write("\u0139\2\u14d9\u14d8\3\2\2\2\u14d9\u14da\3\2\2\2\u14da")
        buf.write("\u14dd\3\2\2\2\u14db\u14dc\7\u00ea\2\2\u14dc\u14de\7\u0110")
        buf.write("\2\2\u14dd\u14db\3\2\2\2\u14dd\u14de\3\2\2\2\u14de\u0283")
        buf.write("\3\2\2\2\u14df\u14e0\7\u0197\2\2\u14e0\u14e1\7\u030a\2")
        buf.write("\2\u14e1\u14e2\58\35\2\u14e2\u14e3\7\u030b\2\2\u14e3\u0285")
        buf.write("\3\2\2\2\u14e4\u14e9\5\u0288\u0145\2\u14e5\u14e9\5\u0292")
        buf.write("\u014a\2\u14e6\u14e9\5\u0294\u014b\2\u14e7\u14e9\5\u0298")
        buf.write("\u014d\2\u14e8\u14e4\3\2\2\2\u14e8\u14e5\3\2\2\2\u14e8")
        buf.write("\u14e6\3\2\2\2\u14e8\u14e7\3\2\2\2\u14e9\u0287\3\2\2\2")
        buf.write("\u14ea\u14eb\7c\2\2\u14eb\u14ec\7\u02c7\2\2\u14ec\u14ed")
        buf.write("\7\u00db\2\2\u14ed\u14ee\5\u046c\u0237\2\u14ee\u14f0\7")
        buf.write("\u0259\2\2\u14ef\u14f1\5\u04aa\u0256\2\u14f0\u14ef\3\2")
        buf.write("\2\2\u14f0\u14f1\3\2\2\2\u14f1\u14f2\3\2\2\2\u14f2\u14f4")
        buf.write("\tL\2\2\u14f3\u14f5\5\u028a\u0146\2\u14f4\u14f3\3\2\2")
        buf.write("\2\u14f4\u14f5\3\2\2\2\u14f5\u14f7\3\2\2\2\u14f6\u14f8")
        buf.write("\5\u028e\u0148\2\u14f7\u14f6\3\2\2\2\u14f7\u14f8\3\2\2")
        buf.write("\2\u14f8\u14fa\3\2\2\2\u14f9\u14fb\5\u0290\u0149\2\u14fa")
        buf.write("\u14f9\3\2\2\2\u14fa\u14fb\3\2\2\2\u14fb\u0289\3\2\2\2")
        buf.write("\u14fc\u14fe\7\u02c9\2\2\u14fd\u14ff\5\u04aa\u0256\2\u14fe")
        buf.write("\u14fd\3\2\2\2\u14fe\u14ff\3\2\2\2\u14ff\u1500\3\2\2\2")
        buf.write("\u1500\u1507\5\u028c\u0147\2\u1501\u1503\7\u0307\2\2\u1502")
        buf.write("\u1501\3\2\2\2\u1502\u1503\3\2\2\2\u1503\u1504\3\2\2\2")
        buf.write("\u1504\u1506\5\u028c\u0147\2\u1505\u1502\3\2\2\2\u1506")
        buf.write("\u1509\3\2\2\2\u1507\u1505\3\2\2\2\u1507\u1508\3\2\2\2")
        buf.write("\u1508\u028b\3\2\2\2\u1509\u1507\3\2\2\2\u150a\u150d\7")
        buf.write("\u02ed\2\2\u150b\u150c\7\u02f9\2\2\u150c\u150e\7\u02ed")
        buf.write("\2\2\u150d\u150b\3\2\2\2\u150d\u150e\3\2\2\2\u150e\u028d")
        buf.write("\3\2\2\2\u150f\u1511\7\u02c6\2\2\u1510\u1512\5\u04aa\u0256")
        buf.write("\2\u1511\u1510\3\2\2\2\u1511\u1512\3\2\2\2\u1512\u1513")
        buf.write("\3\2\2\2\u1513\u1514\7\u02ed\2\2\u1514\u028f\3\2\2\2\u1515")
        buf.write("\u1516\tM\2\2\u1516\u0291\3\2\2\2\u1517\u1518\7\r\2\2")
        buf.write("\u1518\u1519\7\u02c7\2\2\u1519\u151a\7\u00db\2\2\u151a")
        buf.write("\u151c\5\u0466\u0234\2\u151b\u151d\5\u028a\u0146\2\u151c")
        buf.write("\u151b\3\2\2\2\u151c\u151d\3\2\2\2\u151d\u151f\3\2\2\2")
        buf.write("\u151e\u1520\5\u028e\u0148\2\u151f\u151e\3\2\2\2\u151f")
        buf.write("\u1520\3\2\2\2\u1520\u1522\3\2\2\2\u1521\u1523\5\u0290")
        buf.write("\u0149\2\u1522\u1521\3\2\2\2\u1522\u1523\3\2\2\2\u1523")
        buf.write("\u1525\3\2\2\2\u1524\u1526\7\u00c8\2\2\u1525\u1524\3\2")
        buf.write("\2\2\u1525\u1526\3\2\2\2\u1526\u0293\3\2\2\2\u1527\u1528")
        buf.write("\7\u01fc\2\2\u1528\u1529\7\u02c7\2\2\u1529\u152a\7\u00db")
        buf.write("\2\2\u152a\u152d\5\u046c\u0237\2\u152b\u152c\7\u00ca\2")
        buf.write("\2\u152c\u152e\5\u0296\u014c\2\u152d\u152b\3\2\2\2\u152d")
        buf.write("\u152e\3\2\2\2\u152e\u0295\3\2\2\2\u152f\u1536\5\u047a")
        buf.write("\u023e\2\u1530\u1532\7\u0307\2\2\u1531\u1530\3\2\2\2\u1531")
        buf.write("\u1532\3\2\2\2\u1532\u1533\3\2\2\2\u1533\u1535\5\u047a")
        buf.write("\u023e\2\u1534\u1531\3\2\2\2\u1535\u1538\3\2\2\2\u1536")
        buf.write("\u1534\3\2\2\2\u1536\u1537\3\2\2\2\u1537\u0297\3\2\2\2")
        buf.write("\u1538\u1536\3\2\2\2\u1539\u153a\7\u0096\2\2\u153a\u153b")
        buf.write("\7\u02c7\2\2\u153b\u153c\7\u00db\2\2\u153c\u153e\5\u0466")
        buf.write("\u0234\2\u153d\u153f\7\u00c8\2\2\u153e\u153d\3\2\2\2\u153e")
        buf.write("\u153f\3\2\2\2\u153f\u0299\3\2\2\2\u1540\u1547\5\u029c")
        buf.write("\u014f\2\u1541\u1547\5\u029e\u0150\2\u1542\u1547\5\u02a2")
        buf.write("\u0152\2\u1543\u1547\5\u02a4\u0153\2\u1544\u1545\6\u014e")
        buf.write("~\2\u1545\u1547\5\u02a6\u0154\2\u1546\u1540\3\2\2\2\u1546")
        buf.write("\u1541\3\2\2\2\u1546\u1542\3\2\2\2\u1546\u1543\3\2\2\2")
        buf.write("\u1546\u1544\3\2\2\2\u1547\u029b\3\2\2\2\u1548\u1549\t")
        buf.write("N\2\2\u1549\u154c\5\u0452\u022a\2\u154a\u154d\5\u0488")
        buf.write("\u0245\2\u154b\u154d\5\u041a\u020e\2\u154c\u154a\3\2\2")
        buf.write("\2\u154c\u154b\3\2\2\2\u154c\u154d\3\2\2\2\u154d\u029d")
        buf.write("\3\2\2\2\u154e\u155e\tN\2\2\u154f\u1550\6\u0150\177\2")
        buf.write("\u1550\u155f\7\u00b6\2\2\u1551\u1552\6\u0150\u0080\2\u1552")
        buf.write("\u155f\7\u0196\2\2\u1553\u1554\6\u0150\u0081\2\u1554\u1555")
        buf.write("\7\u00cb\2\2\u1555\u1556\7\u02f0\2\2\u1556\u155f\5\u04a0")
        buf.write("\u0251\2\u1557\u1558\6\u0150\u0082\2\u1558\u155f\7\20")
        buf.write("\2\2\u1559\u155a\6\u0150\u0083\2\u155a\u155b\7\20\2\2")
        buf.write("\u155b\u155c\7\u00cb\2\2\u155c\u155d\7\u02f0\2\2\u155d")
        buf.write("\u155f\5\u04a0\u0251\2\u155e\u154f\3\2\2\2\u155e\u1551")
        buf.write("\3\2\2\2\u155e\u1553\3\2\2\2\u155e\u1557\3\2\2\2\u155e")
        buf.write("\u1559\3\2\2\2\u155e\u155f\3\2\2\2\u155f\u1560\3\2\2\2")
        buf.write("\u1560\u1561\5\u02a0\u0151\2\u1561\u029f\3\2\2\2\u1562")
        buf.write("\u156f\5\u010e\u0088\2\u1563\u1568\6\u0151\u0084\2\u1564")
        buf.write("\u1569\5\u00e0q\2\u1565\u1569\5\u00ecw\2\u1566\u1569\5")
        buf.write("\u010c\u0087\2\u1567\u1569\5\u01a4\u00d3\2\u1568\u1564")
        buf.write("\3\2\2\2\u1568\u1565\3\2\2\2\u1568\u1566\3\2\2\2\u1568")
        buf.write("\u1567\3\2\2\2\u1569\u156f\3\2\2\2\u156a\u156b\6\u0151")
        buf.write("\u0085\2\u156b\u156c\7\u00ca\2\2\u156c\u156d\7V\2\2\u156d")
        buf.write("\u156f\5\u047a\u023e\2\u156e\u1562\3\2\2\2\u156e\u1563")
        buf.write("\3\2\2\2\u156e\u156a\3\2\2\2\u156f\u02a1\3\2\2\2\u1570")
        buf.write("\u1571\7\u00e0\2\2\u1571\u1572\5\u04a0\u0251\2\u1572\u02a3")
        buf.write("\3\2\2\2\u1573\u1574\7\u026e\2\2\u1574\u1575\5\u046c\u0237")
        buf.write("\2\u1575\u02a5\3\2\2\2\u1576\u1577\7\u02cc\2\2\u1577\u02a7")
        buf.write("\3\2\2\2\u1578\u1579\b\u0155\1\2\u1579\u157f\5\u02aa\u0156")
        buf.write("\2\u157a\u157c\7\u0103\2\2\u157b\u157d\5\u02fc\u017f\2")
        buf.write("\u157c\u157b\3\2\2\2\u157c\u157d\3\2\2\2\u157d\u157e\3")
        buf.write("\2\2\2\u157e\u1580\tO\2\2\u157f\u157a\3\2\2\2\u157f\u1580")
        buf.write("\3\2\2\2\u1580\u1584\3\2\2\2\u1581\u1582\7\u0175\2\2\u1582")
        buf.write("\u1584\5\u02a8\u0155\6\u1583\u1578\3\2\2\2\u1583\u1581")
        buf.write("\3\2\2\2\u1584\u1590\3\2\2\2\u1585\u1586\f\5\2\2\u1586")
        buf.write("\u1587\tP\2\2\u1587\u158f\5\u02a8\u0155\6\u1588\u1589")
        buf.write("\f\4\2\2\u1589\u158a\7\u0290\2\2\u158a\u158f\5\u02a8\u0155")
        buf.write("\5\u158b\u158c\f\3\2\2\u158c\u158d\tQ\2\2\u158d\u158f")
        buf.write("\5\u02a8\u0155\4\u158e\u1585\3\2\2\2\u158e\u1588\3\2\2")
        buf.write("\2\u158e\u158b\3\2\2\2\u158f\u1592\3\2\2\2\u1590\u158e")
        buf.write("\3\2\2\2\u1590\u1591\3\2\2\2\u1591\u02a9\3\2\2\2\u1592")
        buf.write("\u1590\3\2\2\2\u1593\u1594\b\u0156\1\2\u1594\u1595\5\u02ae")
        buf.write("\u0158\2\u1595\u15a7\3\2\2\2\u1596\u1597\f\5\2\2\u1597")
        buf.write("\u1599\7\u0103\2\2\u1598\u159a\5\u02fc\u017f\2\u1599\u1598")
        buf.write("\3\2\2\2\u1599\u159a\3\2\2\2\u159a\u159b\3\2\2\2\u159b")
        buf.write("\u15a6\7\u017a\2\2\u159c\u159d\f\4\2\2\u159d\u159e\5\u02ac")
        buf.write("\u0157\2\u159e\u159f\5\u02ae\u0158\2\u159f\u15a6\3\2\2")
        buf.write("\2\u15a0\u15a1\f\3\2\2\u15a1\u15a2\5\u02ac\u0157\2\u15a2")
        buf.write("\u15a3\tR\2\2\u15a3\u15a4\5\u011c\u008f\2\u15a4\u15a6")
        buf.write("\3\2\2\2\u15a5\u1596\3\2\2\2\u15a5\u159c\3\2\2\2\u15a5")
        buf.write("\u15a0\3\2\2\2\u15a6\u15a9\3\2\2\2\u15a7\u15a5\3\2\2\2")
        buf.write("\u15a7\u15a8\3\2\2\2\u15a8\u02ab\3\2\2\2\u15a9\u15a7\3")
        buf.write("\2\2\2\u15aa\u15ab\tS\2\2\u15ab\u02ad\3\2\2\2\u15ac\u15ba")
        buf.write("\5\u02b2\u015a\2\u15ad\u15af\5\u02fc\u017f\2\u15ae\u15ad")
        buf.write("\3\2\2\2\u15ae\u15af\3\2\2\2\u15af\u15b0\3\2\2\2\u15b0")
        buf.write("\u15bb\5\u02b0\u0159\2\u15b1\u15b2\6\u0158\u008c\2\u15b2")
        buf.write("\u15b4\7\u02df\2\2\u15b3\u15b5\7\u029e\2\2\u15b4\u15b3")
        buf.write("\3\2\2\2\u15b4\u15b5\3\2\2\2\u15b5\u15b6\3\2\2\2\u15b6")
        buf.write("\u15bb\5\u0308\u0185\2\u15b7\u15b8\7\u020b\2\2\u15b8\u15b9")
        buf.write("\7\u0115\2\2\u15b9\u15bb\5\u02b2\u015a\2\u15ba\u15ae\3")
        buf.write("\2\2\2\u15ba\u15b1\3\2\2\2\u15ba\u15b7\3\2\2\2\u15ba\u15bb")
        buf.write("\3\2\2\2\u15bb\u02af\3\2\2\2\u15bc\u15c2\7\u00fd\2\2\u15bd")
        buf.write("\u15c3\5\u011c\u008f\2\u15be\u15bf\7\u030a\2\2\u15bf\u15c0")
        buf.write("\5\u02f8\u017d\2\u15c0\u15c1\7\u030b\2\2\u15c1\u15c3\3")
        buf.write("\2\2\2\u15c2\u15bd\3\2\2\2\u15c2\u15be\3\2\2\2\u15c3\u15d2")
        buf.write("\3\2\2\2\u15c4\u15c5\7 \2\2\u15c5\u15c6\5\u02b2\u015a")
        buf.write("\2\u15c6\u15c7\7\21\2\2\u15c7\u15c8\5\u02ae\u0158\2\u15c8")
        buf.write("\u15d2\3\2\2\2\u15c9\u15ca\7\u0115\2\2\u15ca\u15cd\5\u02b4")
        buf.write("\u015b\2\u15cb\u15cc\7\u00aa\2\2\u15cc\u15ce\5\u02b4\u015b")
        buf.write("\2\u15cd\u15cb\3\2\2\2\u15cd\u15ce\3\2\2\2\u15ce\u15d2")
        buf.write("\3\2\2\2\u15cf\u15d0\7\u01be\2\2\u15d0\u15d2\5\u02b2\u015a")
        buf.write("\2\u15d1\u15bc\3\2\2\2\u15d1\u15c4\3\2\2\2\u15d1\u15c9")
        buf.write("\3\2\2\2\u15d1\u15cf\3\2\2\2\u15d2\u02b1\3\2\2\2\u15d3")
        buf.write("\u15d4\b\u015a\1\2\u15d4\u15d5\5\u02b4\u015b\2\u15d5\u15f0")
        buf.write("\3\2\2\2\u15d6\u15d7\f\t\2\2\u15d7\u15d8\7\u0303\2\2\u15d8")
        buf.write("\u15ef\5\u02b2\u015a\n\u15d9\u15da\f\b\2\2\u15da\u15db")
        buf.write("\tT\2\2\u15db\u15ef\5\u02b2\u015a\t\u15dc\u15dd\f\7\2")
        buf.write("\2\u15dd\u15de\tU\2\2\u15de\u15ef\5\u02b2\u015a\b\u15df")
        buf.write("\u15e0\f\5\2\2\u15e0\u15e1\tV\2\2\u15e1\u15ef\5\u02b2")
        buf.write("\u015a\6\u15e2\u15e3\f\4\2\2\u15e3\u15e4\7\u0302\2\2\u15e4")
        buf.write("\u15ef\5\u02b2\u015a\5\u15e5\u15e6\f\3\2\2\u15e6\u15e7")
        buf.write("\7\u0305\2\2\u15e7\u15ef\5\u02b2\u015a\4\u15e8\u15e9\f")
        buf.write("\6\2\2\u15e9\u15ea\tU\2\2\u15ea\u15eb\7\u00f9\2\2\u15eb")
        buf.write("\u15ec\5\u02a8\u0155\2\u15ec\u15ed\5\u0300\u0181\2\u15ed")
        buf.write("\u15ef\3\2\2\2\u15ee\u15d6\3\2\2\2\u15ee\u15d9\3\2\2\2")
        buf.write("\u15ee\u15dc\3\2\2\2\u15ee\u15df\3\2\2\2\u15ee\u15e2\3")
        buf.write("\2\2\2\u15ee\u15e5\3\2\2\2\u15ee\u15e8\3\2\2\2\u15ef\u15f2")
        buf.write("\3\2\2\2\u15f0\u15ee\3\2\2\2\u15f0\u15f1\3\2\2\2\u15f1")
        buf.write("\u02b3\3\2\2\2\u15f2\u15f0\3\2\2\2\u15f3\u15f4\b\u015b")
        buf.write("\1\2\u15f4\u15f8\5\u02e8\u0175\2\u15f5\u15f6\5\u04aa\u0256")
        buf.write("\2\u15f6\u15f7\5\u02a8\u0155\2\u15f7\u15f9\3\2\2\2\u15f8")
        buf.write("\u15f5\3\2\2\2\u15f8\u15f9\3\2\2\2\u15f9\u1661\3\2\2\2")
        buf.write("\u15fa\u15fc\5\u041a\u020e\2\u15fb\u15fd\5\u02b8\u015d")
        buf.write("\2\u15fc\u15fb\3\2\2\2\u15fc\u15fd\3\2\2\2\u15fd\u1661")
        buf.write("\3\2\2\2\u15fe\u1661\5\u02d0\u0169\2\u15ff\u1661\5\u02e2")
        buf.write("\u0172\2\u1600\u1661\5\u0480\u0241\2\u1601\u1661\7\u0315")
        buf.write("\2\2\u1602\u1661\5\u02ba\u015e\2\u1603\u1604\6\u015b\u0094")
        buf.write("\2\u1604\u1661\5\u02bc\u015f\2\u1605\u1606\6\u015b\u0095")
        buf.write("\2\u1606\u1661\5\u02be\u0160\2\u1607\u1608\tW\2\2\u1608")
        buf.write("\u1661\5\u02b4\u015b\20\u1609\u160a\5\u02fe\u0180\2\u160a")
        buf.write("\u160b\5\u02b4\u015b\17\u160b\u1661\3\2\2\2\u160c\u160e")
        buf.write("\7\u01e9\2\2\u160d\u160c\3\2\2\2\u160d\u160e\3\2\2\2\u160e")
        buf.write("\u160f\3\2\2\2\u160f\u1610\7\u030a\2\2\u1610\u1611\5\u02f8")
        buf.write("\u017d\2\u1611\u1612\7\u030b\2\2\u1612\u1661\3\2\2\2\u1613")
        buf.write("\u1615\7\u00b0\2\2\u1614\u1613\3\2\2\2\u1614\u1615\3\2")
        buf.write("\2\2\u1615\u1616\3\2\2\2\u1616\u1661\5\u011c\u008f\2\u1617")
        buf.write("\u1618\7\u030c\2\2\u1618\u1619\5\u046c\u0237\2\u1619\u161a")
        buf.write("\5\u02a8\u0155\2\u161a\u161b\7\u030d\2\2\u161b\u1661\3")
        buf.write("\2\2\2\u161c\u161d\7\u0142\2\2\u161d\u161e\5\u02ca\u0166")
        buf.write("\2\u161e\u161f\7\t\2\2\u161f\u1620\7\u030a\2\2\u1620\u1622")
        buf.write("\5\u02b2\u015a\2\u1621\u1623\5\u02ce\u0168\2\u1622\u1621")
        buf.write("\3\2\2\2\u1622\u1623\3\2\2\2\u1623\u1624\3\2\2\2\u1624")
        buf.write("\u1625\7\u030b\2\2\u1625\u1661\3\2\2\2\u1626\u1627\7\"")
        buf.write("\2\2\u1627\u1661\5\u02b4\u015b\n\u1628\u1629\7\66\2\2")
        buf.write("\u1629\u162a\7\u030a\2\2\u162a\u162b\5\u02a8\u0155\2\u162b")
        buf.write("\u162c\7\23\2\2\u162c\u162e\5\u02f6\u017c\2\u162d\u162f")
        buf.write("\5\u02b6\u015c\2\u162e\u162d\3\2\2\2\u162e\u162f\3\2\2")
        buf.write("\2\u162f\u1630\3\2\2\2\u1630\u1631\7\u030b\2\2\u1631\u1661")
        buf.write("\3\2\2\2\u1632\u1634\7\65\2\2\u1633\u1635\5\u02a8\u0155")
        buf.write("\2\u1634\u1633\3\2\2\2\u1634\u1635\3\2\2\2\u1635\u1639")
        buf.write("\3\2\2\2\u1636\u1637\5\u02f0\u0179\2\u1637\u1638\5\u02f2")
        buf.write("\u017a\2\u1638\u163a\3\2\2\2\u1639\u1636\3\2\2\2\u163a")
        buf.write("\u163b\3\2\2\2\u163b\u1639\3\2\2\2\u163b\u163c\3\2\2\2")
        buf.write("\u163c\u163e\3\2\2\2\u163d\u163f\5\u02f4\u017b\2\u163e")
        buf.write("\u163d\3\2\2\2\u163e\u163f\3\2\2\2\u163f\u1640\3\2\2\2")
        buf.write("\u1640\u1641\7\u00a1\2\2\u1641\u1661\3\2\2\2\u1642\u1643")
        buf.write("\7`\2\2\u1643\u1644\7\u030a\2\2\u1644\u1645\5\u02a8\u0155")
        buf.write("\2\u1645\u1646\7\u0307\2\2\u1646\u1647\5\u02f6\u017c\2")
        buf.write("\u1647\u1648\7\u030b\2\2\u1648\u1661\3\2\2\2\u1649\u164a")
        buf.write("\7`\2\2\u164a\u164b\7\u030a\2\2\u164b\u164c\5\u02a8\u0155")
        buf.write("\2\u164c\u164d\7\u026f\2\2\u164d\u164e\5\u03ac\u01d7\2")
        buf.write("\u164e\u164f\7\u030b\2\2\u164f\u1661\3\2\2\2\u1650\u1651")
        buf.write("\7\u0082\2\2\u1651\u1652\7\u030a\2\2\u1652\u1653\5\u0474")
        buf.write("\u023b\2\u1653\u1654\7\u030b\2\2\u1654\u1661\3\2\2\2\u1655")
        buf.write("\u1656\7\u0274\2\2\u1656\u1657\7\u030a\2\2\u1657\u1658")
        buf.write("\5\u0474\u023b\2\u1658\u1659\7\u030b\2\2\u1659\u1661\3")
        buf.write("\2\2\2\u165a\u165b\7\u00f9\2\2\u165b\u165c\5\u02a8\u0155")
        buf.write("\2\u165c\u165d\5\u0300\u0181\2\u165d\u165e\7\u02f8\2\2")
        buf.write("\u165e\u165f\5\u02a8\u0155\2\u165f\u1661\3\2\2\2\u1660")
        buf.write("\u15f3\3\2\2\2\u1660\u15fa\3\2\2\2\u1660\u15fe\3\2\2\2")
        buf.write("\u1660\u15ff\3\2\2\2\u1660\u1600\3\2\2\2\u1660\u1601\3")
        buf.write("\2\2\2\u1660\u1602\3\2\2\2\u1660\u1603\3\2\2\2\u1660\u1605")
        buf.write("\3\2\2\2\u1660\u1607\3\2\2\2\u1660\u1609\3\2\2\2\u1660")
        buf.write("\u160d\3\2\2\2\u1660\u1614\3\2\2\2\u1660\u1617\3\2\2\2")
        buf.write("\u1660\u161c\3\2\2\2\u1660\u1626\3\2\2\2\u1660\u1628\3")
        buf.write("\2\2\2\u1660\u1632\3\2\2\2\u1660\u1642\3\2\2\2\u1660\u1649")
        buf.write("\3\2\2\2\u1660\u1650\3\2\2\2\u1660\u1655\3\2\2\2\u1660")
        buf.write("\u165a\3\2\2\2\u1661\u166a\3\2\2\2\u1662\u1663\f\21\2")
        buf.write("\2\u1663\u1664\7\u02ec\2\2\u1664\u1669\5\u02b4\u015b\22")
        buf.write("\u1665\u1666\f\27\2\2\u1666\u1667\7G\2\2\u1667\u1669\5")
        buf.write("\u04a0\u0251\2\u1668\u1662\3\2\2\2\u1668\u1665\3\2\2\2")
        buf.write("\u1669\u166c\3\2\2\2\u166a\u1668\3\2\2\2\u166a\u166b\3")
        buf.write("\2\2\2\u166b\u02b5\3\2\2\2\u166c\u166a\3\2\2\2\u166d\u166e")
        buf.write("\6\u015c\u0098\2\u166e\u166f\7\u02dd\2\2\u166f\u02b7\3")
        buf.write("\2\2\2\u1670\u1671\6\u015d\u0099\2\u1671\u1672\7\u030f")
        buf.write("\2\2\u1672\u1677\5\u0486\u0244\2\u1673\u1674\6\u015d\u009a")
        buf.write("\2\u1674\u1675\7\u0310\2\2\u1675\u1677\5\u0486\u0244\2")
        buf.write("\u1676\u1670\3\2\2\2\u1676\u1673\3\2\2\2\u1677\u02b9\3")
        buf.write("\2\2\2\u1678\u1679\7\34\2\2\u1679\u167b\7\u030a\2\2\u167a")
        buf.write("\u167c\7\u0091\2\2\u167b\u167a\3\2\2\2\u167b\u167c\3\2")
        buf.write("\2\2\u167c\u167d\3\2\2\2\u167d\u167e\5\u02c8\u0165\2\u167e")
        buf.write("\u1681\7\u030b\2\2\u167f\u1680\6\u015e\u009b\2\u1680\u1682")
        buf.write("\5\u02c0\u0161\2\u1681\u167f\3\2\2\2\u1681\u1682\3\2\2")
        buf.write("\2\u1682\u16fc\3\2\2\2\u1683\u1684\tX\2\2\u1684\u1685")
        buf.write("\7\u030a\2\2\u1685\u1686\5\u02c8\u0165\2\u1686\u1689\7")
        buf.write("\u030b\2\2\u1687\u1688\6\u015e\u009c\2\u1688\u168a\5\u02c0")
        buf.write("\u0161\2\u1689\u1687\3\2\2\2\u1689\u168a\3\2\2\2\u168a")
        buf.write("\u16fc\3\2\2\2\u168b\u168c\6\u015e\u009d\2\u168c\u16fc")
        buf.write("\5\u02c6\u0164\2\u168d\u168e\7a\2\2\u168e\u1690\7\u030a")
        buf.write("\2\2\u168f\u1691\7\f\2\2\u1690\u168f\3\2\2\2\u1690\u1691")
        buf.write("\3\2\2\2\u1691\u1692\3\2\2\2\u1692\u1693\7\u02fa\2\2\u1693")
        buf.write("\u1696\7\u030b\2\2\u1694\u1695\6\u015e\u009e\2\u1695\u1697")
        buf.write("\5\u02c0\u0161\2\u1696\u1694\3\2\2\2\u1696\u1697\3\2\2")
        buf.write("\2\u1697\u16fc\3\2\2\2\u1698\u1699\7a\2\2\u1699\u16a1")
        buf.write("\7\u030a\2\2\u169a\u169c\7\f\2\2\u169b\u169a\3\2\2\2\u169b")
        buf.write("\u169c\3\2\2\2\u169c\u169d\3\2\2\2\u169d\u16a2\7\u02fa")
        buf.write("\2\2\u169e\u16a2\5\u02c8\u0165\2\u169f\u16a0\7\u0091\2")
        buf.write("\2\u16a0\u16a2\5\u02f8\u017d\2\u16a1\u169b\3\2\2\2\u16a1")
        buf.write("\u169e\3\2\2\2\u16a1\u169f\3\2\2\2\u16a2\u16a3\3\2\2\2")
        buf.write("\u16a3\u16a6\7\u030b\2\2\u16a4\u16a5\6\u015e\u009f\2\u16a5")
        buf.write("\u16a7\5\u02c0\u0161\2\u16a6\u16a4\3\2\2\2\u16a6\u16a7")
        buf.write("\3\2\2\2\u16a7\u16fc\3\2\2\2\u16a8\u16a9\7\u015b\2\2\u16a9")
        buf.write("\u16ab\7\u030a\2\2\u16aa\u16ac\7\u0091\2\2\u16ab\u16aa")
        buf.write("\3\2\2\2\u16ab\u16ac\3\2\2\2\u16ac\u16ad\3\2\2\2\u16ad")
        buf.write("\u16ae\5\u02c8\u0165\2\u16ae\u16b1\7\u030b\2\2\u16af\u16b0")
        buf.write("\6\u015e\u00a0\2\u16b0\u16b2\5\u02c0\u0161\2\u16b1\u16af")
        buf.write("\3\2\2\2\u16b1\u16b2\3\2\2\2\u16b2\u16fc\3\2\2\2\u16b3")
        buf.write("\u16b4\7\u0148\2\2\u16b4\u16b6\7\u030a\2\2\u16b5\u16b7")
        buf.write("\7\u0091\2\2\u16b6\u16b5\3\2\2\2\u16b6\u16b7\3\2\2\2\u16b7")
        buf.write("\u16b8\3\2\2\2\u16b8\u16b9\5\u02c8\u0165\2\u16b9\u16bc")
        buf.write("\7\u030b\2\2\u16ba\u16bb\6\u015e\u00a1\2\u16bb\u16bd\5")
        buf.write("\u02c0\u0161\2\u16bc\u16ba\3\2\2\2\u16bc\u16bd\3\2\2\2")
        buf.write("\u16bd\u16fc\3\2\2\2\u16be\u16bf\7\u0229\2\2\u16bf\u16c0")
        buf.write("\7\u030a\2\2\u16c0\u16c1\5\u02c8\u0165\2\u16c1\u16c4\7")
        buf.write("\u030b\2\2\u16c2\u16c3\6\u015e\u00a2\2\u16c3\u16c5\5\u02c0")
        buf.write("\u0161\2\u16c4\u16c2\3\2\2\2\u16c4\u16c5\3\2\2\2\u16c5")
        buf.write("\u16fc\3\2\2\2\u16c6\u16c7\7\u027a\2\2\u16c7\u16c8\7\u030a")
        buf.write("\2\2\u16c8\u16c9\5\u02c8\u0165\2\u16c9\u16cc\7\u030b\2")
        buf.write("\2\u16ca\u16cb\6\u015e\u00a3\2\u16cb\u16cd\5\u02c0\u0161")
        buf.write("\2\u16cc\u16ca\3\2\2\2\u16cc\u16cd\3\2\2\2\u16cd\u16fc")
        buf.write("\3\2\2\2\u16ce\u16cf\7\u0226\2\2\u16cf\u16d0\7\u030a\2")
        buf.write("\2\u16d0\u16d1\5\u02c8\u0165\2\u16d1\u16d4\7\u030b\2\2")
        buf.write("\u16d2\u16d3\6\u015e\u00a4\2\u16d3\u16d5\5\u02c0\u0161")
        buf.write("\2\u16d4\u16d2\3\2\2\2\u16d4\u16d5\3\2\2\2\u16d5\u16fc")
        buf.write("\3\2\2\2\u16d6\u16d7\7\u027d\2\2\u16d7\u16d8\7\u030a\2")
        buf.write("\2\u16d8\u16d9\5\u02c8\u0165\2\u16d9\u16dc\7\u030b\2\2")
        buf.write("\u16da\u16db\6\u015e\u00a5\2\u16db\u16dd\5\u02c0\u0161")
        buf.write("\2\u16dc\u16da\3\2\2\2\u16dc\u16dd\3\2\2\2\u16dd\u16fc")
        buf.write("\3\2\2\2\u16de\u16df\7\u0236\2\2\u16df\u16e1\7\u030a\2")
        buf.write("\2\u16e0\u16e2\7\u0091\2\2\u16e1\u16e0\3\2\2\2\u16e1\u16e2")
        buf.write("\3\2\2\2\u16e2\u16e3\3\2\2\2\u16e3\u16e4\5\u02c8\u0165")
        buf.write("\2\u16e4\u16e7\7\u030b\2\2\u16e5\u16e6\6\u015e\u00a6\2")
        buf.write("\u16e6\u16e8\5\u02c0\u0161\2\u16e7\u16e5\3\2\2\2\u16e7")
        buf.write("\u16e8\3\2\2\2\u16e8\u16fc\3\2\2\2\u16e9\u16ea\7\u00dc")
        buf.write("\2\2\u16ea\u16ec\7\u030a\2\2\u16eb\u16ed\7\u0091\2\2\u16ec")
        buf.write("\u16eb\3\2\2\2\u16ec\u16ed\3\2\2\2\u16ed\u16ee\3\2\2\2")
        buf.write("\u16ee\u16f0\5\u02f8\u017d\2\u16ef\u16f1\5\u014c\u00a7")
        buf.write("\2\u16f0\u16ef\3\2\2\2\u16f0\u16f1\3\2\2\2\u16f1\u16f4")
        buf.write("\3\2\2\2\u16f2\u16f3\7\u01f5\2\2\u16f3\u16f5\5\u0488\u0245")
        buf.write("\2\u16f4\u16f2\3\2\2\2\u16f4\u16f5\3\2\2\2\u16f5\u16f6")
        buf.write("\3\2\2\2\u16f6\u16f9\7\u030b\2\2\u16f7\u16f8\6\u015e\u00a7")
        buf.write("\2\u16f8\u16fa\5\u02c0\u0161\2\u16f9\u16f7\3\2\2\2\u16f9")
        buf.write("\u16fa\3\2\2\2\u16fa\u16fc\3\2\2\2\u16fb\u1678\3\2\2\2")
        buf.write("\u16fb\u1683\3\2\2\2\u16fb\u168b\3\2\2\2\u16fb\u168d\3")
        buf.write("\2\2\2\u16fb\u1698\3\2\2\2\u16fb\u16a8\3\2\2\2\u16fb\u16b3")
        buf.write("\3\2\2\2\u16fb\u16be\3\2\2\2\u16fb\u16c6\3\2\2\2\u16fb")
        buf.write("\u16ce\3\2\2\2\u16fb\u16d6\3\2\2\2\u16fb\u16de\3\2\2\2")
        buf.write("\u16fb\u16e9\3\2\2\2\u16fc\u02bb\3\2\2\2\u16fd\u16fe\7")
        buf.write("\u02a2\2\2\u16fe\u16ff\7\u030a\2\2\u16ff\u1700\5\u02f8")
        buf.write("\u017d\2\u1700\u1701\7\u030b\2\2\u1701\u02bd\3\2\2\2\u1702")
        buf.write("\u1703\tY\2\2\u1703\u1704\5\u04a8\u0255\2\u1704\u1705")
        buf.write("\5\u02c0\u0161\2\u1705\u172d\3\2\2\2\u1706\u1707\7\u02b2")
        buf.write("\2\2\u1707\u1708\5\u0308\u0185\2\u1708\u1709\5\u02c0\u0161")
        buf.write("\2\u1709\u172d\3\2\2\2\u170a\u170b\tZ\2\2\u170b\u170c")
        buf.write("\7\u030a\2\2\u170c\u170e\5\u02a8\u0155\2\u170d\u170f\5")
        buf.write("\u02c2\u0162\2\u170e\u170d\3\2\2\2\u170e\u170f\3\2\2\2")
        buf.write("\u170f\u1710\3\2\2\2\u1710\u1712\7\u030b\2\2\u1711\u1713")
        buf.write("\5\u02c4\u0163\2\u1712\u1711\3\2\2\2\u1712\u1713\3\2\2")
        buf.write("\2\u1713\u1714\3\2\2\2\u1714\u1715\5\u02c0\u0161\2\u1715")
        buf.write("\u172d\3\2\2\2\u1716\u1717\t[\2\2\u1717\u1719\5\u0306")
        buf.write("\u0184\2\u1718\u171a\5\u02c4\u0163\2\u1719\u1718\3\2\2")
        buf.write("\2\u1719\u171a\3\2\2\2\u171a\u171b\3\2\2\2\u171b\u171c")
        buf.write("\5\u02c0\u0161\2\u171c\u172d\3\2\2\2\u171d\u171e\7\u02b1")
        buf.write("\2\2\u171e\u171f\7\u030a\2\2\u171f\u1720\5\u02a8\u0155")
        buf.write("\2\u1720\u1721\7\u0307\2\2\u1721\u1722\5\u02b4\u015b\2")
        buf.write("\u1722\u1725\7\u030b\2\2\u1723\u1724\7\u00cd\2\2\u1724")
        buf.write("\u1726\t\\\2\2\u1725\u1723\3\2\2\2\u1725\u1726\3\2\2\2")
        buf.write("\u1726\u1728\3\2\2\2\u1727\u1729\5\u02c4\u0163\2\u1728")
        buf.write("\u1727\3\2\2\2\u1728\u1729\3\2\2\2\u1729\u172a\3\2\2\2")
        buf.write("\u172a\u172b\5\u02c0\u0161\2\u172b\u172d\3\2\2\2\u172c")
        buf.write("\u1702\3\2\2\2\u172c\u1706\3\2\2\2\u172c\u170a\3\2\2\2")
        buf.write("\u172c\u1716\3\2\2\2\u172c\u171d\3\2\2\2\u172d\u02bf\3")
        buf.write("\2\2\2\u172e\u1731\7\u02b5\2\2\u172f\u1732\5\u0468\u0235")
        buf.write("\2\u1730\u1732\5\u0132\u009a\2\u1731\u172f\3\2\2\2\u1731")
        buf.write("\u1730\3\2\2\2\u1732\u02c1\3\2\2\2\u1733\u1736\7\u0307")
        buf.write("\2\2\u1734\u1737\5\u047c\u023f\2\u1735\u1737\7\u0315\2")
        buf.write("\2\u1736\u1734\3\2\2\2\u1736\u1735\3\2\2\2\u1737\u173a")
        buf.write("\3\2\2\2\u1738\u1739\7\u0307\2\2\u1739\u173b\5\u02a8\u0155")
        buf.write("\2\u173a\u1738\3\2\2\2\u173a\u173b\3\2\2\2\u173b\u02c3")
        buf.write("\3\2\2\2\u173c\u173d\t]\2\2\u173d\u173e\7\u02b3\2\2\u173e")
        buf.write("\u02c5\3\2\2\2\u173f\u1740\7\u029d\2\2\u1740\u1741\7\u030a")
        buf.write("\2\2\u1741\u1742\5\u02c8\u0165\2\u1742\u1744\7\u030b\2")
        buf.write("\2\u1743\u1745\5\u02c0\u0161\2\u1744\u1743\3\2\2\2\u1744")
        buf.write("\u1745\3\2\2\2\u1745\u1750\3\2\2\2\u1746\u1747\7\u029c")
        buf.write("\2\2\u1747\u1748\7\u030a\2\2\u1748\u1749\5\u02c8\u0165")
        buf.write("\2\u1749\u174a\7\u0307\2\2\u174a\u174b\5\u02c8\u0165\2")
        buf.write("\u174b\u174d\7\u030b\2\2\u174c\u174e\5\u02c0\u0161\2\u174d")
        buf.write("\u174c\3\2\2\2\u174d\u174e\3\2\2\2\u174e\u1750\3\2\2\2")
        buf.write("\u174f\u173f\3\2\2\2\u174f\u1746\3\2\2\2\u1750\u02c7\3")
        buf.write("\2\2\2\u1751\u1753\7\f\2\2\u1752\u1751\3\2\2\2\u1752\u1753")
        buf.write("\3\2\2\2\u1753\u1754\3\2\2\2\u1754\u1755\5\u02a8\u0155")
        buf.write("\2\u1755\u02c9\3\2\2\2\u1756\u175c\5\u02cc\u0167\2\u1757")
        buf.write("\u1758\7\u030a\2\2\u1758\u1759\5\u02cc\u0167\2\u1759\u175a")
        buf.write("\7\u030b\2\2\u175a\u175c\3\2\2\2\u175b\u1756\3\2\2\2\u175b")
        buf.write("\u1757\3\2\2\2\u175c\u02cb\3\2\2\2\u175d\u1762\5\u0474")
        buf.write("\u023b\2\u175e\u175f\7\u0307\2\2\u175f\u1761\5\u0474\u023b")
        buf.write("\2\u1760\u175e\3\2\2\2\u1761\u1764\3\2\2\2\u1762\u1760")
        buf.write("\3\2\2\2\u1762\u1763\3\2\2\2\u1763\u02cd\3\2\2\2\u1764")
        buf.write("\u1762\3\2\2\2\u1765\u1766\7\u00fd\2\2\u1766\u1767\7+")
        buf.write("\2\2\u1767\u1775\7\u015c\2\2\u1768\u1769\7\u00fd\2\2\u1769")
        buf.write("\u176a\7\u0169\2\2\u176a\u176b\7\u010d\2\2\u176b\u176f")
        buf.write("\7\u015c\2\2\u176c\u176d\7\u0287\2\2\u176d\u176e\7\u01b0")
        buf.write("\2\2\u176e\u1770\7\u00b2\2\2\u176f\u176c\3\2\2\2\u176f")
        buf.write("\u1770\3\2\2\2\u1770\u1775\3\2\2\2\u1771\u1772\7\u0287")
        buf.write("\2\2\u1772\u1773\7\u01b0\2\2\u1773\u1775\7\u00b2\2\2\u1774")
        buf.write("\u1765\3\2\2\2\u1774\u1768\3\2\2\2\u1774\u1771\3\2\2\2")
        buf.write("\u1775\u02cf\3\2\2\2\u1776\u1777\7>\2\2\u1777\u1778\7")
        buf.write("\u030a\2\2\u1778\u177b\5\u02f8\u017d\2\u1779\u177a\7\u026f")
        buf.write("\2\2\u177a\u177c\5\u03ac\u01d7\2\u177b\u1779\3\2\2\2\u177b")
        buf.write("\u177c\3\2\2\2\u177c\u177d\3\2\2\2\u177d\u177e\7\u030b")
        buf.write("\2\2\u177e\u1888\3\2\2\2\u177f\u1781\7k\2\2\u1780\u1782")
        buf.write("\5\u04a8\u0255\2\u1781\u1780\3\2\2\2\u1781\u1782\3\2\2")
        buf.write("\2\u1782\u1888\3\2\2\2\u1783\u1784\7v\2\2\u1784\u1888")
        buf.write("\5\u0306\u0184\2\u1785\u1786\7|\2\2\u1786\u1888\5\u0306")
        buf.write("\u0184\2\u1787\u1788\7\u00e7\2\2\u1788\u1888\5\u0306\u0184")
        buf.write("\2\u1789\u178a\7\u00f4\2\2\u178a\u178b\7\u030a\2\2\u178b")
        buf.write("\u178c\5\u02a8\u0155\2\u178c\u178d\7\u0307\2\2\u178d\u178e")
        buf.write("\5\u02a8\u0155\2\u178e\u178f\7\u0307\2\2\u178f\u1790\5")
        buf.write("\u02a8\u0155\2\u1790\u1791\7\u0307\2\2\u1791\u1792\5\u02a8")
        buf.write("\u0155\2\u1792\u1793\7\u030b\2\2\u1793\u1888\3\2\2\2\u1794")
        buf.write("\u1795\7\u00f9\2\2\u1795\u1796\7\u030a\2\2\u1796\u1799")
        buf.write("\5\u02a8\u0155\2\u1797\u1798\7\u0307\2\2\u1798\u179a\5")
        buf.write("\u02a8\u0155\2\u1799\u1797\3\2\2\2\u179a\u179b\3\2\2\2")
        buf.write("\u179b\u1799\3\2\2\2\u179b\u179c\3\2\2\2\u179c\u179d\3")
        buf.write("\2\2\2\u179d\u179e\7\u030b\2\2\u179e\u1888\3\2\2\2\u179f")
        buf.write("\u17a0\7\u0112\2\2\u17a0\u17a1\7\u030a\2\2\u17a1\u17a2")
        buf.write("\5\u02a8\u0155\2\u17a2\u17a3\7\u0307\2\2\u17a3\u17a4\5")
        buf.write("\u02a8\u0155\2\u17a4\u17a5\7\u030b\2\2\u17a5\u1888\3\2")
        buf.write("\2\2\u17a6\u17a7\7\u0159\2\2\u17a7\u1888\5\u0306\u0184")
        buf.write("\2\u17a8\u17a9\7\u0160\2\2\u17a9\u1888\5\u0306\u0184\2")
        buf.write("\u17aa\u17ab\7\u01e0\2\2\u17ab\u17ac\7\u030a\2\2\u17ac")
        buf.write("\u17ad\5\u02a8\u0155\2\u17ad\u17ae\7\u0307\2\2\u17ae\u17af")
        buf.write("\5\u02a8\u0155\2\u17af\u17b0\7\u030b\2\2\u17b0\u1888\3")
        buf.write("\2\2\2\u17b1\u17b2\7\u01f1\2\2\u17b2\u1888\5\u0306\u0184")
        buf.write("\2\u17b3\u17b4\7\u024c\2\2\u17b4\u1888\5\u0306\u0184\2")
        buf.write("\u17b5\u17b6\7\u0249\2\2\u17b6\u17b7\7\u030a\2\2\u17b7")
        buf.write("\u17ba\5\u02a8\u0155\2\u17b8\u17b9\7\u0307\2\2\u17b9\u17bb")
        buf.write("\5\u02a8\u0155\2\u17ba\u17b8\3\2\2\2\u17ba\u17bb\3\2\2")
        buf.write("\2\u17bb\u17bc\3\2\2\2\u17bc\u17bd\7\u030b\2\2\u17bd\u1888")
        buf.write("\3\2\2\2\u17be\u1888\5\u02de\u0170\2\u17bf\u17c0\7\u026c")
        buf.write("\2\2\u17c0\u1888\5\u04a8\u0255\2\u17c1\u17c2\7\u0274\2")
        buf.write("\2\u17c2\u1888\5\u0306\u0184\2\u17c3\u17c4\7\u0292\2\2")
        buf.write("\u17c4\u1888\5\u0306\u0184\2\u17c5\u17c6\t^\2\2\u17c6")
        buf.write("\u17c7\7\u030a\2\2\u17c7\u17c8\5\u02a8\u0155\2\u17c8\u17ce")
        buf.write("\7\u0307\2\2\u17c9\u17cf\5\u02a8\u0155\2\u17ca\u17cb\7")
        buf.write("\u00f9\2\2\u17cb\u17cc\5\u02a8\u0155\2\u17cc\u17cd\5\u0300")
        buf.write("\u0181\2\u17cd\u17cf\3\2\2\2\u17ce\u17c9\3\2\2\2\u17ce")
        buf.write("\u17ca\3\2\2\2\u17cf\u17d0\3\2\2\2\u17d0\u17d1\7\u030b")
        buf.write("\2\2\u17d1\u1888\3\2\2\2\u17d2\u17d4\7f\2\2\u17d3\u17d5")
        buf.write("\5\u04a8\u0255\2\u17d4\u17d3\3\2\2\2\u17d4\u17d5\3\2\2")
        buf.write("\2\u17d5\u1888\3\2\2\2\u17d6\u17d8\7n\2\2\u17d7\u17d9")
        buf.write("\5\u02d4\u016b\2\u17d8\u17d7\3\2\2\2\u17d8\u17d9\3\2\2")
        buf.write("\2\u17d9\u1888\3\2\2\2\u17da\u17db\t_\2\2\u17db\u17dc")
        buf.write("\7\u030a\2\2\u17dc\u17dd\5\u02a8\u0155\2\u17dd\u17de\7")
        buf.write("\u0307\2\2\u17de\u17df\7\u00f9\2\2\u17df\u17e0\5\u02a8")
        buf.write("\u0155\2\u17e0\u17e1\5\u0300\u0181\2\u17e1\u17e2\7\u030b")
        buf.write("\2\2\u17e2\u1888\3\2\2\2\u17e3\u17e4\7\u00b8\2\2\u17e4")
        buf.write("\u17e5\7\u030a\2\2\u17e5\u17e6\5\u0300\u0181\2\u17e6\u17e7")
        buf.write("\7\u00cd\2\2\u17e7\u17e8\5\u02a8\u0155\2\u17e8\u17e9\7")
        buf.write("\u030b\2\2\u17e9\u1888\3\2\2\2\u17ea\u17eb\7\u00d7\2\2")
        buf.write("\u17eb\u17ec\7\u030a\2\2\u17ec\u17ed\5\u02dc\u016f\2\u17ed")
        buf.write("\u17ee\7\u0307\2\2\u17ee\u17ef\5\u02a8\u0155\2\u17ef\u17f0")
        buf.write("\7\u030b\2\2\u17f0\u1888\3\2\2\2\u17f1\u17f3\7\u0176\2")
        buf.write("\2\u17f2\u17f4\5\u02d4\u016b\2\u17f3\u17f2\3\2\2\2\u17f3")
        buf.write("\u17f4\3\2\2\2\u17f4\u1888\3\2\2\2\u17f5\u17f6\7\u01a0")
        buf.write("\2\2\u17f6\u17f7\7\u030a\2\2\u17f7\u17f8\5\u02b2\u015a")
        buf.write("\2\u17f8\u17f9\7\u00fd\2\2\u17f9\u17fa\5\u02a8\u0155\2")
        buf.write("\u17fa\u17fb\7\u030b\2\2\u17fb\u1888\3\2\2\2\u17fc\u1888")
        buf.write("\5\u02e0\u0171\2\u17fd\u17ff\7\u023b\2\2\u17fe\u1800\5")
        buf.write("\u02d4\u016b\2\u17ff\u17fe\3\2\2\2\u17ff\u1800\3\2\2\2")
        buf.write("\u1800\u1888\3\2\2\2\u1801\u1802\t`\2\2\u1802\u1803\7")
        buf.write("\u030a\2\2\u1803\u1804\5\u0302\u0182\2\u1804\u1805\7\u0307")
        buf.write("\2\2\u1805\u1806\5\u02a8\u0155\2\u1806\u1807\7\u0307\2")
        buf.write("\2\u1807\u1808\5\u02a8\u0155\2\u1808\u1809\7\u030b\2\2")
        buf.write("\u1809\u1888\3\2\2\2\u180a\u180c\7\u0270\2\2\u180b\u180d")
        buf.write("\5\u04a8\u0255\2\u180c\u180b\3\2\2\2\u180c\u180d\3\2\2")
        buf.write("\2\u180d\u1888\3\2\2\2\u180e\u1810\7\u0272\2\2\u180f\u1811")
        buf.write("\5\u02d4\u016b\2\u1810\u180f\3\2\2\2\u1810\u1811\3\2\2")
        buf.write("\2\u1811\u1888\3\2\2\2\u1812\u1814\7\u0271\2\2\u1813\u1815")
        buf.write("\5\u02d4\u016b\2\u1814\u1813\3\2\2\2\u1814\u1815\3\2\2")
        buf.write("\2\u1815\u1888\3\2\2\2\u1816\u1817\7\25\2\2\u1817\u1888")
        buf.write("\5\u0306\u0184\2\u1818\u1819\7<\2\2\u1819\u1888\5\u0306")
        buf.write("\u0184\2\u181a\u181b\7E\2\2\u181b\u1888\5\u0304\u0183")
        buf.write("\2\u181c\u181d\7H\2\2\u181d\u1888\5\u0306\u0184\2\u181e")
        buf.write("\u181f\7o\2\2\u181f\u1888\5\u04a8\u0255\2\u1820\u1821")
        buf.write("\7\u00e9\2\2\u1821\u1822\7\u030a\2\2\u1822\u1823\5\u02a8")
        buf.write("\u0155\2\u1823\u1824\7\u0307\2\2\u1824\u1825\5\u02a8\u0155")
        buf.write("\2\u1825\u1826\7\u0307\2\2\u1826\u1827\5\u02a8\u0155\2")
        buf.write("\u1827\u1828\7\u030b\2\2\u1828\u1888\3\2\2\2\u1829\u182a")
        buf.write("\7\u00cb\2\2\u182a\u182b\7\u030a\2\2\u182b\u182c\5\u02a8")
        buf.write("\u0155\2\u182c\u182d\7\u0307\2\2\u182d\u1830\5\u02a8\u0155")
        buf.write("\2\u182e\u182f\7\u0307\2\2\u182f\u1831\5\u02a8\u0155\2")
        buf.write("\u1830\u182e\3\2\2\2\u1830\u1831\3\2\2\2\u1831\u1832\3")
        buf.write("\2\2\2\u1832\u1833\7\u030b\2\2\u1833\u1888\3\2\2\2\u1834")
        buf.write("\u1835\7\u0153\2\2\u1835\u1888\5\u0306\u0184\2\u1836\u1837")
        buf.write("\7\u015f\2\2\u1837\u1838\7\u030a\2\2\u1838\u1839\5\u02a8")
        buf.write("\u0155\2\u1839\u183a\7\u0307\2\2\u183a\u183b\5\u02a8\u0155")
        buf.write("\2\u183b\u183c\7\u030b\2\2\u183c\u1888\3\2\2\2\u183d\u183e")
        buf.write("\6\u0169\u00a8\2\u183e\u183f\7\u0180\2\2\u183f\u1840\7")
        buf.write("\u030a\2\2\u1840\u1841\5\u048c\u0247\2\u1841\u1842\7\u030b")
        buf.write("\2\2\u1842\u1888\3\2\2\2\u1843\u1844\6\u0169\u00a9\2\u1844")
        buf.write("\u1845\7\u0198\2\2\u1845\u1888\5\u0306\u0184\2\u1846\u1847")
        buf.write("\7\u01af\2\2\u1847\u1888\5\u0306\u0184\2\u1848\u1849\7")
        buf.write("\u01cb\2\2\u1849\u184a\7\u030a\2\2\u184a\u184b\5\u02a8")
        buf.write("\u0155\2\u184b\u184c\7\u0307\2\2\u184c\u184d\5\u02a8\u0155")
        buf.write("\2\u184d\u184e\7\u030b\2\2\u184e\u1888\3\2\2\2\u184f\u1850")
        buf.write("\7\u01cc\2\2\u1850\u1851\7\u030a\2\2\u1851\u1852\5\u02a8")
        buf.write("\u0155\2\u1852\u1853\7\u0307\2\2\u1853\u1854\5\u02a8\u0155")
        buf.write("\2\u1854\u1855\7\u0307\2\2\u1855\u1856\5\u02a8\u0155\2")
        buf.write("\u1856\u1857\7\u030b\2\2\u1857\u1888\3\2\2\2\u1858\u1859")
        buf.write("\7\u01de\2\2\u1859\u1888\5\u0306\u0184\2\u185a\u185b\7")
        buf.write("\u01e7\2\2\u185b\u1888\5\u04a8\u0255\2\u185c\u185d\7\u0257")
        buf.write("\2\2\u185d\u185e\7\u030a\2\2\u185e\u185f\5\u02a8\u0155")
        buf.write("\2\u185f\u1860\7\u0307\2\2\u1860\u1861\5\u02a8\u0155\2")
        buf.write("\u1861\u1862\7\u030b\2\2\u1862\u1888\3\2\2\2\u1863\u1864")
        buf.write("\7\u0282\2\2\u1864\u1865\7\u030a\2\2\u1865\u1868\5\u02a8")
        buf.write("\u0155\2\u1866\u1867\7\u0307\2\2\u1867\u1869\5\u02a8\u0155")
        buf.write("\2\u1868\u1866\3\2\2\2\u1868\u1869\3\2\2\2\u1869\u186a")
        buf.write("\3\2\2\2\u186a\u186b\7\u030b\2\2\u186b\u1888\3\2\2\2\u186c")
        buf.write("\u186d\7\u0283\2\2\u186d\u186e\7\u030a\2\2\u186e\u1882")
        buf.write("\5\u02a8\u0155\2\u186f\u1870\7\23\2\2\u1870\u1871\7>\2")
        buf.write("\2\u1871\u1873\5\u03a8\u01d5\2\u1872\u186f\3\2\2\2\u1872")
        buf.write("\u1873\3\2\2\2\u1873\u1876\3\2\2\2\u1874\u1875\6\u0169")
        buf.write("\u00aa\2\u1875\u1877\5\u02d8\u016d\2\u1876\u1874\3\2\2")
        buf.write("\2\u1876\u1877\3\2\2\2\u1877\u1883\3\2\2\2\u1878\u1879")
        buf.write("\7\23\2\2\u1879\u187a\7\"\2\2\u187a\u1883\5\u03a8\u01d5")
        buf.write("\2\u187b\u187c\7\u0307\2\2\u187c\u187d\5\u0478\u023d\2")
        buf.write("\u187d\u187e\7\u0307\2\2\u187e\u187f\5\u0478\u023d\2\u187f")
        buf.write("\u1880\7\u0307\2\2\u1880\u1881\5\u0478\u023d\2\u1881\u1883")
        buf.write("\3\2\2\2\u1882\u1872\3\2\2\2\u1882\u1878\3\2\2\2\u1882")
        buf.write("\u187b\3\2\2\2\u1883\u1884\3\2\2\2\u1884\u1885\7\u030b")
        buf.write("\2\2\u1885\u1888\3\2\2\2\u1886\u1888\5\u02d2\u016a\2\u1887")
        buf.write("\u1776\3\2\2\2\u1887\u177f\3\2\2\2\u1887\u1783\3\2\2\2")
        buf.write("\u1887\u1785\3\2\2\2\u1887\u1787\3\2\2\2\u1887\u1789\3")
        buf.write("\2\2\2\u1887\u1794\3\2\2\2\u1887\u179f\3\2\2\2\u1887\u17a6")
        buf.write("\3\2\2\2\u1887\u17a8\3\2\2\2\u1887\u17aa\3\2\2\2\u1887")
        buf.write("\u17b1\3\2\2\2\u1887\u17b3\3\2\2\2\u1887\u17b5\3\2\2\2")
        buf.write("\u1887\u17be\3\2\2\2\u1887\u17bf\3\2\2\2\u1887\u17c1\3")
        buf.write("\2\2\2\u1887\u17c3\3\2\2\2\u1887\u17c5\3\2\2\2\u1887\u17d2")
        buf.write("\3\2\2\2\u1887\u17d6\3\2\2\2\u1887\u17da\3\2\2\2\u1887")
        buf.write("\u17e3\3\2\2\2\u1887\u17ea\3\2\2\2\u1887\u17f1\3\2\2\2")
        buf.write("\u1887\u17f5\3\2\2\2\u1887\u17fc\3\2\2\2\u1887\u17fd\3")
        buf.write("\2\2\2\u1887\u1801\3\2\2\2\u1887\u180a\3\2\2\2\u1887\u180e")
        buf.write("\3\2\2\2\u1887\u1812\3\2\2\2\u1887\u1816\3\2\2\2\u1887")
        buf.write("\u1818\3\2\2\2\u1887\u181a\3\2\2\2\u1887\u181c\3\2\2\2")
        buf.write("\u1887\u181e\3\2\2\2\u1887\u1820\3\2\2\2\u1887\u1829\3")
        buf.write("\2\2\2\u1887\u1834\3\2\2\2\u1887\u1836\3\2\2\2\u1887\u183d")
        buf.write("\3\2\2\2\u1887\u1843\3\2\2\2\u1887\u1846\3\2\2\2\u1887")
        buf.write("\u1848\3\2\2\2\u1887\u184f\3\2\2\2\u1887\u1858\3\2\2\2")
        buf.write("\u1887\u185a\3\2\2\2\u1887\u185c\3\2\2\2\u1887\u1863\3")
        buf.write("\2\2\2\u1887\u186c\3\2\2\2\u1887\u1886\3\2\2\2\u1888\u02d1")
        buf.write("\3\2\2\2\u1889\u188a\6\u016a\u00ab\2\u188a\u188b\7\\\2")
        buf.write("\2\u188b\u188c\7\u030a\2\2\u188c\u188d\5\u02a8\u0155\2")
        buf.write("\u188d\u188e\7\u0307\2\2\u188e\u188f\5\u02a8\u0155\2\u188f")
        buf.write("\u1890\7\u030b\2\2\u1890\u18a9\3\2\2\2\u1891\u1892\7\u00d5")
        buf.write("\2\2\u1892\u1894\7\u030a\2\2\u1893\u1895\5\u02f8\u017d")
        buf.write("\2\u1894\u1893\3\2\2\2\u1894\u1895\3\2\2\2\u1895\u1896")
        buf.write("\3\2\2\2\u1896\u18a9\7\u030b\2\2\u1897\u1898\7\u0119\2")
        buf.write("\2\u1898\u18a9\5\u0304\u0183\2\u1899\u189a\7\u0161\2\2")
        buf.write("\u189a\u18a9\5\u0304\u0183\2\u189b\u189c\7\u0162\2\2\u189c")
        buf.write("\u18a9\5\u0304\u0183\2\u189d\u189e\7\u0163\2\2\u189e\u18a9")
        buf.write("\5\u0304\u0183\2\u189f\u18a0\7\u019d\2\2\u18a0\u18a1\7")
        buf.write("\u030a\2\2\u18a1\u18a2\5\u02a8\u0155\2\u18a2\u18a3\7\u0307")
        buf.write("\2\2\u18a3\u18a4\5\u02a8\u0155\2\u18a4\u18a5\7\u030b\2")
        buf.write("\2\u18a5\u18a9\3\2\2\2\u18a6\u18a7\7\u019e\2\2\u18a7\u18a9")
        buf.write("\5\u0304\u0183\2\u18a8\u1889\3\2\2\2\u18a8\u1891\3\2\2")
        buf.write("\2\u18a8\u1897\3\2\2\2\u18a8\u1899\3\2\2\2\u18a8\u189b")
        buf.write("\3\2\2\2\u18a8\u189d\3\2\2\2\u18a8\u189f\3\2\2\2\u18a8")
        buf.write("\u18a6\3\2\2\2\u18a9\u02d3\3\2\2\2\u18aa\u18ac\7\u030a")
        buf.write("\2\2\u18ab\u18ad\5\u02d6\u016c\2\u18ac\u18ab\3\2\2\2\u18ac")
        buf.write("\u18ad\3\2\2\2\u18ad\u18ae\3\2\2\2\u18ae\u18af\7\u030b")
        buf.write("\2\2\u18af\u02d5\3\2\2\2\u18b0\u18b1\6\u016c\u00ac\2\u18b1")
        buf.write("\u18b2\7\u02ed\2\2\u18b2\u02d7\3\2\2\2\u18b3\u18c0\7\u0114")
        buf.write("\2\2\u18b4\u18b5\5\u047a\u023e\2\u18b5\u18b6\7\u02f9\2")
        buf.write("\2\u18b6\u18b7\5\u047a\u023e\2\u18b7\u18c1\3\2\2\2\u18b8")
        buf.write("\u18bd\5\u02da\u016e\2\u18b9\u18ba\7\u0307\2\2\u18ba\u18bc")
        buf.write("\5\u02da\u016e\2\u18bb\u18b9\3\2\2\2\u18bc\u18bf\3\2\2")
        buf.write("\2\u18bd\u18bb\3\2\2\2\u18bd\u18be\3\2\2\2\u18be\u18c1")
        buf.write("\3\2\2\2\u18bf\u18bd\3\2\2\2\u18c0\u18b4\3\2\2\2\u18c0")
        buf.write("\u18b8\3\2\2\2\u18c1\u02d9\3\2\2\2\u18c2\u18c8\5\u047a")
        buf.write("\u023e\2\u18c3\u18c5\t#\2\2\u18c4\u18c6\7\u01de\2\2\u18c5")
        buf.write("\u18c4\3\2\2\2\u18c5\u18c6\3\2\2\2\u18c6\u18c9\3\2\2\2")
        buf.write("\u18c7\u18c9\7\u01de\2\2\u18c8\u18c3\3\2\2\2\u18c8\u18c7")
        buf.write("\3\2\2\2\u18c8\u18c9\3\2\2\2\u18c9\u02db\3\2\2\2\u18ca")
        buf.write("\u18cb\ta\2\2\u18cb\u02dd\3\2\2\2\u18cc\u18cd\7\u0255")
        buf.write("\2\2\u18cd\u18e5\7\u030a\2\2\u18ce\u18d1\5\u02a8\u0155")
        buf.write("\2\u18cf\u18d0\7\u00cd\2\2\u18d0\u18d2\5\u02a8\u0155\2")
        buf.write("\u18d1\u18cf\3\2\2\2\u18d1\u18d2\3\2\2\2\u18d2\u18e6\3")
        buf.write("\2\2\2\u18d3\u18d5\7\u010f\2\2\u18d4\u18d6\5\u02a8\u0155")
        buf.write("\2\u18d5\u18d4\3\2\2\2\u18d5\u18d6\3\2\2\2\u18d6\u18d7")
        buf.write("\3\2\2\2\u18d7\u18d8\7\u00cd\2\2\u18d8\u18e6\5\u02a8\u0155")
        buf.write("\2\u18d9\u18db\7\u0251\2\2\u18da\u18dc\5\u02a8\u0155\2")
        buf.write("\u18db\u18da\3\2\2\2\u18db\u18dc\3\2\2\2\u18dc\u18dd\3")
        buf.write("\2\2\2\u18dd\u18de\7\u00cd\2\2\u18de\u18e6\5\u02a8\u0155")
        buf.write("\2\u18df\u18e1\7-\2\2\u18e0\u18e2\5\u02a8\u0155\2\u18e1")
        buf.write("\u18e0\3\2\2\2\u18e1\u18e2\3\2\2\2\u18e2\u18e3\3\2\2\2")
        buf.write("\u18e3\u18e4\7\u00cd\2\2\u18e4\u18e6\5\u02a8\u0155\2\u18e5")
        buf.write("\u18ce\3\2\2\2\u18e5\u18d3\3\2\2\2\u18e5\u18d9\3\2\2\2")
        buf.write("\u18e5\u18df\3\2\2\2\u18e6\u18e7\3\2\2\2\u18e7\u18e8\7")
        buf.write("\u030b\2\2\u18e8\u02df\3\2\2\2\u18e9\u18ea\7\u0235\2\2")
        buf.write("\u18ea\u18eb\7\u030a\2\2\u18eb\u18f8\5\u02a8\u0155\2\u18ec")
        buf.write("\u18ed\7\u0307\2\2\u18ed\u18f0\5\u02a8\u0155\2\u18ee\u18ef")
        buf.write("\7\u0307\2\2\u18ef\u18f1\5\u02a8\u0155\2\u18f0\u18ee\3")
        buf.write("\2\2\2\u18f0\u18f1\3\2\2\2\u18f1\u18f9\3\2\2\2\u18f2\u18f3")
        buf.write("\7\u00cd\2\2\u18f3\u18f6\5\u02a8\u0155\2\u18f4\u18f5\7")
        buf.write("\u00ca\2\2\u18f5\u18f7\5\u02a8\u0155\2\u18f6\u18f4\3\2")
        buf.write("\2\2\u18f6\u18f7\3\2\2\2\u18f7\u18f9\3\2\2\2\u18f8\u18ec")
        buf.write("\3\2\2\2\u18f8\u18f2\3\2\2\2\u18f9\u18fa\3\2\2\2\u18fa")
        buf.write("\u18fb\7\u030b\2\2\u18fb\u02e1\3\2\2\2\u18fc\u18fd\5\u046a")
        buf.write("\u0236\2\u18fd\u18ff\7\u030a\2\2\u18fe\u1900\5\u02e4\u0173")
        buf.write("\2\u18ff\u18fe\3\2\2\2\u18ff\u1900\3\2\2\2\u1900\u1901")
        buf.write("\3\2\2\2\u1901\u1902\7\u030b\2\2\u1902\u190b\3\2\2\2\u1903")
        buf.write("\u1904\5\u0472\u023a\2\u1904\u1906\7\u030a\2\2\u1905\u1907")
        buf.write("\5\u02f8\u017d\2\u1906\u1905\3\2\2\2\u1906\u1907\3\2\2")
        buf.write("\2\u1907\u1908\3\2\2\2\u1908\u1909\7\u030b\2\2\u1909\u190b")
        buf.write("\3\2\2\2\u190a\u18fc\3\2\2\2\u190a\u1903\3\2\2\2\u190b")
        buf.write("\u02e3\3\2\2\2\u190c\u1911\5\u02e6\u0174\2\u190d\u190e")
        buf.write("\7\u0307\2\2\u190e\u1910\5\u02e6\u0174\2\u190f\u190d\3")
        buf.write("\2\2\2\u1910\u1913\3\2\2\2\u1911\u190f\3\2\2\2\u1911\u1912")
        buf.write("\3\2\2\2\u1912\u02e5\3\2\2\2\u1913\u1911\3\2\2\2\u1914")
        buf.write("\u1916\5\u02a8\u0155\2\u1915\u1917\5\u0168\u00b5\2\u1916")
        buf.write("\u1915\3\2\2\2\u1916\u1917\3\2\2\2\u1917\u02e7\3\2\2\2")
        buf.write("\u1918\u191b\5\u02ea\u0176\2\u1919\u191b\5\u02ec\u0177")
        buf.write("\2\u191a\u1918\3\2\2\2\u191a\u1919\3\2\2\2\u191b\u02e9")
        buf.write("\3\2\2\2\u191c\u191d\7\u0311\2\2\u191d\u1920\5\u04a0\u0251")
        buf.write("\2\u191e\u1920\7\u0312\2\2\u191f\u191c\3\2\2\2\u191f\u191e")
        buf.write("\3\2\2\2\u1920\u02eb\3\2\2\2\u1921\u1923\7\u0313\2\2\u1922")
        buf.write("\u1924\5\u04ae\u0258\2\u1923\u1922\3\2\2\2\u1923\u1924")
        buf.write("\3\2\2\2\u1924\u1925\3\2\2\2\u1925\u1927\5\u04a0\u0251")
        buf.write("\2\u1926\u1928\5\u0476\u023c\2\u1927\u1926\3\2\2\2\u1927")
        buf.write("\u1928\3\2\2\2\u1928\u02ed\3\2\2\2\u1929\u192a\6\u0178")
        buf.write("\u00ad\2\u192a\u192c\5\u046c\u0237\2\u192b\u192d\5\u0476")
        buf.write("\u023c\2\u192c\u192b\3\2\2\2\u192c\u192d\3\2\2\2\u192d")
        buf.write("\u1934\3\2\2\2\u192e\u192f\6\u0178\u00ae\2\u192f\u1931")
        buf.write("\5\u04a2\u0252\2\u1930\u1932\5\u0476\u023c\2\u1931\u1930")
        buf.write("\3\2\2\2\u1931\u1932\3\2\2\2\u1932\u1934\3\2\2\2\u1933")
        buf.write("\u1929\3\2\2\2\u1933\u192e\3\2\2\2\u1934\u1938\3\2\2\2")
        buf.write("\u1935\u1936\7\u0082\2\2\u1936\u1938\5\u0476\u023c\2\u1937")
        buf.write("\u1933\3\2\2\2\u1937\u1935\3\2\2\2\u1938\u02ef\3\2\2\2")
        buf.write("\u1939\u193a\7\u0284\2\2\u193a\u193b\5\u02a8\u0155\2\u193b")
        buf.write("\u02f1\3\2\2\2\u193c\u193d\7\u0248\2\2\u193d\u193e\5\u02a8")
        buf.write("\u0155\2\u193e\u02f3\3\2\2\2\u193f\u1940\7\u009c\2\2\u1940")
        buf.write("\u1941\5\u02a8\u0155\2\u1941\u02f5\3\2\2\2\u1942\u1944")
        buf.write("\7\"\2\2\u1943\u1945\5\u039e\u01d0\2\u1944\u1943\3\2\2")
        buf.write("\2\u1944\u1945\3\2\2\2\u1945\u1970\3\2\2\2\u1946\u1948")
        buf.write("\7>\2\2\u1947\u1949\5\u039e\u01d0\2\u1948\u1947\3\2\2")
        buf.write("\2\u1948\u1949\3\2\2\2\u1949\u194b\3\2\2\2\u194a\u194c")
        buf.write("\5\u03a2\u01d2\2\u194b\u194a\3\2\2\2\u194b\u194c\3\2\2")
        buf.write("\2\u194c\u1970\3\2\2\2\u194d\u194f\5\u039a\u01ce\2\u194e")
        buf.write("\u1950\5\u039e\u01d0\2\u194f\u194e\3\2\2\2\u194f\u1950")
        buf.write("\3\2\2\2\u1950\u1970\3\2\2\2\u1951\u1953\7\u0202\2\2\u1952")
        buf.write("\u1954\7\u00fb\2\2\u1953\u1952\3\2\2\2\u1953\u1954\3\2")
        buf.write("\2\2\u1954\u1970\3\2\2\2\u1955\u1957\7\u0266\2\2\u1956")
        buf.write("\u1958\7\u00fb\2\2\u1957\u1956\3\2\2\2\u1957\u1958\3\2")
        buf.write("\2\2\u1958\u1970\3\2\2\2\u1959\u1970\7v\2\2\u195a\u195c")
        buf.write("\7\u024c\2\2\u195b\u195d\5\u03aa\u01d6\2\u195c\u195b\3")
        buf.write("\2\2\2\u195c\u195d\3\2\2\2\u195d\u1970\3\2\2\2\u195e\u1960")
        buf.write("\7s\2\2\u195f\u1961\5\u03aa\u01d6\2\u1960\u195f\3\2\2")
        buf.write("\2\u1960\u1961\3\2\2\2\u1961\u1970\3\2\2\2\u1962\u1964")
        buf.write("\7\u0080\2\2\u1963\u1965\5\u049a\u024e\2\u1964\u1963\3")
        buf.write("\2\2\2\u1964\u1965\3\2\2\2\u1965\u1970\3\2\2\2\u1966\u1967")
        buf.write("\6\u017c\u00af\2\u1967\u1970\7\u0108\2\2\u1968\u1969\6")
        buf.write("\u017c\u00b0\2\u1969\u1970\5\u039c\u01cf\2\u196a\u196b")
        buf.write("\6\u017c\u00b1\2\u196b\u196d\7\u00c5\2\2\u196c\u196e\5")
        buf.write("\u049c\u024f\2\u196d\u196c\3\2\2\2\u196d\u196e\3\2\2\2")
        buf.write("\u196e\u1970\3\2\2\2\u196f\u1942\3\2\2\2\u196f\u1946\3")
        buf.write("\2\2\2\u196f\u194d\3\2\2\2\u196f\u1951\3\2\2\2\u196f\u1955")
        buf.write("\3\2\2\2\u196f\u1959\3\2\2\2\u196f\u195a\3\2\2\2\u196f")
        buf.write("\u195e\3\2\2\2\u196f\u1962\3\2\2\2\u196f\u1966\3\2\2\2")
        buf.write("\u196f\u1968\3\2\2\2\u196f\u196a\3\2\2\2\u1970\u02f7\3")
        buf.write("\2\2\2\u1971\u1976\5\u02a8\u0155\2\u1972\u1973\7\u0307")
        buf.write("\2\2\u1973\u1975\5\u02a8\u0155\2\u1974\u1972\3\2\2\2\u1975")
        buf.write("\u1978\3\2\2\2\u1976\u1974\3\2\2\2\u1976\u1977\3\2\2\2")
        buf.write("\u1977\u02f9\3\2\2\2\u1978\u1976\3\2\2\2\u1979\u197a\7")
        buf.write(">\2\2\u197a\u197d\7\u01fc\2\2\u197b\u197d\7<\2\2\u197c")
        buf.write("\u1979\3\2\2\2\u197c\u197b\3\2\2\2\u197d\u02fb\3\2\2\2")
        buf.write("\u197e\u197f\tb\2\2\u197f\u02fd\3\2\2\2\u1980\u1981\t")
        buf.write("c\2\2\u1981\u02ff\3\2\2\2\u1982\u1985\5\u0302\u0182\2")
        buf.write("\u1983\u1985\td\2\2\u1984\u1982\3\2\2\2\u1984\u1983\3")
        buf.write("\2\2\2\u1985\u0301\3\2\2\2\u1986\u1987\te\2\2\u1987\u0303")
        buf.write("\3\2\2\2\u1988\u1989\7\u030a\2\2\u1989\u198a\5\u02f8\u017d")
        buf.write("\2\u198a\u198b\7\u030b\2\2\u198b\u0305\3\2\2\2\u198c\u198d")
        buf.write("\7\u030a\2\2\u198d\u198e\5\u02a8\u0155\2\u198e\u198f\7")
        buf.write("\u030b\2\2\u198f\u0307\3\2\2\2\u1990\u1991\7\u030a\2\2")
        buf.write("\u1991\u1992\5\u02b4\u015b\2\u1992\u1993\7\u030b\2\2\u1993")
        buf.write("\u0309\3\2\2\2\u1994\u1999\5\u030c\u0187\2\u1995\u1996")
        buf.write("\7\u0307\2\2\u1996\u1998\5\u030c\u0187\2\u1997\u1995\3")
        buf.write("\2\2\2\u1998\u199b\3\2\2\2\u1999\u1997\3\2\2\2\u1999\u199a")
        buf.write("\3\2\2\2\u199a\u030b\3\2\2\2\u199b\u1999\3\2\2\2\u199c")
        buf.write("\u199e\5\u02a8\u0155\2\u199d\u199f\5\u014e\u00a8\2\u199e")
        buf.write("\u199d\3\2\2\2\u199e\u199f\3\2\2\2\u199f\u030d\3\2\2\2")
        buf.write("\u19a0\u19a5\5\u0310\u0189\2\u19a1\u19a2\7\u0307\2\2\u19a2")
        buf.write("\u19a4\5\u0310\u0189\2\u19a3\u19a1\3\2\2\2\u19a4\u19a7")
        buf.write("\3\2\2\2\u19a5\u19a3\3\2\2\2\u19a5\u19a6\3\2\2\2\u19a6")
        buf.write("\u030f\3\2\2\2\u19a7\u19a5\3\2\2\2\u19a8\u19a9\5\u02a8")
        buf.write("\u0155\2\u19a9\u0311\3\2\2\2\u19aa\u19ab\6\u018a\u00b2")
        buf.write("\2\u19ab\u19ac\7\u00ca\2\2\u19ac\u19ad\7;\2\2\u19ad\u19ae")
        buf.write("\5\u048e\u0248\2\u19ae\u0313\3\2\2\2\u19af\u19bd\5\6\4")
        buf.write("\2\u19b0\u19bd\5\u0316\u018c\2\u19b1\u19bd\5\u0318\u018d")
        buf.write("\2\u19b2\u19bd\5\u0320\u0191\2\u19b3\u19bd\5\u0324\u0193")
        buf.write("\2\u19b4\u19bd\5\u0326\u0194\2\u19b5\u19bd\5\u032c\u0197")
        buf.write("\2\u19b6\u19bd\5\u032e\u0198\2\u19b7\u19bd\5\u034a\u01a6")
        buf.write("\2\u19b8\u19bd\5\u0348\u01a5\2\u19b9\u19bd\5\u035c\u01af")
        buf.write("\2\u19ba\u19bd\5\u0360\u01b1\2\u19bb\u19bd\5\u035e\u01b0")
        buf.write("\2\u19bc\u19af\3\2\2\2\u19bc\u19b0\3\2\2\2\u19bc\u19b1")
        buf.write("\3\2\2\2\u19bc\u19b2\3\2\2\2\u19bc\u19b3\3\2\2\2\u19bc")
        buf.write("\u19b4\3\2\2\2\u19bc\u19b5\3\2\2\2\u19bc\u19b6\3\2\2\2")
        buf.write("\u19bc\u19b7\3\2\2\2\u19bc\u19b8\3\2\2\2\u19bc\u19b9\3")
        buf.write("\2\2\2\u19bc\u19ba\3\2\2\2\u19bc\u19bb\3\2\2\2\u19bd\u0315")
        buf.write("\3\2\2\2\u19be\u19bf\7\u01dd\2\2\u19bf\u19c0\5\u02a8\u0155")
        buf.write("\2\u19c0\u0317\3\2\2\2\u19c1\u19c2\7\u00e9\2\2\u19c2\u19c3")
        buf.write("\5\u031a\u018e\2\u19c3\u19c4\7\u00a1\2\2\u19c4\u19c5\7")
        buf.write("\u00e9\2\2\u19c5\u0319\3\2\2\2\u19c6\u19c7\5\u02a8\u0155")
        buf.write("\2\u19c7\u19cc\5\u031c\u018f\2\u19c8\u19c9\7\u009d\2\2")
        buf.write("\u19c9\u19cd\5\u031a\u018e\2\u19ca\u19cb\7\u009c\2\2\u19cb")
        buf.write("\u19cd\5\u031e\u0190\2\u19cc\u19c8\3\2\2\2\u19cc\u19ca")
        buf.write("\3\2\2\2\u19cc\u19cd\3\2\2\2\u19cd\u031b\3\2\2\2\u19ce")
        buf.write("\u19cf\7\u0248\2\2\u19cf\u19d0\5\u031e\u0190\2\u19d0\u031d")
        buf.write("\3\2\2\2\u19d1\u19d2\5\u0314\u018b\2\u19d2\u19d3\7\u0308")
        buf.write("\2\2\u19d3\u19d5\3\2\2\2\u19d4\u19d1\3\2\2\2\u19d5\u19d6")
        buf.write("\3\2\2\2\u19d6\u19d4\3\2\2\2\u19d6\u19d7\3\2\2\2\u19d7")
        buf.write("\u031f\3\2\2\2\u19d8\u19da\7\65\2\2\u19d9\u19db\5\u02a8")
        buf.write("\u0155\2\u19da\u19d9\3\2\2\2\u19da\u19db\3\2\2\2\u19db")
        buf.write("\u19df\3\2\2\2\u19dc\u19dd\5\u02f0\u0179\2\u19dd\u19de")
        buf.write("\5\u031c\u018f\2\u19de\u19e0\3\2\2\2\u19df\u19dc\3\2\2")
        buf.write("\2\u19e0\u19e1\3\2\2\2\u19e1\u19df\3\2\2\2\u19e1\u19e2")
        buf.write("\3\2\2\2\u19e2\u19e4\3\2\2\2\u19e3\u19e5\5\u0322\u0192")
        buf.write("\2\u19e4\u19e3\3\2\2\2\u19e4\u19e5\3\2\2\2\u19e5\u19e6")
        buf.write("\3\2\2\2\u19e6\u19e7\7\u00a1\2\2\u19e7\u19e8\7\65\2\2")
        buf.write("\u19e8\u0321\3\2\2\2\u19e9\u19ea\7\u009c\2\2\u19ea\u19eb")
        buf.write("\5\u031e\u0190\2\u19eb\u0323\3\2\2\2\u19ec\u19ed\5\u0328")
        buf.write("\u0195\2\u19ed\u19ef\5\u032a\u0196\2\u19ee\u19f0\5\u045c")
        buf.write("\u022f\2\u19ef\u19ee\3\2\2\2\u19ef\u19f0\3\2\2\2\u19f0")
        buf.write("\u0325\3\2\2\2\u19f1\u19f2\5\u032a\u0196\2\u19f2\u0327")
        buf.write("\3\2\2\2\u19f3\u19f4\5\u045a\u022e\2\u19f4\u19f5\7\u0309")
        buf.write("\2\2\u19f5\u0329\3\2\2\2\u19f6\u19f8\7\37\2\2\u19f7\u19f9")
        buf.write("\5\u0336\u019c\2\u19f8\u19f7\3\2\2\2\u19f8\u19f9\3\2\2")
        buf.write("\2\u19f9\u19fb\3\2\2\2\u19fa\u19fc\5\u031e\u0190\2\u19fb")
        buf.write("\u19fa\3\2\2\2\u19fb\u19fc\3\2\2\2\u19fc\u19fd\3\2\2\2")
        buf.write("\u19fd\u19fe\7\u00a1\2\2\u19fe\u032b\3\2\2\2\u19ff\u1a00")
        buf.write("\5\u0328\u0195\2\u1a00\u1a02\5\u032e\u0198\2\u1a01\u1a03")
        buf.write("\5\u045c\u022f\2\u1a02\u1a01\3\2\2\2\u1a02\u1a03\3\2\2")
        buf.write("\2\u1a03\u032d\3\2\2\2\u1a04\u1a08\5\u0330\u0199\2\u1a05")
        buf.write("\u1a08\5\u0332\u019a\2\u1a06\u1a08\5\u0334\u019b\2\u1a07")
        buf.write("\u1a04\3\2\2\2\u1a07\u1a05\3\2\2\2\u1a07\u1a06\3\2\2\2")
        buf.write("\u1a08\u032f\3\2\2\2\u1a09\u1a0a\7\u0128\2\2\u1a0a\u1a0b")
        buf.write("\5\u031e\u0190\2\u1a0b\u1a0c\7\u00a1\2\2\u1a0c\u1a0d\7")
        buf.write("\u0128\2\2\u1a0d\u0331\3\2\2\2\u1a0e\u1a0f\7\u0286\2\2")
        buf.write("\u1a0f\u1a10\5\u02a8\u0155\2\u1a10\u1a11\7\u0095\2\2\u1a11")
        buf.write("\u1a12\5\u031e\u0190\2\u1a12\u1a13\7\u00a1\2\2\u1a13\u1a14")
        buf.write("\7\u0286\2\2\u1a14\u0333\3\2\2\2\u1a15\u1a16\7\u01cb\2")
        buf.write("\2\u1a16\u1a17\5\u031e\u0190\2\u1a17\u1a18\7\u0267\2\2")
        buf.write("\u1a18\u1a19\5\u02a8\u0155\2\u1a19\u1a1a\7\u00a1\2\2\u1a1a")
        buf.write("\u1a1b\7\u01cb\2\2\u1a1b\u0335\3\2\2\2\u1a1c\u1a1d\5\u0338")
        buf.write("\u019d\2\u1a1d\u1a1e\7\u0308\2\2\u1a1e\u1a20\3\2\2\2\u1a1f")
        buf.write("\u1a1c\3\2\2\2\u1a20\u1a21\3\2\2\2\u1a21\u1a1f\3\2\2\2")
        buf.write("\u1a21\u1a22\3\2\2\2\u1a22\u0337\3\2\2\2\u1a23\u1a28\5")
        buf.write("\u033a\u019e\2\u1a24\u1a28\5\u033c\u019f\2\u1a25\u1a28")
        buf.write("\5\u0342\u01a2\2\u1a26\u1a28\5\u0346\u01a4\2\u1a27\u1a23")
        buf.write("\3\2\2\2\u1a27\u1a24\3\2\2\2\u1a27\u1a25\3\2\2\2\u1a27")
        buf.write("\u1a26\3\2\2\2\u1a28\u0339\3\2\2\2\u1a29\u1a2a\7\u0081")
        buf.write("\2\2\u1a2a\u1a2b\5\u046e\u0238\2\u1a2b\u1a2d\5\u0398\u01cd")
        buf.write("\2\u1a2c\u1a2e\5\u03de\u01f0\2\u1a2d\u1a2c\3\2\2\2\u1a2d")
        buf.write("\u1a2e\3\2\2\2\u1a2e\u1a31\3\2\2\2\u1a2f\u1a30\7\u0082")
        buf.write("\2\2\u1a30\u1a32\5\u02a8\u0155\2\u1a31\u1a2f\3\2\2\2\u1a31")
        buf.write("\u1a32\3\2\2\2\u1a32\u033b\3\2\2\2\u1a33\u1a34\7\u0081")
        buf.write("\2\2\u1a34\u1a35\5\u046c\u0237\2\u1a35\u1a36\7U\2\2\u1a36")
        buf.write("\u1a37\7\u00ca\2\2\u1a37\u1a38\5\u033e\u01a0\2\u1a38\u033d")
        buf.write("\3\2\2\2\u1a39\u1a3c\5\u0478\u023d\2\u1a3a\u1a3c\5\u0340")
        buf.write("\u01a1\2\u1a3b\u1a39\3\2\2\2\u1a3b\u1a3a\3\2\2\2\u1a3c")
        buf.write("\u033f\3\2\2\2\u1a3d\u1a3f\7\u0210\2\2\u1a3e\u1a40\7\u0275")
        buf.write("\2\2\u1a3f\u1a3e\3\2\2\2\u1a3f\u1a40\3\2\2\2\u1a40\u1a41")
        buf.write("\3\2\2\2\u1a41\u1a42\5\u048c\u0247\2\u1a42\u0341\3\2\2")
        buf.write("\2\u1a43\u1a44\7\u0081\2\2\u1a44\u1a45\tf\2\2\u1a45\u1a46")
        buf.write("\7\u00dd\2\2\u1a46\u1a47\7\u00ca\2\2\u1a47\u1a4c\5\u0344")
        buf.write("\u01a3\2\u1a48\u1a49\7\u0307\2\2\u1a49\u1a4b\5\u0344\u01a3")
        buf.write("\2\u1a4a\u1a48\3\2\2\2\u1a4b\u1a4e\3\2\2\2\u1a4c\u1a4a")
        buf.write("\3\2\2\2\u1a4c\u1a4d\3\2\2\2\u1a4d\u1a4f\3\2\2\2\u1a4e")
        buf.write("\u1a4c\3\2\2\2\u1a4f\u1a50\5\u0314\u018b\2\u1a50\u0343")
        buf.write("\3\2\2\2\u1a51\u1a59\5\u033e\u01a0\2\u1a52\u1a59\5\u046c")
        buf.write("\u0237\2\u1a53\u1a59\7\u0211\2\2\u1a54\u1a55\5\u02fc\u017f")
        buf.write("\2\u1a55\u1a56\7\u00cc\2\2\u1a56\u1a59\3\2\2\2\u1a57\u1a59")
        buf.write("\7\u020f\2\2\u1a58\u1a51\3\2\2\2\u1a58\u1a52\3\2\2\2\u1a58")
        buf.write("\u1a53\3\2\2\2\u1a58\u1a54\3\2\2\2\u1a58\u1a57\3\2\2\2")
        buf.write("\u1a59\u0345\3\2\2\2\u1a5a\u1a5b\7\u0081\2\2\u1a5b\u1a5c")
        buf.write("\5\u046c\u0237\2\u1a5c\u1a5d\7l\2\2\u1a5d\u1a5e\7\u00ca")
        buf.write("\2\2\u1a5e\u1a5f\5\u010e\u0088\2\u1a5f\u0347\3\2\2\2\u1a60")
        buf.write("\u1a61\7\u0106\2\2\u1a61\u1a62\5\u045c\u022f\2\u1a62\u0349")
        buf.write("\3\2\2\2\u1a63\u1a64\7\u0111\2\2\u1a64\u1a65\5\u045c\u022f")
        buf.write("\2\u1a65\u034b\3\2\2\2\u1a66\u1a6a\7\u00d1\2\2\u1a67\u1a6b")
        buf.write("\7g\2\2\u1a68\u1a69\6\u01a7\u00b3\2\u1a69\u1a6b\7\u021e")
        buf.write("\2\2\u1a6a\u1a67\3\2\2\2\u1a6a\u1a68\3\2\2\2\u1a6a\u1a6b")
        buf.write("\3\2\2\2\u1a6b\u1a6c\3\2\2\2\u1a6c\u1a7f\7\u008c\2\2\u1a6d")
        buf.write("\u1a72\5\u0350\u01a9\2\u1a6e\u1a6f\7\u0307\2\2\u1a6f\u1a71")
        buf.write("\5\u0350\u01a9\2\u1a70\u1a6e\3\2\2\2\u1a71\u1a74\3\2\2")
        buf.write("\2\u1a72\u1a70\3\2\2\2\u1a72\u1a73\3\2\2\2\u1a73\u1a80")
        buf.write("\3\2\2\2\u1a74\u1a72\3\2\2\2\u1a75\u1a76\7U\2\2\u1a76")
        buf.write("\u1a77\5\u034e\u01a8\2\u1a77\u1a7c\5\u0352\u01aa\2\u1a78")
        buf.write("\u1a79\7\u0307\2\2\u1a79\u1a7b\5\u0352\u01aa\2\u1a7a\u1a78")
        buf.write("\3\2\2\2\u1a7b\u1a7e\3\2\2\2\u1a7c\u1a7a\3\2\2\2\u1a7c")
        buf.write("\u1a7d\3\2\2\2\u1a7d\u1a80\3\2\2\2\u1a7e\u1a7c\3\2\2\2")
        buf.write("\u1a7f\u1a6d\3\2\2\2\u1a7f\u1a75\3\2\2\2\u1a80\u034d\3")
        buf.write("\2\2\2\u1a81\u1a85\5\u0480\u0241\2\u1a82\u1a85\5\u02e8")
        buf.write("\u0175\2\u1a83\u1a85\5\u0472\u023a\2\u1a84\u1a81\3\2\2")
        buf.write("\2\u1a84\u1a82\3\2\2\2\u1a84\u1a83\3\2\2\2\u1a85\u034f")
        buf.write("\3\2\2\2\u1a86\u1a89\5\u02e8\u0175\2\u1a87\u1a89\5\u046c")
        buf.write("\u0237\2\u1a88\u1a86\3\2\2\2\u1a88\u1a87\3\2\2\2\u1a89")
        buf.write("\u1a8a\3\2\2\2\u1a8a\u1a8b\7\u02f0\2\2\u1a8b\u1a8c\tg")
        buf.write("\2\2\u1a8c\u0351\3\2\2\2\u1a8d\u1a90\5\u02e8\u0175\2\u1a8e")
        buf.write("\u1a90\5\u046c\u0237\2\u1a8f\u1a8d\3\2\2\2\u1a8f\u1a8e")
        buf.write("\3\2\2\2\u1a90\u1a91\3\2\2\2\u1a91\u1a94\7\u02f0\2\2\u1a92")
        buf.write("\u1a95\5\u0354\u01ab\2\u1a93\u1a95\7\u01db\2\2\u1a94\u1a92")
        buf.write("\3\2\2\2\u1a94\u1a93\3\2\2\2\u1a95\u0353\3\2\2\2\u1a96")
        buf.write("\u1a97\th\2\2\u1a97\u0355\3\2\2\2\u1a98\u1a9b\7\u0201")
        buf.write("\2\2\u1a99\u1a9c\5\u046c\u0237\2\u1a9a\u1a9c\5\u0340\u01a1")
        buf.write("\2\u1a9b\u1a99\3\2\2\2\u1a9b\u1a9a\3\2\2\2\u1a9c\u1aa6")
        buf.write("\3\2\2\2\u1a9d\u1a9e\7\u01fc\2\2\u1a9e\u1aa3\5\u035a\u01ae")
        buf.write("\2\u1a9f\u1aa0\7\u0307\2\2\u1aa0\u1aa2\5\u035a\u01ae\2")
        buf.write("\u1aa1\u1a9f\3\2\2\2\u1aa2\u1aa5\3\2\2\2\u1aa3\u1aa1\3")
        buf.write("\2\2\2\u1aa3\u1aa4\3\2\2\2\u1aa4\u1aa7\3\2\2\2\u1aa5\u1aa3")
        buf.write("\3\2\2\2\u1aa6\u1a9d\3\2\2\2\u1aa6\u1aa7\3\2\2\2\u1aa7")
        buf.write("\u0357\3\2\2\2\u1aa8\u1aab\7\u01d7\2\2\u1aa9\u1aac\5\u046c")
        buf.write("\u0237\2\u1aaa\u1aac\5\u0340\u01a1\2\u1aab\u1aa9\3\2\2")
        buf.write("\2\u1aab\u1aaa\3\2\2\2\u1aab\u1aac\3\2\2\2\u1aac\u1ab6")
        buf.write("\3\2\2\2\u1aad\u1aae\7\u01fc\2\2\u1aae\u1ab3\5\u035a\u01ae")
        buf.write("\2\u1aaf\u1ab0\7\u0307\2\2\u1ab0\u1ab2\5\u035a\u01ae\2")
        buf.write("\u1ab1\u1aaf\3\2\2\2\u1ab2\u1ab5\3\2\2\2\u1ab3\u1ab1\3")
        buf.write("\2\2\2\u1ab3\u1ab4\3\2\2\2\u1ab4\u1ab7\3\2\2\2\u1ab5\u1ab3")
        buf.write("\3\2\2\2\u1ab6\u1aad\3\2\2\2\u1ab6\u1ab7\3\2\2\2\u1ab7")
        buf.write("\u0359\3\2\2\2\u1ab8\u1ab9\5\u0354\u01ab\2\u1ab9\u1aba")
        buf.write("\7\u02f0\2\2\u1aba\u1abb\5\u034e\u01a8\2\u1abb\u035b\3")
        buf.write("\2\2\2\u1abc\u1abd\7\u0185\2\2\u1abd\u1abe\5\u046c\u0237")
        buf.write("\2\u1abe\u035d\3\2\2\2\u1abf\u1ac0\7D\2\2\u1ac0\u1ac1")
        buf.write("\5\u046c\u0237\2\u1ac1\u035f\3\2\2\2\u1ac2\u1ac7\7\u00bc")
        buf.write("\2\2\u1ac3\u1ac5\7\u0171\2\2\u1ac4\u1ac3\3\2\2\2\u1ac4")
        buf.write("\u1ac5\3\2\2\2\u1ac5\u1ac6\3\2\2\2\u1ac6\u1ac8\7\u00cd")
        buf.write("\2\2\u1ac7\u1ac4\3\2\2\2\u1ac7\u1ac8\3\2\2\2\u1ac8\u1ac9")
        buf.write("\3\2\2\2\u1ac9\u1aca\5\u046c\u0237\2\u1aca\u1acb\7\u00fa")
        buf.write("\2\2\u1acb\u1acc\5\u046e\u0238\2\u1acc\u0361\3\2\2\2\u1acd")
        buf.write("\u1ace\7\27\2\2\u1ace\u1adb\5\u02a8\u0155\2\u1acf\u1ad0")
        buf.write("\7\u00ad\2\2\u1ad0\u1ad1\5\u02a8\u0155\2\u1ad1\u1ad4\5")
        buf.write("\u0300\u0181\2\u1ad2\u1ad3\7\u0220\2\2\u1ad3\u1ad5\5\u02a8")
        buf.write("\u0155\2\u1ad4\u1ad2\3\2\2\2\u1ad4\u1ad5\3\2\2\2\u1ad5")
        buf.write("\u1ad8\3\2\2\2\u1ad6\u1ad7\7\u00a2\2\2\u1ad7\u1ad9\5\u02a8")
        buf.write("\u0155\2\u1ad8\u1ad6\3\2\2\2\u1ad8\u1ad9\3\2\2\2\u1ad9")
        buf.write("\u1adb\3\2\2\2\u1ada\u1acd\3\2\2\2\u1ada\u1acf\3\2\2\2")
        buf.write("\u1adb\u0363\3\2\2\2\u1adc\u1add\5\u0414\u020b\2\u1add")
        buf.write("\u1adf\5\u0370\u01b9\2\u1ade\u1ae0\5\u0366\u01b4\2\u1adf")
        buf.write("\u1ade\3\2\2\2\u1adf\u1ae0\3\2\2\2\u1ae0\u0365\3\2\2\2")
        buf.write("\u1ae1\u1ae2\6\u01b4\u00b4\2\u1ae2\u1ae5\5\u0368\u01b5")
        buf.write("\2\u1ae3\u1ae5\5\u037a\u01be\2\u1ae4\u1ae1\3\2\2\2\u1ae4")
        buf.write("\u1ae3\3\2\2\2\u1ae5\u0367\3\2\2\2\u1ae6\u1ae7\7@\2\2")
        buf.write("\u1ae7\u1ae8\5\u0306\u0184\2\u1ae8\u0369\3\2\2\2\u1ae9")
        buf.write("\u1aeb\7\u0175\2\2\u1aea\u1ae9\3\2\2\2\u1aea\u1aeb\3\2")
        buf.write("\2\2\u1aeb\u1aec\3\2\2\2\u1aec\u1aed\7\u02dc\2\2\u1aed")
        buf.write("\u036b\3\2\2\2\u1aee\u1af0\t(\2\2\u1aef\u1af1\5p9\2\u1af0")
        buf.write("\u1aef\3\2\2\2\u1af0\u1af1\3\2\2\2\u1af1\u1af2\3\2\2\2")
        buf.write("\u1af2\u1af6\5\u0386\u01c4\2\u1af3\u1af5\5\u038a\u01c6")
        buf.write("\2\u1af4\u1af3\3\2\2\2\u1af5\u1af8\3\2\2\2\u1af6\u1af4")
        buf.write("\3\2\2\2\u1af6\u1af7\3\2\2\2\u1af7\u1b3a\3\2\2\2\u1af8")
        buf.write("\u1af6\3\2\2\2\u1af9\u1afb\7\u00cf\2\2\u1afa\u1afc\5\u019a")
        buf.write("\u00ce\2\u1afb\u1afa\3\2\2\2\u1afb\u1afc\3\2\2\2\u1afc")
        buf.write("\u1afe\3\2\2\2\u1afd\u1aff\5\u041e\u0210\2\u1afe\u1afd")
        buf.write("\3\2\2\2\u1afe\u1aff\3\2\2\2\u1aff\u1b00\3\2\2\2\u1b00")
        buf.write("\u1b04\5\u0386\u01c4\2\u1b01\u1b03\5\u0392\u01ca\2\u1b02")
        buf.write("\u1b01\3\2\2\2\u1b03\u1b06\3\2\2\2\u1b04\u1b02\3\2\2\2")
        buf.write("\u1b04\u1b05\3\2\2\2\u1b05\u1b3a\3\2\2\2\u1b06\u1b04\3")
        buf.write("\2\2\2\u1b07\u1b09\7\u020d\2\2\u1b08\u1b0a\5\u019a\u00ce")
        buf.write("\2\u1b09\u1b08\3\2\2\2\u1b09\u1b0a\3\2\2\2\u1b0a\u1b0c")
        buf.write("\3\2\2\2\u1b0b\u1b0d\5\u041e\u0210\2\u1b0c\u1b0b\3\2\2")
        buf.write("\2\u1b0c\u1b0d\3\2\2\2\u1b0d\u1b0e\3\2\2\2\u1b0e\u1b12")
        buf.write("\5\u0386\u01c4\2\u1b0f\u1b11\5\u0394\u01cb\2\u1b10\u1b0f")
        buf.write("\3\2\2\2\u1b11\u1b14\3\2\2\2\u1b12\u1b10\3\2\2\2\u1b12")
        buf.write("\u1b13\3\2\2\2\u1b13\u1b3a\3\2\2\2\u1b14\u1b12\3\2\2\2")
        buf.write("\u1b15\u1b17\5\u036e\u01b8\2\u1b16\u1b15\3\2\2\2\u1b16")
        buf.write("\u1b17\3\2\2\2\u1b17\u1b37\3\2\2\2\u1b18\u1b19\7\u01a6")
        buf.write("\2\2\u1b19\u1b1f\7\u010b\2\2\u1b1a\u1b1c\7\u0263\2\2\u1b1b")
        buf.write("\u1b1d\5\u019a\u00ce\2\u1b1c\u1b1b\3\2\2\2\u1b1c\u1b1d")
        buf.write("\3\2\2\2\u1b1d\u1b1f\3\2\2\2\u1b1e\u1b18\3\2\2\2\u1b1e")
        buf.write("\u1b1a\3\2\2\2\u1b1f\u1b21\3\2\2\2\u1b20\u1b22\5p9\2\u1b21")
        buf.write("\u1b20\3\2\2\2\u1b21\u1b22\3\2\2\2\u1b22\u1b23\3\2\2\2")
        buf.write("\u1b23\u1b27\5\u0386\u01c4\2\u1b24\u1b26\5\u038a\u01c6")
        buf.write("\2\u1b25\u1b24\3\2\2\2\u1b26\u1b29\3\2\2\2\u1b27\u1b25")
        buf.write("\3\2\2\2\u1b27\u1b28\3\2\2\2\u1b28\u1b38\3\2\2\2\u1b29")
        buf.write("\u1b27\3\2\2\2\u1b2a\u1b2b\7\u00c9\2\2\u1b2b\u1b2d\7\u010b")
        buf.write("\2\2\u1b2c\u1b2e\5\u041e\u0210\2\u1b2d\u1b2c\3\2\2\2\u1b2d")
        buf.write("\u1b2e\3\2\2\2\u1b2e\u1b2f\3\2\2\2\u1b2f\u1b30\5\u037e")
        buf.write("\u01c0\2\u1b30\u1b31\5\u037a\u01be\2\u1b31\u1b38\3\2\2")
        buf.write("\2\u1b32\u1b35\5\u0368\u01b5\2\u1b33\u1b34\6\u01b7\u00b5")
        buf.write("\2\u1b34\u1b36\5\u036a\u01b6\2\u1b35\u1b33\3\2\2\2\u1b35")
        buf.write("\u1b36\3\2\2\2\u1b36\u1b38\3\2\2\2\u1b37\u1b1e\3\2\2\2")
        buf.write("\u1b37\u1b2a\3\2\2\2\u1b37\u1b32\3\2\2\2\u1b38\u1b3a\3")
        buf.write("\2\2\2\u1b39\u1aee\3\2\2\2\u1b39\u1af9\3\2\2\2\u1b39\u1b07")
        buf.write("\3\2\2\2\u1b39\u1b16\3\2\2\2\u1b3a\u036d\3\2\2\2\u1b3b")
        buf.write("\u1b3d\7X\2\2\u1b3c\u1b3e\5\u046c\u0237\2\u1b3d\u1b3c")
        buf.write("\3\2\2\2\u1b3d\u1b3e\3\2\2\2\u1b3e\u036f\3\2\2\2\u1b3f")
        buf.write("\u1b63\5\u0398\u01cd\2\u1b40\u1b42\5\u0372\u01ba\2\u1b41")
        buf.write("\u1b40\3\2\2\2\u1b42\u1b45\3\2\2\2\u1b43\u1b41\3\2\2\2")
        buf.write("\u1b43\u1b44\3\2\2\2\u1b44\u1b64\3\2\2\2\u1b45\u1b43\3")
        buf.write("\2\2\2\u1b46\u1b48\6\u01b9\u00b6\2\u1b47\u1b49\5\u03de")
        buf.write("\u01f0\2\u1b48\u1b47\3\2\2\2\u1b48\u1b49\3\2\2\2\u1b49")
        buf.write("\u1b4c\3\2\2\2\u1b4a\u1b4b\7\u00d3\2\2\u1b4b\u1b4d\7\16")
        buf.write("\2\2\u1b4c\u1b4a\3\2\2\2\u1b4c\u1b4d\3\2\2\2\u1b4d\u1b4e")
        buf.write("\3\2\2\2\u1b4e\u1b4f\7\23\2\2\u1b4f\u1b51\5\u0306\u0184")
        buf.write("\2\u1b50\u1b52\ti\2\2\u1b51\u1b50\3\2\2\2\u1b51\u1b52")
        buf.write("\3\2\2\2\u1b52\u1b61\3\2\2\2\u1b53\u1b57\6\u01b9\u00b7")
        buf.write("\2\u1b54\u1b56\5\u0378\u01bd\2\u1b55\u1b54\3\2\2\2\u1b56")
        buf.write("\u1b59\3\2\2\2\u1b57\u1b55\3\2\2\2\u1b57\u1b58\3\2\2\2")
        buf.write("\u1b58\u1b62\3\2\2\2\u1b59\u1b57\3\2\2\2\u1b5a\u1b5e\6")
        buf.write("\u01b9\u00b8\2\u1b5b\u1b5d\5\u0372\u01ba\2\u1b5c\u1b5b")
        buf.write("\3\2\2\2\u1b5d\u1b60\3\2\2\2\u1b5e\u1b5c\3\2\2\2\u1b5e")
        buf.write("\u1b5f\3\2\2\2\u1b5f\u1b62\3\2\2\2\u1b60\u1b5e\3\2\2\2")
        buf.write("\u1b61\u1b53\3\2\2\2\u1b61\u1b5a\3\2\2\2\u1b62\u1b64\3")
        buf.write("\2\2\2\u1b63\u1b43\3\2\2\2\u1b63\u1b46\3\2\2\2\u1b64\u0371")
        buf.write("\3\2\2\2\u1b65\u1b67\7\u0175\2\2\u1b66\u1b65\3\2\2\2\u1b66")
        buf.write("\u1b67\3\2\2\2\u1b67\u1b68\3\2\2\2\u1b68\u1b9a\5\u0496")
        buf.write("\u024c\2\u1b69\u1b6a\6\u01ba\u00b9\2\u1b6a\u1b6b\7\u0175")
        buf.write("\2\2\u1b6b\u1b9a\7\u02d2\2\2\u1b6c\u1b74\7\u0082\2\2\u1b6d")
        buf.write("\u1b75\5\u0482\u0242\2\u1b6e\u1b70\7\u0176\2\2\u1b6f\u1b71")
        buf.write("\5\u02d4\u016b\2\u1b70\u1b6f\3\2\2\2\u1b70\u1b71\3\2\2")
        buf.write("\2\u1b71\u1b75\3\2\2\2\u1b72\u1b73\6\u01ba\u00ba\2\u1b73")
        buf.write("\u1b75\5\u0306\u0184\2\u1b74\u1b6d\3\2\2\2\u1b74\u1b6e")
        buf.write("\3\2\2\2\u1b74\u1b72\3\2\2\2\u1b75\u1b9a\3\2\2\2\u1b76")
        buf.write("\u1b77\7\u0181\2\2\u1b77\u1b78\7\u0268\2\2\u1b78\u1b7a")
        buf.write("\7\u0176\2\2\u1b79\u1b7b\5\u02d4\u016b\2\u1b7a\u1b79\3")
        buf.write("\2\2\2\u1b7a\u1b7b\3\2\2\2\u1b7b\u1b9a\3\2\2\2\u1b7c\u1b9a")
        buf.write("\7\32\2\2\u1b7d\u1b7e\7\u01f7\2\2\u1b7e\u1b7f\7\u0082")
        buf.write("\2\2\u1b7f\u1b9a\7\u0275\2\2\u1b80\u1b82\7\u01a6\2\2\u1b81")
        buf.write("\u1b80\3\2\2\2\u1b81\u1b82\3\2\2\2\u1b82\u1b83\3\2\2\2")
        buf.write("\u1b83\u1b9a\7\u010b\2\2\u1b84\u1b86\7\u0263\2\2\u1b85")
        buf.write("\u1b87\7\u010b\2\2\u1b86\u1b85\3\2\2\2\u1b86\u1b87\3\2")
        buf.write("\2\2\u1b87\u1b9a\3\2\2\2\u1b88\u1b89\7M\2\2\u1b89\u1b9a")
        buf.write("\5\u048c\u0247\2\u1b8a\u1b9a\5\u03de\u01f0\2\u1b8b\u1b8c")
        buf.write("\7L\2\2\u1b8c\u1b9a\5\u0374\u01bb\2\u1b8d\u1b8e\7\u022b")
        buf.write("\2\2\u1b8e\u1b9a\5\u0376\u01bc\2\u1b8f\u1b90\6\u01ba\u00bb")
        buf.write("\2\u1b90\u1b91\7\u02c5\2\2\u1b91\u1b9a\5\u047e\u0240\2")
        buf.write("\u1b92\u1b94\6\u01ba\u00bc\2\u1b93\u1b95\5\u036e\u01b8")
        buf.write("\2\u1b94\u1b93\3\2\2\2\u1b94\u1b95\3\2\2\2\u1b95\u1b96")
        buf.write("\3\2\2\2\u1b96\u1b9a\5\u0368\u01b5\2\u1b97\u1b98\6\u01ba")
        buf.write("\u00bd\2\u1b98\u1b9a\5\u036a\u01b6\2\u1b99\u1b66\3\2\2")
        buf.write("\2\u1b99\u1b69\3\2\2\2\u1b99\u1b6c\3\2\2\2\u1b99\u1b76")
        buf.write("\3\2\2\2\u1b99\u1b7c\3\2\2\2\u1b99\u1b7d\3\2\2\2\u1b99")
        buf.write("\u1b81\3\2\2\2\u1b99\u1b84\3\2\2\2\u1b99\u1b88\3\2\2\2")
        buf.write("\u1b99\u1b8a\3\2\2\2\u1b99\u1b8b\3\2\2\2\u1b99\u1b8d\3")
        buf.write("\2\2\2\u1b99\u1b8f\3\2\2\2\u1b99\u1b92\3\2\2\2\u1b99\u1b97")
        buf.write("\3\2\2\2\u1b9a\u0373\3\2\2\2\u1b9b\u1b9c\tj\2\2\u1b9c")
        buf.write("\u0375\3\2\2\2\u1b9d\u1b9e\tk\2\2\u1b9e\u0377\3\2\2\2")
        buf.write("\u1b9f\u1ba1\7\u0263\2\2\u1ba0\u1ba2\7\u010b\2\2\u1ba1")
        buf.write("\u1ba0\3\2\2\2\u1ba1\u1ba2\3\2\2\2\u1ba2\u1bae\3\2\2\2")
        buf.write("\u1ba3\u1ba4\7M\2\2\u1ba4\u1bae\5\u0488\u0245\2\u1ba5")
        buf.write("\u1ba7\5\u02fc\u017f\2\u1ba6\u1ba5\3\2\2\2\u1ba6\u1ba7")
        buf.write("\3\2\2\2\u1ba7\u1ba8\3\2\2\2\u1ba8\u1bae\7\u017a\2\2\u1ba9")
        buf.write("\u1bab\7\u01a6\2\2\u1baa\u1ba9\3\2\2\2\u1baa\u1bab\3\2")
        buf.write("\2\2\u1bab\u1bac\3\2\2\2\u1bac\u1bae\7\u010b\2\2\u1bad")
        buf.write("\u1b9f\3\2\2\2\u1bad\u1ba3\3\2\2\2\u1bad\u1ba6\3\2\2\2")
        buf.write("\u1bad\u1baa\3\2\2\2\u1bae\u0379\3\2\2\2\u1baf\u1bb0\7")
        buf.write("\u01bd\2\2\u1bb0\u1bb2\5\u0452\u022a\2\u1bb1\u1bb3\5\u0470")
        buf.write("\u0239\2\u1bb2\u1bb1\3\2\2\2\u1bb2\u1bb3\3\2\2\2\u1bb3")
        buf.write("\u1bb6\3\2\2\2\u1bb4\u1bb5\7\u0142\2\2\u1bb5\u1bb7\tl")
        buf.write("\2\2\u1bb6\u1bb4\3\2\2\2\u1bb6\u1bb7\3\2\2\2\u1bb7\u1bc8")
        buf.write("\3\2\2\2\u1bb8\u1bb9\7\u0181\2\2\u1bb9\u1bba\7\u0268\2")
        buf.write("\2\u1bba\u1bbe\5\u037c\u01bf\2\u1bbb\u1bbc\7\u0181\2\2")
        buf.write("\u1bbc\u1bbd\7\u0087\2\2\u1bbd\u1bbf\5\u037c\u01bf\2\u1bbe")
        buf.write("\u1bbb\3\2\2\2\u1bbe\u1bbf\3\2\2\2\u1bbf\u1bc9\3\2\2\2")
        buf.write("\u1bc0\u1bc1\7\u0181\2\2\u1bc1\u1bc2\7\u0087\2\2\u1bc2")
        buf.write("\u1bc6\5\u037c\u01bf\2\u1bc3\u1bc4\7\u0181\2\2\u1bc4\u1bc5")
        buf.write("\7\u0268\2\2\u1bc5\u1bc7\5\u037c\u01bf\2\u1bc6\u1bc3\3")
        buf.write("\2\2\2\u1bc6\u1bc7\3\2\2\2\u1bc7\u1bc9\3\2\2\2\u1bc8\u1bb8")
        buf.write("\3\2\2\2\u1bc8\u1bc0\3\2\2\2\u1bc8\u1bc9\3\2\2\2\u1bc9")
        buf.write("\u037b\3\2\2\2\u1bca\u1bd0\t\4\2\2\u1bcb\u1bcc\7\u01fc")
        buf.write("\2\2\u1bcc\u1bd0\5\u0496\u024c\2\u1bcd\u1bce\7\u0177\2")
        buf.write("\2\u1bce\u1bd0\7\5\2\2\u1bcf\u1bca\3\2\2\2\u1bcf\u1bcb")
        buf.write("\3\2\2\2\u1bcf\u1bcd\3\2\2\2\u1bd0\u037d\3\2\2\2\u1bd1")
        buf.write("\u1bd2\7\u030a\2\2\u1bd2\u1bd7\5\u0380\u01c1\2\u1bd3\u1bd4")
        buf.write("\7\u0307\2\2\u1bd4\u1bd6\5\u0380\u01c1\2\u1bd5\u1bd3\3")
        buf.write("\2\2\2\u1bd6\u1bd9\3\2\2\2\u1bd7\u1bd5\3\2\2\2\u1bd7\u1bd8")
        buf.write("\3\2\2\2\u1bd8\u1bda\3\2\2\2\u1bd9\u1bd7\3\2\2\2\u1bda")
        buf.write("\u1bdb\7\u030b\2\2\u1bdb\u037f\3\2\2\2\u1bdc\u1bde\5\u046c")
        buf.write("\u0237\2\u1bdd\u1bdf\5\u039e\u01d0\2\u1bde\u1bdd\3\2\2")
        buf.write("\2\u1bde\u1bdf\3\2\2\2\u1bdf\u1be1\3\2\2\2\u1be0\u1be2")
        buf.write("\5\u014e\u00a8\2\u1be1\u1be0\3\2\2\2\u1be1\u1be2\3\2\2")
        buf.write("\2\u1be2\u0381\3\2\2\2\u1be3\u1be4\7\u030a\2\2\u1be4\u1be9")
        buf.write("\5\u0384\u01c3\2\u1be5\u1be6\7\u0307\2\2\u1be6\u1be8\5")
        buf.write("\u0384\u01c3\2\u1be7\u1be5\3\2\2\2\u1be8\u1beb\3\2\2\2")
        buf.write("\u1be9\u1be7\3\2\2\2\u1be9\u1bea\3\2\2\2\u1bea\u1bec\3")
        buf.write("\2\2\2\u1beb\u1be9\3\2\2\2\u1bec\u1bed\7\u030b\2\2\u1bed")
        buf.write("\u0383\3\2\2\2\u1bee\u1bf4\5\u0380\u01c1\2\u1bef\u1bf1")
        buf.write("\5\u0306\u0184\2\u1bf0\u1bf2\5\u014e\u00a8\2\u1bf1\u1bf0")
        buf.write("\3\2\2\2\u1bf1\u1bf2\3\2\2\2\u1bf2\u1bf4\3\2\2\2\u1bf3")
        buf.write("\u1bee\3\2\2\2\u1bf3\u1bef\3\2\2\2\u1bf4\u0385\3\2\2\2")
        buf.write("\u1bf5\u1bf6\6\u01c4\u00be\2\u1bf6\u1bfa\5\u0382\u01c2")
        buf.write("\2\u1bf7\u1bf8\6\u01c4\u00bf\2\u1bf8\u1bfa\5\u037e\u01c0")
        buf.write("\2\u1bf9\u1bf5\3\2\2\2\u1bf9\u1bf7\3\2\2\2\u1bfa\u0387")
        buf.write("\3\2\2\2\u1bfb\u1bfc\tm\2\2\u1bfc\u0389\3\2\2\2\u1bfd")
        buf.write("\u1c00\5\u038c\u01c7\2\u1bfe\u1c00\5\u0390\u01c9\2\u1bff")
        buf.write("\u1bfd\3\2\2\2\u1bff\u1bfe\3\2\2\2\u1c00\u038b\3\2\2\2")
        buf.write("\u1c01\u1c03\7\u010a\2\2\u1c02\u1c04\7\u02f0\2\2\u1c03")
        buf.write("\u1c02\3\2\2\2\u1c03\u1c04\3\2\2\2\u1c04\u1c05\3\2\2\2")
        buf.write("\u1c05\u1c0b\5\u0478\u023d\2\u1c06\u1c07\7M\2\2\u1c07")
        buf.write("\u1c0b\5\u048c\u0247\2\u1c08\u1c09\6\u01c7\u00c0\2\u1c09")
        buf.write("\u1c0b\5\u038e\u01c8\2\u1c0a\u1c01\3\2\2\2\u1c0a\u1c06")
        buf.write("\3\2\2\2\u1c0a\u1c08\3\2\2\2\u1c0b\u038d\3\2\2\2\u1c0c")
        buf.write("\u1c0d\tn\2\2\u1c0d\u038f\3\2\2\2\u1c0e\u1c0f\to\2\2\u1c0f")
        buf.write("\u1c10\5\u0388\u01c5\2\u1c10\u0391\3\2\2\2\u1c11\u1c16")
        buf.write("\5\u038c\u01c7\2\u1c12\u1c13\7\u0287\2\2\u1c13\u1c14\7")
        buf.write("\u0193\2\2\u1c14\u1c16\5\u046c\u0237\2\u1c15\u1c11\3\2")
        buf.write("\2\2\u1c15\u1c12\3\2\2\2\u1c16\u0393\3\2\2\2\u1c17\u1c18")
        buf.write("\5\u038c\u01c7\2\u1c18\u0395\3\2\2\2\u1c19\u1c1a\5\u0398")
        buf.write("\u01cd\2\u1c1a\u1c1b\7\2\2\3\u1c1b\u0397\3\2\2\2\u1c1c")
        buf.write("\u1c1e\tp\2\2\u1c1d\u1c1f\5\u039e\u01d0\2\u1c1e\u1c1d")
        buf.write("\3\2\2\2\u1c1e\u1c1f\3\2\2\2\u1c1f\u1c21\3\2\2\2\u1c20")
        buf.write("\u1c22\5\u03a0\u01d1\2\u1c21\u1c20\3\2\2\2\u1c21\u1c22")
        buf.write("\3\2\2\2\u1c22\u1cb0\3\2\2\2\u1c23\u1c29\7\u01b7\2\2\u1c24")
        buf.write("\u1c26\7\u0094\2\2\u1c25\u1c27\7\u01a2\2\2\u1c26\u1c25")
        buf.write("\3\2\2\2\u1c26\u1c27\3\2\2\2\u1c27\u1c29\3\2\2\2\u1c28")
        buf.write("\u1c23\3\2\2\2\u1c28\u1c24\3\2\2\2\u1c29\u1c2b\3\2\2\2")
        buf.write("\u1c2a\u1c2c\5\u049e\u0250\2\u1c2b\u1c2a\3\2\2\2\u1c2b")
        buf.write("\u1c2c\3\2\2\2\u1c2c\u1c2e\3\2\2\2\u1c2d\u1c2f\5\u03a0")
        buf.write("\u01d1\2\u1c2e\u1c2d\3\2\2\2\u1c2e\u1c2f\3\2\2\2\u1c2f")
        buf.write("\u1cb0\3\2\2\2\u1c30\u1c32\tq\2\2\u1c31\u1c33\5\u049a")
        buf.write("\u024e\2\u1c32\u1c31\3\2\2\2\u1c32\u1c33\3\2\2\2\u1c33")
        buf.write("\u1c35\3\2\2\2\u1c34\u1c36\5\u03a0\u01d1\2\u1c35\u1c34")
        buf.write("\3\2\2\2\u1c35\u1c36\3\2\2\2\u1c36\u1cb0\3\2\2\2\u1c37")
        buf.write("\u1c39\7\'\2\2\u1c38\u1c3a\5\u039e\u01d0\2\u1c39\u1c38")
        buf.write("\3\2\2\2\u1c39\u1c3a\3\2\2\2\u1c3a\u1cb0\3\2\2\2\u1c3b")
        buf.write("\u1cb0\tr\2\2\u1c3c\u1c3e\7>\2\2\u1c3d\u1c3f\5\u039e\u01d0")
        buf.write("\2\u1c3e\u1c3d\3\2\2\2\u1c3e\u1c3f\3\2\2\2\u1c3f\u1c41")
        buf.write("\3\2\2\2\u1c40\u1c42\5\u03a2\u01d2\2\u1c41\u1c40\3\2\2")
        buf.write("\2\u1c41\u1c42\3\2\2\2\u1c42\u1cb0\3\2\2\2\u1c43\u1c45")
        buf.write("\5\u039a\u01ce\2\u1c44\u1c46\5\u039e\u01d0\2\u1c45\u1c44")
        buf.write("\3\2\2\2\u1c45\u1c46\3\2\2\2\u1c46\u1c48\3\2\2\2\u1c47")
        buf.write("\u1c49\7\"\2\2\u1c48\u1c47\3\2\2\2\u1c48\u1c49\3\2\2\2")
        buf.write("\u1c49\u1cb0\3\2\2\2\u1c4a\u1c4c\7\"\2\2\u1c4b\u1c4d\5")
        buf.write("\u039e\u01d0\2\u1c4c\u1c4b\3\2\2\2\u1c4c\u1c4d\3\2\2\2")
        buf.write("\u1c4d\u1cb0\3\2\2\2\u1c4e\u1c4f\7>\2\2\u1c4f\u1c52\7")
        buf.write("\u027b\2\2\u1c50\u1c52\7\u0277\2\2\u1c51\u1c4e\3\2\2\2")
        buf.write("\u1c51\u1c50\3\2\2\2\u1c52\u1c53\3\2\2\2\u1c53\u1c55\5")
        buf.write("\u039e\u01d0\2\u1c54\u1c56\5\u03a2\u01d2\2\u1c55\u1c54")
        buf.write("\3\2\2\2\u1c55\u1c56\3\2\2\2\u1c56\u1cb0\3\2\2\2\u1c57")
        buf.write("\u1c58\7\u0168\2\2\u1c58\u1c62\7\u0277\2\2\u1c59\u1c62")
        buf.write("\7\u017d\2\2\u1c5a\u1c5b\7\u016b\2\2\u1c5b\u1c62\7\u0277")
        buf.write("\2\2\u1c5c\u1c5d\7\u0168\2\2\u1c5d\u1c5e\7>\2\2\u1c5e")
        buf.write("\u1c62\7\u027b\2\2\u1c5f\u1c60\7\u016b\2\2\u1c60\u1c62")
        buf.write("\7\u027b\2\2\u1c61\u1c57\3\2\2\2\u1c61\u1c59\3\2\2\2\u1c61")
        buf.write("\u1c5a\3\2\2\2\u1c61\u1c5c\3\2\2\2\u1c61\u1c5f\3\2\2\2")
        buf.write("\u1c62\u1c63\3\2\2\2\u1c63\u1c65\5\u039e\u01d0\2\u1c64")
        buf.write("\u1c66\7\"\2\2\u1c65\u1c64\3\2\2\2\u1c65\u1c66\3\2\2\2")
        buf.write("\u1c66\u1cb0\3\2\2\2\u1c67\u1c68\7\u0276\2\2\u1c68\u1cb0")
        buf.write("\5\u039e\u01d0\2\u1c69\u1c6b\7\u0292\2\2\u1c6a\u1c6c\5")
        buf.write("\u039e\u01d0\2\u1c6b\u1c6a\3\2\2\2\u1c6b\u1c6c\3\2\2\2")
        buf.write("\u1c6c\u1c6e\3\2\2\2\u1c6d\u1c6f\5\u03a0\u01d1\2\u1c6e")
        buf.write("\u1c6d\3\2\2\2\u1c6e\u1c6f\3\2\2\2\u1c6f\u1cb0\3\2\2\2")
        buf.write("\u1c70\u1cb0\7v\2\2\u1c71\u1c73\7\u024c\2\2\u1c72\u1c74")
        buf.write("\5\u03aa\u01d6\2\u1c73\u1c72\3\2\2\2\u1c73\u1c74\3\2\2")
        buf.write("\2\u1c74\u1cb0\3\2\2\2\u1c75\u1c77\7\u0249\2\2\u1c76\u1c78")
        buf.write("\5\u03aa\u01d6\2\u1c77\u1c76\3\2\2\2\u1c77\u1c78\3\2\2")
        buf.write("\2\u1c78\u1cb0\3\2\2\2\u1c79\u1c7b\7s\2\2\u1c7a\u1c7c")
        buf.write("\5\u03aa\u01d6\2\u1c7b\u1c7a\3\2\2\2\u1c7b\u1c7c\3\2\2")
        buf.write("\2\u1c7c\u1cb0\3\2\2\2\u1c7d\u1cb0\7\u024d\2\2\u1c7e\u1c80")
        buf.write("\7)\2\2\u1c7f\u1c81\5\u039e\u01d0\2\u1c80\u1c7f\3\2\2")
        buf.write("\2\u1c80\u1c81\3\2\2\2\u1c81\u1cb0\3\2\2\2\u1c82\u1cb0")
        buf.write("\ts\2\2\u1c83\u1c84\7\u0127\2\2\u1c84\u1cb0\7\u0276\2")
        buf.write("\2\u1c85\u1c89\7\u0127\2\2\u1c86\u1c87\7>\2\2\u1c87\u1c8a")
        buf.write("\7\u027b\2\2\u1c88\u1c8a\7\u0277\2\2\u1c89\u1c86\3\2\2")
        buf.write("\2\u1c89\u1c88\3\2\2\2\u1c89\u1c8a\3\2\2\2\u1c8a\u1c8c")
        buf.write("\3\2\2\2\u1c8b\u1c8d\5\u03a2\u01d2\2\u1c8c\u1c8b\3\2\2")
        buf.write("\2\u1c8c\u1c8d\3\2\2\2\u1c8d\u1cb0\3\2\2\2\u1c8e\u1c90")
        buf.write("\7\u024f\2\2\u1c8f\u1c91\5\u03a2\u01d2\2\u1c90\u1c8f\3")
        buf.write("\2\2\2\u1c90\u1c91\3\2\2\2\u1c91\u1cb0\3\2\2\2\u1c92\u1c94")
        buf.write("\7\u0246\2\2\u1c93\u1c95\5\u039e\u01d0\2\u1c94\u1c93\3")
        buf.write("\2\2\2\u1c94\u1c95\3\2\2\2\u1c95\u1c97\3\2\2\2\u1c96\u1c98")
        buf.write("\5\u03a2\u01d2\2\u1c97\u1c96\3\2\2\2\u1c97\u1c98\3\2\2")
        buf.write("\2\u1c98\u1cb0\3\2\2\2\u1c99\u1c9b\7\u014e\2\2\u1c9a\u1c9c")
        buf.write("\5\u03a2\u01d2\2\u1c9b\u1c9a\3\2\2\2\u1c9b\u1c9c\3\2\2")
        buf.write("\2\u1c9c\u1cb0\3\2\2\2\u1c9d\u1c9f\7\u0125\2\2\u1c9e\u1ca0")
        buf.write("\5\u03a2\u01d2\2\u1c9f\u1c9e\3\2\2\2\u1c9f\u1ca0\3\2\2")
        buf.write("\2\u1ca0\u1cb0\3\2\2\2\u1ca1\u1ca2\7\u00a6\2\2\u1ca2\u1ca4")
        buf.write("\5\u0484\u0243\2\u1ca3\u1ca5\5\u03a2\u01d2\2\u1ca4\u1ca3")
        buf.write("\3\2\2\2\u1ca4\u1ca5\3\2\2\2\u1ca5\u1cb0\3\2\2\2\u1ca6")
        buf.write("\u1ca7\7\u01fc\2\2\u1ca7\u1ca9\5\u0484\u0243\2\u1ca8\u1caa")
        buf.write("\5\u03a2\u01d2\2\u1ca9\u1ca8\3\2\2\2\u1ca9\u1caa\3\2\2")
        buf.write("\2\u1caa\u1cb0\3\2\2\2\u1cab\u1cb0\7\u01f7\2\2\u1cac\u1cad")
        buf.write("\6\u01cd\u00c1\2\u1cad\u1cb0\7\u0108\2\2\u1cae\u1cb0\t")
        buf.write("t\2\2\u1caf\u1c1c\3\2\2\2\u1caf\u1c28\3\2\2\2\u1caf\u1c30")
        buf.write("\3\2\2\2\u1caf\u1c37\3\2\2\2\u1caf\u1c3b\3\2\2\2\u1caf")
        buf.write("\u1c3c\3\2\2\2\u1caf\u1c43\3\2\2\2\u1caf\u1c4a\3\2\2\2")
        buf.write("\u1caf\u1c51\3\2\2\2\u1caf\u1c61\3\2\2\2\u1caf\u1c67\3")
        buf.write("\2\2\2\u1caf\u1c69\3\2\2\2\u1caf\u1c70\3\2\2\2\u1caf\u1c71")
        buf.write("\3\2\2\2\u1caf\u1c75\3\2\2\2\u1caf\u1c79\3\2\2\2\u1caf")
        buf.write("\u1c7d\3\2\2\2\u1caf\u1c7e\3\2\2\2\u1caf\u1c82\3\2\2\2")
        buf.write("\u1caf\u1c83\3\2\2\2\u1caf\u1c85\3\2\2\2\u1caf\u1c8e\3")
        buf.write("\2\2\2\u1caf\u1c92\3\2\2\2\u1caf\u1c99\3\2\2\2\u1caf\u1c9d")
        buf.write("\3\2\2\2\u1caf\u1ca1\3\2\2\2\u1caf\u1ca6\3\2\2\2\u1caf")
        buf.write("\u1cab\3\2\2\2\u1caf\u1cac\3\2\2\2\u1caf\u1cae\3\2\2\2")
        buf.write("\u1cb0\u0399\3\2\2\2\u1cb1\u1cb5\7\u016b\2\2\u1cb2\u1cb3")
        buf.write("\7\u0168\2\2\u1cb3\u1cb5\7>\2\2\u1cb4\u1cb1\3\2\2\2\u1cb4")
        buf.write("\u1cb2\3\2\2\2\u1cb5\u039b\3\2\2\2\u1cb6\u1cbc\7\u01b7")
        buf.write("\2\2\u1cb7\u1cb9\7\u0094\2\2\u1cb8\u1cba\7\u01a2\2\2\u1cb9")
        buf.write("\u1cb8\3\2\2\2\u1cb9\u1cba\3\2\2\2\u1cba\u1cbc\3\2\2\2")
        buf.write("\u1cbb\u1cb6\3\2\2\2\u1cbb\u1cb7\3\2\2\2\u1cbc\u039d\3")
        buf.write("\2\2\2\u1cbd\u1cc0\7\u030a\2\2\u1cbe\u1cc1\5\u047e\u0240")
        buf.write("\2\u1cbf\u1cc1\7\u0318\2\2\u1cc0\u1cbe\3\2\2\2\u1cc0\u1cbf")
        buf.write("\3\2\2\2\u1cc1\u1cc2\3\2\2\2\u1cc2\u1cc3\7\u030b\2\2\u1cc3")
        buf.write("\u039f\3\2\2\2\u1cc4\u1cc6\tu\2\2\u1cc5\u1cc4\3\2\2\2")
        buf.write("\u1cc6\u1cc7\3\2\2\2\u1cc7\u1cc5\3\2\2\2\u1cc7\u1cc8\3")
        buf.write("\2\2\2\u1cc8\u03a1\3\2\2\2\u1cc9\u1cd8\5\u03a4\u01d3\2")
        buf.write("\u1cca\u1cd8\5\u03a6\u01d4\2\u1ccb\u1cd8\7\60\2\2\u1ccc")
        buf.write("\u1ccd\5\u02fa\u017e\2\u1ccd\u1ccf\5\u03ac\u01d7\2\u1cce")
        buf.write("\u1cd0\7\"\2\2\u1ccf\u1cce\3\2\2\2\u1ccf\u1cd0\3\2\2\2")
        buf.write("\u1cd0\u1cd8\3\2\2\2\u1cd1\u1cd5\7\"\2\2\u1cd2\u1cd3\5")
        buf.write("\u02fa\u017e\2\u1cd3\u1cd4\5\u03ac\u01d7\2\u1cd4\u1cd6")
        buf.write("\3\2\2\2\u1cd5\u1cd2\3\2\2\2\u1cd5\u1cd6\3\2\2\2\u1cd6")
        buf.write("\u1cd8\3\2\2\2\u1cd7\u1cc9\3\2\2\2\u1cd7\u1cca\3\2\2\2")
        buf.write("\u1cd7\u1ccb\3\2\2\2\u1cd7\u1ccc\3\2\2\2\u1cd7\u1cd1\3")
        buf.write("\2\2\2\u1cd8\u03a3\3\2\2\2\u1cd9\u1cdb\7\25\2\2\u1cda")
        buf.write("\u1cdc\7\"\2\2\u1cdb\u1cda\3\2\2\2\u1cdb\u1cdc\3\2\2\2")
        buf.write("\u1cdc\u1ce0\3\2\2\2\u1cdd\u1cde\7\"\2\2\u1cde\u1ce0\7")
        buf.write("\25\2\2\u1cdf\u1cd9\3\2\2\2\u1cdf\u1cdd\3\2\2\2\u1ce0")
        buf.write("\u03a5\3\2\2\2\u1ce1\u1ce3\7\u0260\2\2\u1ce2\u1ce4\7\"")
        buf.write("\2\2\u1ce3\u1ce2\3\2\2\2\u1ce3\u1ce4\3\2\2\2\u1ce4\u1ce8")
        buf.write("\3\2\2\2\u1ce5\u1ce6\7\"\2\2\u1ce6\u1ce8\7\u0260\2\2\u1ce7")
        buf.write("\u1ce1\3\2\2\2\u1ce7\u1ce5\3\2\2\2\u1ce8\u03a7\3\2\2\2")
        buf.write("\u1ce9\u1cea\7\u030a\2\2\u1cea\u1ceb\5\u047a\u023e\2\u1ceb")
        buf.write("\u1cec\7\u030b\2\2\u1cec\u03a9\3\2\2\2\u1ced\u1cee\7\u030a")
        buf.write("\2\2\u1cee\u1cef\7\u02ed\2\2\u1cef\u1cf0\7\u030b\2\2\u1cf0")
        buf.write("\u03ab\3\2\2\2\u1cf1\u1cf6\5\u04a0\u0251\2\u1cf2\u1cf6")
        buf.write("\7\"\2\2\u1cf3\u1cf4\6\u01d7\u00c2\2\u1cf4\u1cf6\7\u0082")
        buf.write("\2\2\u1cf5\u1cf1\3\2\2\2\u1cf5\u1cf2\3\2\2\2\u1cf5\u1cf3")
        buf.write("\3\2\2\2\u1cf6\u03ad\3\2\2\2\u1cf7\u1cfd\5\u04a0\u0251")
        buf.write("\2\u1cf8\u1cf9\6\u01d8\u00c3\2\u1cf9\u1cfd\7\u0082\2\2")
        buf.write("\u1cfa\u1cfb\6\u01d8\u00c4\2\u1cfb\u1cfd\7\"\2\2\u1cfc")
        buf.write("\u1cf7\3\2\2\2\u1cfc\u1cf8\3\2\2\2\u1cfc\u1cfa\3\2\2\2")
        buf.write("\u1cfd\u03af\3\2\2\2\u1cfe\u1d05\5\u03b4\u01db\2\u1cff")
        buf.write("\u1d01\7\u0307\2\2\u1d00\u1cff\3\2\2\2\u1d00\u1d01\3\2")
        buf.write("\2\2\u1d01\u1d02\3\2\2\2\u1d02\u1d04\5\u03b4\u01db\2\u1d03")
        buf.write("\u1d00\3\2\2\2\u1d04\u1d07\3\2\2\2\u1d05\u1d03\3\2\2\2")
        buf.write("\u1d05\u1d06\3\2\2\2\u1d06\u03b1\3\2\2\2\u1d07\u1d05\3")
        buf.write("\2\2\2\u1d08\u1d0a\5\u03b4\u01db\2\u1d09\u1d08\3\2\2\2")
        buf.write("\u1d0a\u1d0b\3\2\2\2\u1d0b\u1d09\3\2\2\2\u1d0b\u1d0c\3")
        buf.write("\2\2\2\u1d0c\u03b3\3\2\2\2\u1d0d\u1d0f\7\u00a5\2\2\u1d0e")
        buf.write("\u1d10\7\u02f0\2\2\u1d0f\u1d0e\3\2\2\2\u1d0f\u1d10\3\2")
        buf.write("\2\2\u1d10\u1d11\3\2\2\2\u1d11\u1d8f\5\u044a\u0226\2\u1d12")
        buf.write("\u1d13\6\u01db\u00c5\2\u1d13\u1d15\7\u02d3\2\2\u1d14\u1d16")
        buf.write("\5\u04aa\u0256\2\u1d15\u1d14\3\2\2\2\u1d15\u1d16\3\2\2")
        buf.write("\2\u1d16\u1d19\3\2\2\2\u1d17\u1d1a\7\u017a\2\2\u1d18\u1d1a")
        buf.write("\5\u04a0\u0251\2\u1d19\u1d17\3\2\2\2\u1d19\u1d18\3\2\2")
        buf.write("\2\u1d1a\u1d8f\3\2\2\2\u1d1b\u1d1d\7\u0145\2\2\u1d1c\u1d1e")
        buf.write("\7\u02f0\2\2\u1d1d\u1d1c\3\2\2\2\u1d1d\u1d1e\3\2\2\2\u1d1e")
        buf.write("\u1d1f\3\2\2\2\u1d1f\u1d8f\5\u047c\u023f\2\u1d20\u1d22")
        buf.write("\7\u015a\2\2\u1d21\u1d23\7\u02f0\2\2\u1d22\u1d21\3\2\2")
        buf.write("\2\u1d22\u1d23\3\2\2\2\u1d23\u1d24\3\2\2\2\u1d24\u1d8f")
        buf.write("\5\u047c\u023f\2\u1d25\u1d27\7\33\2\2\u1d26\u1d28\7\u02f0")
        buf.write("\2\2\u1d27\u1d26\3\2\2\2\u1d27\u1d28\3\2\2\2\u1d28\u1d29")
        buf.write("\3\2\2\2\u1d29\u1d8f\5\u0478\u023d\2\u1d2a\u1d2c\7\u0198")
        buf.write("\2\2\u1d2b\u1d2d\7\u02f0\2\2\u1d2c\u1d2b\3\2\2\2\u1d2c")
        buf.write("\u1d2d\3\2\2\2\u1d2d\u1d2e\3\2\2\2\u1d2e\u1d8f\5\u0486")
        buf.write("\u0244\2\u1d2f\u1d31\7M\2\2\u1d30\u1d32\7\u02f0\2\2\u1d31")
        buf.write("\u1d30\3\2\2\2\u1d31\u1d32\3\2\2\2\u1d32\u1d33\3\2\2\2")
        buf.write("\u1d33\u1d8f\5\u0486\u0244\2\u1d34\u1d35\6\u01db\u00c6")
        buf.write("\2\u1d35\u1d37\7S\2\2\u1d36\u1d38\7\u02f0\2\2\u1d37\u1d36")
        buf.write("\3\2\2\2\u1d37\u1d38\3\2\2\2\u1d38\u1d39\3\2\2\2\u1d39")
        buf.write("\u1d8f\5\u0488\u0245\2\u1d3a\u1d3b\6\u01db\u00c7\2\u1d3b")
        buf.write("\u1d3d\7\u00a0\2\2\u1d3c\u1d3e\7\u02f0\2\2\u1d3d\u1d3c")
        buf.write("\3\2\2\2\u1d3d\u1d3e\3\2\2\2\u1d3e\u1d3f\3\2\2\2\u1d3f")
        buf.write("\u1d8f\5\u0488\u0245\2\u1d40\u1d42\7\32\2\2\u1d41\u1d43")
        buf.write("\7\u02f0\2\2\u1d42\u1d41\3\2\2\2\u1d42\u1d43\3\2\2\2\u1d43")
        buf.write("\u1d44\3\2\2\2\u1d44\u1d8f\5\u047c\u023f\2\u1d45\u1d47")
        buf.write("\7\u0191\2\2\u1d46\u1d48\7\u02f0\2\2\u1d47\u1d46\3\2\2")
        buf.write("\2\u1d47\u1d48\3\2\2\2\u1d48\u1d49\3\2\2\2\u1d49\u1d8f")
        buf.write("\5\u03b6\u01dc\2\u1d4a\u1d4c\tv\2\2\u1d4b\u1d4d\7\u02f0")
        buf.write("\2\2\u1d4c\u1d4b\3\2\2\2\u1d4c\u1d4d\3\2\2\2\u1d4d\u1d4e")
        buf.write("\3\2\2\2\u1d4e\u1d8f\5\u03b6\u01dc\2\u1d4f\u1d51\tw\2")
        buf.write("\2\u1d50\u1d52\7\u02f0\2\2\u1d51\u1d50\3\2\2\2\u1d51\u1d52")
        buf.write("\3\2\2\2\u1d52\u1d53\3\2\2\2\u1d53\u1d8f\5\u0478\u023d")
        buf.write("\2\u1d54\u1d56\7\u0086\2\2\u1d55\u1d57\7\u02f0\2\2\u1d56")
        buf.write("\u1d55\3\2\2\2\u1d56\u1d57\3\2\2\2\u1d57\u1d58\3\2\2\2")
        buf.write("\u1d58\u1d8f\5\u0478\u023d\2\u1d59\u1d5b\7\u01e8\2\2\u1d5a")
        buf.write("\u1d5c\7\u02f0\2\2\u1d5b\u1d5a\3\2\2\2\u1d5b\u1d5c\3\2")
        buf.write("\2\2\u1d5c\u1d5d\3\2\2\2\u1d5d\u1d8f\tx\2\2\u1d5e\u1d60")
        buf.write("\7\u0262\2\2\u1d5f\u1d61\7\u02f0\2\2\u1d60\u1d5f\3\2\2")
        buf.write("\2\u1d60\u1d61\3\2\2\2\u1d61\u1d62\3\2\2\2\u1d62\u1d63")
        buf.write("\7\u030a\2\2\u1d63\u1d64\5\u0454\u022b\2\u1d64\u1d65\7")
        buf.write("\u030b\2\2\u1d65\u1d8f\3\2\2\2\u1d66\u1d8f\5\u03bc\u01df")
        buf.write("\2\u1d67\u1d8f\5\u03b8\u01dd\2\u1d68\u1d6a\7\u00f5\2\2")
        buf.write("\u1d69\u1d6b\7\u02f0\2\2\u1d6a\u1d69\3\2\2\2\u1d6a\u1d6b")
        buf.write("\3\2\2\2\u1d6b\u1d6c\3\2\2\2\u1d6c\u1d8f\ty\2\2\u1d6d")
        buf.write("\u1d6e\7r\2\2\u1d6e\u1d70\7\u008d\2\2\u1d6f\u1d71\7\u02f0")
        buf.write("\2\2\u1d70\u1d6f\3\2\2\2\u1d70\u1d71\3\2\2\2\u1d71\u1d72")
        buf.write("\3\2\2\2\u1d72\u1d8f\5\u0488\u0245\2\u1d73\u1d74\7\u00ee")
        buf.write("\2\2\u1d74\u1d76\7\u008d\2\2\u1d75\u1d77\7\u02f0\2\2\u1d76")
        buf.write("\u1d75\3\2\2\2\u1d76\u1d77\3\2\2\2\u1d77\u1d78\3\2\2\2")
        buf.write("\u1d78\u1d8f\5\u0488\u0245\2\u1d79\u1d7f\7\u023e\2\2\u1d7a")
        buf.write("\u1d7c\6\u01db\u00c8\2\u1d7b\u1d7d\7\u02f0\2\2\u1d7c\u1d7b")
        buf.write("\3\2\2\2\u1d7c\u1d7d\3\2\2\2\u1d7d\u1d80\3\2\2\2\u1d7e")
        buf.write("\u1d80\3\2\2\2\u1d7f\u1d7a\3\2\2\2\u1d7f\u1d7e\3\2\2\2")
        buf.write("\u1d80\u1d81\3\2\2\2\u1d81\u1d8f\5\u046c\u0237\2\u1d82")
        buf.write("\u1d83\7\u022b\2\2\u1d83\u1d8f\tz\2\2\u1d84\u1d86\7V\2")
        buf.write("\2\u1d85\u1d87\7\u02f0\2\2\u1d86\u1d85\3\2\2\2\u1d86\u1d87")
        buf.write("\3\2\2\2\u1d87\u1d88\3\2\2\2\u1d88\u1d8f\5\u0488\u0245")
        buf.write("\2\u1d89\u1d8b\7\u010a\2\2\u1d8a\u1d8c\7\u02f0\2\2\u1d8b")
        buf.write("\u1d8a\3\2\2\2\u1d8b\u1d8c\3\2\2\2\u1d8c\u1d8d\3\2\2\2")
        buf.write("\u1d8d\u1d8f\5\u0478\u023d\2\u1d8e\u1d0d\3\2\2\2\u1d8e")
        buf.write("\u1d12\3\2\2\2\u1d8e\u1d1b\3\2\2\2\u1d8e\u1d20\3\2\2\2")
        buf.write("\u1d8e\u1d25\3\2\2\2\u1d8e\u1d2a\3\2\2\2\u1d8e\u1d2f\3")
        buf.write("\2\2\2\u1d8e\u1d34\3\2\2\2\u1d8e\u1d3a\3\2\2\2\u1d8e\u1d40")
        buf.write("\3\2\2\2\u1d8e\u1d45\3\2\2\2\u1d8e\u1d4a\3\2\2\2\u1d8e")
        buf.write("\u1d4f\3\2\2\2\u1d8e\u1d54\3\2\2\2\u1d8e\u1d59\3\2\2\2")
        buf.write("\u1d8e\u1d5e\3\2\2\2\u1d8e\u1d66\3\2\2\2\u1d8e\u1d67\3")
        buf.write("\2\2\2\u1d8e\u1d68\3\2\2\2\u1d8e\u1d6d\3\2\2\2\u1d8e\u1d73")
        buf.write("\3\2\2\2\u1d8e\u1d79\3\2\2\2\u1d8e\u1d82\3\2\2\2\u1d8e")
        buf.write("\u1d84\3\2\2\2\u1d8e\u1d89\3\2\2\2\u1d8f\u03b5\3\2\2\2")
        buf.write("\u1d90\u1d93\5\u0478\u023d\2\u1d91\u1d93\7\u0082\2\2\u1d92")
        buf.write("\u1d90\3\2\2\2\u1d92\u1d91\3\2\2\2\u1d93\u03b7\3\2\2\2")
        buf.write("\u1d94\u1d96\7\u0082\2\2\u1d95\u1d94\3\2\2\2\u1d95\u1d96")
        buf.write("\3\2\2\2\u1d96\u1d97\3\2\2\2\u1d97\u1d99\7G\2\2\u1d98")
        buf.write("\u1d9a\7\u02f0\2\2\u1d99\u1d98\3\2\2\2\u1d99\u1d9a\3\2")
        buf.write("\2\2\u1d9a\u1d9b\3\2\2\2\u1d9b\u1d9c\5\u03ae\u01d8\2\u1d9c")
        buf.write("\u03b9\3\2\2\2\u1d9d\u1d9f\7\u0082\2\2\u1d9e\u1d9d\3\2")
        buf.write("\2\2\u1d9e\u1d9f\3\2\2\2\u1d9f\u1da0\3\2\2\2\u1da0\u1da2")
        buf.write("\7\u00a0\2\2\u1da1\u1da3\7\u02f0\2\2\u1da2\u1da1\3\2\2")
        buf.write("\2\u1da2\u1da3\3\2\2\2\u1da3\u1da4\3\2\2\2\u1da4\u1da5")
        buf.write("\5\u0486\u0244\2\u1da5\u03bb\3\2\2\2\u1da6\u1da8\7\u0082")
        buf.write("\2\2\u1da7\u1da6\3\2\2\2\u1da7\u1da8\3\2\2\2\u1da8\u1da9")
        buf.write("\3\2\2\2\u1da9\u1dab\5\u02fa\u017e\2\u1daa\u1dac\7\u02f0")
        buf.write("\2\2\u1dab\u1daa\3\2\2\2\u1dab\u1dac\3\2\2\2\u1dac\u1dad")
        buf.write("\3\2\2\2\u1dad\u1dae\5\u03ac\u01d7\2\u1dae\u03bd\3\2\2")
        buf.write("\2\u1daf\u1db0\7\u0197\2\2\u1db0\u1db1\7/\2\2\u1db1\u1db4")
        buf.write("\5\u03c0\u01e1\2\u1db2\u1db3\7\u0196\2\2\u1db3\u1db5\5")
        buf.write("\u047a\u023e\2\u1db4\u1db2\3\2\2\2\u1db4\u1db5\3\2\2\2")
        buf.write("\u1db5\u1db7\3\2\2\2\u1db6\u1db8\5\u03c2\u01e2\2\u1db7")
        buf.write("\u1db6\3\2\2\2\u1db7\u1db8\3\2\2\2\u1db8\u1dba\3\2\2\2")
        buf.write("\u1db9\u1dbb\5\u03c6\u01e4\2\u1dba\u1db9\3\2\2\2\u1dba")
        buf.write("\u1dbb\3\2\2\2\u1dbb\u03bf\3\2\2\2\u1dbc\u1dbe\7\u0117")
        buf.write("\2\2\u1dbd\u1dbc\3\2\2\2\u1dbd\u1dbe\3\2\2\2\u1dbe\u1dbf")
        buf.write("\3\2\2\2\u1dbf\u1dc1\7\u010b\2\2\u1dc0\u1dc2\5\u03c4\u01e3")
        buf.write("\2\u1dc1\u1dc0\3\2\2\2\u1dc1\u1dc2\3\2\2\2\u1dc2\u1dc3")
        buf.write("\3\2\2\2\u1dc3\u1dc5\7\u030a\2\2\u1dc4\u1dc6\5\u046e\u0238")
        buf.write("\2\u1dc5\u1dc4\3\2\2\2\u1dc5\u1dc6\3\2\2\2\u1dc6\u1dc7")
        buf.write("\3\2\2\2\u1dc7\u1dde\7\u030b\2\2\u1dc8\u1dca\7\u0117\2")
        buf.write("\2\u1dc9\u1dc8\3\2\2\2\u1dc9\u1dca\3\2\2\2\u1dca\u1dcb")
        buf.write("\3\2\2\2\u1dcb\u1dcc\7\u00de\2\2\u1dcc\u1dcd\7\u030a\2")
        buf.write("\2\u1dcd\u1dce\5\u02b2\u015a\2\u1dce\u1dcf\7\u030b\2\2")
        buf.write("\u1dcf\u1dde\3\2\2\2\u1dd0\u1ddb\t{\2\2\u1dd1\u1dd2\7")
        buf.write("\u030a\2\2\u1dd2\u1dd3\5\u02b2\u015a\2\u1dd3\u1dd4\7\u030b")
        buf.write("\2\2\u1dd4\u1ddc\3\2\2\2\u1dd5\u1dd6\7I\2\2\u1dd6\u1dd8")
        buf.write("\7\u030a\2\2\u1dd7\u1dd9\5\u046e\u0238\2\u1dd8\u1dd7\3")
        buf.write("\2\2\2\u1dd8\u1dd9\3\2\2\2\u1dd9\u1dda\3\2\2\2\u1dda\u1ddc")
        buf.write("\7\u030b\2\2\u1ddb\u1dd1\3\2\2\2\u1ddb\u1dd5\3\2\2\2\u1ddc")
        buf.write("\u1dde\3\2\2\2\u1ddd\u1dbd\3\2\2\2\u1ddd\u1dc9\3\2\2\2")
        buf.write("\u1ddd\u1dd0\3\2\2\2\u1dde\u03c1\3\2\2\2\u1ddf\u1de0\7")
        buf.write("\u0233\2\2\u1de0\u1de2\7/\2\2\u1de1\u1de3\7\u0117\2\2")
        buf.write("\u1de2\u1de1\3\2\2\2\u1de2\u1de3\3\2\2\2\u1de3\u1dee\3")
        buf.write("\2\2\2\u1de4\u1de5\7\u00de\2\2\u1de5\u1de6\7\u030a\2\2")
        buf.write("\u1de6\u1de7\5\u02b2\u015a\2\u1de7\u1de8\7\u030b\2\2\u1de8")
        buf.write("\u1def\3\2\2\2\u1de9\u1deb\7\u010b\2\2\u1dea\u1dec\5\u03c4")
        buf.write("\u01e3\2\u1deb\u1dea\3\2\2\2\u1deb\u1dec\3\2\2\2\u1dec")
        buf.write("\u1ded\3\2\2\2\u1ded\u1def\5\u0470\u0239\2\u1dee\u1de4")
        buf.write("\3\2\2\2\u1dee\u1de9\3\2\2\2\u1def\u1df2\3\2\2\2\u1df0")
        buf.write("\u1df1\7\u0232\2\2\u1df1\u1df3\5\u047a\u023e\2\u1df2\u1df0")
        buf.write("\3\2\2\2\u1df2\u1df3\3\2\2\2\u1df3\u03c3\3\2\2\2\u1df4")
        buf.write("\u1df5\6\u01e3\u00c9\2\u1df5\u1df6\7\13\2\2\u1df6\u1df7")
        buf.write("\7\u02f0\2\2\u1df7\u1df8\5\u047a\u023e\2\u1df8\u03c5\3")
        buf.write("\2\2\2\u1df9\u1dfa\7\u030a\2\2\u1dfa\u1dff\5\u03c8\u01e5")
        buf.write("\2\u1dfb\u1dfc\7\u0307\2\2\u1dfc\u1dfe\5\u03c8\u01e5\2")
        buf.write("\u1dfd\u1dfb\3\2\2\2\u1dfe\u1e01\3\2\2\2\u1dff\u1dfd\3")
        buf.write("\2\2\2\u1dff\u1e00\3\2\2\2\u1e00\u1e02\3\2\2\2\u1e01\u1dff")
        buf.write("\3\2\2\2\u1e02\u1e03\7\u030b\2\2\u1e03\u03c7\3\2\2\2\u1e04")
        buf.write("\u1e05\7\u0197\2\2\u1e05\u1e10\5\u046c\u0237\2\u1e06\u1e07")
        buf.write("\7\u0274\2\2\u1e07\u1e08\7\u0113\2\2\u1e08\u1e0b\7\u0247")
        buf.write("\2\2\u1e09\u1e0c\5\u03d0\u01e9\2\u1e0a\u1e0c\7\u014b\2")
        buf.write("\2\u1e0b\u1e09\3\2\2\2\u1e0b\u1e0a\3\2\2\2\u1e0c\u1e11")
        buf.write("\3\2\2\2\u1e0d\u1e0e\7\u0274\2\2\u1e0e\u1e0f\7\u00fd\2")
        buf.write("\2\u1e0f\u1e11\5\u03ca\u01e6\2\u1e10\u1e06\3\2\2\2\u1e10")
        buf.write("\u1e0d\3\2\2\2\u1e10\u1e11\3\2\2\2\u1e11\u1e15\3\2\2\2")
        buf.write("\u1e12\u1e14\5\u03cc\u01e7\2\u1e13\u1e12\3\2\2\2\u1e14")
        buf.write("\u1e17\3\2\2\2\u1e15\u1e13\3\2\2\2\u1e15\u1e16\3\2\2\2")
        buf.write("\u1e16\u1e23\3\2\2\2\u1e17\u1e15\3\2\2\2\u1e18\u1e19\7")
        buf.write("\u030a\2\2\u1e19\u1e1e\5\u03ce\u01e8\2\u1e1a\u1e1b\7\u0307")
        buf.write("\2\2\u1e1b\u1e1d\5\u03ce\u01e8\2\u1e1c\u1e1a\3\2\2\2\u1e1d")
        buf.write("\u1e20\3\2\2\2\u1e1e\u1e1c\3\2\2\2\u1e1e\u1e1f\3\2\2\2")
        buf.write("\u1e1f\u1e21\3\2\2\2\u1e20\u1e1e\3\2\2\2\u1e21\u1e22\7")
        buf.write("\u030b\2\2\u1e22\u1e24\3\2\2\2\u1e23\u1e18\3\2\2\2\u1e23")
        buf.write("\u1e24\3\2\2\2\u1e24\u03c9\3\2\2\2\u1e25\u1e32\5\u03d0")
        buf.write("\u01e9\2\u1e26\u1e27\7\u030a\2\2\u1e27\u1e2c\5\u03d0\u01e9")
        buf.write("\2\u1e28\u1e29\7\u0307\2\2\u1e29\u1e2b\5\u03d0\u01e9\2")
        buf.write("\u1e2a\u1e28\3\2\2\2\u1e2b\u1e2e\3\2\2\2\u1e2c\u1e2a\3")
        buf.write("\2\2\2\u1e2c\u1e2d\3\2\2\2\u1e2d\u1e2f\3\2\2\2\u1e2e\u1e2c")
        buf.write("\3\2\2\2\u1e2f\u1e30\7\u030b\2\2\u1e30\u1e32\3\2\2\2\u1e31")
        buf.write("\u1e25\3\2\2\2\u1e31\u1e26\3\2\2\2\u1e32\u03cb\3\2\2\2")
        buf.write("\u1e33\u1e35\7\u023e\2\2\u1e34\u1e36\7\u02f0\2\2\u1e35")
        buf.write("\u1e34\3\2\2\2\u1e35\u1e36\3\2\2\2\u1e36\u1e37\3\2\2\2")
        buf.write("\u1e37\u1e56\5\u046c\u0237\2\u1e38\u1e3a\7\u022b\2\2\u1e39")
        buf.write("\u1e38\3\2\2\2\u1e39\u1e3a\3\2\2\2\u1e3a\u1e3b\3\2\2\2")
        buf.write("\u1e3b\u1e3d\7\u00a5\2\2\u1e3c\u1e3e\7\u02f0\2\2\u1e3d")
        buf.write("\u1e3c\3\2\2\2\u1e3d\u1e3e\3\2\2\2\u1e3e\u1e3f\3\2\2\2")
        buf.write("\u1e3f\u1e56\5\u044a\u0226\2\u1e40\u1e42\7\u0172\2\2\u1e41")
        buf.write("\u1e43\7\u02f0\2\2\u1e42\u1e41\3\2\2\2\u1e42\u1e43\3\2")
        buf.write("\2\2\u1e43\u1e44\3\2\2\2\u1e44\u1e56\5\u047a\u023e\2\u1e45")
        buf.write("\u1e47\t|\2\2\u1e46\u1e48\7\u02f0\2\2\u1e47\u1e46\3\2")
        buf.write("\2\2\u1e47\u1e48\3\2\2\2\u1e48\u1e49\3\2\2\2\u1e49\u1e56")
        buf.write("\5\u047a\u023e\2\u1e4a\u1e4b\t}\2\2\u1e4b\u1e4d\7\u008d")
        buf.write("\2\2\u1e4c\u1e4e\7\u02f0\2\2\u1e4d\u1e4c\3\2\2\2\u1e4d")
        buf.write("\u1e4e\3\2\2\2\u1e4e\u1e4f\3\2\2\2\u1e4f\u1e56\5\u048c")
        buf.write("\u0247\2\u1e50\u1e52\7M\2\2\u1e51\u1e53\7\u02f0\2\2\u1e52")
        buf.write("\u1e51\3\2\2\2\u1e52\u1e53\3\2\2\2\u1e53\u1e54\3\2\2\2")
        buf.write("\u1e54\u1e56\5\u048c\u0247\2\u1e55\u1e33\3\2\2\2\u1e55")
        buf.write("\u1e39\3\2\2\2\u1e55\u1e40\3\2\2\2\u1e55\u1e45\3\2\2\2")
        buf.write("\u1e55\u1e4a\3\2\2\2\u1e55\u1e50\3\2\2\2\u1e56\u03cd\3")
        buf.write("\2\2\2\u1e57\u1e58\7\u0233\2\2\u1e58\u1e5c\5\u04a0\u0251")
        buf.write("\2\u1e59\u1e5b\5\u03cc\u01e7\2\u1e5a\u1e59\3\2\2\2\u1e5b")
        buf.write("\u1e5e\3\2\2\2\u1e5c\u1e5a\3\2\2\2\u1e5c\u1e5d\3\2\2\2")
        buf.write("\u1e5d\u03cf\3\2\2\2\u1e5e\u1e5c\3\2\2\2\u1e5f\u1e60\7")
        buf.write("\u030a\2\2\u1e60\u1e65\5\u03d2\u01ea\2\u1e61\u1e62\7\u0307")
        buf.write("\2\2\u1e62\u1e64\5\u03d2\u01ea\2\u1e63\u1e61\3\2\2\2\u1e64")
        buf.write("\u1e67\3\2\2\2\u1e65\u1e63\3\2\2\2\u1e65\u1e66\3\2\2\2")
        buf.write("\u1e66\u1e68\3\2\2\2\u1e67\u1e65\3\2\2\2\u1e68\u1e69\7")
        buf.write("\u030b\2\2\u1e69\u03d1\3\2\2\2\u1e6a\u1e6d\5\u02b2\u015a")
        buf.write("\2\u1e6b\u1e6d\7\u014b\2\2\u1e6c\u1e6a\3\2\2\2\u1e6c\u1e6b")
        buf.write("\3\2\2\2\u1e6d\u03d3\3\2\2\2\u1e6e\u1e6f\7\u0084\2\2\u1e6f")
        buf.write("\u1e70\7\u02f0\2\2\u1e70\u1e71\5\u0406\u0204\2\u1e71\u03d5")
        buf.write("\3\2\2\2\u1e72\u1e73\7\u00e9\2\2\u1e73\u1e74\7\u00b0\2")
        buf.write("\2\u1e74\u03d7\3\2\2\2\u1e75\u1e76\7\u00e9\2\2\u1e76\u1e77")
        buf.write("\5\u02fc\u017f\2\u1e77\u1e78\7\u00b0\2\2\u1e78\u03d9\3")
        buf.write("\2\2\2\u1e79\u1e7b\t~\2\2\u1e7a\u1e79\3\2\2\2\u1e7a\u1e7b")
        buf.write("\3\2\2\2\u1e7b\u1e7c\3\2\2\2\u1e7c\u1e7d\5\u03dc\u01ef")
        buf.write("\2\u1e7d\u03db\3\2\2\2\u1e7e\u1e7f\5\u0458\u022d\2\u1e7f")
        buf.write("\u1e80\5\u03e0\u01f1\2\u1e80\u03dd\3\2\2\2\u1e81\u1e82")
        buf.write("\7G\2\2\u1e82\u1e83\5\u03ae\u01d8\2\u1e83\u03df\3\2\2")
        buf.write("\2\u1e84\u1e86\5\u0398\u01cd\2\u1e85\u1e87\5\u03de\u01f0")
        buf.write("\2\u1e86\u1e85\3\2\2\2\u1e86\u1e87\3\2\2\2\u1e87\u03e1")
        buf.write("\3\2\2\2\u1e88\u1e89\7\u030a\2\2\u1e89\u1e8a\5\u0426\u0214")
        buf.write("\2\u1e8a\u1e8b\7\u0307\2\2\u1e8b\u1e8c\5\u0426\u0214\2")
        buf.write("\u1e8c\u1e8d\7\u030b\2\2\u1e8d\u03e3\3\2\2\2\u1e8e\u1e93")
        buf.write("\5\u0436\u021c\2\u1e8f\u1e90\7\u0307\2\2\u1e90\u1e92\5")
        buf.write("\u0436\u021c\2\u1e91\u1e8f\3\2\2\2\u1e92\u1e95\3\2\2\2")
        buf.write("\u1e93\u1e91\3\2\2\2\u1e93\u1e94\3\2\2\2\u1e94\u03e5\3")
        buf.write("\2\2\2\u1e95\u1e93\3\2\2\2\u1e96\u1e9b\5\u03e8\u01f5\2")
        buf.write("\u1e97\u1e98\7\u0307\2\2\u1e98\u1e9a\5\u03e8\u01f5\2\u1e99")
        buf.write("\u1e97\3\2\2\2\u1e9a\u1e9d\3\2\2\2\u1e9b\u1e99\3\2\2\2")
        buf.write("\u1e9b\u1e9c\3\2\2\2\u1e9c\u03e7\3\2\2\2\u1e9d\u1e9b\3")
        buf.write("\2\2\2\u1e9e\u1e9f\5\u041a\u020e\2\u1e9f\u1ea2\7\u02f0")
        buf.write("\2\2\u1ea0\u1ea3\5\u02a8\u0155\2\u1ea1\u1ea3\7\u0082\2")
        buf.write("\2\u1ea2\u1ea0\3\2\2\2\u1ea2\u1ea1\3\2\2\2\u1ea3\u03e9")
        buf.write("\3\2\2\2\u1ea4\u1ea5\5\u02fa\u017e\2\u1ea5\u1ea6\5\u03ac")
        buf.write("\u01d7\2\u1ea6\u03eb\3\2\2\2\u1ea7\u1ea9\7I\2\2\u1ea8")
        buf.write("\u1eaa\5\u03ee\u01f8\2\u1ea9\u1ea8\3\2\2\2\u1eaa\u1eab")
        buf.write("\3\2\2\2\u1eab\u1ea9\3\2\2\2\u1eab\u1eac\3\2\2\2\u1eac")
        buf.write("\u03ed\3\2\2\2\u1ead\u1eae\7\u0245\2\2\u1eae\u1eaf\7/")
        buf.write("\2\2\u1eaf\u1eba\5\u0488\u0245\2\u1eb0\u1eb2\7\u018a\2")
        buf.write("\2\u1eb1\u1eb0\3\2\2\2\u1eb1\u1eb2\3\2\2\2\u1eb2\u1eb3")
        buf.write("\3\2\2\2\u1eb3\u1eb4\7\u009f\2\2\u1eb4\u1eb5\7/\2\2\u1eb5")
        buf.write("\u1eba\5\u0488\u0245\2\u1eb6\u1eb7\7\u00a9\2\2\u1eb7\u1eb8")
        buf.write("\7/\2\2\u1eb8\u1eba\5\u0488\u0245\2\u1eb9\u1ead\3\2\2")
        buf.write("\2\u1eb9\u1eb1\3\2\2\2\u1eb9\u1eb6\3\2\2\2\u1eba\u03ef")
        buf.write("\3\2\2\2\u1ebb\u1ebd\7\u0118\2\2\u1ebc\u1ebe\5\u03f2\u01fa")
        buf.write("\2\u1ebd\u1ebc\3\2\2\2\u1ebe\u1ebf\3\2\2\2\u1ebf\u1ebd")
        buf.write("\3\2\2\2\u1ebf\u1ec0\3\2\2\2\u1ec0\u03f1\3\2\2\2\u1ec1")
        buf.write("\u1ec2\t\177\2\2\u1ec2\u1ec3\7/\2\2\u1ec3\u1ec4\5\u0488")
        buf.write("\u0245\2\u1ec4\u03f3\3\2\2\2\u1ec5\u1eca\5\u0406\u0204")
        buf.write("\2\u1ec6\u1ec7\7\u0307\2\2\u1ec7\u1ec9\5\u0406\u0204\2")
        buf.write("\u1ec8\u1ec6\3\2\2\2\u1ec9\u1ecc\3\2\2\2\u1eca\u1ec8\3")
        buf.write("\2\2\2\u1eca\u1ecb\3\2\2\2\u1ecb\u03f5\3\2\2\2\u1ecc\u1eca")
        buf.write("\3\2\2\2\u1ecd\u1ed2\5\u03fa\u01fe\2\u1ece\u1ecf\7\u0307")
        buf.write("\2\2\u1ecf\u1ed1\5\u03fa\u01fe\2\u1ed0\u1ece\3\2\2\2\u1ed1")
        buf.write("\u1ed4\3\2\2\2\u1ed2\u1ed0\3\2\2\2\u1ed2\u1ed3\3\2\2\2")
        buf.write("\u1ed3\u03f7\3\2\2\2\u1ed4\u1ed2\3\2\2\2\u1ed5\u1eda\5")
        buf.write("\u03fc\u01ff\2\u1ed6\u1ed7\7\u0307\2\2\u1ed7\u1ed9\5\u03fc")
        buf.write("\u01ff\2\u1ed8\u1ed6\3\2\2\2\u1ed9\u1edc\3\2\2\2\u1eda")
        buf.write("\u1ed8\3\2\2\2\u1eda\u1edb\3\2\2\2\u1edb\u03f9\3\2\2\2")
        buf.write("\u1edc\u1eda\3\2\2\2\u1edd\u1ef8\5\u0406\u0204\2\u1ede")
        buf.write("\u1ef6\7\u00e8\2\2\u1edf\u1ee2\7/\2\2\u1ee0\u1ee1\6\u01fe")
        buf.write("\u00ca\2\u1ee1\u1ee3\7\u0198\2\2\u1ee2\u1ee0\3\2\2\2\u1ee2")
        buf.write("\u1ee3\3\2\2\2\u1ee3\u1ee4\3\2\2\2\u1ee4\u1ef7\5\u0488")
        buf.write("\u0245\2\u1ee5\u1ee6\7\u0287\2\2\u1ee6\u1eec\5\u04a0\u0251")
        buf.write("\2\u1ee7\u1ee8\7\23\2\2\u1ee8\u1eed\5\u048a\u0246\2\u1ee9")
        buf.write("\u1eea\6\u01fe\u00cb\2\u1eea\u1eeb\7/\2\2\u1eeb\u1eed")
        buf.write("\5\u0488\u0245\2\u1eec\u1ee7\3\2\2\2\u1eec\u1ee9\3\2\2")
        buf.write("\2\u1eec\u1eed\3\2\2\2\u1eed\u1ef7\3\2\2\2\u1eee\u1ef1")
        buf.write("\6\u01fe\u00cc\2\u1eef\u1ef0\7\u0287\2\2\u1ef0\u1ef2\5")
        buf.write("\u04a0\u0251\2\u1ef1\u1eef\3\2\2\2\u1ef1\u1ef2\3\2\2\2")
        buf.write("\u1ef2\u1ef3\3\2\2\2\u1ef3\u1ef4\7/\2\2\u1ef4\u1ef5\7")
        buf.write("\u02e0\2\2\u1ef5\u1ef7\7\u0198\2\2\u1ef6\u1edf\3\2\2\2")
        buf.write("\u1ef6\u1ee5\3\2\2\2\u1ef6\u1eee\3\2\2\2\u1ef7\u1ef9\3")
        buf.write("\2\2\2\u1ef8\u1ede\3\2\2\2\u1ef8\u1ef9\3\2\2\2\u1ef9\u03fb")
        buf.write("\3\2\2\2\u1efa\u1f17\5\u0406\u0204\2\u1efb\u1f12\7\u00e8")
        buf.write("\2\2\u1efc\u1efd\7\u0287\2\2\u1efd\u1eff\5\u04a0\u0251")
        buf.write("\2\u1efe\u1efc\3\2\2\2\u1efe\u1eff\3\2\2\2\u1eff\u1f00")
        buf.write("\3\2\2\2\u1f00\u1f01\7/\2\2\u1f01\u1f04\5\u0488\u0245")
        buf.write("\2\u1f02\u1f03\7\u01cc\2\2\u1f03\u1f05\5\u0488\u0245\2")
        buf.write("\u1f04\u1f02\3\2\2\2\u1f04\u1f05\3\2\2\2\u1f05\u1f07\3")
        buf.write("\2\2\2\u1f06\u1f08\5\u03fe\u0200\2\u1f07\u1f06\3\2\2\2")
        buf.write("\u1f07\u1f08\3\2\2\2\u1f08\u1f13\3\2\2\2\u1f09\u1f0a\7")
        buf.write("\u0287\2\2\u1f0a\u1f10\5\u04a0\u0251\2\u1f0b\u1f0c\7\23")
        buf.write("\2\2\u1f0c\u1f0e\5\u048a\u0246\2\u1f0d\u1f0f\5\u03fe\u0200")
        buf.write("\2\u1f0e\u1f0d\3\2\2\2\u1f0e\u1f0f\3\2\2\2\u1f0f\u1f11")
        buf.write("\3\2\2\2\u1f10\u1f0b\3\2\2\2\u1f10\u1f11\3\2\2\2\u1f11")
        buf.write("\u1f13\3\2\2\2\u1f12\u1efe\3\2\2\2\u1f12\u1f09\3\2\2\2")
        buf.write("\u1f12\u1f13\3\2\2\2\u1f13\u1f18\3\2\2\2\u1f14\u1f16\5")
        buf.write("\u0400\u0201\2\u1f15\u1f14\3\2\2\2\u1f15\u1f16\3\2\2\2")
        buf.write("\u1f16\u1f18\3\2\2\2\u1f17\u1efb\3\2\2\2\u1f17\u1f15\3")
        buf.write("\2\2\2\u1f18\u03fd\3\2\2\2\u1f19\u1f1a\7\u02d9\2\2\u1f1a")
        buf.write("\u1f1b\7g\2\2\u1f1b\u1f1c\7\u0198\2\2\u1f1c\u03ff\3\2")
        buf.write("\2\2\u1f1d\u1f1e\7\u008f\2\2\u1f1e\u1f1f\7\u02da\2\2\u1f1f")
        buf.write("\u1f20\7\u0198\2\2\u1f20\u0401\3\2\2\2\u1f21\u1f22\7\u01cc")
        buf.write("\2\2\u1f22\u1f23\5\u0488\u0245\2\u1f23\u0403\3\2\2\2\u1f24")
        buf.write("\u1f28\5\u04a0\u0251\2\u1f25\u1f26\7\u0311\2\2\u1f26\u1f29")
        buf.write("\5\u04a0\u0251\2\u1f27\u1f29\7\u0312\2\2\u1f28\u1f25\3")
        buf.write("\2\2\2\u1f28\u1f27\3\2\2\2\u1f28\u1f29\3\2\2\2\u1f29\u0405")
        buf.write("\3\2\2\2\u1f2a\u1f30\5\u0404\u0203\2\u1f2b\u1f2d\7k\2")
        buf.write("\2\u1f2c\u1f2e\5\u04a8\u0255\2\u1f2d\u1f2c\3\2\2\2\u1f2d")
        buf.write("\u1f2e\3\2\2\2\u1f2e\u1f30\3\2\2\2\u1f2f\u1f2a\3\2\2\2")
        buf.write("\u1f2f\u1f2b\3\2\2\2\u1f30\u0407\3\2\2\2\u1f31\u1f32\7")
        buf.write("\u0115\2\2\u1f32\u1f33\5\u0486\u0244\2\u1f33\u0409\3\2")
        buf.write("\2\2\u1f34\u1f37\5\u0408\u0205\2\u1f35\u1f37\5\u016a\u00b6")
        buf.write("\2\u1f36\u1f34\3\2\2\2\u1f36\u1f35\3\2\2\2\u1f37\u040b")
        buf.write("\3\2\2\2\u1f38\u1f39\t\u0080\2\2\u1f39\u040d\3\2\2\2\u1f3a")
        buf.write("\u1f3b\t\u0081\2\2\u1f3b\u040f\3\2\2\2\u1f3c\u1f3d\6\u0209")
        buf.write("\u00cd\2\u1f3d\u1f3e\7\u0197\2\2\u1f3e\u1f3f\5\u0470\u0239")
        buf.write("\2\u1f3f\u0411\3\2\2\2\u1f40\u1f46\5\u0476\u023c\2\u1f41")
        buf.write("\u1f43\5\u0472\u023a\2\u1f42\u1f44\5\u0476\u023c\2\u1f43")
        buf.write("\u1f42\3\2\2\2\u1f43\u1f44\3\2\2\2\u1f44\u1f46\3\2\2\2")
        buf.write("\u1f45\u1f40\3\2\2\2\u1f45\u1f41\3\2\2\2\u1f46\u0413\3")
        buf.write("\2\2\2\u1f47\u1f48\6\u020b\u00ce\2\u1f48\u1f4c\5\u046c")
        buf.write("\u0237\2\u1f49\u1f4a\6\u020b\u00cf\2\u1f4a\u1f4c\5\u0412")
        buf.write("\u020a\2\u1f4b\u1f47\3\2\2\2\u1f4b\u1f49\3\2\2\2\u1f4c")
        buf.write("\u0415\3\2\2\2\u1f4d\u1f4e\5\u046c\u0237\2\u1f4e\u0417")
        buf.write("\3\2\2\2\u1f4f\u1f50\7\u030a\2\2\u1f50\u1f55\5\u0416\u020c")
        buf.write("\2\u1f51\u1f52\7\u0307\2\2\u1f52\u1f54\5\u0416\u020c\2")
        buf.write("\u1f53\u1f51\3\2\2\2\u1f54\u1f57\3\2\2\2\u1f55\u1f53\3")
        buf.write("\2\2\2\u1f55\u1f56\3\2\2\2\u1f56\u1f58\3\2\2\2\u1f57\u1f55")
        buf.write("\3\2\2\2\u1f58\u1f59\7\u030b\2\2\u1f59\u0419\3\2\2\2\u1f5a")
        buf.write("\u1f5b\5\u0412\u020a\2\u1f5b\u041b\3\2\2\2\u1f5c\u1f5f")
        buf.write("\5\u041a\u020e\2\u1f5d\u1f5f\5\u0422\u0212\2\u1f5e\u1f5c")
        buf.write("\3\2\2\2\u1f5e\u1f5d\3\2\2\2\u1f5f\u041d\3\2\2\2\u1f60")
        buf.write("\u1f61\5\u046c\u0237\2\u1f61\u041f\3\2\2\2\u1f62\u1f63")
        buf.write("\5\u0412\u020a\2\u1f63\u0421\3\2\2\2\u1f64\u1f65\5\u046c")
        buf.write("\u0237\2\u1f65\u1f69\7\u0306\2\2\u1f66\u1f67\5\u046c\u0237")
        buf.write("\2\u1f67\u1f68\7\u0306\2\2\u1f68\u1f6a\3\2\2\2\u1f69\u1f66")
        buf.write("\3\2\2\2\u1f69\u1f6a\3\2\2\2\u1f6a\u1f6b\3\2\2\2\u1f6b")
        buf.write("\u1f6c\7\u02fa\2\2\u1f6c\u0423\3\2\2\2\u1f6d\u1f6e\5\u046c")
        buf.write("\u0237\2\u1f6e\u0425\3\2\2\2\u1f6f\u1f70\5\u046c\u0237")
        buf.write("\2\u1f70\u0427\3\2\2\2\u1f71\u1f72\5\u0472\u023a\2\u1f72")
        buf.write("\u0429\3\2\2\2\u1f73\u1f74\5\u0472\u023a\2\u1f74\u042b")
        buf.write("\3\2\2\2\u1f75\u1f76\5\u0472\u023a\2\u1f76\u042d\3\2\2")
        buf.write("\2\u1f77\u1f78\5\u0472\u023a\2\u1f78\u042f\3\2\2\2\u1f79")
        buf.write("\u1f7a\5\u0472\u023a\2\u1f7a\u0431\3\2\2\2\u1f7b\u1f7c")
        buf.write("\5\u0472\u023a\2\u1f7c\u0433\3\2\2\2\u1f7d\u1f80\5\u0472")
        buf.write("\u023a\2\u1f7e\u1f80\5\u0476\u023c\2\u1f7f\u1f7d\3\2\2")
        buf.write("\2\u1f7f\u1f7e\3\2\2\2\u1f80\u0435\3\2\2\2\u1f81\u1f84")
        buf.write("\5\u0472\u023a\2\u1f82\u1f84\5\u0476\u023c\2\u1f83\u1f81")
        buf.write("\3\2\2\2\u1f83\u1f82\3\2\2\2\u1f84\u0437\3\2\2\2\u1f85")
        buf.write("\u1f86\5\u046c\u0237\2\u1f86\u0439\3\2\2\2\u1f87\u1f88")
        buf.write("\5\u046c\u0237\2\u1f88\u043b\3\2\2\2\u1f89\u1f8a\5\u046c")
        buf.write("\u0237\2\u1f8a\u043d\3\2\2\2\u1f8b\u1f8c\5\u046c\u0237")
        buf.write("\2\u1f8c\u043f\3\2\2\2\u1f8d\u1f8e\5\u0472\u023a\2\u1f8e")
        buf.write("\u0441\3\2\2\2\u1f8f\u1f90\5\u0472\u023a\2\u1f90\u0443")
        buf.write("\3\2\2\2\u1f91\u1f92\5\u046c\u0237\2\u1f92\u0445\3\2\2")
        buf.write("\2\u1f93\u1f94\5\u04a0\u0251\2\u1f94\u0447\3\2\2\2\u1f95")
        buf.write("\u1f96\5\u04a0\u0251\2\u1f96\u0449\3\2\2\2\u1f97\u1f98")
        buf.write("\5\u04a0\u0251\2\u1f98\u044b\3\2\2\2\u1f99\u1f9c\5\u0472")
        buf.write("\u023a\2\u1f9a\u1f9c\5\u0476\u023c\2\u1f9b\u1f99\3\2\2")
        buf.write("\2\u1f9b\u1f9a\3\2\2\2\u1f9c\u044d\3\2\2\2\u1f9d\u1f9e")
        buf.write("\5\u0426\u0214\2\u1f9e\u1f9f\5\u0476\u023c\2\u1f9f\u044f")
        buf.write("\3\2\2\2\u1fa0\u1fa8\5\u046c\u0237\2\u1fa1\u1fa2\7\u0306")
        buf.write("\2\2\u1fa2\u1fa9\7\u02fa\2\2\u1fa3\u1fa6\5\u0476\u023c")
        buf.write("\2\u1fa4\u1fa5\7\u0306\2\2\u1fa5\u1fa7\7\u02fa\2\2\u1fa6")
        buf.write("\u1fa4\3\2\2\2\u1fa6\u1fa7\3\2\2\2\u1fa7\u1fa9\3\2\2\2")
        buf.write("\u1fa8\u1fa1\3\2\2\2\u1fa8\u1fa3\3\2\2\2\u1fa8\u1fa9\3")
        buf.write("\2\2\2\u1fa9\u0451\3\2\2\2\u1faa\u1fad\5\u0472\u023a\2")
        buf.write("\u1fab\u1fad\5\u0476\u023c\2\u1fac\u1faa\3\2\2\2\u1fac")
        buf.write("\u1fab\3\2\2\2\u1fad\u0453\3\2\2\2\u1fae\u1fb3\5\u0452")
        buf.write("\u022a\2\u1faf\u1fb0\7\u0307\2\2\u1fb0\u1fb2\5\u0452\u022a")
        buf.write("\2\u1fb1\u1faf\3\2\2\2\u1fb2\u1fb5\3\2\2\2\u1fb3\u1fb1")
        buf.write("\3\2\2\2\u1fb3\u1fb4\3\2\2\2\u1fb4\u0455\3\2\2\2\u1fb5")
        buf.write("\u1fb3\3\2\2\2\u1fb6\u1fbb\5\u0450\u0229\2\u1fb7\u1fb8")
        buf.write("\7\u0307\2\2\u1fb8\u1fba\5\u0450\u0229\2\u1fb9\u1fb7\3")
        buf.write("\2\2\2\u1fba\u1fbd\3\2\2\2\u1fbb\u1fb9\3\2\2\2\u1fbb\u1fbc")
        buf.write("\3\2\2\2\u1fbc\u0457\3\2\2\2\u1fbd\u1fbb\3\2\2\2\u1fbe")
        buf.write("\u1fbf\5\u046c\u0237\2\u1fbf\u0459\3\2\2\2\u1fc0\u1fc3")
        buf.write("\5\u046a\u0236\2\u1fc1\u1fc3\5\u04b8\u025d\2\u1fc2\u1fc0")
        buf.write("\3\2\2\2\u1fc2\u1fc1\3\2\2\2\u1fc3\u045b\3\2\2\2\u1fc4")
        buf.write("\u1fc5\5\u045a\u022e\2\u1fc5\u045d\3\2\2\2\u1fc6\u1fc9")
        buf.write("\5\u046a\u0236\2\u1fc7\u1fc9\5\u04be\u0260\2\u1fc8\u1fc6")
        buf.write("\3\2\2\2\u1fc8\u1fc7\3\2\2\2\u1fc9\u045f\3\2\2\2\u1fca")
        buf.write("\u1fcb\5\u045e\u0230\2\u1fcb\u0461\3\2\2\2\u1fcc\u1fcd")
        buf.write("\5\u046c\u0237\2\u1fcd\u0463\3\2\2\2\u1fce\u1fcf\5\u0486")
        buf.write("\u0244\2\u1fcf\u0465\3\2\2\2\u1fd0\u1fd1\5\u046c\u0237")
        buf.write("\2\u1fd1\u0467\3\2\2\2\u1fd2\u1fd3\5\u046c\u0237\2\u1fd3")
        buf.write("\u0469\3\2\2\2\u1fd4\u1fd8\t\u0082\2\2\u1fd5\u1fd6\6\u0236")
        buf.write("\u00d0\2\u1fd6\u1fd8\7\u0320\2\2\u1fd7\u1fd4\3\2\2\2\u1fd7")
        buf.write("\u1fd5\3\2\2\2\u1fd8\u046b\3\2\2\2\u1fd9\u1fdc\5\u046a")
        buf.write("\u0236\2\u1fda\u1fdc\5\u04b2\u025a\2\u1fdb\u1fd9\3\2\2")
        buf.write("\2\u1fdb\u1fda\3\2\2\2\u1fdc\u046d\3\2\2\2\u1fdd\u1fe2")
        buf.write("\5\u046c\u0237\2\u1fde\u1fdf\7\u0307\2\2\u1fdf\u1fe1\5")
        buf.write("\u046c\u0237\2\u1fe0\u1fde\3\2\2\2\u1fe1\u1fe4\3\2\2\2")
        buf.write("\u1fe2\u1fe0\3\2\2\2\u1fe2\u1fe3\3\2\2\2\u1fe3\u046f\3")
        buf.write("\2\2\2\u1fe4\u1fe2\3\2\2\2\u1fe5\u1fe6\7\u030a\2\2\u1fe6")
        buf.write("\u1fe7\5\u046e\u0238\2\u1fe7\u1fe8\7\u030b\2\2\u1fe8\u0471")
        buf.write("\3\2\2\2\u1fe9\u1feb\5\u046c\u0237\2\u1fea\u1fec\5\u0476")
        buf.write("\u023c\2\u1feb\u1fea\3\2\2\2\u1feb\u1fec\3\2\2\2\u1fec")
        buf.write("\u0473\3\2\2\2\u1fed\u1ff2\5\u046c\u0237\2\u1fee\u1ff0")
        buf.write("\5\u0476\u023c\2\u1fef\u1ff1\5\u0476\u023c\2\u1ff0\u1fef")
        buf.write("\3\2\2\2\u1ff0\u1ff1\3\2\2\2\u1ff1\u1ff3\3\2\2\2\u1ff2")
        buf.write("\u1fee\3\2\2\2\u1ff2\u1ff3\3\2\2\2\u1ff3\u1ff9\3\2\2\2")
        buf.write("\u1ff4\u1ff5\6\u023b\u00d1\2\u1ff5\u1ff6\5\u0476\u023c")
        buf.write("\2\u1ff6\u1ff7\5\u0476\u023c\2\u1ff7\u1ff9\3\2\2\2\u1ff8")
        buf.write("\u1fed\3\2\2\2\u1ff8\u1ff4\3\2\2\2\u1ff9\u0475\3\2\2\2")
        buf.write("\u1ffa\u1ffb\7\u0306\2\2\u1ffb\u1ffc\5\u046c\u0237\2\u1ffc")
        buf.write("\u0477\3\2\2\2\u1ffd\u1ffe\t\u0083\2\2\u1ffe\u0479\3\2")
        buf.write("\2\2\u1fff\u2000\t\u0084\2\2\u2000\u047b\3\2\2\2\u2001")
        buf.write("\u2002\t\u0085\2\2\u2002\u047d\3\2\2\2\u2003\u2009\7\u02ed")
        buf.write("\2\2\u2004\u2005\6\u0240\u00d2\2\u2005\u2009\7\u0316\2")
        buf.write("\2\u2006\u2009\7\u02ef\2\2\u2007\u2009\7\u02ee\2\2\u2008")
        buf.write("\u2003\3\2\2\2\u2008\u2004\3\2\2\2\u2008\u2006\3\2\2\2")
        buf.write("\u2008\u2007\3\2\2\2\u2009\u047f\3\2\2\2\u200a\u2014\5")
        buf.write("\u048c\u0247\2\u200b\u2014\5\u0492\u024a\2\u200c\u2014")
        buf.write("\5\u0498\u024d\2\u200d\u2014\5\u0496\u024c\2\u200e\u2014")
        buf.write("\5\u0494\u024b\2\u200f\u2011\7\u031c\2\2\u2010\u200f\3")
        buf.write("\2\2\2\u2010\u2011\3\2\2\2\u2011\u2012\3\2\2\2\u2012\u2014")
        buf.write("\t\u0086\2\2\u2013\u200a\3\2\2\2\u2013\u200b\3\2\2\2\u2013")
        buf.write("\u200c\3\2\2\2\u2013\u200d\3\2\2\2\u2013\u200e\3\2\2\2")
        buf.write("\u2013\u2010\3\2\2\2\u2014\u0481\3\2\2\2\u2015\u201b\5")
        buf.write("\u0480\u0241\2\u2016\u2017\7\u02f8\2\2\u2017\u201b\5\u0478")
        buf.write("\u023d\2\u2018\u2019\7\u02f9\2\2\u2019\u201b\5\u0478\u023d")
        buf.write("\2\u201a\u2015\3\2\2\2\u201a\u2016\3\2\2\2\u201a\u2018")
        buf.write("\3\2\2\2\u201b\u0483\3\2\2\2\u201c\u201d\7\u030a\2\2\u201d")
        buf.write("\u2022\5\u0488\u0245\2\u201e\u201f\7\u0307\2\2\u201f\u2021")
        buf.write("\5\u0488\u0245\2\u2020\u201e\3\2\2\2\u2021\u2024\3\2\2")
        buf.write("\2\u2022\u2020\3\2\2\2\u2022\u2023\3\2\2\2\u2023\u2025")
        buf.write("\3\2\2\2\u2024\u2022\3\2\2\2\u2025\u2026\7\u030b\2\2\u2026")
        buf.write("\u0485\3\2\2\2\u2027\u202b\7\u0321\2\2\u2028\u2029\6\u0244")
        buf.write("\u00d3\2\u2029\u202b\7\u0320\2\2\u202a\u2027\3\2\2\2\u202a")
        buf.write("\u2028\3\2\2\2\u202b\u0487\3\2\2\2\u202c\u2030\5\u0486")
        buf.write("\u0244\2\u202d\u2030\7\u0316\2\2\u202e\u2030\7\u0317\2")
        buf.write("\2\u202f\u202c\3\2\2\2\u202f\u202d\3\2\2\2\u202f\u202e")
        buf.write("\3\2\2\2\u2030\u0489\3\2\2\2\u2031\u2035\5\u0486\u0244")
        buf.write("\2\u2032\u2033\6\u0246\u00d4\2\u2033\u2035\7\u0316\2\2")
        buf.write("\u2034\u2031\3\2\2\2\u2034\u2032\3\2\2\2\u2035\u048b\3")
        buf.write("\2\2\2\u2036\u2038\7\u031c\2\2\u2037\u2036\3\2\2\2\u2037")
        buf.write("\u2038\3\2\2\2\u2038\u2039\3\2\2\2\u2039\u203c\5\u0486")
        buf.write("\u0244\2\u203a\u203c\7\u031e\2\2\u203b\u2037\3\2\2\2\u203b")
        buf.write("\u203a\3\2\2\2\u203c\u2040\3\2\2\2\u203d\u203f\5\u0486")
        buf.write("\u0244\2\u203e\u203d\3\2\2\2\u203f\u2042\3\2\2\2\u2040")
        buf.write("\u203e\3\2\2\2\u2040\u2041\3\2\2\2\u2041\u048d\3\2\2\2")
        buf.write("\u2042\u2040\3\2\2\2\u2043\u2044\5\u0486\u0244\2\u2044")
        buf.write("\u048f\3\2\2\2\u2045\u204a\5\u0486\u0244\2\u2046\u2047")
        buf.write("\7\u0307\2\2\u2047\u2049\5\u0486\u0244\2\u2048\u2046\3")
        buf.write("\2\2\2\u2049\u204c\3\2\2\2\u204a\u2048\3\2\2\2\u204a\u204b")
        buf.write("\3\2\2\2\u204b\u0491\3\2\2\2\u204c\u204a\3\2\2\2\u204d")
        buf.write("\u204e\t\u0085\2\2\u204e\u0493\3\2\2\2\u204f\u2050\t\u0087")
        buf.write("\2\2\u2050\u0495\3\2\2\2\u2051\u2052\t\u0088\2\2\u2052")
        buf.write("\u0497\3\2\2\2\u2053\u2054\7v\2\2\u2054\u205a\7\u0321")
        buf.write("\2\2\u2055\u2056\7\u024c\2\2\u2056\u205a\7\u0321\2\2\u2057")
        buf.write("\u2058\7\u0249\2\2\u2058\u205a\7\u0321\2\2\u2059\u2053")
        buf.write("\3\2\2\2\u2059\u2055\3\2\2\2\u2059\u2057\3\2\2\2\u205a")
        buf.write("\u0499\3\2\2\2\u205b\u205e\5\u039e\u01d0\2\u205c\u205e")
        buf.write("\5\u049e\u0250\2\u205d\u205b\3\2\2\2\u205d\u205c\3\2\2")
        buf.write("\2\u205e\u049b\3\2\2\2\u205f\u2060\5\u049e\u0250\2\u2060")
        buf.write("\u049d\3\2\2\2\u2061\u2062\7\u030a\2\2\u2062\u2063\7\u02ed")
        buf.write("\2\2\u2063\u2064\7\u0307\2\2\u2064\u2065\7\u02ed\2\2\u2065")
        buf.write("\u2066\7\u030b\2\2\u2066\u049f\3\2\2\2\u2067\u206a\5\u046c")
        buf.write("\u0237\2\u2068\u206a\5\u0486\u0244\2\u2069\u2067\3\2\2")
        buf.write("\2\u2069\u2068\3\2\2\2\u206a\u04a1\3\2\2\2\u206b\u206e")
        buf.write("\5\u046a\u0236\2\u206c\u206e\5\u04c0\u0261\2\u206d\u206b")
        buf.write("\3\2\2\2\u206d\u206c\3\2\2\2\u206e\u04a3\3\2\2\2\u206f")
        buf.write("\u2072\5\u045e\u0230\2\u2070\u2072\5\u0486\u0244\2\u2071")
        buf.write("\u206f\3\2\2\2\u2071\u2070\3\2\2\2\u2072\u04a5\3\2\2\2")
        buf.write("\u2073\u2076\5\u047e\u0240\2\u2074\u2076\5\u046a\u0236")
        buf.write("\2\u2075\u2073\3\2\2\2\u2075\u2074\3\2\2\2\u2076\u04a7")
        buf.write("\3\2\2\2\u2077\u2078\7\u030a\2\2\u2078\u2079\7\u030b\2")
        buf.write("\2\u2079\u04a9\3\2\2\2\u207a\u207b\t\u0089\2\2\u207b\u04ab")
        buf.write("\3\2\2\2\u207c\u207d\t\u008a\2\2\u207d\u04ad\3\2\2\2\u207e")
        buf.write("\u207f\7\u00d8\2\2\u207f\u2085\7\u0306\2\2\u2080\u2081")
        buf.write("\7\u011e\2\2\u2081\u2085\7\u0306\2\2\u2082\u2083\7\u01f8")
        buf.write("\2\2\u2083\u2085\7\u0306\2\2\u2084\u207e\3\2\2\2\u2084")
        buf.write("\u2080\3\2\2\2\u2084\u2082\3\2\2\2\u2085\u04af\3\2\2\2")
        buf.write("\u2086\u2087\7\u0294\2\2\u2087\u2091\7\u0306\2\2\u2088")
        buf.write("\u2089\7\u02a3\2\2\u2089\u2091\7\u0306\2\2\u208a\u208b")
        buf.write("\7\u00d8\2\2\u208b\u2091\7\u0306\2\2\u208c\u208d\7\u011e")
        buf.write("\2\2\u208d\u2091\7\u0306\2\2\u208e\u208f\7\u01f8\2\2\u208f")
        buf.write("\u2091\7\u0306\2\2\u2090\u2086\3\2\2\2\u2090\u2088\3\2")
        buf.write("\2\2\u2090\u208a\3\2\2\2\u2090\u208c\3\2\2\2\u2090\u208e")
        buf.write("\3\2\2\2\u2091\u04b1\3\2\2\2\u2092\u209a\6\u025a\u00d5")
        buf.write("\2\u2093\u209b\5\u04b8\u025d\2\u2094\u209b\5\u04c4\u0263")
        buf.write("\2\u2095\u209b\7\u00af\2\2\u2096\u2097\6\u025a\u00d6\2")
        buf.write("\u2097\u209b\7\u0200\2\2\u2098\u2099\6\u025a\u00d7\2\u2099")
        buf.write("\u209b\7\u02cc\2\2\u209a\u2093\3\2\2\2\u209a\u2094\3\2")
        buf.write("\2\2\u209a\u2095\3\2\2\2\u209a\u2096\3\2\2\2\u209a\u2098")
        buf.write("\3\2\2\2\u209b\u20a4\3\2\2\2\u209c\u20a2\5\u04bc\u025f")
        buf.write("\2\u209d\u20a2\5\u04b4\u025b\2\u209e\u20a2\5\u04b6\u025c")
        buf.write("\2\u209f\u20a2\5\u04ba\u025e\2\u20a0\u20a2\5\u04c2\u0262")
        buf.write("\2\u20a1\u209c\3\2\2\2\u20a1\u209d\3\2\2\2\u20a1\u209e")
        buf.write("\3\2\2\2\u20a1\u209f\3\2\2\2\u20a1\u20a0\3\2\2\2\u20a2")
        buf.write("\u20a4\3\2\2\2\u20a3\u2092\3\2\2\2\u20a3\u20a1\3\2\2\2")
        buf.write("\u20a4\u04b3\3\2\2\2\u20a5\u20a6\t\u008b\2\2\u20a6\u04b5")
        buf.write("\3\2\2\2\u20a7\u20a8\t\u008c\2\2\u20a8\u04b7\3\2\2\2\u20a9")
        buf.write("\u20b4\6\u025d\u00d8\2\u20aa\u20b5\5\u04c6\u0264\2\u20ab")
        buf.write("\u20b5\7\u00ac\2\2\u20ac\u20b5\7\u00be\2\2\u20ad\u20b5")
        buf.write("\7\u0173\2\2\u20ae\u20b5\7\u01a9\2\2\u20af\u20b5\7\u01ad")
        buf.write("\2\2\u20b0\u20b5\7\u01c5\2\2\u20b1\u20b5\7\u01cd\2\2\u20b2")
        buf.write("\u20b5\7\u02c7\2\2\u20b3\u20b5\7\u0237\2\2\u20b4\u20aa")
        buf.write("\3\2\2\2\u20b4\u20ab\3\2\2\2\u20b4\u20ac\3\2\2\2\u20b4")
        buf.write("\u20ad\3\2\2\2\u20b4\u20ae\3\2\2\2\u20b4\u20af\3\2\2\2")
        buf.write("\u20b4\u20b0\3\2\2\2\u20b4\u20b1\3\2\2\2\u20b4\u20b2\3")
        buf.write("\2\2\2\u20b4\u20b3\3\2\2\2\u20b5\u20bc\3\2\2\2\u20b6\u20ba")
        buf.write("\5\u04bc\u025f\2\u20b7\u20ba\5\u04ba\u025e\2\u20b8\u20ba")
        buf.write("\5\u04c2\u0262\2\u20b9\u20b6\3\2\2\2\u20b9\u20b7\3\2\2")
        buf.write("\2\u20b9\u20b8\3\2\2\2\u20ba\u20bc\3\2\2\2\u20bb\u20a9")
        buf.write("\3\2\2\2\u20bb\u20b9\3\2\2\2\u20bc\u04b9\3\2\2\2\u20bd")
        buf.write("\u20be\t\u008d\2\2\u20be\u04bb\3\2\2\2\u20bf\u20c3\t\u008e")
        buf.write("\2\2\u20c0\u20c1\6\u025f\u00d9\2\u20c1\u20c3\t\u008f\2")
        buf.write("\2\u20c2\u20bf\3\2\2\2\u20c2\u20c0\3\2\2\2\u20c3\u04bd")
        buf.write("\3\2\2\2\u20c4\u20c7\6\u0260\u00da\2\u20c5\u20c8\5\u04c6")
        buf.write("\u0264\2\u20c6\u20c8\5\u04c4\u0263\2\u20c7\u20c5\3\2\2")
        buf.write("\2\u20c7\u20c6\3\2\2\2\u20c8\u20cf\3\2\2\2\u20c9\u20cd")
        buf.write("\5\u04bc\u025f\2\u20ca\u20cd\5\u04b6\u025c\2\u20cb\u20cd")
        buf.write("\5\u04c2\u0262\2\u20cc\u20c9\3\2\2\2\u20cc\u20ca\3\2\2")
        buf.write("\2\u20cc\u20cb\3\2\2\2\u20cd\u20cf\3\2\2\2\u20ce\u20c4")
        buf.write("\3\2\2\2\u20ce\u20cc\3\2\2\2\u20cf\u04bf\3\2\2\2\u20d0")
        buf.write("\u20d5\5\u04bc\u025f\2\u20d1\u20d5\5\u04b4\u025b\2\u20d2")
        buf.write("\u20d5\5\u04b6\u025c\2\u20d3\u20d5\5\u04ba\u025e\2\u20d4")
        buf.write("\u20d0\3\2\2\2\u20d4\u20d1\3\2\2\2\u20d4\u20d2\3\2\2\2")
        buf.write("\u20d4\u20d3\3\2\2\2\u20d5\u04c1\3\2\2\2\u20d6\u20d7\t")
        buf.write("\u008a\2\2\u20d7\u04c3\3\2\2\2\u20d8\u20de\t\u0090\2\2")
        buf.write("\u20d9\u20da\6\u0263\u00db\2\u20da\u20de\7\u0200\2\2\u20db")
        buf.write("\u20dc\6\u0263\u00dc\2\u20dc\u20de\7\u00ec\2\2\u20dd\u20d8")
        buf.write("\3\2\2\2\u20dd\u20d9\3\2\2\2\u20dd\u20db\3\2\2\2\u20de")
        buf.write("\u04c5\3\2\2\2\u20df\u20e9\t\u0091\2\2\u20e0\u20e1\6\u0264")
        buf.write("\u00dd\2\u20e1\u20e9\7\u0200\2\2\u20e2\u20e3\6\u0264\u00de")
        buf.write("\2\u20e3\u20e9\t\u0092\2\2\u20e4\u20e5\6\u0264\u00df\2")
        buf.write("\u20e5\u20e9\t\u0093\2\2\u20e6\u20e7\6\u0264\u00e0\2\u20e7")
        buf.write("\u20e9\7\u0296\2\2\u20e8\u20df\3\2\2\2\u20e8\u20e0\3\2")
        buf.write("\2\2\u20e8\u20e2\3\2\2\2\u20e8\u20e4\3\2\2\2\u20e8\u20e6")
        buf.write("\3\2\2\2\u20e9\u04c7\3\2\2\2\u0465\u04ce\u04d2\u04d6\u04da")
        buf.write("\u04fe\u0506\u050b\u051b\u0522\u0529\u052c\u0533\u0538")
        buf.write("\u053b\u0540\u0546\u0548\u054c\u0550\u0559\u055d\u0562")
        buf.write("\u0568\u056f\u0573\u0578\u057d\u0584\u0587\u058d\u0590")
        buf.write("\u0597\u05a1\u05a6\u05ab\u05b3\u05b9\u05bd\u05c2\u05cb")
        buf.write("\u05d1\u05d7\u05dd\u05e6\u05ec\u05f5\u0603\u0607\u060d")
        buf.write("\u0611\u0617\u061b\u0620\u0623\u0629\u062f\u0635\u0639")
        buf.write("\u063e\u0642\u0646\u064e\u0650\u065d\u0665\u066d\u0671")
        buf.write("\u068e\u069e\u06a1\u06aa\u06af\u06b5\u06ba\u06be\u06c3")
        buf.write("\u06c7\u06cb\u06cf\u06d3\u06d7\u06d9\u06e4\u06ec\u06f5")
        buf.write("\u06fa\u06fd\u0702\u0709\u0711\u0715\u071a\u0721\u0726")
        buf.write("\u072b\u0733\u0737\u073c\u073f\u0742\u0745\u074c\u0753")
        buf.write("\u0757\u076f\u0773\u0779\u0780\u0783\u0787\u078e\u0791")
        buf.write("\u0794\u0797\u07a0\u07a7\u07ac\u07af\u07b2\u07b8\u07be")
        buf.write("\u07c1\u07c6\u07d0\u07d3\u07d9\u07df\u07e9\u07ec\u07f4")
        buf.write("\u07fa\u0805\u0808\u080d\u0820\u0823\u0826\u082c\u082f")
        buf.write("\u0831\u0837\u0841\u084b\u084e\u0851\u0856\u085c\u0869")
        buf.write("\u086d\u0872\u087b\u088c\u089f\u08a8\u08ab\u08b3\u08b8")
        buf.write("\u08bc\u08c3\u08c8\u08d7\u08db\u08e1\u08e7\u08ed\u08f3")
        buf.write("\u08f9\u08fe\u0902\u090a\u0910\u0916\u091b\u091e\u0921")
        buf.write("\u092a\u092d\u0938\u0944\u094d\u0951\u095a\u095d\u0963")
        buf.write("\u0965\u0969\u0970\u097d\u0984\u098a\u098d\u099e\u09b2")
        buf.write("\u09b6\u09bc\u09c2\u09c8\u09cd\u09d4\u09db\u09e0\u09e3")
        buf.write("\u09e7\u09eb\u09f0\u09f4\u09f8\u09fe\u0a03\u0a06\u0a0a")
        buf.write("\u0a10\u0a14\u0a18\u0a20\u0a28\u0a31\u0a3a\u0a47\u0a4a")
        buf.write("\u0a4e\u0a54\u0a5c\u0a61\u0a64\u0a67\u0a6a\u0a6d\u0a6f")
        buf.write("\u0a75\u0a77\u0a86\u0a8c\u0a93\u0a96\u0a98\u0a9a\u0aa4")
        buf.write("\u0aa6\u0aaa\u0aad\u0ab0\u0ab4\u0ab9\u0abf\u0ac2\u0ac5")
        buf.write("\u0acb\u0ace\u0ad7\u0ae0\u0ae4\u0ae8\u0aee\u0af3\u0af8")
        buf.write("\u0afd\u0b01\u0b07\u0b12\u0b15\u0b1a\u0b20\u0b23\u0b26")
        buf.write("\u0b29\u0b2c\u0b3a\u0b3d\u0b41\u0b45\u0b4b\u0b50\u0b54")
        buf.write("\u0b59\u0b5c\u0b60\u0b66\u0b6a\u0b6e\u0b77\u0b7c\u0b80")
        buf.write("\u0b84\u0b87\u0b8b\u0b8e\u0b90\u0b94\u0b9a\u0b9e\u0ba0")
        buf.write("\u0ba4\u0ba8\u0bac\u0bb3\u0bb5\u0bbe\u0bc4\u0bc9\u0bcc")
        buf.write("\u0bcf\u0bd2\u0bd5\u0bd9\u0be8\u0bec\u0bf2\u0bf5\u0bf8")
        buf.write("\u0bfe\u0c03\u0c07\u0c0a\u0c12\u0c14\u0c21\u0c2d\u0c32")
        buf.write("\u0c35\u0c38\u0c3d\u0c43\u0c53\u0c67\u0c70\u0c74\u0c7b")
        buf.write("\u0c80\u0c89\u0c90\u0c9b\u0ca2\u0cab\u0cb4\u0cc0\u0cc5")
        buf.write("\u0ccc\u0cd0\u0cd6\u0cdb\u0ce0\u0ce4\u0cea\u0cf0\u0cf2")
        buf.write("\u0cf5\u0cf9\u0d03\u0d08\u0d0d\u0d14\u0d1d\u0d25\u0d2a")
        buf.write("\u0d2e\u0d34\u0d37\u0d3a\u0d3e\u0d42\u0d4c\u0d50\u0d53")
        buf.write("\u0d56\u0d5b\u0d61\u0d65\u0d6b\u0d6e\u0d70\u0d75\u0d81")
        buf.write("\u0d8a\u0d97\u0d9a\u0d9f\u0da6\u0daa\u0dae\u0db0\u0dbe")
        buf.write("\u0dc5\u0dce\u0dd4\u0ddd\u0de1\u0de5\u0def\u0df1\u0df9")
        buf.write("\u0e00\u0e05\u0e09\u0e0d\u0e10\u0e16\u0e19\u0e1c\u0e22")
        buf.write("\u0e29\u0e2e\u0e32\u0e35\u0e38\u0e3b\u0e3d\u0e41\u0e49")
        buf.write("\u0e4f\u0e53\u0e58\u0e5b\u0e5e\u0e61\u0e63\u0e68\u0e71")
        buf.write("\u0e7e\u0e80\u0e84\u0e8a\u0e8d\u0e90\u0e96\u0e9d\u0e9f")
        buf.write("\u0ea7\u0ead\u0eb2\u0eb5\u0ebc\u0ebe\u0ec7\u0ed0\u0ed9")
        buf.write("\u0ee1\u0ee5\u0eec\u0eef\u0ef1\u0ef9\u0eff\u0f09\u0f10")
        buf.write("\u0f6e\u0f72\u0f78\u0f86\u0f8e\u0f91\u0f9d\u0fa2\u0fa8")
        buf.write("\u0faf\u0fb6\u0fbd\u0fc4\u0fcb\u0fd2\u0fd5\u0fdc\u0fe4")
        buf.write("\u0fec\u0ff6\u0ffc\u1000\u1004\u1009\u100c\u100e\u1017")
        buf.write("\u101d\u1024\u1029\u102e\u1033\u1036\u103d\u104a\u1050")
        buf.write("\u1056\u105d\u1065\u106b\u1077\u1079\u107f\u1083\u1085")
        buf.write("\u1089\u1096\u109c\u10a4\u10af\u10b3\u10c0\u10c7\u10cd")
        buf.write("\u10d4\u10d6\u10e0\u10e8\u10eb\u10f0\u10f4\u10fa\u10fd")
        buf.write("\u1102\u110d\u110f\u111b\u1120\u1128\u112e\u1130\u1132")
        buf.write("\u1138\u1144\u1149\u114b\u114f\u1155\u1158\u115b\u1165")
        buf.write("\u1167\u116d\u1174\u117a\u1184\u1188\u118d\u119e\u11ae")
        buf.write("\u11b3\u11bb\u11c3\u11c8\u11ce\u11d1\u11d3\u11dc\u11e2")
        buf.write("\u11e8\u11ea\u11ee\u11f9\u1203\u1208\u120d\u1212\u121a")
        buf.write("\u121e\u1223\u122c\u1238\u1246\u124f\u1251\u1258\u125f")
        buf.write("\u1263\u1269\u1271\u1278\u127c\u1282\u1289\u128c\u1295")
        buf.write("\u129b\u12a0\u12b7\u12ba\u12ca\u12cf\u12d2\u12d6\u12d9")
        buf.write("\u12e7\u12ed\u12f2\u12f5\u12f7\u12fb\u1300\u1302\u130e")
        buf.write("\u1314\u132a\u132e\u1330\u1338\u133c\u1345\u134f\u1356")
        buf.write("\u1359\u135d\u1360\u1363\u1367\u136a\u136e\u1371\u1376")
        buf.write("\u1379\u137e\u1381\u1387\u138b\u1391\u1394\u139d\u139f")
        buf.write("\u13a5\u13a9\u13ac\u13af\u13b3\u13b9\u13bc\u13bf\u13c9")
        buf.write("\u13cd\u13d6\u13d9\u13de\u13e1\u13e4\u13e8\u13eb\u13f0")
        buf.write("\u13f4\u13fc\u1409\u141b\u1420\u1425\u142d\u1433\u1435")
        buf.write("\u1439\u143c\u144a\u1454\u1458\u1460\u1463\u1467\u1471")
        buf.write("\u1475\u147c\u1481\u1489\u148e\u1494\u149b\u14a0\u14a6")
        buf.write("\u14ad\u14b7\u14b9\u14c1\u14c6\u14ca\u14cd\u14d4\u14d9")
        buf.write("\u14dd\u14e8\u14f0\u14f4\u14f7\u14fa\u14fe\u1502\u1507")
        buf.write("\u150d\u1511\u151c\u151f\u1522\u1525\u152d\u1531\u1536")
        buf.write("\u153e\u1546\u154c\u155e\u1568\u156e\u157c\u157f\u1583")
        buf.write("\u158e\u1590\u1599\u15a5\u15a7\u15ae\u15b4\u15ba\u15c2")
        buf.write("\u15cd\u15d1\u15ee\u15f0\u15f8\u15fc\u160d\u1614\u1622")
        buf.write("\u162e\u1634\u163b\u163e\u1660\u1668\u166a\u1676\u167b")
        buf.write("\u1681\u1689\u1690\u1696\u169b\u16a1\u16a6\u16ab\u16b1")
        buf.write("\u16b6\u16bc\u16c4\u16cc\u16d4\u16dc\u16e1\u16e7\u16ec")
        buf.write("\u16f0\u16f4\u16f9\u16fb\u170e\u1712\u1719\u1725\u1728")
        buf.write("\u172c\u1731\u1736\u173a\u1744\u174d\u174f\u1752\u175b")
        buf.write("\u1762\u176f\u1774\u177b\u1781\u179b\u17ba\u17ce\u17d4")
        buf.write("\u17d8\u17f3\u17ff\u180c\u1810\u1814\u1830\u1868\u1872")
        buf.write("\u1876\u1882\u1887\u1894\u18a8\u18ac\u18bd\u18c0\u18c5")
        buf.write("\u18c8\u18d1\u18d5\u18db\u18e1\u18e5\u18f0\u18f6\u18f8")
        buf.write("\u18ff\u1906\u190a\u1911\u1916\u191a\u191f\u1923\u1927")
        buf.write("\u192c\u1931\u1933\u1937\u1944\u1948\u194b\u194f\u1953")
        buf.write("\u1957\u195c\u1960\u1964\u196d\u196f\u1976\u197c\u1984")
        buf.write("\u1999\u199e\u19a5\u19bc\u19cc\u19d6\u19da\u19e1\u19e4")
        buf.write("\u19ef\u19f8\u19fb\u1a02\u1a07\u1a21\u1a27\u1a2d\u1a31")
        buf.write("\u1a3b\u1a3f\u1a4c\u1a58\u1a6a\u1a72\u1a7c\u1a7f\u1a84")
        buf.write("\u1a88\u1a8f\u1a94\u1a9b\u1aa3\u1aa6\u1aab\u1ab3\u1ab6")
        buf.write("\u1ac4\u1ac7\u1ad4\u1ad8\u1ada\u1adf\u1ae4\u1aea\u1af0")
        buf.write("\u1af6\u1afb\u1afe\u1b04\u1b09\u1b0c\u1b12\u1b16\u1b1c")
        buf.write("\u1b1e\u1b21\u1b27\u1b2d\u1b35\u1b37\u1b39\u1b3d\u1b43")
        buf.write("\u1b48\u1b4c\u1b51\u1b57\u1b5e\u1b61\u1b63\u1b66\u1b70")
        buf.write("\u1b74\u1b7a\u1b81\u1b86\u1b94\u1b99\u1ba1\u1ba6\u1baa")
        buf.write("\u1bad\u1bb2\u1bb6\u1bbe\u1bc6\u1bc8\u1bcf\u1bd7\u1bde")
        buf.write("\u1be1\u1be9\u1bf1\u1bf3\u1bf9\u1bff\u1c03\u1c0a\u1c15")
        buf.write("\u1c1e\u1c21\u1c26\u1c28\u1c2b\u1c2e\u1c32\u1c35\u1c39")
        buf.write("\u1c3e\u1c41\u1c45\u1c48\u1c4c\u1c51\u1c55\u1c61\u1c65")
        buf.write("\u1c6b\u1c6e\u1c73\u1c77\u1c7b\u1c80\u1c89\u1c8c\u1c90")
        buf.write("\u1c94\u1c97\u1c9b\u1c9f\u1ca4\u1ca9\u1caf\u1cb4\u1cb9")
        buf.write("\u1cbb\u1cc0\u1cc7\u1ccf\u1cd5\u1cd7\u1cdb\u1cdf\u1ce3")
        buf.write("\u1ce7\u1cf5\u1cfc\u1d00\u1d05\u1d0b\u1d0f\u1d15\u1d19")
        buf.write("\u1d1d\u1d22\u1d27\u1d2c\u1d31\u1d37\u1d3d\u1d42\u1d47")
        buf.write("\u1d4c\u1d51\u1d56\u1d5b\u1d60\u1d6a\u1d70\u1d76\u1d7c")
        buf.write("\u1d7f\u1d86\u1d8b\u1d8e\u1d92\u1d95\u1d99\u1d9e\u1da2")
        buf.write("\u1da7\u1dab\u1db4\u1db7\u1dba\u1dbd\u1dc1\u1dc5\u1dc9")
        buf.write("\u1dd8\u1ddb\u1ddd\u1de2\u1deb\u1dee\u1df2\u1dff\u1e0b")
        buf.write("\u1e10\u1e15\u1e1e\u1e23\u1e2c\u1e31\u1e35\u1e39\u1e3d")
        buf.write("\u1e42\u1e47\u1e4d\u1e52\u1e55\u1e5c\u1e65\u1e6c\u1e7a")
        buf.write("\u1e86\u1e93\u1e9b\u1ea2\u1eab\u1eb1\u1eb9\u1ebf\u1eca")
        buf.write("\u1ed2\u1eda\u1ee2\u1eec\u1ef1\u1ef6\u1ef8\u1efe\u1f04")
        buf.write("\u1f07\u1f0e\u1f10\u1f12\u1f15\u1f17\u1f28\u1f2d\u1f2f")
        buf.write("\u1f36\u1f43\u1f45\u1f4b\u1f55\u1f5e\u1f69\u1f7f\u1f83")
        buf.write("\u1f9b\u1fa6\u1fa8\u1fac\u1fb3\u1fbb\u1fc2\u1fc8\u1fd7")
        buf.write("\u1fdb\u1fe2\u1feb\u1ff0\u1ff2\u1ff8\u2008\u2010\u2013")
        buf.write("\u201a\u2022\u202a\u202f\u2034\u2037\u203b\u2040\u204a")
        buf.write("\u2059\u205d\u2069\u206d\u2071\u2075\u2084\u2090\u209a")
        buf.write("\u20a1\u20a3\u20b4\u20b9\u20bb\u20c2\u20c7\u20cc\u20ce")
        buf.write("\u20d4\u20dd\u20e8")
        return buf.getvalue()


class SQLParser ( SQLBaseParser ):

    grammarFileName = "SQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'='", "':='", "'<=>'", "'>='", 
                     "'>'", "'<='", "'<'", "'!='", "'+'", "'-'", "'*'", 
                     "'/'", "'%'", "'!'", "'~'", "'<<'", "'>>'", "'&&'", 
                     "'&'", "'^'", "'||'", "'|'", "'.'", "','", "';'", "':'", 
                     "'('", "')'", "'{'", "'}'", "'_'", "'->'", "'->>'", 
                     "'@'", "<INVALID>", "'@@'", "'\\N'", "'?'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'<>'" ]

    symbolicNames = [ "<INVALID>", "ACCESSIBLE_SYMBOL", "ACCOUNT_SYMBOL", 
                      "ACTION_SYMBOL", "ADD_SYMBOL", "ADDDATE_SYMBOL", "AFTER_SYMBOL", 
                      "AGAINST_SYMBOL", "AGGREGATE_SYMBOL", "ALGORITHM_SYMBOL", 
                      "ALL_SYMBOL", "ALTER_SYMBOL", "ALWAYS_SYMBOL", "ANALYSE_SYMBOL", 
                      "ANALYZE_SYMBOL", "AND_SYMBOL", "ANY_SYMBOL", "AS_SYMBOL", 
                      "ASC_SYMBOL", "ASCII_SYMBOL", "ASENSITIVE_SYMBOL", 
                      "AT_SYMBOL", "AUTHORS_SYMBOL", "AUTOEXTEND_SIZE_SYMBOL", 
                      "AUTO_INCREMENT_SYMBOL", "AVG_ROW_LENGTH_SYMBOL", 
                      "AVG_SYMBOL", "BACKUP_SYMBOL", "BEFORE_SYMBOL", "BEGIN_SYMBOL", 
                      "BETWEEN_SYMBOL", "BIGINT_SYMBOL", "BINARY_SYMBOL", 
                      "BINLOG_SYMBOL", "BIN_NUM_SYMBOL", "BIT_AND_SYMBOL", 
                      "BIT_OR_SYMBOL", "BIT_SYMBOL", "BIT_XOR_SYMBOL", "BLOB_SYMBOL", 
                      "BLOCK_SYMBOL", "BOOLEAN_SYMBOL", "BOOL_SYMBOL", "BOTH_SYMBOL", 
                      "BTREE_SYMBOL", "BY_SYMBOL", "BYTE_SYMBOL", "CACHE_SYMBOL", 
                      "CALL_SYMBOL", "CASCADE_SYMBOL", "CASCADED_SYMBOL", 
                      "CASE_SYMBOL", "CAST_SYMBOL", "CATALOG_NAME_SYMBOL", 
                      "CHAIN_SYMBOL", "CHANGE_SYMBOL", "CHANGED_SYMBOL", 
                      "CHANNEL_SYMBOL", "CHARSET_SYMBOL", "CHARACTER_SYMBOL", 
                      "CHAR_SYMBOL", "CHECKSUM_SYMBOL", "CHECK_SYMBOL", 
                      "CIPHER_SYMBOL", "CLASS_ORIGIN_SYMBOL", "CLIENT_SYMBOL", 
                      "CLOSE_SYMBOL", "COALESCE_SYMBOL", "CODE_SYMBOL", 
                      "COLLATE_SYMBOL", "COLLATION_SYMBOL", "COLUMNS_SYMBOL", 
                      "COLUMN_SYMBOL", "COLUMN_NAME_SYMBOL", "COLUMN_FORMAT_SYMBOL", 
                      "COMMENT_SYMBOL", "COMMITTED_SYMBOL", "COMMIT_SYMBOL", 
                      "COMPACT_SYMBOL", "COMPLETION_SYMBOL", "COMPRESSED_SYMBOL", 
                      "COMPRESSION_SYMBOL", "CONCURRENT_SYMBOL", "CONDITION_SYMBOL", 
                      "CONNECTION_SYMBOL", "CONSISTENT_SYMBOL", "CONSTRAINT_SYMBOL", 
                      "CONSTRAINT_CATALOG_SYMBOL", "CONSTRAINT_NAME_SYMBOL", 
                      "CONSTRAINT_SCHEMA_SYMBOL", "CONTAINS_SYMBOL", "CONTEXT_SYMBOL", 
                      "CONTINUE_SYMBOL", "CONTRIBUTORS_SYMBOL", "CONVERT_SYMBOL", 
                      "COUNT_SYMBOL", "CPU_SYMBOL", "CREATE_SYMBOL", "CROSS_SYMBOL", 
                      "CUBE_SYMBOL", "CURDATE_SYMBOL", "CURRENT_SYMBOL", 
                      "CURRENT_DATE_SYMBOL", "CURRENT_TIME_SYMBOL", "CURRENT_TIMESTAMP_SYMBOL", 
                      "CURRENT_USER_SYMBOL", "CURSOR_SYMBOL", "CURSOR_NAME_SYMBOL", 
                      "CURTIME_SYMBOL", "DATABASE_SYMBOL", "DATABASES_SYMBOL", 
                      "DATAFILE_SYMBOL", "DATA_SYMBOL", "DATETIME_SYMBOL", 
                      "DATE_ADD_SYMBOL", "DATE_SUB_SYMBOL", "DATE_SYMBOL", 
                      "DAYOFMONTH_SYMBOL", "DAY_HOUR_SYMBOL", "DAY_MICROSECOND_SYMBOL", 
                      "DAY_MINUTE_SYMBOL", "DAY_SECOND_SYMBOL", "DAY_SYMBOL", 
                      "DEALLOCATE_SYMBOL", "DEC_SYMBOL", "DECIMAL_NUM_SYMBOL", 
                      "DECIMAL_SYMBOL", "DECLARE_SYMBOL", "DEFAULT_SYMBOL", 
                      "DEFAULT_AUTH_SYMBOL", "DEFINER_SYMBOL", "DELAYED_SYMBOL", 
                      "DELAY_KEY_WRITE_SYMBOL", "DELETE_SYMBOL", "DESC_SYMBOL", 
                      "DESCRIBE_SYMBOL", "DES_KEY_FILE_SYMBOL", "DETERMINISTIC_SYMBOL", 
                      "DIAGNOSTICS_SYMBOL", "DIRECTORY_SYMBOL", "DISABLE_SYMBOL", 
                      "DISCARD_SYMBOL", "DISK_SYMBOL", "DISTINCT_SYMBOL", 
                      "DISTINCTROW_SYMBOL", "DIV_SYMBOL", "DOUBLE_SYMBOL", 
                      "DO_SYMBOL", "DROP_SYMBOL", "DUAL_SYMBOL", "DUMPFILE_SYMBOL", 
                      "DUPLICATE_SYMBOL", "DYNAMIC_SYMBOL", "EACH_SYMBOL", 
                      "ELSE_SYMBOL", "ELSEIF_SYMBOL", "ENABLE_SYMBOL", "ENCLOSED_SYMBOL", 
                      "ENCRYPTION_SYMBOL", "END_SYMBOL", "ENDS_SYMBOL", 
                      "END_OF_INPUT_SYMBOL", "ENGINES_SYMBOL", "ENGINE_SYMBOL", 
                      "ENUM_SYMBOL", "ERROR_SYMBOL", "ERRORS_SYMBOL", "ESCAPED_SYMBOL", 
                      "ESCAPE_SYMBOL", "EVENTS_SYMBOL", "EVENT_SYMBOL", 
                      "EVERY_SYMBOL", "EXCHANGE_SYMBOL", "EXECUTE_SYMBOL", 
                      "EXISTS_SYMBOL", "EXIT_SYMBOL", "EXPANSION_SYMBOL", 
                      "EXPIRE_SYMBOL", "EXPLAIN_SYMBOL", "EXPORT_SYMBOL", 
                      "EXTENDED_SYMBOL", "EXTENT_SIZE_SYMBOL", "EXTRACT_SYMBOL", 
                      "FALSE_SYMBOL", "FAST_SYMBOL", "FAULTS_SYMBOL", "FETCH_SYMBOL", 
                      "FIELDS_SYMBOL", "FILE_SYMBOL", "FILE_BLOCK_SIZE_SYMBOL", 
                      "FILTER_SYMBOL", "FIRST_SYMBOL", "FIXED_SYMBOL", "FLOAT4_SYMBOL", 
                      "FLOAT8_SYMBOL", "FLOAT_SYMBOL", "FLUSH_SYMBOL", "FOLLOWS_SYMBOL", 
                      "FORCE_SYMBOL", "FOREIGN_SYMBOL", "FOR_SYMBOL", "FORMAT_SYMBOL", 
                      "FOUND_SYMBOL", "FROM_SYMBOL", "FULL_SYMBOL", "FULLTEXT_SYMBOL", 
                      "FUNCTION_SYMBOL", "GET_SYMBOL", "GENERAL_SYMBOL", 
                      "GENERATED_SYMBOL", "GROUP_REPLICATION_SYMBOL", "GEOMETRYCOLLECTION_SYMBOL", 
                      "GEOMETRY_SYMBOL", "GET_FORMAT_SYMBOL", "GLOBAL_SYMBOL", 
                      "GRANT_SYMBOL", "GRANTS_SYMBOL", "GROUP_SYMBOL", "GROUP_CONCAT_SYMBOL", 
                      "HANDLER_SYMBOL", "HASH_SYMBOL", "HAVING_SYMBOL", 
                      "HELP_SYMBOL", "HIGH_PRIORITY_SYMBOL", "HOST_SYMBOL", 
                      "HOSTS_SYMBOL", "HOUR_MICROSECOND_SYMBOL", "HOUR_MINUTE_SYMBOL", 
                      "HOUR_SECOND_SYMBOL", "HOUR_SYMBOL", "IDENTIFIED_SYMBOL", 
                      "IF_SYMBOL", "IGNORE_SYMBOL", "IGNORE_SERVER_IDS_SYMBOL", 
                      "IMPORT_SYMBOL", "INDEXES_SYMBOL", "INDEX_SYMBOL", 
                      "INFILE_SYMBOL", "INITIAL_SIZE_SYMBOL", "INNER_SYMBOL", 
                      "INOUT_SYMBOL", "INSENSITIVE_SYMBOL", "INSERT_SYMBOL", 
                      "INSERT_METHOD_SYMBOL", "INSTANCE_SYMBOL", "INSTALL_SYMBOL", 
                      "INTEGER_SYMBOL", "INTERVAL_SYMBOL", "INTO_SYMBOL", 
                      "INT_SYMBOL", "INVOKER_SYMBOL", "IN_SYMBOL", "IO_AFTER_GTIDS_SYMBOL", 
                      "IO_BEFORE_GTIDS_SYMBOL", "IO_THREAD_SYMBOL", "IO_SYMBOL", 
                      "IPC_SYMBOL", "IS_SYMBOL", "ISOLATION_SYMBOL", "ISSUER_SYMBOL", 
                      "ITERATE_SYMBOL", "JOIN_SYMBOL", "JSON_SYMBOL", "KEYS_SYMBOL", 
                      "KEY_BLOCK_SIZE_SYMBOL", "KEY_SYMBOL", "KILL_SYMBOL", 
                      "LANGUAGE_SYMBOL", "LAST_SYMBOL", "LEADING_SYMBOL", 
                      "LEAVES_SYMBOL", "LEAVE_SYMBOL", "LEFT_SYMBOL", "LESS_SYMBOL", 
                      "LEVEL_SYMBOL", "LIKE_SYMBOL", "LIMIT_SYMBOL", "LINEAR_SYMBOL", 
                      "LINES_SYMBOL", "LINESTRING_SYMBOL", "LIST_SYMBOL", 
                      "LOAD_SYMBOL", "LOCALTIME_SYMBOL", "LOCALTIMESTAMP_SYMBOL", 
                      "LOCAL_SYMBOL", "LOCATOR_SYMBOL", "LOCKS_SYMBOL", 
                      "LOCK_SYMBOL", "LOGFILE_SYMBOL", "LOGS_SYMBOL", "LONGBLOB_SYMBOL", 
                      "LONGTEXT_SYMBOL", "LONG_NUM_SYMBOL", "LONG_SYMBOL", 
                      "LOOP_SYMBOL", "LOW_PRIORITY_SYMBOL", "MASTER_AUTO_POSITION_SYMBOL", 
                      "MASTER_BIND_SYMBOL", "MASTER_CONNECT_RETRY_SYMBOL", 
                      "MASTER_DELAY_SYMBOL", "MASTER_HOST_SYMBOL", "MASTER_LOG_FILE_SYMBOL", 
                      "MASTER_LOG_POS_SYMBOL", "MASTER_PASSWORD_SYMBOL", 
                      "MASTER_PORT_SYMBOL", "MASTER_RETRY_COUNT_SYMBOL", 
                      "MASTER_SERVER_ID_SYMBOL", "MASTER_SSL_CAPATH_SYMBOL", 
                      "MASTER_SSL_CA_SYMBOL", "MASTER_SSL_CERT_SYMBOL", 
                      "MASTER_SSL_CIPHER_SYMBOL", "MASTER_SSL_CRL_SYMBOL", 
                      "MASTER_SSL_CRLPATH_SYMBOL", "MASTER_SSL_KEY_SYMBOL", 
                      "MASTER_SSL_SYMBOL", "MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL", 
                      "MASTER_SYMBOL", "MASTER_TLS_VERSION_SYMBOL", "MASTER_USER_SYMBOL", 
                      "MASTER_HEARTBEAT_PERIOD_SYMBOL", "MATCH_SYMBOL", 
                      "MAX_CONNECTIONS_PER_HOUR_SYMBOL", "MAX_QUERIES_PER_HOUR_SYMBOL", 
                      "MAX_ROWS_SYMBOL", "MAX_SIZE_SYMBOL", "MAX_STATEMENT_TIME_SYMBOL", 
                      "MAX_SYMBOL", "MAX_UPDATES_PER_HOUR_SYMBOL", "MAX_USER_CONNECTIONS_SYMBOL", 
                      "MAXVALUE_SYMBOL", "MEDIUMBLOB_SYMBOL", "MEDIUMINT_SYMBOL", 
                      "MEDIUMTEXT_SYMBOL", "MEDIUM_SYMBOL", "MEMORY_SYMBOL", 
                      "MERGE_SYMBOL", "MESSAGE_TEXT_SYMBOL", "MICROSECOND_SYMBOL", 
                      "MID_SYMBOL", "MIDDLEINT_SYMBOL", "MIGRATE_SYMBOL", 
                      "MINUTE_MICROSECOND_SYMBOL", "MINUTE_SECOND_SYMBOL", 
                      "MINUTE_SYMBOL", "MIN_ROWS_SYMBOL", "MIN_SYMBOL", 
                      "MODE_SYMBOL", "MODIFIES_SYMBOL", "MODIFY_SYMBOL", 
                      "MOD_SYMBOL", "MONTH_SYMBOL", "MULTILINESTRING_SYMBOL", 
                      "MULTIPOINT_SYMBOL", "MULTIPOLYGON_SYMBOL", "MUTEX_SYMBOL", 
                      "MYSQL_ERRNO_SYMBOL", "NAMES_SYMBOL", "NAME_SYMBOL", 
                      "NATIONAL_SYMBOL", "NATURAL_SYMBOL", "NCHAR_STRING_SYMBOL", 
                      "NCHAR_SYMBOL", "NDB_SYMBOL", "NDBCLUSTER_SYMBOL", 
                      "NEG_SYMBOL", "NEVER_SYMBOL", "NEW_SYMBOL", "NEXT_SYMBOL", 
                      "NODEGROUP_SYMBOL", "NONE_SYMBOL", "NONBLOCKING_SYMBOL", 
                      "NOT_SYMBOL", "NOW_SYMBOL", "NO_SYMBOL", "NO_WAIT_SYMBOL", 
                      "NO_WRITE_TO_BINLOG_SYMBOL", "NULL_SYMBOL", "NUMBER_SYMBOL", 
                      "NUMERIC_SYMBOL", "NVARCHAR_SYMBOL", "OFFLINE_SYMBOL", 
                      "OFFSET_SYMBOL", "OLD_PASSWORD_SYMBOL", "ON_SYMBOL", 
                      "ONE_SYMBOL", "ONLINE_SYMBOL", "ONLY_SYMBOL", "OPEN_SYMBOL", 
                      "OPTIMIZE_SYMBOL", "OPTIMIZER_COSTS_SYMBOL", "OPTIONS_SYMBOL", 
                      "OPTION_SYMBOL", "OPTIONALLY_SYMBOL", "ORDER_SYMBOL", 
                      "OR_SYMBOL", "OUTER_SYMBOL", "OUTFILE_SYMBOL", "OUT_SYMBOL", 
                      "OWNER_SYMBOL", "PACK_KEYS_SYMBOL", "PAGE_SYMBOL", 
                      "PARSER_SYMBOL", "PARTIAL_SYMBOL", "PARTITIONING_SYMBOL", 
                      "PARTITIONS_SYMBOL", "PARTITION_SYMBOL", "PASSWORD_SYMBOL", 
                      "PHASE_SYMBOL", "PLUGINS_SYMBOL", "PLUGIN_DIR_SYMBOL", 
                      "PLUGIN_SYMBOL", "POINT_SYMBOL", "POLYGON_SYMBOL", 
                      "PORT_SYMBOL", "POSITION_SYMBOL", "PRECEDES_SYMBOL", 
                      "PRECISION_SYMBOL", "PREPARE_SYMBOL", "PRESERVE_SYMBOL", 
                      "PREV_SYMBOL", "PRIMARY_SYMBOL", "PRIVILEGES_SYMBOL", 
                      "PROCEDURE_SYMBOL", "PROCESS_SYMBOL", "PROCESSLIST_SYMBOL", 
                      "PROFILE_SYMBOL", "PROFILES_SYMBOL", "PROXY_SYMBOL", 
                      "PURGE_SYMBOL", "QUARTER_SYMBOL", "QUERY_SYMBOL", 
                      "QUICK_SYMBOL", "RANGE_SYMBOL", "READS_SYMBOL", "READ_ONLY_SYMBOL", 
                      "READ_SYMBOL", "READ_WRITE_SYMBOL", "REAL_SYMBOL", 
                      "REBUILD_SYMBOL", "RECOVER_SYMBOL", "REDOFILE_SYMBOL", 
                      "REDO_BUFFER_SIZE_SYMBOL", "REDUNDANT_SYMBOL", "REFERENCES_SYMBOL", 
                      "REGEXP_SYMBOL", "RELAY_SYMBOL", "RELAYLOG_SYMBOL", 
                      "RELAY_LOG_FILE_SYMBOL", "RELAY_LOG_POS_SYMBOL", "RELAY_THREAD_SYMBOL", 
                      "RELEASE_SYMBOL", "RELOAD_SYMBOL", "REMOVE_SYMBOL", 
                      "RENAME_SYMBOL", "REORGANIZE_SYMBOL", "REPAIR_SYMBOL", 
                      "REPEATABLE_SYMBOL", "REPEAT_SYMBOL", "REPLACE_SYMBOL", 
                      "REPLICATION_SYMBOL", "REPLICATE_DO_DB_SYMBOL", "REPLICATE_IGNORE_DB_SYMBOL", 
                      "REPLICATE_DO_TABLE_SYMBOL", "REPLICATE_IGNORE_TABLE_SYMBOL", 
                      "REPLICATE_WILD_DO_TABLE_SYMBOL", "REPLICATE_WILD_IGNORE_TABLE_SYMBOL", 
                      "REPLICATE_REWRITE_DB_SYMBOL", "REQUIRE_SYMBOL", "RESET_SYMBOL", 
                      "RESIGNAL_SYMBOL", "RESTORE_SYMBOL", "RESTRICT_SYMBOL", 
                      "RESUME_SYMBOL", "RETURNED_SQLSTATE_SYMBOL", "RETURNS_SYMBOL", 
                      "RETURN_SYMBOL", "REVERSE_SYMBOL", "REVOKE_SYMBOL", 
                      "RIGHT_SYMBOL", "RLIKE_SYMBOL", "ROLLBACK_SYMBOL", 
                      "ROLLUP_SYMBOL", "ROTATE_SYMBOL", "ROUTINE_SYMBOL", 
                      "ROWS_SYMBOL", "ROW_COUNT_SYMBOL", "ROW_FORMAT_SYMBOL", 
                      "ROW_SYMBOL", "RTREE_SYMBOL", "SAVEPOINT_SYMBOL", 
                      "SCHEDULE_SYMBOL", "SCHEMA_SYMBOL", "SCHEMA_NAME_SYMBOL", 
                      "SCHEMAS_SYMBOL", "SECOND_MICROSECOND_SYMBOL", "SECOND_SYMBOL", 
                      "SECURITY_SYMBOL", "SELECT_SYMBOL", "SENSITIVE_SYMBOL", 
                      "SEPARATOR_SYMBOL", "SERIALIZABLE_SYMBOL", "SERIAL_SYMBOL", 
                      "SESSION_SYMBOL", "SERVER_SYMBOL", "SERVER_OPTIONS_SYMBOL", 
                      "SESSION_USER_SYMBOL", "SET_SYMBOL", "SET_VAR_SYMBOL", 
                      "SHARE_SYMBOL", "SHOW_SYMBOL", "SHUTDOWN_SYMBOL", 
                      "SIGNAL_SYMBOL", "SIGNED_SYMBOL", "SIMPLE_SYMBOL", 
                      "SLAVE_SYMBOL", "SLOW_SYMBOL", "SMALLINT_SYMBOL", 
                      "SNAPSHOT_SYMBOL", "SOME_SYMBOL", "SOCKET_SYMBOL", 
                      "SONAME_SYMBOL", "SOUNDS_SYMBOL", "SOURCE_SYMBOL", 
                      "SPATIAL_SYMBOL", "SPECIFIC_SYMBOL", "SQLEXCEPTION_SYMBOL", 
                      "SQLSTATE_SYMBOL", "SQLWARNING_SYMBOL", "SQL_AFTER_GTIDS_SYMBOL", 
                      "SQL_AFTER_MTS_GAPS_SYMBOL", "SQL_BEFORE_GTIDS_SYMBOL", 
                      "SQL_BIG_RESULT_SYMBOL", "SQL_BUFFER_RESULT_SYMBOL", 
                      "SQL_CACHE_SYMBOL", "SQL_CALC_FOUND_ROWS_SYMBOL", 
                      "SQL_NO_CACHE_SYMBOL", "SQL_SMALL_RESULT_SYMBOL", 
                      "SQL_SYMBOL", "SQL_THREAD_SYMBOL", "SSL_SYMBOL", "STACKED_SYMBOL", 
                      "STARTING_SYMBOL", "STARTS_SYMBOL", "START_SYMBOL", 
                      "STATS_AUTO_RECALC_SYMBOL", "STATS_PERSISTENT_SYMBOL", 
                      "STATS_SAMPLE_PAGES_SYMBOL", "STATUS_SYMBOL", "STDDEV_SAMP_SYMBOL", 
                      "STDDEV_SYMBOL", "STDDEV_POP_SYMBOL", "STD_SYMBOL", 
                      "STOP_SYMBOL", "STORAGE_SYMBOL", "STORED_SYMBOL", 
                      "STRAIGHT_JOIN_SYMBOL", "STRING_SYMBOL", "SUBCLASS_ORIGIN_SYMBOL", 
                      "SUBDATE_SYMBOL", "SUBJECT_SYMBOL", "SUBPARTITIONS_SYMBOL", 
                      "SUBPARTITION_SYMBOL", "SUBSTR_SYMBOL", "SUBSTRING_SYMBOL", 
                      "SUM_SYMBOL", "SUPER_SYMBOL", "SUSPEND_SYMBOL", "SWAPS_SYMBOL", 
                      "SWITCHES_SYMBOL", "SYSDATE_SYMBOL", "SYSTEM_USER_SYMBOL", 
                      "TABLES_SYMBOL", "TABLESPACE_SYMBOL", "TABLE_REF_PRIORITY_SYMBOL", 
                      "TABLE_SYMBOL", "TABLE_CHECKSUM_SYMBOL", "TABLE_NAME_SYMBOL", 
                      "TEMPORARY_SYMBOL", "TEMPTABLE_SYMBOL", "TERMINATED_SYMBOL", 
                      "TEXT_SYMBOL", "THAN_SYMBOL", "THEN_SYMBOL", "TIMESTAMP_SYMBOL", 
                      "TIMESTAMP_ADD_SYMBOL", "TIMESTAMP_DIFF_SYMBOL", "TIME_SYMBOL", 
                      "TINYBLOB_SYMBOL", "TINYINT_SYMBOL", "TINYTEXT_SYMBOL", 
                      "TO_SYMBOL", "TRAILING_SYMBOL", "TRANSACTION_SYMBOL", 
                      "TRIGGERS_SYMBOL", "TRIGGER_SYMBOL", "TRIM_SYMBOL", 
                      "TRUE_SYMBOL", "TRUNCATE_SYMBOL", "TYPES_SYMBOL", 
                      "TYPE_SYMBOL", "UDF_RETURNS_SYMBOL", "UNCOMMITTED_SYMBOL", 
                      "UNDEFINED_SYMBOL", "UNDOFILE_SYMBOL", "UNDO_BUFFER_SIZE_SYMBOL", 
                      "UNDO_SYMBOL", "UNICODE_SYMBOL", "UNINSTALL_SYMBOL", 
                      "UNION_SYMBOL", "UNIQUE_SYMBOL", "UNKNOWN_SYMBOL", 
                      "UNLOCK_SYMBOL", "UNSIGNED_SYMBOL", "UNTIL_SYMBOL", 
                      "UPDATE_SYMBOL", "UPGRADE_SYMBOL", "USAGE_SYMBOL", 
                      "USER_RESOURCES_SYMBOL", "USER_SYMBOL", "USE_FRM_SYMBOL", 
                      "USE_SYMBOL", "USING_SYMBOL", "UTC_DATE_SYMBOL", "UTC_TIMESTAMP_SYMBOL", 
                      "UTC_TIME_SYMBOL", "VALIDATION_SYMBOL", "VALUES_SYMBOL", 
                      "VALUE_SYMBOL", "VARBINARY_SYMBOL", "VARCHAR_SYMBOL", 
                      "VARCHARACTER_SYMBOL", "VARIABLES_SYMBOL", "VARIANCE_SYMBOL", 
                      "VARYING_SYMBOL", "VAR_POP_SYMBOL", "VAR_SAMP_SYMBOL", 
                      "VIEW_SYMBOL", "VIRTUAL_SYMBOL", "WAIT_SYMBOL", "WARNINGS_SYMBOL", 
                      "WEEK_SYMBOL", "WEIGHT_STRING_SYMBOL", "WHEN_SYMBOL", 
                      "WHERE_SYMBOL", "WHILE_SYMBOL", "WITH_SYMBOL", "WITHOUT_SYMBOL", 
                      "WORK_SYMBOL", "WRAPPER_SYMBOL", "WRITE_SYMBOL", "X509_SYMBOL", 
                      "XA_SYMBOL", "XID_SYMBOL", "XML_SYMBOL", "XOR_SYMBOL", 
                      "YEAR_MONTH_SYMBOL", "YEAR_SYMBOL", "ZEROFILL_SYMBOL", 
                      "PERSIST_SYMBOL", "ROLE_SYMBOL", "ADMIN_SYMBOL", "INVISIBLE_SYMBOL", 
                      "VISIBLE_SYMBOL", "EXCEPT_SYMBOL", "COMPONENT_SYMBOL", 
                      "RECURSIVE_SYMBOL", "JSON_OBJECTAGG_SYMBOL", "JSON_ARRAYAGG_SYMBOL", 
                      "OF_SYMBOL", "SKIP_SYMBOL", "LOCKED_SYMBOL", "NOWAIT_SYMBOL", 
                      "GROUPING_SYMBOL", "PERSIST_ONLY_SYMBOL", "HISTOGRAM_SYMBOL", 
                      "BUCKETS_SYMBOL", "REMOTE_SYMBOL", "CLONE_SYMBOL", 
                      "CUME_DIST_SYMBOL", "DENSE_RANK_SYMBOL", "EXCLUDE_SYMBOL", 
                      "FIRST_VALUE_SYMBOL", "FOLLOWING_SYMBOL", "GROUPS_SYMBOL", 
                      "LAG_SYMBOL", "LAST_VALUE_SYMBOL", "LEAD_SYMBOL", 
                      "NTH_VALUE_SYMBOL", "NTILE_SYMBOL", "NULLS_SYMBOL", 
                      "OTHERS_SYMBOL", "OVER_SYMBOL", "PERCENT_RANK_SYMBOL", 
                      "PRECEDING_SYMBOL", "RANK_SYMBOL", "RESPECT_SYMBOL", 
                      "ROW_NUMBER_SYMBOL", "TIES_SYMBOL", "UNBOUNDED_SYMBOL", 
                      "WINDOW_SYMBOL", "EMPTY_SYMBOL", "JSON_TABLE_SYMBOL", 
                      "NESTED_SYMBOL", "ORDINALITY_SYMBOL", "PATH_SYMBOL", 
                      "HISTORY_SYMBOL", "REUSE_SYMBOL", "SRID_SYMBOL", "THREAD_PRIORITY_SYMBOL", 
                      "RESOURCE_SYMBOL", "SYSTEM_SYMBOL", "VCPU_SYMBOL", 
                      "MASTER_PUBLIC_KEY_PATH_SYMBOL", "GET_MASTER_PUBLIC_KEY_SYMBOL", 
                      "RESTART_SYMBOL", "DEFINITION_SYMBOL", "DESCRIPTION_SYMBOL", 
                      "ORGANIZATION_SYMBOL", "REFERENCE_SYMBOL", "OPTIONAL_SYMBOL", 
                      "SECONDARY_SYMBOL", "SECONDARY_ENGINE_SYMBOL", "SECONDARY_LOAD_SYMBOL", 
                      "SECONDARY_UNLOAD_SYMBOL", "ACTIVE_SYMBOL", "INACTIVE_SYMBOL", 
                      "LATERAL_SYMBOL", "RETAIN_SYMBOL", "OLD_SYMBOL", "NETWORK_NAMESPACE_SYMBOL", 
                      "ENFORCED_SYMBOL", "ARRAY_SYMBOL", "OJ_SYMBOL", "MEMBER_SYMBOL", 
                      "RANDOM_SYMBOL", "MASTER_COMPRESSION_ALGORITHM_SYMBOL", 
                      "MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL", "PRIVILEGE_CHECKS_USER_SYMBOL", 
                      "MASTER_TLS_CIPHERSUITES_SYMBOL", "REQUIRE_ROW_FORMAT_SYMBOL", 
                      "PASSWORD_LOCK_TIME_SYMBOL", "FAILED_LOGIN_ATTEMPTS_SYMBOL", 
                      "REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL", "STREAM_SYMBOL", 
                      "OFF_SYMBOL", "NOT2_SYMBOL", "CONCAT_PIPES_SYMBOL", 
                      "INT_NUMBER", "LONG_NUMBER", "ULONGLONG_NUMBER", "EQUAL_OPERATOR", 
                      "ASSIGN_OPERATOR", "NULL_SAFE_EQUAL_OPERATOR", "GREATER_OR_EQUAL_OPERATOR", 
                      "GREATER_THAN_OPERATOR", "LESS_OR_EQUAL_OPERATOR", 
                      "LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR", "PLUS_OPERATOR", 
                      "MINUS_OPERATOR", "MULT_OPERATOR", "DIV_OPERATOR", 
                      "MOD_OPERATOR", "LOGICAL_NOT_OPERATOR", "BITWISE_NOT_OPERATOR", 
                      "SHIFT_LEFT_OPERATOR", "SHIFT_RIGHT_OPERATOR", "LOGICAL_AND_OPERATOR", 
                      "BITWISE_AND_OPERATOR", "BITWISE_XOR_OPERATOR", "LOGICAL_OR_OPERATOR", 
                      "BITWISE_OR_OPERATOR", "DOT_SYMBOL", "COMMA_SYMBOL", 
                      "SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL", 
                      "CLOSE_PAR_SYMBOL", "OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", 
                      "UNDERLINE_SYMBOL", "JSON_SEPARATOR_SYMBOL", "JSON_UNQUOTED_SEPARATOR_SYMBOL", 
                      "AT_SIGN_SYMBOL", "AT_TEXT_SUFFIX", "AT_AT_SIGN_SYMBOL", 
                      "NULL2_SYMBOL", "PARAM_MARKER", "HEX_NUMBER", "BIN_NUMBER", 
                      "DECIMAL_NUMBER", "FLOAT_NUMBER", "WHITESPACE", "INVALID_INPUT", 
                      "UNDERSCORE_CHARSET", "IDENTIFIER", "NCHAR_TEXT", 
                      "BACK_TICK_QUOTED_ID", "DOUBLE_QUOTED_TEXT", "SINGLE_QUOTED_TEXT", 
                      "VERSION_COMMENT_START", "MYSQL_COMMENT_START", "VERSION_COMMENT_END", 
                      "BLOCK_COMMENT", "POUND_COMMENT", "DASHDASH_COMMENT", 
                      "NOT_EQUAL2_OPERATOR" ]

    RULE_sqlProgram = 0
    RULE_statement = 1
    RULE_simpleStatement = 2
    RULE_alterStatement = 3
    RULE_alterDatabase = 4
    RULE_alterEvent = 5
    RULE_alterLogfileGroup = 6
    RULE_alterLogfileGroupOptions = 7
    RULE_alterLogfileGroupOption = 8
    RULE_alterServer = 9
    RULE_alterTable = 10
    RULE_alterTableActions = 11
    RULE_alterCommandList = 12
    RULE_alterCommandsModifierList = 13
    RULE_standaloneAlterCommands = 14
    RULE_alterPartition = 15
    RULE_alterList = 16
    RULE_alterCommandsModifier = 17
    RULE_alterListItem = 18
    RULE_place = 19
    RULE_restrict = 20
    RULE_alterOrderList = 21
    RULE_alterAlgorithmOption = 22
    RULE_alterLockOption = 23
    RULE_indexLockAndAlgorithm = 24
    RULE_withValidation = 25
    RULE_removePartitioning = 26
    RULE_allOrPartitionNameList = 27
    RULE_alterTablespace = 28
    RULE_alterUndoTablespace = 29
    RULE_undoTableSpaceOptions = 30
    RULE_undoTableSpaceOption = 31
    RULE_alterTablespaceOptions = 32
    RULE_alterTablespaceOption = 33
    RULE_changeTablespaceOption = 34
    RULE_alterView = 35
    RULE_viewTail = 36
    RULE_viewSelect = 37
    RULE_viewCheckOption = 38
    RULE_createStatement = 39
    RULE_createDatabase = 40
    RULE_createDatabaseOption = 41
    RULE_createTable = 42
    RULE_tableElementList = 43
    RULE_tableElement = 44
    RULE_duplicateAsQueryExpression = 45
    RULE_queryExpressionOrParens = 46
    RULE_createRoutine = 47
    RULE_createProcedure = 48
    RULE_createFunction = 49
    RULE_createUdf = 50
    RULE_routineCreateOption = 51
    RULE_routineAlterOptions = 52
    RULE_routineOption = 53
    RULE_createIndex = 54
    RULE_indexNameAndType = 55
    RULE_createIndexTarget = 56
    RULE_createLogfileGroup = 57
    RULE_logfileGroupOptions = 58
    RULE_logfileGroupOption = 59
    RULE_createServer = 60
    RULE_serverOptions = 61
    RULE_serverOption = 62
    RULE_createTablespace = 63
    RULE_createUndoTablespace = 64
    RULE_tsDataFileName = 65
    RULE_tsDataFile = 66
    RULE_tablespaceOptions = 67
    RULE_tablespaceOption = 68
    RULE_tsOptionInitialSize = 69
    RULE_tsOptionUndoRedoBufferSize = 70
    RULE_tsOptionAutoextendSize = 71
    RULE_tsOptionMaxSize = 72
    RULE_tsOptionExtentSize = 73
    RULE_tsOptionNodegroup = 74
    RULE_tsOptionEngine = 75
    RULE_tsOptionWait = 76
    RULE_tsOptionComment = 77
    RULE_tsOptionFileblockSize = 78
    RULE_tsOptionEncryption = 79
    RULE_createView = 80
    RULE_viewReplaceOrAlgorithm = 81
    RULE_viewAlgorithm = 82
    RULE_viewSuid = 83
    RULE_createTrigger = 84
    RULE_triggerFollowsPrecedesClause = 85
    RULE_createEvent = 86
    RULE_createRole = 87
    RULE_createSpatialReference = 88
    RULE_srsAttribute = 89
    RULE_dropStatement = 90
    RULE_dropDatabase = 91
    RULE_dropEvent = 92
    RULE_dropFunction = 93
    RULE_dropProcedure = 94
    RULE_dropIndex = 95
    RULE_dropLogfileGroup = 96
    RULE_dropLogfileGroupOption = 97
    RULE_dropServer = 98
    RULE_dropTable = 99
    RULE_dropTableSpace = 100
    RULE_dropTrigger = 101
    RULE_dropView = 102
    RULE_dropRole = 103
    RULE_dropSpatialReference = 104
    RULE_dropUndoTablespace = 105
    RULE_renameTableStatement = 106
    RULE_renamePair = 107
    RULE_truncateTableStatement = 108
    RULE_importStatement = 109
    RULE_callStatement = 110
    RULE_deleteStatement = 111
    RULE_partitionDelete = 112
    RULE_deleteStatementOption = 113
    RULE_doStatement = 114
    RULE_handlerStatement = 115
    RULE_handlerReadOrScan = 116
    RULE_insertStatement = 117
    RULE_insertLockOption = 118
    RULE_insertFromConstructor = 119
    RULE_fields = 120
    RULE_insertValues = 121
    RULE_insertQueryExpression = 122
    RULE_valueList = 123
    RULE_values = 124
    RULE_valuesReference = 125
    RULE_insertUpdateList = 126
    RULE_loadStatement = 127
    RULE_dataOrXml = 128
    RULE_xmlRowsIdentifiedBy = 129
    RULE_loadDataFileTail = 130
    RULE_loadDataFileTargetList = 131
    RULE_fieldOrVariableList = 132
    RULE_replaceStatement = 133
    RULE_selectStatement = 134
    RULE_selectStatementWithInto = 135
    RULE_queryExpression = 136
    RULE_queryExpressionBody = 137
    RULE_queryExpressionParens = 138
    RULE_queryPrimary = 139
    RULE_querySpecification = 140
    RULE_subquery = 141
    RULE_querySpecOption = 142
    RULE_limitClause = 143
    RULE_simpleLimitClause = 144
    RULE_limitOptions = 145
    RULE_limitOption = 146
    RULE_intoClause = 147
    RULE_procedureAnalyseClause = 148
    RULE_havingClause = 149
    RULE_windowClause = 150
    RULE_windowDefinition = 151
    RULE_windowSpec = 152
    RULE_windowSpecDetails = 153
    RULE_windowFrameClause = 154
    RULE_windowFrameUnits = 155
    RULE_windowFrameExtent = 156
    RULE_windowFrameStart = 157
    RULE_windowFrameBetween = 158
    RULE_windowFrameBound = 159
    RULE_windowFrameExclusion = 160
    RULE_withClause = 161
    RULE_commonTableExpression = 162
    RULE_groupByClause = 163
    RULE_olapOption = 164
    RULE_orderClause = 165
    RULE_direction = 166
    RULE_fromClause = 167
    RULE_tableReferenceList = 168
    RULE_tableValueConstructor = 169
    RULE_explicitTable = 170
    RULE_rowValueExplicit = 171
    RULE_selectOption = 172
    RULE_lockingClauseList = 173
    RULE_lockingClause = 174
    RULE_lockStrengh = 175
    RULE_lockedRowAction = 176
    RULE_selectItemList = 177
    RULE_selectItem = 178
    RULE_selectAlias = 179
    RULE_whereClause = 180
    RULE_tableReference = 181
    RULE_escapedTableReference = 182
    RULE_joinedTable = 183
    RULE_naturalJoinType = 184
    RULE_innerJoinType = 185
    RULE_outerJoinType = 186
    RULE_tableFactor = 187
    RULE_singleTable = 188
    RULE_singleTableParens = 189
    RULE_derivedTable = 190
    RULE_tableReferenceListParens = 191
    RULE_tableFunction = 192
    RULE_columnsClause = 193
    RULE_jtColumn = 194
    RULE_onEmptyOrError = 195
    RULE_onEmpty = 196
    RULE_onError = 197
    RULE_jtOnResponse = 198
    RULE_unionOption = 199
    RULE_tableAlias = 200
    RULE_indexHintList = 201
    RULE_indexHint = 202
    RULE_indexHintType = 203
    RULE_keyOrIndex = 204
    RULE_constraintKeyType = 205
    RULE_indexHintClause = 206
    RULE_indexList = 207
    RULE_indexListElement = 208
    RULE_updateStatement = 209
    RULE_transactionOrLockingStatement = 210
    RULE_transactionStatement = 211
    RULE_beginWork = 212
    RULE_transactionCharacteristic = 213
    RULE_savepointStatement = 214
    RULE_lockStatement = 215
    RULE_lockItem = 216
    RULE_lockOption = 217
    RULE_xaStatement = 218
    RULE_xaConvert = 219
    RULE_xid = 220
    RULE_replicationStatement = 221
    RULE_resetOption = 222
    RULE_masterResetOptions = 223
    RULE_replicationLoad = 224
    RULE_changeMaster = 225
    RULE_changeMasterOptions = 226
    RULE_masterOption = 227
    RULE_privilegeCheckDef = 228
    RULE_tablePrimaryKeyCheckDef = 229
    RULE_masterTlsCiphersuitesDef = 230
    RULE_masterFileDef = 231
    RULE_serverIdList = 232
    RULE_changeReplication = 233
    RULE_filterDefinition = 234
    RULE_filterDbList = 235
    RULE_filterTableList = 236
    RULE_filterStringList = 237
    RULE_filterWildDbTableString = 238
    RULE_filterDbPairList = 239
    RULE_slave = 240
    RULE_slaveUntilOptions = 241
    RULE_slaveConnectionOptions = 242
    RULE_slaveThreadOptions = 243
    RULE_slaveThreadOption = 244
    RULE_groupReplication = 245
    RULE_preparedStatement = 246
    RULE_executeStatement = 247
    RULE_executeVarList = 248
    RULE_cloneStatement = 249
    RULE_dataDirSSL = 250
    RULE_ssl = 251
    RULE_accountManagementStatement = 252
    RULE_alterUser = 253
    RULE_alterUserTail = 254
    RULE_userFunction = 255
    RULE_createUser = 256
    RULE_createUserTail = 257
    RULE_defaultRoleClause = 258
    RULE_requireClause = 259
    RULE_connectOptions = 260
    RULE_accountLockPasswordExpireOptions = 261
    RULE_dropUser = 262
    RULE_grant = 263
    RULE_grantTargetList = 264
    RULE_grantOptions = 265
    RULE_exceptRoleList = 266
    RULE_withRoles = 267
    RULE_grantAs = 268
    RULE_versionedRequireClause = 269
    RULE_renameUser = 270
    RULE_revoke = 271
    RULE_onTypeTo = 272
    RULE_aclType = 273
    RULE_roleOrPrivilegesList = 274
    RULE_roleOrPrivilege = 275
    RULE_grantIdentifier = 276
    RULE_requireList = 277
    RULE_requireListElement = 278
    RULE_grantOption = 279
    RULE_setRole = 280
    RULE_roleList = 281
    RULE_role = 282
    RULE_tableAdministrationStatement = 283
    RULE_histogram = 284
    RULE_checkOption = 285
    RULE_repairType = 286
    RULE_installUninstallStatment = 287
    RULE_setStatement = 288
    RULE_startOptionValueList = 289
    RULE_transactionCharacteristics = 290
    RULE_transactionAccessMode = 291
    RULE_isolationLevel = 292
    RULE_optionValueListContinued = 293
    RULE_optionValueNoOptionType = 294
    RULE_optionValue = 295
    RULE_setSystemVariable = 296
    RULE_startOptionValueListFollowingOptionType = 297
    RULE_optionValueFollowingOptionType = 298
    RULE_setExprOrDefault = 299
    RULE_showStatement = 300
    RULE_showCommandType = 301
    RULE_nonBlocking = 302
    RULE_fromOrIn = 303
    RULE_inDb = 304
    RULE_profileType = 305
    RULE_otherAdministrativeStatement = 306
    RULE_keyCacheListOrParts = 307
    RULE_keyCacheList = 308
    RULE_assignToKeycache = 309
    RULE_assignToKeycachePartition = 310
    RULE_cacheKeyList = 311
    RULE_keyUsageElement = 312
    RULE_keyUsageList = 313
    RULE_flushOption = 314
    RULE_logType = 315
    RULE_flushTables = 316
    RULE_flushTablesOptions = 317
    RULE_preloadTail = 318
    RULE_preloadList = 319
    RULE_preloadKeys = 320
    RULE_adminPartition = 321
    RULE_resourceGroupManagement = 322
    RULE_createResourceGroup = 323
    RULE_resourceGroupVcpuList = 324
    RULE_vcpuNumOrRange = 325
    RULE_resourceGroupPriority = 326
    RULE_resourceGroupEnableDisable = 327
    RULE_alterResourceGroup = 328
    RULE_setResourceGroup = 329
    RULE_threadIdList = 330
    RULE_dropResourceGroup = 331
    RULE_utilityStatement = 332
    RULE_describeStatement = 333
    RULE_explainStatement = 334
    RULE_explainableStatement = 335
    RULE_helpCommand = 336
    RULE_useCommand = 337
    RULE_restartServer = 338
    RULE_expr = 339
    RULE_boolPri = 340
    RULE_compOp = 341
    RULE_predicate = 342
    RULE_predicateOperations = 343
    RULE_bitExpr = 344
    RULE_simpleExpr = 345
    RULE_arrayCast = 346
    RULE_jsonOperator = 347
    RULE_sumExpr = 348
    RULE_groupingOperation = 349
    RULE_windowFunctionCall = 350
    RULE_windowingClause = 351
    RULE_leadLagInfo = 352
    RULE_nullTreatment = 353
    RULE_jsonFunction = 354
    RULE_inSumExpr = 355
    RULE_identListArg = 356
    RULE_identList = 357
    RULE_fulltextOptions = 358
    RULE_runtimeFunctionCall = 359
    RULE_geometryFunction = 360
    RULE_timeFunctionParameters = 361
    RULE_fractionalPrecision = 362
    RULE_weightStringLevels = 363
    RULE_weightStringLevelListItem = 364
    RULE_dateTimeTtype = 365
    RULE_trimFunction = 366
    RULE_substringFunction = 367
    RULE_functionCall = 368
    RULE_udfExprList = 369
    RULE_udfExpr = 370
    RULE_variable = 371
    RULE_userVariable = 372
    RULE_systemVariable = 373
    RULE_internalVariableName = 374
    RULE_whenExpression = 375
    RULE_thenExpression = 376
    RULE_elseExpression = 377
    RULE_castType = 378
    RULE_exprList = 379
    RULE_charset = 380
    RULE_notRule = 381
    RULE_not2Rule = 382
    RULE_interval = 383
    RULE_intervalTimeStamp = 384
    RULE_exprListWithParentheses = 385
    RULE_exprWithParentheses = 386
    RULE_simpleExprWithParentheses = 387
    RULE_orderList = 388
    RULE_orderExpression = 389
    RULE_groupList = 390
    RULE_groupingExpression = 391
    RULE_channel = 392
    RULE_compoundStatement = 393
    RULE_returnStatement = 394
    RULE_ifStatement = 395
    RULE_ifBody = 396
    RULE_thenStatement = 397
    RULE_compoundStatementList = 398
    RULE_caseStatement = 399
    RULE_elseStatement = 400
    RULE_labeledBlock = 401
    RULE_unlabeledBlock = 402
    RULE_label = 403
    RULE_beginEndBlock = 404
    RULE_labeledControl = 405
    RULE_unlabeledControl = 406
    RULE_loopBlock = 407
    RULE_whileDoBlock = 408
    RULE_repeatUntilBlock = 409
    RULE_spDeclarations = 410
    RULE_spDeclaration = 411
    RULE_variableDeclaration = 412
    RULE_conditionDeclaration = 413
    RULE_spCondition = 414
    RULE_sqlstate = 415
    RULE_handlerDeclaration = 416
    RULE_handlerCondition = 417
    RULE_cursorDeclaration = 418
    RULE_iterateStatement = 419
    RULE_leaveStatement = 420
    RULE_getDiagnostics = 421
    RULE_signalAllowedExpr = 422
    RULE_statementInformationItem = 423
    RULE_conditionInformationItem = 424
    RULE_signalInformationItemName = 425
    RULE_signalStatement = 426
    RULE_resignalStatement = 427
    RULE_signalInformationItem = 428
    RULE_cursorOpen = 429
    RULE_cursorClose = 430
    RULE_cursorFetch = 431
    RULE_schedule = 432
    RULE_columnDefinition = 433
    RULE_checkOrReferences = 434
    RULE_checkConstraint = 435
    RULE_constraintEnforcement = 436
    RULE_tableConstraintDef = 437
    RULE_constraintName = 438
    RULE_fieldDefinition = 439
    RULE_columnAttribute = 440
    RULE_columnFormat = 441
    RULE_storageMedia = 442
    RULE_gcolAttribute = 443
    RULE_references = 444
    RULE_deleteOption = 445
    RULE_keyList = 446
    RULE_keyPart = 447
    RULE_keyListWithExpression = 448
    RULE_keyPartOrExpression = 449
    RULE_keyListVariants = 450
    RULE_indexType = 451
    RULE_indexOption = 452
    RULE_commonIndexOption = 453
    RULE_visibility = 454
    RULE_indexTypeClause = 455
    RULE_fulltextIndexOption = 456
    RULE_spatialIndexOption = 457
    RULE_dataTypeDefinition = 458
    RULE_dataType = 459
    RULE_nchar = 460
    RULE_realType = 461
    RULE_fieldLength = 462
    RULE_fieldOptions = 463
    RULE_charsetWithOptBinary = 464
    RULE_ascii = 465
    RULE_unicode = 466
    RULE_wsNumCodepoints = 467
    RULE_typeDatetimePrecision = 468
    RULE_charsetName = 469
    RULE_collationName = 470
    RULE_createTableOptions = 471
    RULE_createTableOptionsSpaceSeparated = 472
    RULE_createTableOption = 473
    RULE_ternaryOption = 474
    RULE_defaultCollation = 475
    RULE_defaultEncryption = 476
    RULE_defaultCharset = 477
    RULE_partitionClause = 478
    RULE_partitionTypeDef = 479
    RULE_subPartitions = 480
    RULE_partitionKeyAlgorithm = 481
    RULE_partitionDefinitions = 482
    RULE_partitionDefinition = 483
    RULE_partitionValuesIn = 484
    RULE_partitionOption = 485
    RULE_subpartitionDefinition = 486
    RULE_partitionValueItemListParen = 487
    RULE_partitionValueItem = 488
    RULE_definerClause = 489
    RULE_ifExists = 490
    RULE_ifNotExists = 491
    RULE_procedureParameter = 492
    RULE_functionParameter = 493
    RULE_collate = 494
    RULE_typeWithOptCollate = 495
    RULE_schemaIdentifierPair = 496
    RULE_viewRefList = 497
    RULE_updateList = 498
    RULE_updateElement = 499
    RULE_charsetClause = 500
    RULE_fieldsClause = 501
    RULE_fieldTerm = 502
    RULE_linesClause = 503
    RULE_lineTerm = 504
    RULE_userList = 505
    RULE_createUserList = 506
    RULE_alterUserList = 507
    RULE_createUserEntry = 508
    RULE_alterUserEntry = 509
    RULE_retainCurrentPassword = 510
    RULE_discardOldPassword = 511
    RULE_replacePassword = 512
    RULE_userIdentifierOrText = 513
    RULE_user = 514
    RULE_likeClause = 515
    RULE_likeOrWhere = 516
    RULE_onlineOption = 517
    RULE_noWriteToBinLog = 518
    RULE_usePartition = 519
    RULE_fieldIdentifier = 520
    RULE_columnName = 521
    RULE_columnInternalRef = 522
    RULE_columnInternalRefList = 523
    RULE_columnRef = 524
    RULE_insertIdentifier = 525
    RULE_indexName = 526
    RULE_indexRef = 527
    RULE_tableWild = 528
    RULE_schemaName = 529
    RULE_schemaRef = 530
    RULE_procedureName = 531
    RULE_procedureRef = 532
    RULE_functionName = 533
    RULE_functionRef = 534
    RULE_triggerName = 535
    RULE_triggerRef = 536
    RULE_viewName = 537
    RULE_viewRef = 538
    RULE_tablespaceName = 539
    RULE_tablespaceRef = 540
    RULE_logfileGroupName = 541
    RULE_logfileGroupRef = 542
    RULE_eventName = 543
    RULE_eventRef = 544
    RULE_udfName = 545
    RULE_serverName = 546
    RULE_serverRef = 547
    RULE_engineRef = 548
    RULE_tableName = 549
    RULE_filterTableRef = 550
    RULE_tableRefWithWildcard = 551
    RULE_tableRef = 552
    RULE_tableRefList = 553
    RULE_tableAliasRefList = 554
    RULE_parameterName = 555
    RULE_labelIdentifier = 556
    RULE_labelRef = 557
    RULE_roleIdentifier = 558
    RULE_roleRef = 559
    RULE_pluginRef = 560
    RULE_componentRef = 561
    RULE_resourceGroupRef = 562
    RULE_windowName = 563
    RULE_pureIdentifier = 564
    RULE_identifier = 565
    RULE_identifierList = 566
    RULE_identifierListWithParentheses = 567
    RULE_qualifiedIdentifier = 568
    RULE_simpleIdentifier = 569
    RULE_dotIdentifier = 570
    RULE_ulong_number = 571
    RULE_real_ulong_number = 572
    RULE_ulonglong_number = 573
    RULE_real_ulonglong_number = 574
    RULE_literal = 575
    RULE_signedLiteral = 576
    RULE_stringList = 577
    RULE_textStringLiteral = 578
    RULE_textString = 579
    RULE_textStringHash = 580
    RULE_textLiteral = 581
    RULE_textStringNoLinebreak = 582
    RULE_textStringLiteralList = 583
    RULE_numLiteral = 584
    RULE_boolLiteral = 585
    RULE_nullLiteral = 586
    RULE_temporalLiteral = 587
    RULE_floatOptions = 588
    RULE_standardFloatOptions = 589
    RULE_precision = 590
    RULE_textOrIdentifier = 591
    RULE_lValueIdentifier = 592
    RULE_roleIdentifierOrText = 593
    RULE_sizeNumber = 594
    RULE_parentheses = 595
    RULE_equal = 596
    RULE_optionType = 597
    RULE_varIdentType = 598
    RULE_setVarIdentType = 599
    RULE_identifierKeyword = 600
    RULE_identifierKeywordsAmbiguous1RolesAndLabels = 601
    RULE_identifierKeywordsAmbiguous2Labels = 602
    RULE_labelKeyword = 603
    RULE_identifierKeywordsAmbiguous3Roles = 604
    RULE_identifierKeywordsUnambiguous = 605
    RULE_roleKeyword = 606
    RULE_lValueKeyword = 607
    RULE_identifierKeywordsAmbiguous4SystemVariables = 608
    RULE_roleOrIdentifierKeyword = 609
    RULE_roleOrLabelKeyword = 610

    ruleNames =  [ "sqlProgram", "statement", "simpleStatement", "alterStatement", 
                   "alterDatabase", "alterEvent", "alterLogfileGroup", "alterLogfileGroupOptions", 
                   "alterLogfileGroupOption", "alterServer", "alterTable", 
                   "alterTableActions", "alterCommandList", "alterCommandsModifierList", 
                   "standaloneAlterCommands", "alterPartition", "alterList", 
                   "alterCommandsModifier", "alterListItem", "place", "restrict", 
                   "alterOrderList", "alterAlgorithmOption", "alterLockOption", 
                   "indexLockAndAlgorithm", "withValidation", "removePartitioning", 
                   "allOrPartitionNameList", "alterTablespace", "alterUndoTablespace", 
                   "undoTableSpaceOptions", "undoTableSpaceOption", "alterTablespaceOptions", 
                   "alterTablespaceOption", "changeTablespaceOption", "alterView", 
                   "viewTail", "viewSelect", "viewCheckOption", "createStatement", 
                   "createDatabase", "createDatabaseOption", "createTable", 
                   "tableElementList", "tableElement", "duplicateAsQueryExpression", 
                   "queryExpressionOrParens", "createRoutine", "createProcedure", 
                   "createFunction", "createUdf", "routineCreateOption", 
                   "routineAlterOptions", "routineOption", "createIndex", 
                   "indexNameAndType", "createIndexTarget", "createLogfileGroup", 
                   "logfileGroupOptions", "logfileGroupOption", "createServer", 
                   "serverOptions", "serverOption", "createTablespace", 
                   "createUndoTablespace", "tsDataFileName", "tsDataFile", 
                   "tablespaceOptions", "tablespaceOption", "tsOptionInitialSize", 
                   "tsOptionUndoRedoBufferSize", "tsOptionAutoextendSize", 
                   "tsOptionMaxSize", "tsOptionExtentSize", "tsOptionNodegroup", 
                   "tsOptionEngine", "tsOptionWait", "tsOptionComment", 
                   "tsOptionFileblockSize", "tsOptionEncryption", "createView", 
                   "viewReplaceOrAlgorithm", "viewAlgorithm", "viewSuid", 
                   "createTrigger", "triggerFollowsPrecedesClause", "createEvent", 
                   "createRole", "createSpatialReference", "srsAttribute", 
                   "dropStatement", "dropDatabase", "dropEvent", "dropFunction", 
                   "dropProcedure", "dropIndex", "dropLogfileGroup", "dropLogfileGroupOption", 
                   "dropServer", "dropTable", "dropTableSpace", "dropTrigger", 
                   "dropView", "dropRole", "dropSpatialReference", "dropUndoTablespace", 
                   "renameTableStatement", "renamePair", "truncateTableStatement", 
                   "importStatement", "callStatement", "deleteStatement", 
                   "partitionDelete", "deleteStatementOption", "doStatement", 
                   "handlerStatement", "handlerReadOrScan", "insertStatement", 
                   "insertLockOption", "insertFromConstructor", "fields", 
                   "insertValues", "insertQueryExpression", "valueList", 
                   "values", "valuesReference", "insertUpdateList", "loadStatement", 
                   "dataOrXml", "xmlRowsIdentifiedBy", "loadDataFileTail", 
                   "loadDataFileTargetList", "fieldOrVariableList", "replaceStatement", 
                   "selectStatement", "selectStatementWithInto", "queryExpression", 
                   "queryExpressionBody", "queryExpressionParens", "queryPrimary", 
                   "querySpecification", "subquery", "querySpecOption", 
                   "limitClause", "simpleLimitClause", "limitOptions", "limitOption", 
                   "intoClause", "procedureAnalyseClause", "havingClause", 
                   "windowClause", "windowDefinition", "windowSpec", "windowSpecDetails", 
                   "windowFrameClause", "windowFrameUnits", "windowFrameExtent", 
                   "windowFrameStart", "windowFrameBetween", "windowFrameBound", 
                   "windowFrameExclusion", "withClause", "commonTableExpression", 
                   "groupByClause", "olapOption", "orderClause", "direction", 
                   "fromClause", "tableReferenceList", "tableValueConstructor", 
                   "explicitTable", "rowValueExplicit", "selectOption", 
                   "lockingClauseList", "lockingClause", "lockStrengh", 
                   "lockedRowAction", "selectItemList", "selectItem", "selectAlias", 
                   "whereClause", "tableReference", "escapedTableReference", 
                   "joinedTable", "naturalJoinType", "innerJoinType", "outerJoinType", 
                   "tableFactor", "singleTable", "singleTableParens", "derivedTable", 
                   "tableReferenceListParens", "tableFunction", "columnsClause", 
                   "jtColumn", "onEmptyOrError", "onEmpty", "onError", "jtOnResponse", 
                   "unionOption", "tableAlias", "indexHintList", "indexHint", 
                   "indexHintType", "keyOrIndex", "constraintKeyType", "indexHintClause", 
                   "indexList", "indexListElement", "updateStatement", "transactionOrLockingStatement", 
                   "transactionStatement", "beginWork", "transactionCharacteristic", 
                   "savepointStatement", "lockStatement", "lockItem", "lockOption", 
                   "xaStatement", "xaConvert", "xid", "replicationStatement", 
                   "resetOption", "masterResetOptions", "replicationLoad", 
                   "changeMaster", "changeMasterOptions", "masterOption", 
                   "privilegeCheckDef", "tablePrimaryKeyCheckDef", "masterTlsCiphersuitesDef", 
                   "masterFileDef", "serverIdList", "changeReplication", 
                   "filterDefinition", "filterDbList", "filterTableList", 
                   "filterStringList", "filterWildDbTableString", "filterDbPairList", 
                   "slave", "slaveUntilOptions", "slaveConnectionOptions", 
                   "slaveThreadOptions", "slaveThreadOption", "groupReplication", 
                   "preparedStatement", "executeStatement", "executeVarList", 
                   "cloneStatement", "dataDirSSL", "ssl", "accountManagementStatement", 
                   "alterUser", "alterUserTail", "userFunction", "createUser", 
                   "createUserTail", "defaultRoleClause", "requireClause", 
                   "connectOptions", "accountLockPasswordExpireOptions", 
                   "dropUser", "grant", "grantTargetList", "grantOptions", 
                   "exceptRoleList", "withRoles", "grantAs", "versionedRequireClause", 
                   "renameUser", "revoke", "onTypeTo", "aclType", "roleOrPrivilegesList", 
                   "roleOrPrivilege", "grantIdentifier", "requireList", 
                   "requireListElement", "grantOption", "setRole", "roleList", 
                   "role", "tableAdministrationStatement", "histogram", 
                   "checkOption", "repairType", "installUninstallStatment", 
                   "setStatement", "startOptionValueList", "transactionCharacteristics", 
                   "transactionAccessMode", "isolationLevel", "optionValueListContinued", 
                   "optionValueNoOptionType", "optionValue", "setSystemVariable", 
                   "startOptionValueListFollowingOptionType", "optionValueFollowingOptionType", 
                   "setExprOrDefault", "showStatement", "showCommandType", 
                   "nonBlocking", "fromOrIn", "inDb", "profileType", "otherAdministrativeStatement", 
                   "keyCacheListOrParts", "keyCacheList", "assignToKeycache", 
                   "assignToKeycachePartition", "cacheKeyList", "keyUsageElement", 
                   "keyUsageList", "flushOption", "logType", "flushTables", 
                   "flushTablesOptions", "preloadTail", "preloadList", "preloadKeys", 
                   "adminPartition", "resourceGroupManagement", "createResourceGroup", 
                   "resourceGroupVcpuList", "vcpuNumOrRange", "resourceGroupPriority", 
                   "resourceGroupEnableDisable", "alterResourceGroup", "setResourceGroup", 
                   "threadIdList", "dropResourceGroup", "utilityStatement", 
                   "describeStatement", "explainStatement", "explainableStatement", 
                   "helpCommand", "useCommand", "restartServer", "expr", 
                   "boolPri", "compOp", "predicate", "predicateOperations", 
                   "bitExpr", "simpleExpr", "arrayCast", "jsonOperator", 
                   "sumExpr", "groupingOperation", "windowFunctionCall", 
                   "windowingClause", "leadLagInfo", "nullTreatment", "jsonFunction", 
                   "inSumExpr", "identListArg", "identList", "fulltextOptions", 
                   "runtimeFunctionCall", "geometryFunction", "timeFunctionParameters", 
                   "fractionalPrecision", "weightStringLevels", "weightStringLevelListItem", 
                   "dateTimeTtype", "trimFunction", "substringFunction", 
                   "functionCall", "udfExprList", "udfExpr", "variable", 
                   "userVariable", "systemVariable", "internalVariableName", 
                   "whenExpression", "thenExpression", "elseExpression", 
                   "castType", "exprList", "charset", "notRule", "not2Rule", 
                   "interval", "intervalTimeStamp", "exprListWithParentheses", 
                   "exprWithParentheses", "simpleExprWithParentheses", "orderList", 
                   "orderExpression", "groupList", "groupingExpression", 
                   "channel", "compoundStatement", "returnStatement", "ifStatement", 
                   "ifBody", "thenStatement", "compoundStatementList", "caseStatement", 
                   "elseStatement", "labeledBlock", "unlabeledBlock", "label", 
                   "beginEndBlock", "labeledControl", "unlabeledControl", 
                   "loopBlock", "whileDoBlock", "repeatUntilBlock", "spDeclarations", 
                   "spDeclaration", "variableDeclaration", "conditionDeclaration", 
                   "spCondition", "sqlstate", "handlerDeclaration", "handlerCondition", 
                   "cursorDeclaration", "iterateStatement", "leaveStatement", 
                   "getDiagnostics", "signalAllowedExpr", "statementInformationItem", 
                   "conditionInformationItem", "signalInformationItemName", 
                   "signalStatement", "resignalStatement", "signalInformationItem", 
                   "cursorOpen", "cursorClose", "cursorFetch", "schedule", 
                   "columnDefinition", "checkOrReferences", "checkConstraint", 
                   "constraintEnforcement", "tableConstraintDef", "constraintName", 
                   "fieldDefinition", "columnAttribute", "columnFormat", 
                   "storageMedia", "gcolAttribute", "references", "deleteOption", 
                   "keyList", "keyPart", "keyListWithExpression", "keyPartOrExpression", 
                   "keyListVariants", "indexType", "indexOption", "commonIndexOption", 
                   "visibility", "indexTypeClause", "fulltextIndexOption", 
                   "spatialIndexOption", "dataTypeDefinition", "dataType", 
                   "nchar", "realType", "fieldLength", "fieldOptions", "charsetWithOptBinary", 
                   "ascii", "unicode", "wsNumCodepoints", "typeDatetimePrecision", 
                   "charsetName", "collationName", "createTableOptions", 
                   "createTableOptionsSpaceSeparated", "createTableOption", 
                   "ternaryOption", "defaultCollation", "defaultEncryption", 
                   "defaultCharset", "partitionClause", "partitionTypeDef", 
                   "subPartitions", "partitionKeyAlgorithm", "partitionDefinitions", 
                   "partitionDefinition", "partitionValuesIn", "partitionOption", 
                   "subpartitionDefinition", "partitionValueItemListParen", 
                   "partitionValueItem", "definerClause", "ifExists", "ifNotExists", 
                   "procedureParameter", "functionParameter", "collate", 
                   "typeWithOptCollate", "schemaIdentifierPair", "viewRefList", 
                   "updateList", "updateElement", "charsetClause", "fieldsClause", 
                   "fieldTerm", "linesClause", "lineTerm", "userList", "createUserList", 
                   "alterUserList", "createUserEntry", "alterUserEntry", 
                   "retainCurrentPassword", "discardOldPassword", "replacePassword", 
                   "userIdentifierOrText", "user", "likeClause", "likeOrWhere", 
                   "onlineOption", "noWriteToBinLog", "usePartition", "fieldIdentifier", 
                   "columnName", "columnInternalRef", "columnInternalRefList", 
                   "columnRef", "insertIdentifier", "indexName", "indexRef", 
                   "tableWild", "schemaName", "schemaRef", "procedureName", 
                   "procedureRef", "functionName", "functionRef", "triggerName", 
                   "triggerRef", "viewName", "viewRef", "tablespaceName", 
                   "tablespaceRef", "logfileGroupName", "logfileGroupRef", 
                   "eventName", "eventRef", "udfName", "serverName", "serverRef", 
                   "engineRef", "tableName", "filterTableRef", "tableRefWithWildcard", 
                   "tableRef", "tableRefList", "tableAliasRefList", "parameterName", 
                   "labelIdentifier", "labelRef", "roleIdentifier", "roleRef", 
                   "pluginRef", "componentRef", "resourceGroupRef", "windowName", 
                   "pureIdentifier", "identifier", "identifierList", "identifierListWithParentheses", 
                   "qualifiedIdentifier", "simpleIdentifier", "dotIdentifier", 
                   "ulong_number", "real_ulong_number", "ulonglong_number", 
                   "real_ulonglong_number", "literal", "signedLiteral", 
                   "stringList", "textStringLiteral", "textString", "textStringHash", 
                   "textLiteral", "textStringNoLinebreak", "textStringLiteralList", 
                   "numLiteral", "boolLiteral", "nullLiteral", "temporalLiteral", 
                   "floatOptions", "standardFloatOptions", "precision", 
                   "textOrIdentifier", "lValueIdentifier", "roleIdentifierOrText", 
                   "sizeNumber", "parentheses", "equal", "optionType", "varIdentType", 
                   "setVarIdentType", "identifierKeyword", "identifierKeywordsAmbiguous1RolesAndLabels", 
                   "identifierKeywordsAmbiguous2Labels", "labelKeyword", 
                   "identifierKeywordsAmbiguous3Roles", "identifierKeywordsUnambiguous", 
                   "roleKeyword", "lValueKeyword", "identifierKeywordsAmbiguous4SystemVariables", 
                   "roleOrIdentifierKeyword", "roleOrLabelKeyword" ]

    EOF = Token.EOF
    ACCESSIBLE_SYMBOL=1
    ACCOUNT_SYMBOL=2
    ACTION_SYMBOL=3
    ADD_SYMBOL=4
    ADDDATE_SYMBOL=5
    AFTER_SYMBOL=6
    AGAINST_SYMBOL=7
    AGGREGATE_SYMBOL=8
    ALGORITHM_SYMBOL=9
    ALL_SYMBOL=10
    ALTER_SYMBOL=11
    ALWAYS_SYMBOL=12
    ANALYSE_SYMBOL=13
    ANALYZE_SYMBOL=14
    AND_SYMBOL=15
    ANY_SYMBOL=16
    AS_SYMBOL=17
    ASC_SYMBOL=18
    ASCII_SYMBOL=19
    ASENSITIVE_SYMBOL=20
    AT_SYMBOL=21
    AUTHORS_SYMBOL=22
    AUTOEXTEND_SIZE_SYMBOL=23
    AUTO_INCREMENT_SYMBOL=24
    AVG_ROW_LENGTH_SYMBOL=25
    AVG_SYMBOL=26
    BACKUP_SYMBOL=27
    BEFORE_SYMBOL=28
    BEGIN_SYMBOL=29
    BETWEEN_SYMBOL=30
    BIGINT_SYMBOL=31
    BINARY_SYMBOL=32
    BINLOG_SYMBOL=33
    BIN_NUM_SYMBOL=34
    BIT_AND_SYMBOL=35
    BIT_OR_SYMBOL=36
    BIT_SYMBOL=37
    BIT_XOR_SYMBOL=38
    BLOB_SYMBOL=39
    BLOCK_SYMBOL=40
    BOOLEAN_SYMBOL=41
    BOOL_SYMBOL=42
    BOTH_SYMBOL=43
    BTREE_SYMBOL=44
    BY_SYMBOL=45
    BYTE_SYMBOL=46
    CACHE_SYMBOL=47
    CALL_SYMBOL=48
    CASCADE_SYMBOL=49
    CASCADED_SYMBOL=50
    CASE_SYMBOL=51
    CAST_SYMBOL=52
    CATALOG_NAME_SYMBOL=53
    CHAIN_SYMBOL=54
    CHANGE_SYMBOL=55
    CHANGED_SYMBOL=56
    CHANNEL_SYMBOL=57
    CHARSET_SYMBOL=58
    CHARACTER_SYMBOL=59
    CHAR_SYMBOL=60
    CHECKSUM_SYMBOL=61
    CHECK_SYMBOL=62
    CIPHER_SYMBOL=63
    CLASS_ORIGIN_SYMBOL=64
    CLIENT_SYMBOL=65
    CLOSE_SYMBOL=66
    COALESCE_SYMBOL=67
    CODE_SYMBOL=68
    COLLATE_SYMBOL=69
    COLLATION_SYMBOL=70
    COLUMNS_SYMBOL=71
    COLUMN_SYMBOL=72
    COLUMN_NAME_SYMBOL=73
    COLUMN_FORMAT_SYMBOL=74
    COMMENT_SYMBOL=75
    COMMITTED_SYMBOL=76
    COMMIT_SYMBOL=77
    COMPACT_SYMBOL=78
    COMPLETION_SYMBOL=79
    COMPRESSED_SYMBOL=80
    COMPRESSION_SYMBOL=81
    CONCURRENT_SYMBOL=82
    CONDITION_SYMBOL=83
    CONNECTION_SYMBOL=84
    CONSISTENT_SYMBOL=85
    CONSTRAINT_SYMBOL=86
    CONSTRAINT_CATALOG_SYMBOL=87
    CONSTRAINT_NAME_SYMBOL=88
    CONSTRAINT_SCHEMA_SYMBOL=89
    CONTAINS_SYMBOL=90
    CONTEXT_SYMBOL=91
    CONTINUE_SYMBOL=92
    CONTRIBUTORS_SYMBOL=93
    CONVERT_SYMBOL=94
    COUNT_SYMBOL=95
    CPU_SYMBOL=96
    CREATE_SYMBOL=97
    CROSS_SYMBOL=98
    CUBE_SYMBOL=99
    CURDATE_SYMBOL=100
    CURRENT_SYMBOL=101
    CURRENT_DATE_SYMBOL=102
    CURRENT_TIME_SYMBOL=103
    CURRENT_TIMESTAMP_SYMBOL=104
    CURRENT_USER_SYMBOL=105
    CURSOR_SYMBOL=106
    CURSOR_NAME_SYMBOL=107
    CURTIME_SYMBOL=108
    DATABASE_SYMBOL=109
    DATABASES_SYMBOL=110
    DATAFILE_SYMBOL=111
    DATA_SYMBOL=112
    DATETIME_SYMBOL=113
    DATE_ADD_SYMBOL=114
    DATE_SUB_SYMBOL=115
    DATE_SYMBOL=116
    DAYOFMONTH_SYMBOL=117
    DAY_HOUR_SYMBOL=118
    DAY_MICROSECOND_SYMBOL=119
    DAY_MINUTE_SYMBOL=120
    DAY_SECOND_SYMBOL=121
    DAY_SYMBOL=122
    DEALLOCATE_SYMBOL=123
    DEC_SYMBOL=124
    DECIMAL_NUM_SYMBOL=125
    DECIMAL_SYMBOL=126
    DECLARE_SYMBOL=127
    DEFAULT_SYMBOL=128
    DEFAULT_AUTH_SYMBOL=129
    DEFINER_SYMBOL=130
    DELAYED_SYMBOL=131
    DELAY_KEY_WRITE_SYMBOL=132
    DELETE_SYMBOL=133
    DESC_SYMBOL=134
    DESCRIBE_SYMBOL=135
    DES_KEY_FILE_SYMBOL=136
    DETERMINISTIC_SYMBOL=137
    DIAGNOSTICS_SYMBOL=138
    DIRECTORY_SYMBOL=139
    DISABLE_SYMBOL=140
    DISCARD_SYMBOL=141
    DISK_SYMBOL=142
    DISTINCT_SYMBOL=143
    DISTINCTROW_SYMBOL=144
    DIV_SYMBOL=145
    DOUBLE_SYMBOL=146
    DO_SYMBOL=147
    DROP_SYMBOL=148
    DUAL_SYMBOL=149
    DUMPFILE_SYMBOL=150
    DUPLICATE_SYMBOL=151
    DYNAMIC_SYMBOL=152
    EACH_SYMBOL=153
    ELSE_SYMBOL=154
    ELSEIF_SYMBOL=155
    ENABLE_SYMBOL=156
    ENCLOSED_SYMBOL=157
    ENCRYPTION_SYMBOL=158
    END_SYMBOL=159
    ENDS_SYMBOL=160
    END_OF_INPUT_SYMBOL=161
    ENGINES_SYMBOL=162
    ENGINE_SYMBOL=163
    ENUM_SYMBOL=164
    ERROR_SYMBOL=165
    ERRORS_SYMBOL=166
    ESCAPED_SYMBOL=167
    ESCAPE_SYMBOL=168
    EVENTS_SYMBOL=169
    EVENT_SYMBOL=170
    EVERY_SYMBOL=171
    EXCHANGE_SYMBOL=172
    EXECUTE_SYMBOL=173
    EXISTS_SYMBOL=174
    EXIT_SYMBOL=175
    EXPANSION_SYMBOL=176
    EXPIRE_SYMBOL=177
    EXPLAIN_SYMBOL=178
    EXPORT_SYMBOL=179
    EXTENDED_SYMBOL=180
    EXTENT_SIZE_SYMBOL=181
    EXTRACT_SYMBOL=182
    FALSE_SYMBOL=183
    FAST_SYMBOL=184
    FAULTS_SYMBOL=185
    FETCH_SYMBOL=186
    FIELDS_SYMBOL=187
    FILE_SYMBOL=188
    FILE_BLOCK_SIZE_SYMBOL=189
    FILTER_SYMBOL=190
    FIRST_SYMBOL=191
    FIXED_SYMBOL=192
    FLOAT4_SYMBOL=193
    FLOAT8_SYMBOL=194
    FLOAT_SYMBOL=195
    FLUSH_SYMBOL=196
    FOLLOWS_SYMBOL=197
    FORCE_SYMBOL=198
    FOREIGN_SYMBOL=199
    FOR_SYMBOL=200
    FORMAT_SYMBOL=201
    FOUND_SYMBOL=202
    FROM_SYMBOL=203
    FULL_SYMBOL=204
    FULLTEXT_SYMBOL=205
    FUNCTION_SYMBOL=206
    GET_SYMBOL=207
    GENERAL_SYMBOL=208
    GENERATED_SYMBOL=209
    GROUP_REPLICATION_SYMBOL=210
    GEOMETRYCOLLECTION_SYMBOL=211
    GEOMETRY_SYMBOL=212
    GET_FORMAT_SYMBOL=213
    GLOBAL_SYMBOL=214
    GRANT_SYMBOL=215
    GRANTS_SYMBOL=216
    GROUP_SYMBOL=217
    GROUP_CONCAT_SYMBOL=218
    HANDLER_SYMBOL=219
    HASH_SYMBOL=220
    HAVING_SYMBOL=221
    HELP_SYMBOL=222
    HIGH_PRIORITY_SYMBOL=223
    HOST_SYMBOL=224
    HOSTS_SYMBOL=225
    HOUR_MICROSECOND_SYMBOL=226
    HOUR_MINUTE_SYMBOL=227
    HOUR_SECOND_SYMBOL=228
    HOUR_SYMBOL=229
    IDENTIFIED_SYMBOL=230
    IF_SYMBOL=231
    IGNORE_SYMBOL=232
    IGNORE_SERVER_IDS_SYMBOL=233
    IMPORT_SYMBOL=234
    INDEXES_SYMBOL=235
    INDEX_SYMBOL=236
    INFILE_SYMBOL=237
    INITIAL_SIZE_SYMBOL=238
    INNER_SYMBOL=239
    INOUT_SYMBOL=240
    INSENSITIVE_SYMBOL=241
    INSERT_SYMBOL=242
    INSERT_METHOD_SYMBOL=243
    INSTANCE_SYMBOL=244
    INSTALL_SYMBOL=245
    INTEGER_SYMBOL=246
    INTERVAL_SYMBOL=247
    INTO_SYMBOL=248
    INT_SYMBOL=249
    INVOKER_SYMBOL=250
    IN_SYMBOL=251
    IO_AFTER_GTIDS_SYMBOL=252
    IO_BEFORE_GTIDS_SYMBOL=253
    IO_THREAD_SYMBOL=254
    IO_SYMBOL=255
    IPC_SYMBOL=256
    IS_SYMBOL=257
    ISOLATION_SYMBOL=258
    ISSUER_SYMBOL=259
    ITERATE_SYMBOL=260
    JOIN_SYMBOL=261
    JSON_SYMBOL=262
    KEYS_SYMBOL=263
    KEY_BLOCK_SIZE_SYMBOL=264
    KEY_SYMBOL=265
    KILL_SYMBOL=266
    LANGUAGE_SYMBOL=267
    LAST_SYMBOL=268
    LEADING_SYMBOL=269
    LEAVES_SYMBOL=270
    LEAVE_SYMBOL=271
    LEFT_SYMBOL=272
    LESS_SYMBOL=273
    LEVEL_SYMBOL=274
    LIKE_SYMBOL=275
    LIMIT_SYMBOL=276
    LINEAR_SYMBOL=277
    LINES_SYMBOL=278
    LINESTRING_SYMBOL=279
    LIST_SYMBOL=280
    LOAD_SYMBOL=281
    LOCALTIME_SYMBOL=282
    LOCALTIMESTAMP_SYMBOL=283
    LOCAL_SYMBOL=284
    LOCATOR_SYMBOL=285
    LOCKS_SYMBOL=286
    LOCK_SYMBOL=287
    LOGFILE_SYMBOL=288
    LOGS_SYMBOL=289
    LONGBLOB_SYMBOL=290
    LONGTEXT_SYMBOL=291
    LONG_NUM_SYMBOL=292
    LONG_SYMBOL=293
    LOOP_SYMBOL=294
    LOW_PRIORITY_SYMBOL=295
    MASTER_AUTO_POSITION_SYMBOL=296
    MASTER_BIND_SYMBOL=297
    MASTER_CONNECT_RETRY_SYMBOL=298
    MASTER_DELAY_SYMBOL=299
    MASTER_HOST_SYMBOL=300
    MASTER_LOG_FILE_SYMBOL=301
    MASTER_LOG_POS_SYMBOL=302
    MASTER_PASSWORD_SYMBOL=303
    MASTER_PORT_SYMBOL=304
    MASTER_RETRY_COUNT_SYMBOL=305
    MASTER_SERVER_ID_SYMBOL=306
    MASTER_SSL_CAPATH_SYMBOL=307
    MASTER_SSL_CA_SYMBOL=308
    MASTER_SSL_CERT_SYMBOL=309
    MASTER_SSL_CIPHER_SYMBOL=310
    MASTER_SSL_CRL_SYMBOL=311
    MASTER_SSL_CRLPATH_SYMBOL=312
    MASTER_SSL_KEY_SYMBOL=313
    MASTER_SSL_SYMBOL=314
    MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL=315
    MASTER_SYMBOL=316
    MASTER_TLS_VERSION_SYMBOL=317
    MASTER_USER_SYMBOL=318
    MASTER_HEARTBEAT_PERIOD_SYMBOL=319
    MATCH_SYMBOL=320
    MAX_CONNECTIONS_PER_HOUR_SYMBOL=321
    MAX_QUERIES_PER_HOUR_SYMBOL=322
    MAX_ROWS_SYMBOL=323
    MAX_SIZE_SYMBOL=324
    MAX_STATEMENT_TIME_SYMBOL=325
    MAX_SYMBOL=326
    MAX_UPDATES_PER_HOUR_SYMBOL=327
    MAX_USER_CONNECTIONS_SYMBOL=328
    MAXVALUE_SYMBOL=329
    MEDIUMBLOB_SYMBOL=330
    MEDIUMINT_SYMBOL=331
    MEDIUMTEXT_SYMBOL=332
    MEDIUM_SYMBOL=333
    MEMORY_SYMBOL=334
    MERGE_SYMBOL=335
    MESSAGE_TEXT_SYMBOL=336
    MICROSECOND_SYMBOL=337
    MID_SYMBOL=338
    MIDDLEINT_SYMBOL=339
    MIGRATE_SYMBOL=340
    MINUTE_MICROSECOND_SYMBOL=341
    MINUTE_SECOND_SYMBOL=342
    MINUTE_SYMBOL=343
    MIN_ROWS_SYMBOL=344
    MIN_SYMBOL=345
    MODE_SYMBOL=346
    MODIFIES_SYMBOL=347
    MODIFY_SYMBOL=348
    MOD_SYMBOL=349
    MONTH_SYMBOL=350
    MULTILINESTRING_SYMBOL=351
    MULTIPOINT_SYMBOL=352
    MULTIPOLYGON_SYMBOL=353
    MUTEX_SYMBOL=354
    MYSQL_ERRNO_SYMBOL=355
    NAMES_SYMBOL=356
    NAME_SYMBOL=357
    NATIONAL_SYMBOL=358
    NATURAL_SYMBOL=359
    NCHAR_STRING_SYMBOL=360
    NCHAR_SYMBOL=361
    NDB_SYMBOL=362
    NDBCLUSTER_SYMBOL=363
    NEG_SYMBOL=364
    NEVER_SYMBOL=365
    NEW_SYMBOL=366
    NEXT_SYMBOL=367
    NODEGROUP_SYMBOL=368
    NONE_SYMBOL=369
    NONBLOCKING_SYMBOL=370
    NOT_SYMBOL=371
    NOW_SYMBOL=372
    NO_SYMBOL=373
    NO_WAIT_SYMBOL=374
    NO_WRITE_TO_BINLOG_SYMBOL=375
    NULL_SYMBOL=376
    NUMBER_SYMBOL=377
    NUMERIC_SYMBOL=378
    NVARCHAR_SYMBOL=379
    OFFLINE_SYMBOL=380
    OFFSET_SYMBOL=381
    OLD_PASSWORD_SYMBOL=382
    ON_SYMBOL=383
    ONE_SYMBOL=384
    ONLINE_SYMBOL=385
    ONLY_SYMBOL=386
    OPEN_SYMBOL=387
    OPTIMIZE_SYMBOL=388
    OPTIMIZER_COSTS_SYMBOL=389
    OPTIONS_SYMBOL=390
    OPTION_SYMBOL=391
    OPTIONALLY_SYMBOL=392
    ORDER_SYMBOL=393
    OR_SYMBOL=394
    OUTER_SYMBOL=395
    OUTFILE_SYMBOL=396
    OUT_SYMBOL=397
    OWNER_SYMBOL=398
    PACK_KEYS_SYMBOL=399
    PAGE_SYMBOL=400
    PARSER_SYMBOL=401
    PARTIAL_SYMBOL=402
    PARTITIONING_SYMBOL=403
    PARTITIONS_SYMBOL=404
    PARTITION_SYMBOL=405
    PASSWORD_SYMBOL=406
    PHASE_SYMBOL=407
    PLUGINS_SYMBOL=408
    PLUGIN_DIR_SYMBOL=409
    PLUGIN_SYMBOL=410
    POINT_SYMBOL=411
    POLYGON_SYMBOL=412
    PORT_SYMBOL=413
    POSITION_SYMBOL=414
    PRECEDES_SYMBOL=415
    PRECISION_SYMBOL=416
    PREPARE_SYMBOL=417
    PRESERVE_SYMBOL=418
    PREV_SYMBOL=419
    PRIMARY_SYMBOL=420
    PRIVILEGES_SYMBOL=421
    PROCEDURE_SYMBOL=422
    PROCESS_SYMBOL=423
    PROCESSLIST_SYMBOL=424
    PROFILE_SYMBOL=425
    PROFILES_SYMBOL=426
    PROXY_SYMBOL=427
    PURGE_SYMBOL=428
    QUARTER_SYMBOL=429
    QUERY_SYMBOL=430
    QUICK_SYMBOL=431
    RANGE_SYMBOL=432
    READS_SYMBOL=433
    READ_ONLY_SYMBOL=434
    READ_SYMBOL=435
    READ_WRITE_SYMBOL=436
    REAL_SYMBOL=437
    REBUILD_SYMBOL=438
    RECOVER_SYMBOL=439
    REDOFILE_SYMBOL=440
    REDO_BUFFER_SIZE_SYMBOL=441
    REDUNDANT_SYMBOL=442
    REFERENCES_SYMBOL=443
    REGEXP_SYMBOL=444
    RELAY_SYMBOL=445
    RELAYLOG_SYMBOL=446
    RELAY_LOG_FILE_SYMBOL=447
    RELAY_LOG_POS_SYMBOL=448
    RELAY_THREAD_SYMBOL=449
    RELEASE_SYMBOL=450
    RELOAD_SYMBOL=451
    REMOVE_SYMBOL=452
    RENAME_SYMBOL=453
    REORGANIZE_SYMBOL=454
    REPAIR_SYMBOL=455
    REPEATABLE_SYMBOL=456
    REPEAT_SYMBOL=457
    REPLACE_SYMBOL=458
    REPLICATION_SYMBOL=459
    REPLICATE_DO_DB_SYMBOL=460
    REPLICATE_IGNORE_DB_SYMBOL=461
    REPLICATE_DO_TABLE_SYMBOL=462
    REPLICATE_IGNORE_TABLE_SYMBOL=463
    REPLICATE_WILD_DO_TABLE_SYMBOL=464
    REPLICATE_WILD_IGNORE_TABLE_SYMBOL=465
    REPLICATE_REWRITE_DB_SYMBOL=466
    REQUIRE_SYMBOL=467
    RESET_SYMBOL=468
    RESIGNAL_SYMBOL=469
    RESTORE_SYMBOL=470
    RESTRICT_SYMBOL=471
    RESUME_SYMBOL=472
    RETURNED_SQLSTATE_SYMBOL=473
    RETURNS_SYMBOL=474
    RETURN_SYMBOL=475
    REVERSE_SYMBOL=476
    REVOKE_SYMBOL=477
    RIGHT_SYMBOL=478
    RLIKE_SYMBOL=479
    ROLLBACK_SYMBOL=480
    ROLLUP_SYMBOL=481
    ROTATE_SYMBOL=482
    ROUTINE_SYMBOL=483
    ROWS_SYMBOL=484
    ROW_COUNT_SYMBOL=485
    ROW_FORMAT_SYMBOL=486
    ROW_SYMBOL=487
    RTREE_SYMBOL=488
    SAVEPOINT_SYMBOL=489
    SCHEDULE_SYMBOL=490
    SCHEMA_SYMBOL=491
    SCHEMA_NAME_SYMBOL=492
    SCHEMAS_SYMBOL=493
    SECOND_MICROSECOND_SYMBOL=494
    SECOND_SYMBOL=495
    SECURITY_SYMBOL=496
    SELECT_SYMBOL=497
    SENSITIVE_SYMBOL=498
    SEPARATOR_SYMBOL=499
    SERIALIZABLE_SYMBOL=500
    SERIAL_SYMBOL=501
    SESSION_SYMBOL=502
    SERVER_SYMBOL=503
    SERVER_OPTIONS_SYMBOL=504
    SESSION_USER_SYMBOL=505
    SET_SYMBOL=506
    SET_VAR_SYMBOL=507
    SHARE_SYMBOL=508
    SHOW_SYMBOL=509
    SHUTDOWN_SYMBOL=510
    SIGNAL_SYMBOL=511
    SIGNED_SYMBOL=512
    SIMPLE_SYMBOL=513
    SLAVE_SYMBOL=514
    SLOW_SYMBOL=515
    SMALLINT_SYMBOL=516
    SNAPSHOT_SYMBOL=517
    SOME_SYMBOL=518
    SOCKET_SYMBOL=519
    SONAME_SYMBOL=520
    SOUNDS_SYMBOL=521
    SOURCE_SYMBOL=522
    SPATIAL_SYMBOL=523
    SPECIFIC_SYMBOL=524
    SQLEXCEPTION_SYMBOL=525
    SQLSTATE_SYMBOL=526
    SQLWARNING_SYMBOL=527
    SQL_AFTER_GTIDS_SYMBOL=528
    SQL_AFTER_MTS_GAPS_SYMBOL=529
    SQL_BEFORE_GTIDS_SYMBOL=530
    SQL_BIG_RESULT_SYMBOL=531
    SQL_BUFFER_RESULT_SYMBOL=532
    SQL_CACHE_SYMBOL=533
    SQL_CALC_FOUND_ROWS_SYMBOL=534
    SQL_NO_CACHE_SYMBOL=535
    SQL_SMALL_RESULT_SYMBOL=536
    SQL_SYMBOL=537
    SQL_THREAD_SYMBOL=538
    SSL_SYMBOL=539
    STACKED_SYMBOL=540
    STARTING_SYMBOL=541
    STARTS_SYMBOL=542
    START_SYMBOL=543
    STATS_AUTO_RECALC_SYMBOL=544
    STATS_PERSISTENT_SYMBOL=545
    STATS_SAMPLE_PAGES_SYMBOL=546
    STATUS_SYMBOL=547
    STDDEV_SAMP_SYMBOL=548
    STDDEV_SYMBOL=549
    STDDEV_POP_SYMBOL=550
    STD_SYMBOL=551
    STOP_SYMBOL=552
    STORAGE_SYMBOL=553
    STORED_SYMBOL=554
    STRAIGHT_JOIN_SYMBOL=555
    STRING_SYMBOL=556
    SUBCLASS_ORIGIN_SYMBOL=557
    SUBDATE_SYMBOL=558
    SUBJECT_SYMBOL=559
    SUBPARTITIONS_SYMBOL=560
    SUBPARTITION_SYMBOL=561
    SUBSTR_SYMBOL=562
    SUBSTRING_SYMBOL=563
    SUM_SYMBOL=564
    SUPER_SYMBOL=565
    SUSPEND_SYMBOL=566
    SWAPS_SYMBOL=567
    SWITCHES_SYMBOL=568
    SYSDATE_SYMBOL=569
    SYSTEM_USER_SYMBOL=570
    TABLES_SYMBOL=571
    TABLESPACE_SYMBOL=572
    TABLE_REF_PRIORITY_SYMBOL=573
    TABLE_SYMBOL=574
    TABLE_CHECKSUM_SYMBOL=575
    TABLE_NAME_SYMBOL=576
    TEMPORARY_SYMBOL=577
    TEMPTABLE_SYMBOL=578
    TERMINATED_SYMBOL=579
    TEXT_SYMBOL=580
    THAN_SYMBOL=581
    THEN_SYMBOL=582
    TIMESTAMP_SYMBOL=583
    TIMESTAMP_ADD_SYMBOL=584
    TIMESTAMP_DIFF_SYMBOL=585
    TIME_SYMBOL=586
    TINYBLOB_SYMBOL=587
    TINYINT_SYMBOL=588
    TINYTEXT_SYMBOL=589
    TO_SYMBOL=590
    TRAILING_SYMBOL=591
    TRANSACTION_SYMBOL=592
    TRIGGERS_SYMBOL=593
    TRIGGER_SYMBOL=594
    TRIM_SYMBOL=595
    TRUE_SYMBOL=596
    TRUNCATE_SYMBOL=597
    TYPES_SYMBOL=598
    TYPE_SYMBOL=599
    UDF_RETURNS_SYMBOL=600
    UNCOMMITTED_SYMBOL=601
    UNDEFINED_SYMBOL=602
    UNDOFILE_SYMBOL=603
    UNDO_BUFFER_SIZE_SYMBOL=604
    UNDO_SYMBOL=605
    UNICODE_SYMBOL=606
    UNINSTALL_SYMBOL=607
    UNION_SYMBOL=608
    UNIQUE_SYMBOL=609
    UNKNOWN_SYMBOL=610
    UNLOCK_SYMBOL=611
    UNSIGNED_SYMBOL=612
    UNTIL_SYMBOL=613
    UPDATE_SYMBOL=614
    UPGRADE_SYMBOL=615
    USAGE_SYMBOL=616
    USER_RESOURCES_SYMBOL=617
    USER_SYMBOL=618
    USE_FRM_SYMBOL=619
    USE_SYMBOL=620
    USING_SYMBOL=621
    UTC_DATE_SYMBOL=622
    UTC_TIMESTAMP_SYMBOL=623
    UTC_TIME_SYMBOL=624
    VALIDATION_SYMBOL=625
    VALUES_SYMBOL=626
    VALUE_SYMBOL=627
    VARBINARY_SYMBOL=628
    VARCHAR_SYMBOL=629
    VARCHARACTER_SYMBOL=630
    VARIABLES_SYMBOL=631
    VARIANCE_SYMBOL=632
    VARYING_SYMBOL=633
    VAR_POP_SYMBOL=634
    VAR_SAMP_SYMBOL=635
    VIEW_SYMBOL=636
    VIRTUAL_SYMBOL=637
    WAIT_SYMBOL=638
    WARNINGS_SYMBOL=639
    WEEK_SYMBOL=640
    WEIGHT_STRING_SYMBOL=641
    WHEN_SYMBOL=642
    WHERE_SYMBOL=643
    WHILE_SYMBOL=644
    WITH_SYMBOL=645
    WITHOUT_SYMBOL=646
    WORK_SYMBOL=647
    WRAPPER_SYMBOL=648
    WRITE_SYMBOL=649
    X509_SYMBOL=650
    XA_SYMBOL=651
    XID_SYMBOL=652
    XML_SYMBOL=653
    XOR_SYMBOL=654
    YEAR_MONTH_SYMBOL=655
    YEAR_SYMBOL=656
    ZEROFILL_SYMBOL=657
    PERSIST_SYMBOL=658
    ROLE_SYMBOL=659
    ADMIN_SYMBOL=660
    INVISIBLE_SYMBOL=661
    VISIBLE_SYMBOL=662
    EXCEPT_SYMBOL=663
    COMPONENT_SYMBOL=664
    RECURSIVE_SYMBOL=665
    JSON_OBJECTAGG_SYMBOL=666
    JSON_ARRAYAGG_SYMBOL=667
    OF_SYMBOL=668
    SKIP_SYMBOL=669
    LOCKED_SYMBOL=670
    NOWAIT_SYMBOL=671
    GROUPING_SYMBOL=672
    PERSIST_ONLY_SYMBOL=673
    HISTOGRAM_SYMBOL=674
    BUCKETS_SYMBOL=675
    REMOTE_SYMBOL=676
    CLONE_SYMBOL=677
    CUME_DIST_SYMBOL=678
    DENSE_RANK_SYMBOL=679
    EXCLUDE_SYMBOL=680
    FIRST_VALUE_SYMBOL=681
    FOLLOWING_SYMBOL=682
    GROUPS_SYMBOL=683
    LAG_SYMBOL=684
    LAST_VALUE_SYMBOL=685
    LEAD_SYMBOL=686
    NTH_VALUE_SYMBOL=687
    NTILE_SYMBOL=688
    NULLS_SYMBOL=689
    OTHERS_SYMBOL=690
    OVER_SYMBOL=691
    PERCENT_RANK_SYMBOL=692
    PRECEDING_SYMBOL=693
    RANK_SYMBOL=694
    RESPECT_SYMBOL=695
    ROW_NUMBER_SYMBOL=696
    TIES_SYMBOL=697
    UNBOUNDED_SYMBOL=698
    WINDOW_SYMBOL=699
    EMPTY_SYMBOL=700
    JSON_TABLE_SYMBOL=701
    NESTED_SYMBOL=702
    ORDINALITY_SYMBOL=703
    PATH_SYMBOL=704
    HISTORY_SYMBOL=705
    REUSE_SYMBOL=706
    SRID_SYMBOL=707
    THREAD_PRIORITY_SYMBOL=708
    RESOURCE_SYMBOL=709
    SYSTEM_SYMBOL=710
    VCPU_SYMBOL=711
    MASTER_PUBLIC_KEY_PATH_SYMBOL=712
    GET_MASTER_PUBLIC_KEY_SYMBOL=713
    RESTART_SYMBOL=714
    DEFINITION_SYMBOL=715
    DESCRIPTION_SYMBOL=716
    ORGANIZATION_SYMBOL=717
    REFERENCE_SYMBOL=718
    OPTIONAL_SYMBOL=719
    SECONDARY_SYMBOL=720
    SECONDARY_ENGINE_SYMBOL=721
    SECONDARY_LOAD_SYMBOL=722
    SECONDARY_UNLOAD_SYMBOL=723
    ACTIVE_SYMBOL=724
    INACTIVE_SYMBOL=725
    LATERAL_SYMBOL=726
    RETAIN_SYMBOL=727
    OLD_SYMBOL=728
    NETWORK_NAMESPACE_SYMBOL=729
    ENFORCED_SYMBOL=730
    ARRAY_SYMBOL=731
    OJ_SYMBOL=732
    MEMBER_SYMBOL=733
    RANDOM_SYMBOL=734
    MASTER_COMPRESSION_ALGORITHM_SYMBOL=735
    MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL=736
    PRIVILEGE_CHECKS_USER_SYMBOL=737
    MASTER_TLS_CIPHERSUITES_SYMBOL=738
    REQUIRE_ROW_FORMAT_SYMBOL=739
    PASSWORD_LOCK_TIME_SYMBOL=740
    FAILED_LOGIN_ATTEMPTS_SYMBOL=741
    REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL=742
    STREAM_SYMBOL=743
    OFF_SYMBOL=744
    NOT2_SYMBOL=745
    CONCAT_PIPES_SYMBOL=746
    INT_NUMBER=747
    LONG_NUMBER=748
    ULONGLONG_NUMBER=749
    EQUAL_OPERATOR=750
    ASSIGN_OPERATOR=751
    NULL_SAFE_EQUAL_OPERATOR=752
    GREATER_OR_EQUAL_OPERATOR=753
    GREATER_THAN_OPERATOR=754
    LESS_OR_EQUAL_OPERATOR=755
    LESS_THAN_OPERATOR=756
    NOT_EQUAL_OPERATOR=757
    PLUS_OPERATOR=758
    MINUS_OPERATOR=759
    MULT_OPERATOR=760
    DIV_OPERATOR=761
    MOD_OPERATOR=762
    LOGICAL_NOT_OPERATOR=763
    BITWISE_NOT_OPERATOR=764
    SHIFT_LEFT_OPERATOR=765
    SHIFT_RIGHT_OPERATOR=766
    LOGICAL_AND_OPERATOR=767
    BITWISE_AND_OPERATOR=768
    BITWISE_XOR_OPERATOR=769
    LOGICAL_OR_OPERATOR=770
    BITWISE_OR_OPERATOR=771
    DOT_SYMBOL=772
    COMMA_SYMBOL=773
    SEMICOLON_SYMBOL=774
    COLON_SYMBOL=775
    OPEN_PAR_SYMBOL=776
    CLOSE_PAR_SYMBOL=777
    OPEN_CURLY_SYMBOL=778
    CLOSE_CURLY_SYMBOL=779
    UNDERLINE_SYMBOL=780
    JSON_SEPARATOR_SYMBOL=781
    JSON_UNQUOTED_SEPARATOR_SYMBOL=782
    AT_SIGN_SYMBOL=783
    AT_TEXT_SUFFIX=784
    AT_AT_SIGN_SYMBOL=785
    NULL2_SYMBOL=786
    PARAM_MARKER=787
    HEX_NUMBER=788
    BIN_NUMBER=789
    DECIMAL_NUMBER=790
    FLOAT_NUMBER=791
    WHITESPACE=792
    INVALID_INPUT=793
    UNDERSCORE_CHARSET=794
    IDENTIFIER=795
    NCHAR_TEXT=796
    BACK_TICK_QUOTED_ID=797
    DOUBLE_QUOTED_TEXT=798
    SINGLE_QUOTED_TEXT=799
    VERSION_COMMENT_START=800
    MYSQL_COMMENT_START=801
    VERSION_COMMENT_END=802
    BLOCK_COMMENT=803
    POUND_COMMENT=804
    DASHDASH_COMMENT=805
    NOT_EQUAL2_OPERATOR=806

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SqlProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SQLParser.EOF, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.StatementContext)
            else:
                return self.getTypedRuleContext(SQLParser.StatementContext,i)


        def SEMICOLON_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.SEMICOLON_SYMBOL)
            else:
                return self.getToken(SQLParser.SEMICOLON_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_sqlProgram

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlProgram" ):
                listener.enterSqlProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlProgram" ):
                listener.exitSqlProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlProgram" ):
                return visitor.visitSqlProgram(self)
            else:
                return visitor.visitChildren(self)




    def sqlProgram(self):

        localctx = SQLParser.SqlProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sqlProgram)
        self._la = 0 # Token type
        try:
            self.state = 1236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1222
                self.match(SQLParser.EOF)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1223
                self.statement()
                self.state = 1228
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1224
                        self.match(SQLParser.SEMICOLON_SYMBOL)
                        self.state = 1225
                        self.statement() 
                    self.state = 1230
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

                self.state = 1232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.SEMICOLON_SYMBOL:
                    self.state = 1231
                    self.match(SQLParser.SEMICOLON_SYMBOL)


                self.state = 1234
                self.match(SQLParser.EOF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleStatement(self):
            return self.getTypedRuleContext(SQLParser.SimpleStatementContext,0)


        def beginWork(self):
            return self.getTypedRuleContext(SQLParser.BeginWorkContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = SQLParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_statement)
        try:
            self.state = 1240
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1238
                self.simpleStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1239
                self.beginWork()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterStatement(self):
            return self.getTypedRuleContext(SQLParser.AlterStatementContext,0)


        def createStatement(self):
            return self.getTypedRuleContext(SQLParser.CreateStatementContext,0)


        def dropStatement(self):
            return self.getTypedRuleContext(SQLParser.DropStatementContext,0)


        def renameTableStatement(self):
            return self.getTypedRuleContext(SQLParser.RenameTableStatementContext,0)


        def truncateTableStatement(self):
            return self.getTypedRuleContext(SQLParser.TruncateTableStatementContext,0)


        def importStatement(self):
            return self.getTypedRuleContext(SQLParser.ImportStatementContext,0)


        def callStatement(self):
            return self.getTypedRuleContext(SQLParser.CallStatementContext,0)


        def deleteStatement(self):
            return self.getTypedRuleContext(SQLParser.DeleteStatementContext,0)


        def doStatement(self):
            return self.getTypedRuleContext(SQLParser.DoStatementContext,0)


        def handlerStatement(self):
            return self.getTypedRuleContext(SQLParser.HandlerStatementContext,0)


        def insertStatement(self):
            return self.getTypedRuleContext(SQLParser.InsertStatementContext,0)


        def loadStatement(self):
            return self.getTypedRuleContext(SQLParser.LoadStatementContext,0)


        def replaceStatement(self):
            return self.getTypedRuleContext(SQLParser.ReplaceStatementContext,0)


        def selectStatement(self):
            return self.getTypedRuleContext(SQLParser.SelectStatementContext,0)


        def updateStatement(self):
            return self.getTypedRuleContext(SQLParser.UpdateStatementContext,0)


        def transactionOrLockingStatement(self):
            return self.getTypedRuleContext(SQLParser.TransactionOrLockingStatementContext,0)


        def replicationStatement(self):
            return self.getTypedRuleContext(SQLParser.ReplicationStatementContext,0)


        def preparedStatement(self):
            return self.getTypedRuleContext(SQLParser.PreparedStatementContext,0)


        def cloneStatement(self):
            return self.getTypedRuleContext(SQLParser.CloneStatementContext,0)


        def accountManagementStatement(self):
            return self.getTypedRuleContext(SQLParser.AccountManagementStatementContext,0)


        def tableAdministrationStatement(self):
            return self.getTypedRuleContext(SQLParser.TableAdministrationStatementContext,0)


        def installUninstallStatment(self):
            return self.getTypedRuleContext(SQLParser.InstallUninstallStatmentContext,0)


        def setStatement(self):
            return self.getTypedRuleContext(SQLParser.SetStatementContext,0)


        def showStatement(self):
            return self.getTypedRuleContext(SQLParser.ShowStatementContext,0)


        def resourceGroupManagement(self):
            return self.getTypedRuleContext(SQLParser.ResourceGroupManagementContext,0)


        def otherAdministrativeStatement(self):
            return self.getTypedRuleContext(SQLParser.OtherAdministrativeStatementContext,0)


        def utilityStatement(self):
            return self.getTypedRuleContext(SQLParser.UtilityStatementContext,0)


        def getDiagnostics(self):
            return self.getTypedRuleContext(SQLParser.GetDiagnosticsContext,0)


        def signalStatement(self):
            return self.getTypedRuleContext(SQLParser.SignalStatementContext,0)


        def resignalStatement(self):
            return self.getTypedRuleContext(SQLParser.ResignalStatementContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_simpleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStatement" ):
                listener.enterSimpleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStatement" ):
                listener.exitSimpleStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleStatement" ):
                return visitor.visitSimpleStatement(self)
            else:
                return visitor.visitChildren(self)




    def simpleStatement(self):

        localctx = SQLParser.SimpleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_simpleStatement)
        try:
            self.state = 1276
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1242
                self.alterStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1243
                self.createStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1244
                self.dropStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1245
                self.renameTableStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1246
                self.truncateTableStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1247
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 1248
                self.importStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1249
                self.callStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1250
                self.deleteStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1251
                self.doStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1252
                self.handlerStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1253
                self.insertStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1254
                self.loadStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1255
                self.replaceStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1256
                self.selectStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1257
                self.updateStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1258
                self.transactionOrLockingStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1259
                self.replicationStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1260
                self.preparedStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1261
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 1262
                self.cloneStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1263
                self.accountManagementStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1264
                self.tableAdministrationStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1265
                self.installUninstallStatment()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1266
                self.setStatement()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1267
                self.showStatement()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1268
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 1269
                self.resourceGroupManagement()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1270
                self.otherAdministrativeStatement()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1271
                self.utilityStatement()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1272
                if not self.serverVersion >= 50604:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50604")
                self.state = 1273
                self.getDiagnostics()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1274
                self.signalStatement()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1275
                self.resignalStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(SQLParser.ALTER_SYMBOL, 0)

        def alterTable(self):
            return self.getTypedRuleContext(SQLParser.AlterTableContext,0)


        def alterDatabase(self):
            return self.getTypedRuleContext(SQLParser.AlterDatabaseContext,0)


        def PROCEDURE_SYMBOL(self):
            return self.getToken(SQLParser.PROCEDURE_SYMBOL, 0)

        def procedureRef(self):
            return self.getTypedRuleContext(SQLParser.ProcedureRefContext,0)


        def FUNCTION_SYMBOL(self):
            return self.getToken(SQLParser.FUNCTION_SYMBOL, 0)

        def functionRef(self):
            return self.getTypedRuleContext(SQLParser.FunctionRefContext,0)


        def alterView(self):
            return self.getTypedRuleContext(SQLParser.AlterViewContext,0)


        def alterEvent(self):
            return self.getTypedRuleContext(SQLParser.AlterEventContext,0)


        def alterTablespace(self):
            return self.getTypedRuleContext(SQLParser.AlterTablespaceContext,0)


        def alterUndoTablespace(self):
            return self.getTypedRuleContext(SQLParser.AlterUndoTablespaceContext,0)


        def alterLogfileGroup(self):
            return self.getTypedRuleContext(SQLParser.AlterLogfileGroupContext,0)


        def alterServer(self):
            return self.getTypedRuleContext(SQLParser.AlterServerContext,0)


        def INSTANCE_SYMBOL(self):
            return self.getToken(SQLParser.INSTANCE_SYMBOL, 0)

        def ROTATE_SYMBOL(self):
            return self.getToken(SQLParser.ROTATE_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(SQLParser.TextOrIdentifierContext,0)


        def MASTER_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SYMBOL, 0)

        def KEY_SYMBOL(self):
            return self.getToken(SQLParser.KEY_SYMBOL, 0)

        def routineAlterOptions(self):
            return self.getTypedRuleContext(SQLParser.RoutineAlterOptionsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_alterStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatement" ):
                listener.enterAlterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatement" ):
                listener.exitAlterStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatement" ):
                return visitor.visitAlterStatement(self)
            else:
                return visitor.visitChildren(self)




    def alterStatement(self):

        localctx = SQLParser.AlterStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_alterStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1278
            self.match(SQLParser.ALTER_SYMBOL)
            self.state = 1305
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 1279
                self.alterTable()
                pass

            elif la_ == 2:
                self.state = 1280
                self.alterDatabase()
                pass

            elif la_ == 3:
                self.state = 1281
                self.match(SQLParser.PROCEDURE_SYMBOL)
                self.state = 1282
                self.procedureRef()
                self.state = 1284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (SQLParser.COMMENT_SYMBOL - 75)) | (1 << (SQLParser.CONTAINS_SYMBOL - 75)) | (1 << (SQLParser.DETERMINISTIC_SYMBOL - 75)))) != 0) or _la==SQLParser.LANGUAGE_SYMBOL or ((((_la - 347)) & ~0x3f) == 0 and ((1 << (_la - 347)) & ((1 << (SQLParser.MODIFIES_SYMBOL - 347)) | (1 << (SQLParser.NOT_SYMBOL - 347)) | (1 << (SQLParser.NO_SYMBOL - 347)))) != 0) or _la==SQLParser.READS_SYMBOL or _la==SQLParser.SQL_SYMBOL:
                    self.state = 1283
                    self.routineAlterOptions()


                pass

            elif la_ == 4:
                self.state = 1286
                self.match(SQLParser.FUNCTION_SYMBOL)
                self.state = 1287
                self.functionRef()
                self.state = 1289
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (SQLParser.COMMENT_SYMBOL - 75)) | (1 << (SQLParser.CONTAINS_SYMBOL - 75)) | (1 << (SQLParser.DETERMINISTIC_SYMBOL - 75)))) != 0) or _la==SQLParser.LANGUAGE_SYMBOL or ((((_la - 347)) & ~0x3f) == 0 and ((1 << (_la - 347)) & ((1 << (SQLParser.MODIFIES_SYMBOL - 347)) | (1 << (SQLParser.NOT_SYMBOL - 347)) | (1 << (SQLParser.NO_SYMBOL - 347)))) != 0) or _la==SQLParser.READS_SYMBOL or _la==SQLParser.SQL_SYMBOL:
                    self.state = 1288
                    self.routineAlterOptions()


                pass

            elif la_ == 5:
                self.state = 1291
                self.alterView()
                pass

            elif la_ == 6:
                self.state = 1292
                self.alterEvent()
                pass

            elif la_ == 7:
                self.state = 1293
                self.alterTablespace()
                pass

            elif la_ == 8:
                self.state = 1294
                if not self.serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80014")
                self.state = 1295
                self.alterUndoTablespace()
                pass

            elif la_ == 9:
                self.state = 1296
                self.alterLogfileGroup()
                pass

            elif la_ == 10:
                self.state = 1297
                self.alterServer()
                pass

            elif la_ == 11:
                self.state = 1298
                if not self.serverVersion >= 50713:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50713")
                self.state = 1299
                self.match(SQLParser.INSTANCE_SYMBOL)
                self.state = 1300
                self.match(SQLParser.ROTATE_SYMBOL)
                self.state = 1301
                self.textOrIdentifier()
                self.state = 1302
                self.match(SQLParser.MASTER_SYMBOL)
                self.state = 1303
                self.match(SQLParser.KEY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE_SYMBOL(self):
            return self.getToken(SQLParser.DATABASE_SYMBOL, 0)

        def schemaRef(self):
            return self.getTypedRuleContext(SQLParser.SchemaRefContext,0)


        def UPGRADE_SYMBOL(self):
            return self.getToken(SQLParser.UPGRADE_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(SQLParser.DATA_SYMBOL, 0)

        def DIRECTORY_SYMBOL(self):
            return self.getToken(SQLParser.DIRECTORY_SYMBOL, 0)

        def NAME_SYMBOL(self):
            return self.getToken(SQLParser.NAME_SYMBOL, 0)

        def createDatabaseOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.CreateDatabaseOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.CreateDatabaseOptionContext,i)


        def getRuleIndex(self):
            return SQLParser.RULE_alterDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterDatabase" ):
                listener.enterAlterDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterDatabase" ):
                listener.exitAlterDatabase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterDatabase" ):
                return visitor.visitAlterDatabase(self)
            else:
                return visitor.visitChildren(self)




    def alterDatabase(self):

        localctx = SQLParser.AlterDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_alterDatabase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1307
            self.match(SQLParser.DATABASE_SYMBOL)
            self.state = 1308
            self.schemaRef()
            self.state = 1319
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 1310 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1309
                        self.createDatabaseOption()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1312 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1314
                if not self.serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 80000")
                self.state = 1315
                self.match(SQLParser.UPGRADE_SYMBOL)
                self.state = 1316
                self.match(SQLParser.DATA_SYMBOL)
                self.state = 1317
                self.match(SQLParser.DIRECTORY_SYMBOL)
                self.state = 1318
                self.match(SQLParser.NAME_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterEventContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENT_SYMBOL(self):
            return self.getToken(SQLParser.EVENT_SYMBOL, 0)

        def eventRef(self):
            return self.getTypedRuleContext(SQLParser.EventRefContext,0)


        def definerClause(self):
            return self.getTypedRuleContext(SQLParser.DefinerClauseContext,0)


        def ON_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.ON_SYMBOL)
            else:
                return self.getToken(SQLParser.ON_SYMBOL, i)

        def SCHEDULE_SYMBOL(self):
            return self.getToken(SQLParser.SCHEDULE_SYMBOL, 0)

        def schedule(self):
            return self.getTypedRuleContext(SQLParser.ScheduleContext,0)


        def COMPLETION_SYMBOL(self):
            return self.getToken(SQLParser.COMPLETION_SYMBOL, 0)

        def PRESERVE_SYMBOL(self):
            return self.getToken(SQLParser.PRESERVE_SYMBOL, 0)

        def RENAME_SYMBOL(self):
            return self.getToken(SQLParser.RENAME_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(SQLParser.TO_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def ENABLE_SYMBOL(self):
            return self.getToken(SQLParser.ENABLE_SYMBOL, 0)

        def DISABLE_SYMBOL(self):
            return self.getToken(SQLParser.DISABLE_SYMBOL, 0)

        def COMMENT_SYMBOL(self):
            return self.getToken(SQLParser.COMMENT_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextLiteralContext,0)


        def DO_SYMBOL(self):
            return self.getToken(SQLParser.DO_SYMBOL, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(SQLParser.CompoundStatementContext,0)


        def NOT_SYMBOL(self):
            return self.getToken(SQLParser.NOT_SYMBOL, 0)

        def SLAVE_SYMBOL(self):
            return self.getToken(SQLParser.SLAVE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_alterEvent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterEvent" ):
                listener.enterAlterEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterEvent" ):
                listener.exitAlterEvent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterEvent" ):
                return visitor.visitAlterEvent(self)
            else:
                return visitor.visitChildren(self)




    def alterEvent(self):

        localctx = SQLParser.AlterEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_alterEvent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.DEFINER_SYMBOL:
                self.state = 1321
                self.definerClause()


            self.state = 1324
            self.match(SQLParser.EVENT_SYMBOL)
            self.state = 1325
            self.eventRef()
            self.state = 1329
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 1326
                self.match(SQLParser.ON_SYMBOL)
                self.state = 1327
                self.match(SQLParser.SCHEDULE_SYMBOL)
                self.state = 1328
                self.schedule()


            self.state = 1337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.ON_SYMBOL:
                self.state = 1331
                self.match(SQLParser.ON_SYMBOL)
                self.state = 1332
                self.match(SQLParser.COMPLETION_SYMBOL)
                self.state = 1334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.NOT_SYMBOL:
                    self.state = 1333
                    self.match(SQLParser.NOT_SYMBOL)


                self.state = 1336
                self.match(SQLParser.PRESERVE_SYMBOL)


            self.state = 1342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.RENAME_SYMBOL:
                self.state = 1339
                self.match(SQLParser.RENAME_SYMBOL)
                self.state = 1340
                self.match(SQLParser.TO_SYMBOL)
                self.state = 1341
                self.identifier()


            self.state = 1350
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.ENABLE_SYMBOL]:
                self.state = 1344
                self.match(SQLParser.ENABLE_SYMBOL)
                pass
            elif token in [SQLParser.DISABLE_SYMBOL]:
                self.state = 1345
                self.match(SQLParser.DISABLE_SYMBOL)
                self.state = 1348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.ON_SYMBOL:
                    self.state = 1346
                    self.match(SQLParser.ON_SYMBOL)
                    self.state = 1347
                    self.match(SQLParser.SLAVE_SYMBOL)


                pass
            elif token in [SQLParser.EOF, SQLParser.COMMENT_SYMBOL, SQLParser.DO_SYMBOL, SQLParser.SEMICOLON_SYMBOL]:
                pass
            else:
                pass
            self.state = 1354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.COMMENT_SYMBOL:
                self.state = 1352
                self.match(SQLParser.COMMENT_SYMBOL)
                self.state = 1353
                self.textLiteral()


            self.state = 1358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.DO_SYMBOL:
                self.state = 1356
                self.match(SQLParser.DO_SYMBOL)
                self.state = 1357
                self.compoundStatement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterLogfileGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOGFILE_SYMBOL(self):
            return self.getToken(SQLParser.LOGFILE_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(SQLParser.GROUP_SYMBOL, 0)

        def logfileGroupRef(self):
            return self.getTypedRuleContext(SQLParser.LogfileGroupRefContext,0)


        def ADD_SYMBOL(self):
            return self.getToken(SQLParser.ADD_SYMBOL, 0)

        def UNDOFILE_SYMBOL(self):
            return self.getToken(SQLParser.UNDOFILE_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextLiteralContext,0)


        def alterLogfileGroupOptions(self):
            return self.getTypedRuleContext(SQLParser.AlterLogfileGroupOptionsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_alterLogfileGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterLogfileGroup" ):
                listener.enterAlterLogfileGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterLogfileGroup" ):
                listener.exitAlterLogfileGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterLogfileGroup" ):
                return visitor.visitAlterLogfileGroup(self)
            else:
                return visitor.visitChildren(self)




    def alterLogfileGroup(self):

        localctx = SQLParser.AlterLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_alterLogfileGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1360
            self.match(SQLParser.LOGFILE_SYMBOL)
            self.state = 1361
            self.match(SQLParser.GROUP_SYMBOL)
            self.state = 1362
            self.logfileGroupRef()
            self.state = 1363
            self.match(SQLParser.ADD_SYMBOL)
            self.state = 1364
            self.match(SQLParser.UNDOFILE_SYMBOL)
            self.state = 1365
            self.textLiteral()
            self.state = 1367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.ENGINE_SYMBOL or _la==SQLParser.INITIAL_SIZE_SYMBOL or _la==SQLParser.NO_WAIT_SYMBOL or _la==SQLParser.STORAGE_SYMBOL or _la==SQLParser.WAIT_SYMBOL:
                self.state = 1366
                self.alterLogfileGroupOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterLogfileGroupOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterLogfileGroupOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.AlterLogfileGroupOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.AlterLogfileGroupOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_alterLogfileGroupOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterLogfileGroupOptions" ):
                listener.enterAlterLogfileGroupOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterLogfileGroupOptions" ):
                listener.exitAlterLogfileGroupOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterLogfileGroupOptions" ):
                return visitor.visitAlterLogfileGroupOptions(self)
            else:
                return visitor.visitChildren(self)




    def alterLogfileGroupOptions(self):

        localctx = SQLParser.AlterLogfileGroupOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_alterLogfileGroupOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1369
            self.alterLogfileGroupOption()
            self.state = 1376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.ENGINE_SYMBOL or _la==SQLParser.INITIAL_SIZE_SYMBOL or _la==SQLParser.NO_WAIT_SYMBOL or _la==SQLParser.STORAGE_SYMBOL or _la==SQLParser.WAIT_SYMBOL or _la==SQLParser.COMMA_SYMBOL:
                self.state = 1371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.COMMA_SYMBOL:
                    self.state = 1370
                    self.match(SQLParser.COMMA_SYMBOL)


                self.state = 1373
                self.alterLogfileGroupOption()
                self.state = 1378
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterLogfileGroupOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tsOptionInitialSize(self):
            return self.getTypedRuleContext(SQLParser.TsOptionInitialSizeContext,0)


        def tsOptionEngine(self):
            return self.getTypedRuleContext(SQLParser.TsOptionEngineContext,0)


        def tsOptionWait(self):
            return self.getTypedRuleContext(SQLParser.TsOptionWaitContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_alterLogfileGroupOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterLogfileGroupOption" ):
                listener.enterAlterLogfileGroupOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterLogfileGroupOption" ):
                listener.exitAlterLogfileGroupOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterLogfileGroupOption" ):
                return visitor.visitAlterLogfileGroupOption(self)
            else:
                return visitor.visitChildren(self)




    def alterLogfileGroupOption(self):

        localctx = SQLParser.AlterLogfileGroupOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_alterLogfileGroupOption)
        try:
            self.state = 1382
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.INITIAL_SIZE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1379
                self.tsOptionInitialSize()
                pass
            elif token in [SQLParser.ENGINE_SYMBOL, SQLParser.STORAGE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1380
                self.tsOptionEngine()
                pass
            elif token in [SQLParser.NO_WAIT_SYMBOL, SQLParser.WAIT_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1381
                self.tsOptionWait()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterServerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVER_SYMBOL(self):
            return self.getToken(SQLParser.SERVER_SYMBOL, 0)

        def serverRef(self):
            return self.getTypedRuleContext(SQLParser.ServerRefContext,0)


        def serverOptions(self):
            return self.getTypedRuleContext(SQLParser.ServerOptionsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_alterServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterServer" ):
                listener.enterAlterServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterServer" ):
                listener.exitAlterServer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterServer" ):
                return visitor.visitAlterServer(self)
            else:
                return visitor.visitChildren(self)




    def alterServer(self):

        localctx = SQLParser.AlterServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_alterServer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1384
            self.match(SQLParser.SERVER_SYMBOL)
            self.state = 1385
            self.serverRef()
            self.state = 1386
            self.serverOptions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE_SYMBOL(self):
            return self.getToken(SQLParser.TABLE_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(SQLParser.TableRefContext,0)


        def onlineOption(self):
            return self.getTypedRuleContext(SQLParser.OnlineOptionContext,0)


        def IGNORE_SYMBOL(self):
            return self.getToken(SQLParser.IGNORE_SYMBOL, 0)

        def alterTableActions(self):
            return self.getTypedRuleContext(SQLParser.AlterTableActionsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_alterTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTable" ):
                listener.enterAlterTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTable" ):
                listener.exitAlterTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTable" ):
                return visitor.visitAlterTable(self)
            else:
                return visitor.visitChildren(self)




    def alterTable(self):

        localctx = SQLParser.AlterTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_alterTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1389
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 1388
                self.onlineOption()


            self.state = 1393
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 1391
                if not self.serverVersion < 50700:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 50700")
                self.state = 1392
                self.match(SQLParser.IGNORE_SYMBOL)


            self.state = 1395
            self.match(SQLParser.TABLE_SYMBOL)
            self.state = 1396
            self.tableRef()
            self.state = 1398
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 1397
                self.alterTableActions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTableActionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterCommandList(self):
            return self.getTypedRuleContext(SQLParser.AlterCommandListContext,0)


        def partitionClause(self):
            return self.getTypedRuleContext(SQLParser.PartitionClauseContext,0)


        def removePartitioning(self):
            return self.getTypedRuleContext(SQLParser.RemovePartitioningContext,0)


        def standaloneAlterCommands(self):
            return self.getTypedRuleContext(SQLParser.StandaloneAlterCommandsContext,0)


        def alterCommandsModifierList(self):
            return self.getTypedRuleContext(SQLParser.AlterCommandsModifierListContext,0)


        def COMMA_SYMBOL(self):
            return self.getToken(SQLParser.COMMA_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_alterTableActions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableActions" ):
                listener.enterAlterTableActions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableActions" ):
                listener.exitAlterTableActions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableActions" ):
                return visitor.visitAlterTableActions(self)
            else:
                return visitor.visitChildren(self)




    def alterTableActions(self):

        localctx = SQLParser.AlterTableActionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_alterTableActions)
        try:
            self.state = 1413
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1400
                self.alterCommandList()
                self.state = 1403
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLParser.PARTITION_SYMBOL]:
                    self.state = 1401
                    self.partitionClause()
                    pass
                elif token in [SQLParser.REMOVE_SYMBOL]:
                    self.state = 1402
                    self.removePartitioning()
                    pass
                elif token in [SQLParser.EOF, SQLParser.SEMICOLON_SYMBOL]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1405
                self.partitionClause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1406
                self.removePartitioning()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1410
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                if la_ == 1:
                    self.state = 1407
                    self.alterCommandsModifierList()
                    self.state = 1408
                    self.match(SQLParser.COMMA_SYMBOL)


                self.state = 1412
                self.standaloneAlterCommands()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterCommandListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterCommandsModifierList(self):
            return self.getTypedRuleContext(SQLParser.AlterCommandsModifierListContext,0)


        def alterList(self):
            return self.getTypedRuleContext(SQLParser.AlterListContext,0)


        def COMMA_SYMBOL(self):
            return self.getToken(SQLParser.COMMA_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_alterCommandList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterCommandList" ):
                listener.enterAlterCommandList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterCommandList" ):
                listener.exitAlterCommandList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterCommandList" ):
                return visitor.visitAlterCommandList(self)
            else:
                return visitor.visitChildren(self)




    def alterCommandList(self):

        localctx = SQLParser.AlterCommandListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_alterCommandList)
        try:
            self.state = 1422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1415
                self.alterCommandsModifierList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1419
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 1416
                    self.alterCommandsModifierList()
                    self.state = 1417
                    self.match(SQLParser.COMMA_SYMBOL)


                self.state = 1421
                self.alterList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterCommandsModifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterCommandsModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.AlterCommandsModifierContext)
            else:
                return self.getTypedRuleContext(SQLParser.AlterCommandsModifierContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_alterCommandsModifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterCommandsModifierList" ):
                listener.enterAlterCommandsModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterCommandsModifierList" ):
                listener.exitAlterCommandsModifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterCommandsModifierList" ):
                return visitor.visitAlterCommandsModifierList(self)
            else:
                return visitor.visitChildren(self)




    def alterCommandsModifierList(self):

        localctx = SQLParser.AlterCommandsModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_alterCommandsModifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1424
            self.alterCommandsModifier()
            self.state = 1429
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1425
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 1426
                    self.alterCommandsModifier() 
                self.state = 1431
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneAlterCommandsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISCARD_SYMBOL(self):
            return self.getToken(SQLParser.DISCARD_SYMBOL, 0)

        def TABLESPACE_SYMBOL(self):
            return self.getToken(SQLParser.TABLESPACE_SYMBOL, 0)

        def IMPORT_SYMBOL(self):
            return self.getToken(SQLParser.IMPORT_SYMBOL, 0)

        def alterPartition(self):
            return self.getTypedRuleContext(SQLParser.AlterPartitionContext,0)


        def SECONDARY_LOAD_SYMBOL(self):
            return self.getToken(SQLParser.SECONDARY_LOAD_SYMBOL, 0)

        def SECONDARY_UNLOAD_SYMBOL(self):
            return self.getToken(SQLParser.SECONDARY_UNLOAD_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_standaloneAlterCommands

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandaloneAlterCommands" ):
                listener.enterStandaloneAlterCommands(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandaloneAlterCommands" ):
                listener.exitStandaloneAlterCommands(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandaloneAlterCommands" ):
                return visitor.visitStandaloneAlterCommands(self)
            else:
                return visitor.visitChildren(self)




    def standaloneAlterCommands(self):

        localctx = SQLParser.StandaloneAlterCommandsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_standaloneAlterCommands)
        self._la = 0 # Token type
        try:
            self.state = 1439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1432
                self.match(SQLParser.DISCARD_SYMBOL)
                self.state = 1433
                self.match(SQLParser.TABLESPACE_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1434
                self.match(SQLParser.IMPORT_SYMBOL)
                self.state = 1435
                self.match(SQLParser.TABLESPACE_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1436
                self.alterPartition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1437
                if not self.serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80014")
                self.state = 1438
                _la = self._input.LA(1)
                if not(_la==SQLParser.SECONDARY_LOAD_SYMBOL or _la==SQLParser.SECONDARY_UNLOAD_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterPartitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_SYMBOL(self):
            return self.getToken(SQLParser.ADD_SYMBOL, 0)

        def PARTITION_SYMBOL(self):
            return self.getToken(SQLParser.PARTITION_SYMBOL, 0)

        def partitionDefinitions(self):
            return self.getTypedRuleContext(SQLParser.PartitionDefinitionsContext,0)


        def PARTITIONS_SYMBOL(self):
            return self.getToken(SQLParser.PARTITIONS_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(SQLParser.Real_ulong_numberContext,0)


        def noWriteToBinLog(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.NoWriteToBinLogContext)
            else:
                return self.getTypedRuleContext(SQLParser.NoWriteToBinLogContext,i)


        def DROP_SYMBOL(self):
            return self.getToken(SQLParser.DROP_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SQLParser.IdentifierListContext,0)


        def REBUILD_SYMBOL(self):
            return self.getToken(SQLParser.REBUILD_SYMBOL, 0)

        def allOrPartitionNameList(self):
            return self.getTypedRuleContext(SQLParser.AllOrPartitionNameListContext,0)


        def OPTIMIZE_SYMBOL(self):
            return self.getToken(SQLParser.OPTIMIZE_SYMBOL, 0)

        def ANALYZE_SYMBOL(self):
            return self.getToken(SQLParser.ANALYZE_SYMBOL, 0)

        def CHECK_SYMBOL(self):
            return self.getToken(SQLParser.CHECK_SYMBOL, 0)

        def checkOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.CheckOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.CheckOptionContext,i)


        def REPAIR_SYMBOL(self):
            return self.getToken(SQLParser.REPAIR_SYMBOL, 0)

        def repairType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.RepairTypeContext)
            else:
                return self.getTypedRuleContext(SQLParser.RepairTypeContext,i)


        def COALESCE_SYMBOL(self):
            return self.getToken(SQLParser.COALESCE_SYMBOL, 0)

        def TRUNCATE_SYMBOL(self):
            return self.getToken(SQLParser.TRUNCATE_SYMBOL, 0)

        def REORGANIZE_SYMBOL(self):
            return self.getToken(SQLParser.REORGANIZE_SYMBOL, 0)

        def INTO_SYMBOL(self):
            return self.getToken(SQLParser.INTO_SYMBOL, 0)

        def EXCHANGE_SYMBOL(self):
            return self.getToken(SQLParser.EXCHANGE_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def WITH_SYMBOL(self):
            return self.getToken(SQLParser.WITH_SYMBOL, 0)

        def TABLE_SYMBOL(self):
            return self.getToken(SQLParser.TABLE_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(SQLParser.TableRefContext,0)


        def withValidation(self):
            return self.getTypedRuleContext(SQLParser.WithValidationContext,0)


        def DISCARD_SYMBOL(self):
            return self.getToken(SQLParser.DISCARD_SYMBOL, 0)

        def TABLESPACE_SYMBOL(self):
            return self.getToken(SQLParser.TABLESPACE_SYMBOL, 0)

        def IMPORT_SYMBOL(self):
            return self.getToken(SQLParser.IMPORT_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_alterPartition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterPartition" ):
                listener.enterAlterPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterPartition" ):
                listener.exitAlterPartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterPartition" ):
                return visitor.visitAlterPartition(self)
            else:
                return visitor.visitChildren(self)




    def alterPartition(self):

        localctx = SQLParser.AlterPartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_alterPartition)
        self._la = 0 # Token type
        try:
            self.state = 1537
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1441
                self.match(SQLParser.ADD_SYMBOL)
                self.state = 1442
                self.match(SQLParser.PARTITION_SYMBOL)
                self.state = 1444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.LOCAL_SYMBOL or _la==SQLParser.NO_WRITE_TO_BINLOG_SYMBOL:
                    self.state = 1443
                    self.noWriteToBinLog()


                self.state = 1449
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLParser.OPEN_PAR_SYMBOL]:
                    self.state = 1446
                    self.partitionDefinitions()
                    pass
                elif token in [SQLParser.PARTITIONS_SYMBOL]:
                    self.state = 1447
                    self.match(SQLParser.PARTITIONS_SYMBOL)
                    self.state = 1448
                    self.real_ulong_number()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1451
                self.match(SQLParser.DROP_SYMBOL)
                self.state = 1452
                self.match(SQLParser.PARTITION_SYMBOL)
                self.state = 1453
                self.identifierList()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1454
                self.match(SQLParser.REBUILD_SYMBOL)
                self.state = 1455
                self.match(SQLParser.PARTITION_SYMBOL)
                self.state = 1457
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 1456
                    self.noWriteToBinLog()


                self.state = 1459
                self.allOrPartitionNameList()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1460
                self.match(SQLParser.OPTIMIZE_SYMBOL)
                self.state = 1461
                self.match(SQLParser.PARTITION_SYMBOL)
                self.state = 1463
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 1462
                    self.noWriteToBinLog()


                self.state = 1465
                self.allOrPartitionNameList()
                self.state = 1467
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.LOCAL_SYMBOL or _la==SQLParser.NO_WRITE_TO_BINLOG_SYMBOL:
                    self.state = 1466
                    self.noWriteToBinLog()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1469
                self.match(SQLParser.ANALYZE_SYMBOL)
                self.state = 1470
                self.match(SQLParser.PARTITION_SYMBOL)
                self.state = 1472
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 1471
                    self.noWriteToBinLog()


                self.state = 1474
                self.allOrPartitionNameList()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1475
                self.match(SQLParser.CHECK_SYMBOL)
                self.state = 1476
                self.match(SQLParser.PARTITION_SYMBOL)
                self.state = 1477
                self.allOrPartitionNameList()
                self.state = 1481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLParser.CHANGED_SYMBOL or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (SQLParser.EXTENDED_SYMBOL - 180)) | (1 << (SQLParser.FAST_SYMBOL - 180)) | (1 << (SQLParser.FOR_SYMBOL - 180)))) != 0) or _la==SQLParser.MEDIUM_SYMBOL or _la==SQLParser.QUICK_SYMBOL:
                    self.state = 1478
                    self.checkOption()
                    self.state = 1483
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1484
                self.match(SQLParser.REPAIR_SYMBOL)
                self.state = 1485
                self.match(SQLParser.PARTITION_SYMBOL)
                self.state = 1487
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 1486
                    self.noWriteToBinLog()


                self.state = 1489
                self.allOrPartitionNameList()
                self.state = 1493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLParser.EXTENDED_SYMBOL or _la==SQLParser.QUICK_SYMBOL or _la==SQLParser.USE_FRM_SYMBOL:
                    self.state = 1490
                    self.repairType()
                    self.state = 1495
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1496
                self.match(SQLParser.COALESCE_SYMBOL)
                self.state = 1497
                self.match(SQLParser.PARTITION_SYMBOL)
                self.state = 1499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.LOCAL_SYMBOL or _la==SQLParser.NO_WRITE_TO_BINLOG_SYMBOL:
                    self.state = 1498
                    self.noWriteToBinLog()


                self.state = 1501
                self.real_ulong_number()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1502
                self.match(SQLParser.TRUNCATE_SYMBOL)
                self.state = 1503
                self.match(SQLParser.PARTITION_SYMBOL)
                self.state = 1504
                self.allOrPartitionNameList()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1505
                self.match(SQLParser.REORGANIZE_SYMBOL)
                self.state = 1506
                self.match(SQLParser.PARTITION_SYMBOL)
                self.state = 1508
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 1507
                    self.noWriteToBinLog()


                self.state = 1514
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 1510
                    self.identifierList()
                    self.state = 1511
                    self.match(SQLParser.INTO_SYMBOL)
                    self.state = 1512
                    self.partitionDefinitions()


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1516
                self.match(SQLParser.EXCHANGE_SYMBOL)
                self.state = 1517
                self.match(SQLParser.PARTITION_SYMBOL)
                self.state = 1518
                self.identifier()
                self.state = 1519
                self.match(SQLParser.WITH_SYMBOL)
                self.state = 1520
                self.match(SQLParser.TABLE_SYMBOL)
                self.state = 1521
                self.tableRef()
                self.state = 1523
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 1522
                    self.withValidation()


                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1525
                if not self.serverVersion >= 50704:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50704")
                self.state = 1526
                self.match(SQLParser.DISCARD_SYMBOL)
                self.state = 1527
                self.match(SQLParser.PARTITION_SYMBOL)
                self.state = 1528
                self.allOrPartitionNameList()
                self.state = 1529
                self.match(SQLParser.TABLESPACE_SYMBOL)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1531
                if not self.serverVersion >= 50704:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50704")
                self.state = 1532
                self.match(SQLParser.IMPORT_SYMBOL)
                self.state = 1533
                self.match(SQLParser.PARTITION_SYMBOL)
                self.state = 1534
                self.allOrPartitionNameList()
                self.state = 1535
                self.match(SQLParser.TABLESPACE_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterListItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.AlterListItemContext)
            else:
                return self.getTypedRuleContext(SQLParser.AlterListItemContext,i)


        def createTableOptionsSpaceSeparated(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.CreateTableOptionsSpaceSeparatedContext)
            else:
                return self.getTypedRuleContext(SQLParser.CreateTableOptionsSpaceSeparatedContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def alterCommandsModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.AlterCommandsModifierContext)
            else:
                return self.getTypedRuleContext(SQLParser.AlterCommandsModifierContext,i)


        def getRuleIndex(self):
            return SQLParser.RULE_alterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterList" ):
                listener.enterAlterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterList" ):
                listener.exitAlterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterList" ):
                return visitor.visitAlterList(self)
            else:
                return visitor.visitChildren(self)




    def alterList(self):

        localctx = SQLParser.AlterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_alterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1541
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 1539
                self.alterListItem()
                pass

            elif la_ == 2:
                self.state = 1540
                self.createTableOptionsSpaceSeparated()
                pass


            self.state = 1551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 1543
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 1547
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                if la_ == 1:
                    self.state = 1544
                    self.alterListItem()
                    pass

                elif la_ == 2:
                    self.state = 1545
                    self.alterCommandsModifier()
                    pass

                elif la_ == 3:
                    self.state = 1546
                    self.createTableOptionsSpaceSeparated()
                    pass


                self.state = 1553
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterCommandsModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterAlgorithmOption(self):
            return self.getTypedRuleContext(SQLParser.AlterAlgorithmOptionContext,0)


        def alterLockOption(self):
            return self.getTypedRuleContext(SQLParser.AlterLockOptionContext,0)


        def withValidation(self):
            return self.getTypedRuleContext(SQLParser.WithValidationContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_alterCommandsModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterCommandsModifier" ):
                listener.enterAlterCommandsModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterCommandsModifier" ):
                listener.exitAlterCommandsModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterCommandsModifier" ):
                return visitor.visitAlterCommandsModifier(self)
            else:
                return visitor.visitChildren(self)




    def alterCommandsModifier(self):

        localctx = SQLParser.AlterCommandsModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_alterCommandsModifier)
        try:
            self.state = 1557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1554
                self.alterAlgorithmOption()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1555
                self.alterLockOption()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1556
                self.withValidation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterListItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_SYMBOL(self):
            return self.getToken(SQLParser.ADD_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def fieldDefinition(self):
            return self.getTypedRuleContext(SQLParser.FieldDefinitionContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def tableElementList(self):
            return self.getTypedRuleContext(SQLParser.TableElementListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def COLUMN_SYMBOL(self):
            return self.getToken(SQLParser.COLUMN_SYMBOL, 0)

        def checkOrReferences(self):
            return self.getTypedRuleContext(SQLParser.CheckOrReferencesContext,0)


        def place(self):
            return self.getTypedRuleContext(SQLParser.PlaceContext,0)


        def tableConstraintDef(self):
            return self.getTypedRuleContext(SQLParser.TableConstraintDefContext,0)


        def CHANGE_SYMBOL(self):
            return self.getToken(SQLParser.CHANGE_SYMBOL, 0)

        def columnInternalRef(self):
            return self.getTypedRuleContext(SQLParser.ColumnInternalRefContext,0)


        def MODIFY_SYMBOL(self):
            return self.getToken(SQLParser.MODIFY_SYMBOL, 0)

        def DROP_SYMBOL(self):
            return self.getToken(SQLParser.DROP_SYMBOL, 0)

        def FOREIGN_SYMBOL(self):
            return self.getToken(SQLParser.FOREIGN_SYMBOL, 0)

        def KEY_SYMBOL(self):
            return self.getToken(SQLParser.KEY_SYMBOL, 0)

        def PRIMARY_SYMBOL(self):
            return self.getToken(SQLParser.PRIMARY_SYMBOL, 0)

        def keyOrIndex(self):
            return self.getTypedRuleContext(SQLParser.KeyOrIndexContext,0)


        def indexRef(self):
            return self.getTypedRuleContext(SQLParser.IndexRefContext,0)


        def CHECK_SYMBOL(self):
            return self.getToken(SQLParser.CHECK_SYMBOL, 0)

        def CONSTRAINT_SYMBOL(self):
            return self.getToken(SQLParser.CONSTRAINT_SYMBOL, 0)

        def restrict(self):
            return self.getTypedRuleContext(SQLParser.RestrictContext,0)


        def DISABLE_SYMBOL(self):
            return self.getToken(SQLParser.DISABLE_SYMBOL, 0)

        def KEYS_SYMBOL(self):
            return self.getToken(SQLParser.KEYS_SYMBOL, 0)

        def ENABLE_SYMBOL(self):
            return self.getToken(SQLParser.ENABLE_SYMBOL, 0)

        def ALTER_SYMBOL(self):
            return self.getToken(SQLParser.ALTER_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(SQLParser.SET_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(SQLParser.DEFAULT_SYMBOL, 0)

        def exprWithParentheses(self):
            return self.getTypedRuleContext(SQLParser.ExprWithParenthesesContext,0)


        def signedLiteral(self):
            return self.getTypedRuleContext(SQLParser.SignedLiteralContext,0)


        def INDEX_SYMBOL(self):
            return self.getToken(SQLParser.INDEX_SYMBOL, 0)

        def visibility(self):
            return self.getTypedRuleContext(SQLParser.VisibilityContext,0)


        def constraintEnforcement(self):
            return self.getTypedRuleContext(SQLParser.ConstraintEnforcementContext,0)


        def RENAME_SYMBOL(self):
            return self.getToken(SQLParser.RENAME_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(SQLParser.TO_SYMBOL, 0)

        def tableName(self):
            return self.getTypedRuleContext(SQLParser.TableNameContext,0)


        def AS_SYMBOL(self):
            return self.getToken(SQLParser.AS_SYMBOL, 0)

        def indexName(self):
            return self.getTypedRuleContext(SQLParser.IndexNameContext,0)


        def CONVERT_SYMBOL(self):
            return self.getToken(SQLParser.CONVERT_SYMBOL, 0)

        def charset(self):
            return self.getTypedRuleContext(SQLParser.CharsetContext,0)


        def charsetName(self):
            return self.getTypedRuleContext(SQLParser.CharsetNameContext,0)


        def collate(self):
            return self.getTypedRuleContext(SQLParser.CollateContext,0)


        def FORCE_SYMBOL(self):
            return self.getToken(SQLParser.FORCE_SYMBOL, 0)

        def ORDER_SYMBOL(self):
            return self.getToken(SQLParser.ORDER_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(SQLParser.BY_SYMBOL, 0)

        def alterOrderList(self):
            return self.getTypedRuleContext(SQLParser.AlterOrderListContext,0)


        def UPGRADE_SYMBOL(self):
            return self.getToken(SQLParser.UPGRADE_SYMBOL, 0)

        def PARTITIONING_SYMBOL(self):
            return self.getToken(SQLParser.PARTITIONING_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_alterListItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterListItem" ):
                listener.enterAlterListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterListItem" ):
                listener.exitAlterListItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterListItem" ):
                return visitor.visitAlterListItem(self)
            else:
                return visitor.visitChildren(self)




    def alterListItem(self):

        localctx = SQLParser.AlterListItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_alterListItem)
        self._la = 0 # Token type
        try:
            self.state = 1704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1559
                self.match(SQLParser.ADD_SYMBOL)
                self.state = 1561
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 1560
                    self.match(SQLParser.COLUMN_SYMBOL)


                self.state = 1575
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                if la_ == 1:
                    self.state = 1563
                    self.identifier()
                    self.state = 1564
                    self.fieldDefinition()
                    self.state = 1566
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                    if la_ == 1:
                        self.state = 1565
                        self.checkOrReferences()


                    self.state = 1569
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.AFTER_SYMBOL or _la==SQLParser.FIRST_SYMBOL:
                        self.state = 1568
                        self.place()


                    pass

                elif la_ == 2:
                    self.state = 1571
                    self.match(SQLParser.OPEN_PAR_SYMBOL)
                    self.state = 1572
                    self.tableElementList()
                    self.state = 1573
                    self.match(SQLParser.CLOSE_PAR_SYMBOL)
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1577
                self.match(SQLParser.ADD_SYMBOL)
                self.state = 1578
                self.tableConstraintDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1579
                self.match(SQLParser.CHANGE_SYMBOL)
                self.state = 1581
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 1580
                    self.match(SQLParser.COLUMN_SYMBOL)


                self.state = 1583
                self.columnInternalRef()
                self.state = 1584
                self.identifier()
                self.state = 1585
                self.fieldDefinition()
                self.state = 1587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.AFTER_SYMBOL or _la==SQLParser.FIRST_SYMBOL:
                    self.state = 1586
                    self.place()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1589
                self.match(SQLParser.MODIFY_SYMBOL)
                self.state = 1591
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 1590
                    self.match(SQLParser.COLUMN_SYMBOL)


                self.state = 1593
                self.columnInternalRef()
                self.state = 1594
                self.fieldDefinition()
                self.state = 1596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.AFTER_SYMBOL or _la==SQLParser.FIRST_SYMBOL:
                    self.state = 1595
                    self.place()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1598
                self.match(SQLParser.DROP_SYMBOL)
                self.state = 1627
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 1600
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                    if la_ == 1:
                        self.state = 1599
                        self.match(SQLParser.COLUMN_SYMBOL)


                    self.state = 1602
                    self.columnInternalRef()
                    self.state = 1604
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.CASCADE_SYMBOL or _la==SQLParser.RESTRICT_SYMBOL:
                        self.state = 1603
                        self.restrict()


                    pass

                elif la_ == 2:
                    self.state = 1606
                    self.match(SQLParser.FOREIGN_SYMBOL)
                    self.state = 1607
                    self.match(SQLParser.KEY_SYMBOL)
                    self.state = 1614
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                    if la_ == 1:
                        self.state = 1608
                        if not self.serverVersion >= 50700:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.serverVersion >= 50700")
                        self.state = 1609
                        self.columnInternalRef()
                        pass

                    elif la_ == 2:
                        self.state = 1610
                        if not self.serverVersion < 50700:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.serverVersion < 50700")
                        self.state = 1612
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                        if la_ == 1:
                            self.state = 1611
                            self.columnInternalRef()


                        pass


                    pass

                elif la_ == 3:
                    self.state = 1616
                    self.match(SQLParser.PRIMARY_SYMBOL)
                    self.state = 1617
                    self.match(SQLParser.KEY_SYMBOL)
                    pass

                elif la_ == 4:
                    self.state = 1618
                    self.keyOrIndex()
                    self.state = 1619
                    self.indexRef()
                    pass

                elif la_ == 5:
                    self.state = 1621
                    if not self.serverVersion >= 80017:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80017")
                    self.state = 1622
                    self.match(SQLParser.CHECK_SYMBOL)
                    self.state = 1623
                    self.identifier()
                    pass

                elif la_ == 6:
                    self.state = 1624
                    if not self.serverVersion >= 80019:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80019")
                    self.state = 1625
                    self.match(SQLParser.CONSTRAINT_SYMBOL)
                    self.state = 1626
                    self.identifier()
                    pass


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1629
                self.match(SQLParser.DISABLE_SYMBOL)
                self.state = 1630
                self.match(SQLParser.KEYS_SYMBOL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1631
                self.match(SQLParser.ENABLE_SYMBOL)
                self.state = 1632
                self.match(SQLParser.KEYS_SYMBOL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1633
                self.match(SQLParser.ALTER_SYMBOL)
                self.state = 1635
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 1634
                    self.match(SQLParser.COLUMN_SYMBOL)


                self.state = 1637
                self.columnInternalRef()
                self.state = 1647
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLParser.SET_SYMBOL]:
                    self.state = 1638
                    self.match(SQLParser.SET_SYMBOL)
                    self.state = 1639
                    self.match(SQLParser.DEFAULT_SYMBOL)
                    self.state = 1643
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                    if la_ == 1:
                        self.state = 1640
                        if not self.serverVersion >= 80014:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.serverVersion >= 80014")
                        self.state = 1641
                        self.exprWithParentheses()
                        pass

                    elif la_ == 2:
                        self.state = 1642
                        self.signedLiteral()
                        pass


                    pass
                elif token in [SQLParser.DROP_SYMBOL]:
                    self.state = 1645
                    self.match(SQLParser.DROP_SYMBOL)
                    self.state = 1646
                    self.match(SQLParser.DEFAULT_SYMBOL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1649
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 1650
                self.match(SQLParser.ALTER_SYMBOL)
                self.state = 1651
                self.match(SQLParser.INDEX_SYMBOL)
                self.state = 1652
                self.indexRef()
                self.state = 1653
                self.visibility()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1655
                if not self.serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80017")
                self.state = 1656
                self.match(SQLParser.ALTER_SYMBOL)
                self.state = 1657
                self.match(SQLParser.CHECK_SYMBOL)
                self.state = 1658
                self.identifier()
                self.state = 1659
                self.constraintEnforcement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1661
                if not self.serverVersion >= 80019:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80019")
                self.state = 1662
                self.match(SQLParser.ALTER_SYMBOL)
                self.state = 1663
                self.match(SQLParser.CONSTRAINT_SYMBOL)
                self.state = 1664
                self.identifier()
                self.state = 1665
                self.constraintEnforcement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1667
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 1668
                self.match(SQLParser.RENAME_SYMBOL)
                self.state = 1669
                self.match(SQLParser.COLUMN_SYMBOL)
                self.state = 1670
                self.columnInternalRef()
                self.state = 1671
                self.match(SQLParser.TO_SYMBOL)
                self.state = 1672
                self.identifier()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1674
                self.match(SQLParser.RENAME_SYMBOL)
                self.state = 1676
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                if la_ == 1:
                    self.state = 1675
                    _la = self._input.LA(1)
                    if not(_la==SQLParser.AS_SYMBOL or _la==SQLParser.TO_SYMBOL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1678
                self.tableName()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1679
                if not self.serverVersion >= 50700:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50700")
                self.state = 1680
                self.match(SQLParser.RENAME_SYMBOL)
                self.state = 1681
                self.keyOrIndex()
                self.state = 1682
                self.indexRef()
                self.state = 1683
                self.match(SQLParser.TO_SYMBOL)
                self.state = 1684
                self.indexName()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1686
                self.match(SQLParser.CONVERT_SYMBOL)
                self.state = 1687
                self.match(SQLParser.TO_SYMBOL)
                self.state = 1688
                self.charset()
                self.state = 1692
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 1689
                    if not self.serverVersion >= 80014:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80014")
                    self.state = 1690
                    self.match(SQLParser.DEFAULT_SYMBOL)
                    pass

                elif la_ == 2:
                    self.state = 1691
                    self.charsetName()
                    pass


                self.state = 1695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.COLLATE_SYMBOL:
                    self.state = 1694
                    self.collate()


                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1697
                self.match(SQLParser.FORCE_SYMBOL)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1698
                self.match(SQLParser.ORDER_SYMBOL)
                self.state = 1699
                self.match(SQLParser.BY_SYMBOL)
                self.state = 1700
                self.alterOrderList()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1701
                if not self.serverVersion >= 50708 and self.serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50708 and self.serverVersion < 80000")
                self.state = 1702
                self.match(SQLParser.UPGRADE_SYMBOL)
                self.state = 1703
                self.match(SQLParser.PARTITIONING_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AFTER_SYMBOL(self):
            return self.getToken(SQLParser.AFTER_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def FIRST_SYMBOL(self):
            return self.getToken(SQLParser.FIRST_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_place

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlace" ):
                listener.enterPlace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlace" ):
                listener.exitPlace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlace" ):
                return visitor.visitPlace(self)
            else:
                return visitor.visitChildren(self)




    def place(self):

        localctx = SQLParser.PlaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_place)
        try:
            self.state = 1709
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.AFTER_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1706
                self.match(SQLParser.AFTER_SYMBOL)
                self.state = 1707
                self.identifier()
                pass
            elif token in [SQLParser.FIRST_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1708
                self.match(SQLParser.FIRST_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestrictContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESTRICT_SYMBOL(self):
            return self.getToken(SQLParser.RESTRICT_SYMBOL, 0)

        def CASCADE_SYMBOL(self):
            return self.getToken(SQLParser.CASCADE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_restrict

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestrict" ):
                listener.enterRestrict(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestrict" ):
                listener.exitRestrict(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRestrict" ):
                return visitor.visitRestrict(self)
            else:
                return visitor.visitChildren(self)




    def restrict(self):

        localctx = SQLParser.RestrictContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_restrict)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1711
            _la = self._input.LA(1)
            if not(_la==SQLParser.CASCADE_SYMBOL or _la==SQLParser.RESTRICT_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterOrderListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SQLParser.IdentifierContext,i)


        def direction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.DirectionContext)
            else:
                return self.getTypedRuleContext(SQLParser.DirectionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_alterOrderList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterOrderList" ):
                listener.enterAlterOrderList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterOrderList" ):
                listener.exitAlterOrderList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterOrderList" ):
                return visitor.visitAlterOrderList(self)
            else:
                return visitor.visitChildren(self)




    def alterOrderList(self):

        localctx = SQLParser.AlterOrderListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_alterOrderList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1713
            self.identifier()
            self.state = 1715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.ASC_SYMBOL or _la==SQLParser.DESC_SYMBOL:
                self.state = 1714
                self.direction()


            self.state = 1724
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1717
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 1718
                    self.identifier()
                    self.state = 1720
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.ASC_SYMBOL or _la==SQLParser.DESC_SYMBOL:
                        self.state = 1719
                        self.direction()

             
                self.state = 1726
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterAlgorithmOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALGORITHM_SYMBOL(self):
            return self.getToken(SQLParser.ALGORITHM_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(SQLParser.DEFAULT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_alterAlgorithmOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterAlgorithmOption" ):
                listener.enterAlterAlgorithmOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterAlgorithmOption" ):
                listener.exitAlterAlgorithmOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterAlgorithmOption" ):
                return visitor.visitAlterAlgorithmOption(self)
            else:
                return visitor.visitChildren(self)




    def alterAlgorithmOption(self):

        localctx = SQLParser.AlterAlgorithmOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_alterAlgorithmOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1727
            self.match(SQLParser.ALGORITHM_SYMBOL)
            self.state = 1729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 1728
                self.match(SQLParser.EQUAL_OPERATOR)


            self.state = 1733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 1731
                self.match(SQLParser.DEFAULT_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 1732
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterLockOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK_SYMBOL(self):
            return self.getToken(SQLParser.LOCK_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(SQLParser.DEFAULT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_alterLockOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterLockOption" ):
                listener.enterAlterLockOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterLockOption" ):
                listener.exitAlterLockOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterLockOption" ):
                return visitor.visitAlterLockOption(self)
            else:
                return visitor.visitChildren(self)




    def alterLockOption(self):

        localctx = SQLParser.AlterLockOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_alterLockOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1735
            self.match(SQLParser.LOCK_SYMBOL)
            self.state = 1737
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 1736
                self.match(SQLParser.EQUAL_OPERATOR)


            self.state = 1741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 1739
                self.match(SQLParser.DEFAULT_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 1740
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexLockAndAlgorithmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterAlgorithmOption(self):
            return self.getTypedRuleContext(SQLParser.AlterAlgorithmOptionContext,0)


        def alterLockOption(self):
            return self.getTypedRuleContext(SQLParser.AlterLockOptionContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_indexLockAndAlgorithm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexLockAndAlgorithm" ):
                listener.enterIndexLockAndAlgorithm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexLockAndAlgorithm" ):
                listener.exitIndexLockAndAlgorithm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexLockAndAlgorithm" ):
                return visitor.visitIndexLockAndAlgorithm(self)
            else:
                return visitor.visitChildren(self)




    def indexLockAndAlgorithm(self):

        localctx = SQLParser.IndexLockAndAlgorithmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_indexLockAndAlgorithm)
        self._la = 0 # Token type
        try:
            self.state = 1751
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.ALGORITHM_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1743
                self.alterAlgorithmOption()
                self.state = 1745
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.LOCK_SYMBOL:
                    self.state = 1744
                    self.alterLockOption()


                pass
            elif token in [SQLParser.LOCK_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1747
                self.alterLockOption()
                self.state = 1749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.ALGORITHM_SYMBOL:
                    self.state = 1748
                    self.alterAlgorithmOption()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithValidationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALIDATION_SYMBOL(self):
            return self.getToken(SQLParser.VALIDATION_SYMBOL, 0)

        def WITH_SYMBOL(self):
            return self.getToken(SQLParser.WITH_SYMBOL, 0)

        def WITHOUT_SYMBOL(self):
            return self.getToken(SQLParser.WITHOUT_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_withValidation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithValidation" ):
                listener.enterWithValidation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithValidation" ):
                listener.exitWithValidation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithValidation" ):
                return visitor.visitWithValidation(self)
            else:
                return visitor.visitChildren(self)




    def withValidation(self):

        localctx = SQLParser.WithValidationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_withValidation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1753
            if not self.serverVersion >= 50706:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.serverVersion >= 50706")
            self.state = 1754
            _la = self._input.LA(1)
            if not(_la==SQLParser.WITH_SYMBOL or _la==SQLParser.WITHOUT_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1755
            self.match(SQLParser.VALIDATION_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemovePartitioningContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE_SYMBOL(self):
            return self.getToken(SQLParser.REMOVE_SYMBOL, 0)

        def PARTITIONING_SYMBOL(self):
            return self.getToken(SQLParser.PARTITIONING_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_removePartitioning

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemovePartitioning" ):
                listener.enterRemovePartitioning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemovePartitioning" ):
                listener.exitRemovePartitioning(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRemovePartitioning" ):
                return visitor.visitRemovePartitioning(self)
            else:
                return visitor.visitChildren(self)




    def removePartitioning(self):

        localctx = SQLParser.RemovePartitioningContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_removePartitioning)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1757
            self.match(SQLParser.REMOVE_SYMBOL)
            self.state = 1758
            self.match(SQLParser.PARTITIONING_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllOrPartitionNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL_SYMBOL(self):
            return self.getToken(SQLParser.ALL_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SQLParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_allOrPartitionNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllOrPartitionNameList" ):
                listener.enterAllOrPartitionNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllOrPartitionNameList" ):
                listener.exitAllOrPartitionNameList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllOrPartitionNameList" ):
                return visitor.visitAllOrPartitionNameList(self)
            else:
                return visitor.visitChildren(self)




    def allOrPartitionNameList(self):

        localctx = SQLParser.AllOrPartitionNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_allOrPartitionNameList)
        try:
            self.state = 1762
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1760
                self.match(SQLParser.ALL_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1761
                self.identifierList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTablespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESPACE_SYMBOL(self):
            return self.getToken(SQLParser.TABLESPACE_SYMBOL, 0)

        def tablespaceRef(self):
            return self.getTypedRuleContext(SQLParser.TablespaceRefContext,0)


        def DATAFILE_SYMBOL(self):
            return self.getToken(SQLParser.DATAFILE_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextLiteralContext,0)


        def RENAME_SYMBOL(self):
            return self.getToken(SQLParser.RENAME_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(SQLParser.TO_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def alterTablespaceOptions(self):
            return self.getTypedRuleContext(SQLParser.AlterTablespaceOptionsContext,0)


        def ADD_SYMBOL(self):
            return self.getToken(SQLParser.ADD_SYMBOL, 0)

        def DROP_SYMBOL(self):
            return self.getToken(SQLParser.DROP_SYMBOL, 0)

        def CHANGE_SYMBOL(self):
            return self.getToken(SQLParser.CHANGE_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(SQLParser.NOT_SYMBOL, 0)

        def ACCESSIBLE_SYMBOL(self):
            return self.getToken(SQLParser.ACCESSIBLE_SYMBOL, 0)

        def READ_ONLY_SYMBOL(self):
            return self.getToken(SQLParser.READ_ONLY_SYMBOL, 0)

        def READ_WRITE_SYMBOL(self):
            return self.getToken(SQLParser.READ_WRITE_SYMBOL, 0)

        def changeTablespaceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ChangeTablespaceOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.ChangeTablespaceOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_alterTablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTablespace" ):
                listener.enterAlterTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTablespace" ):
                listener.exitAlterTablespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTablespace" ):
                return visitor.visitAlterTablespace(self)
            else:
                return visitor.visitChildren(self)




    def alterTablespace(self):

        localctx = SQLParser.AlterTablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_alterTablespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1764
            self.match(SQLParser.TABLESPACE_SYMBOL)
            self.state = 1765
            self.tablespaceRef()
            self.state = 1799
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 1766
                _la = self._input.LA(1)
                if not(_la==SQLParser.ADD_SYMBOL or _la==SQLParser.DROP_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1767
                self.match(SQLParser.DATAFILE_SYMBOL)
                self.state = 1768
                self.textLiteral()
                self.state = 1770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.AUTOEXTEND_SIZE_SYMBOL or _la==SQLParser.ENCRYPTION_SYMBOL or _la==SQLParser.ENGINE_SYMBOL or _la==SQLParser.INITIAL_SIZE_SYMBOL or _la==SQLParser.MAX_SIZE_SYMBOL or _la==SQLParser.NO_WAIT_SYMBOL or _la==SQLParser.STORAGE_SYMBOL or _la==SQLParser.WAIT_SYMBOL:
                    self.state = 1769
                    self.alterTablespaceOptions()


                pass

            elif la_ == 2:
                self.state = 1772
                if not self.serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 80000")
                self.state = 1792
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLParser.EOF, SQLParser.SEMICOLON_SYMBOL]:
                    pass
                elif token in [SQLParser.CHANGE_SYMBOL]:
                    self.state = 1774
                    self.match(SQLParser.CHANGE_SYMBOL)
                    self.state = 1775
                    self.match(SQLParser.DATAFILE_SYMBOL)
                    self.state = 1776
                    self.textLiteral()
                    self.state = 1787
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.AUTOEXTEND_SIZE_SYMBOL or _la==SQLParser.INITIAL_SIZE_SYMBOL or _la==SQLParser.MAX_SIZE_SYMBOL:
                        self.state = 1777
                        self.changeTablespaceOption()
                        self.state = 1784
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SQLParser.AUTOEXTEND_SIZE_SYMBOL or _la==SQLParser.INITIAL_SIZE_SYMBOL or _la==SQLParser.MAX_SIZE_SYMBOL or _la==SQLParser.COMMA_SYMBOL:
                            self.state = 1779
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==SQLParser.COMMA_SYMBOL:
                                self.state = 1778
                                self.match(SQLParser.COMMA_SYMBOL)


                            self.state = 1781
                            self.changeTablespaceOption()
                            self.state = 1786
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    pass
                elif token in [SQLParser.READ_ONLY_SYMBOL, SQLParser.READ_WRITE_SYMBOL]:
                    self.state = 1789
                    _la = self._input.LA(1)
                    if not(_la==SQLParser.READ_ONLY_SYMBOL or _la==SQLParser.READ_WRITE_SYMBOL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [SQLParser.NOT_SYMBOL]:
                    self.state = 1790
                    self.match(SQLParser.NOT_SYMBOL)
                    self.state = 1791
                    self.match(SQLParser.ACCESSIBLE_SYMBOL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.state = 1794
                self.match(SQLParser.RENAME_SYMBOL)
                self.state = 1795
                self.match(SQLParser.TO_SYMBOL)
                self.state = 1796
                self.identifier()
                pass

            elif la_ == 4:
                self.state = 1797
                if not self.serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80014")
                self.state = 1798
                self.alterTablespaceOptions()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterUndoTablespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDO_SYMBOL(self):
            return self.getToken(SQLParser.UNDO_SYMBOL, 0)

        def TABLESPACE_SYMBOL(self):
            return self.getToken(SQLParser.TABLESPACE_SYMBOL, 0)

        def tablespaceRef(self):
            return self.getTypedRuleContext(SQLParser.TablespaceRefContext,0)


        def SET_SYMBOL(self):
            return self.getToken(SQLParser.SET_SYMBOL, 0)

        def ACTIVE_SYMBOL(self):
            return self.getToken(SQLParser.ACTIVE_SYMBOL, 0)

        def INACTIVE_SYMBOL(self):
            return self.getToken(SQLParser.INACTIVE_SYMBOL, 0)

        def undoTableSpaceOptions(self):
            return self.getTypedRuleContext(SQLParser.UndoTableSpaceOptionsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_alterUndoTablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUndoTablespace" ):
                listener.enterAlterUndoTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUndoTablespace" ):
                listener.exitAlterUndoTablespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterUndoTablespace" ):
                return visitor.visitAlterUndoTablespace(self)
            else:
                return visitor.visitChildren(self)




    def alterUndoTablespace(self):

        localctx = SQLParser.AlterUndoTablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_alterUndoTablespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1801
            self.match(SQLParser.UNDO_SYMBOL)
            self.state = 1802
            self.match(SQLParser.TABLESPACE_SYMBOL)
            self.state = 1803
            self.tablespaceRef()
            self.state = 1804
            self.match(SQLParser.SET_SYMBOL)
            self.state = 1805
            _la = self._input.LA(1)
            if not(_la==SQLParser.ACTIVE_SYMBOL or _la==SQLParser.INACTIVE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.ENGINE_SYMBOL or _la==SQLParser.STORAGE_SYMBOL:
                self.state = 1806
                self.undoTableSpaceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UndoTableSpaceOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def undoTableSpaceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.UndoTableSpaceOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.UndoTableSpaceOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_undoTableSpaceOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUndoTableSpaceOptions" ):
                listener.enterUndoTableSpaceOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUndoTableSpaceOptions" ):
                listener.exitUndoTableSpaceOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUndoTableSpaceOptions" ):
                return visitor.visitUndoTableSpaceOptions(self)
            else:
                return visitor.visitChildren(self)




    def undoTableSpaceOptions(self):

        localctx = SQLParser.UndoTableSpaceOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_undoTableSpaceOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1809
            self.undoTableSpaceOption()
            self.state = 1816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.ENGINE_SYMBOL or _la==SQLParser.STORAGE_SYMBOL or _la==SQLParser.COMMA_SYMBOL:
                self.state = 1811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.COMMA_SYMBOL:
                    self.state = 1810
                    self.match(SQLParser.COMMA_SYMBOL)


                self.state = 1813
                self.undoTableSpaceOption()
                self.state = 1818
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UndoTableSpaceOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tsOptionEngine(self):
            return self.getTypedRuleContext(SQLParser.TsOptionEngineContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_undoTableSpaceOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUndoTableSpaceOption" ):
                listener.enterUndoTableSpaceOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUndoTableSpaceOption" ):
                listener.exitUndoTableSpaceOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUndoTableSpaceOption" ):
                return visitor.visitUndoTableSpaceOption(self)
            else:
                return visitor.visitChildren(self)




    def undoTableSpaceOption(self):

        localctx = SQLParser.UndoTableSpaceOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_undoTableSpaceOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1819
            self.tsOptionEngine()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTablespaceOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterTablespaceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.AlterTablespaceOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.AlterTablespaceOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_alterTablespaceOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTablespaceOptions" ):
                listener.enterAlterTablespaceOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTablespaceOptions" ):
                listener.exitAlterTablespaceOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTablespaceOptions" ):
                return visitor.visitAlterTablespaceOptions(self)
            else:
                return visitor.visitChildren(self)




    def alterTablespaceOptions(self):

        localctx = SQLParser.AlterTablespaceOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_alterTablespaceOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1821
            self.alterTablespaceOption()
            self.state = 1828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.AUTOEXTEND_SIZE_SYMBOL or _la==SQLParser.ENCRYPTION_SYMBOL or _la==SQLParser.ENGINE_SYMBOL or _la==SQLParser.INITIAL_SIZE_SYMBOL or _la==SQLParser.MAX_SIZE_SYMBOL or _la==SQLParser.NO_WAIT_SYMBOL or _la==SQLParser.STORAGE_SYMBOL or _la==SQLParser.WAIT_SYMBOL or _la==SQLParser.COMMA_SYMBOL:
                self.state = 1823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.COMMA_SYMBOL:
                    self.state = 1822
                    self.match(SQLParser.COMMA_SYMBOL)


                self.state = 1825
                self.alterTablespaceOption()
                self.state = 1830
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTablespaceOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INITIAL_SIZE_SYMBOL(self):
            return self.getToken(SQLParser.INITIAL_SIZE_SYMBOL, 0)

        def sizeNumber(self):
            return self.getTypedRuleContext(SQLParser.SizeNumberContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def tsOptionAutoextendSize(self):
            return self.getTypedRuleContext(SQLParser.TsOptionAutoextendSizeContext,0)


        def tsOptionMaxSize(self):
            return self.getTypedRuleContext(SQLParser.TsOptionMaxSizeContext,0)


        def tsOptionEngine(self):
            return self.getTypedRuleContext(SQLParser.TsOptionEngineContext,0)


        def tsOptionWait(self):
            return self.getTypedRuleContext(SQLParser.TsOptionWaitContext,0)


        def tsOptionEncryption(self):
            return self.getTypedRuleContext(SQLParser.TsOptionEncryptionContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_alterTablespaceOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTablespaceOption" ):
                listener.enterAlterTablespaceOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTablespaceOption" ):
                listener.exitAlterTablespaceOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTablespaceOption" ):
                return visitor.visitAlterTablespaceOption(self)
            else:
                return visitor.visitChildren(self)




    def alterTablespaceOption(self):

        localctx = SQLParser.AlterTablespaceOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_alterTablespaceOption)
        try:
            self.state = 1841
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.INITIAL_SIZE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1831
                self.match(SQLParser.INITIAL_SIZE_SYMBOL)
                self.state = 1833
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                if la_ == 1:
                    self.state = 1832
                    self.match(SQLParser.EQUAL_OPERATOR)


                self.state = 1835
                self.sizeNumber()
                pass
            elif token in [SQLParser.AUTOEXTEND_SIZE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1836
                self.tsOptionAutoextendSize()
                pass
            elif token in [SQLParser.MAX_SIZE_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1837
                self.tsOptionMaxSize()
                pass
            elif token in [SQLParser.ENGINE_SYMBOL, SQLParser.STORAGE_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1838
                self.tsOptionEngine()
                pass
            elif token in [SQLParser.NO_WAIT_SYMBOL, SQLParser.WAIT_SYMBOL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1839
                self.tsOptionWait()
                pass
            elif token in [SQLParser.ENCRYPTION_SYMBOL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1840
                self.tsOptionEncryption()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChangeTablespaceOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INITIAL_SIZE_SYMBOL(self):
            return self.getToken(SQLParser.INITIAL_SIZE_SYMBOL, 0)

        def sizeNumber(self):
            return self.getTypedRuleContext(SQLParser.SizeNumberContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def tsOptionAutoextendSize(self):
            return self.getTypedRuleContext(SQLParser.TsOptionAutoextendSizeContext,0)


        def tsOptionMaxSize(self):
            return self.getTypedRuleContext(SQLParser.TsOptionMaxSizeContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_changeTablespaceOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeTablespaceOption" ):
                listener.enterChangeTablespaceOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeTablespaceOption" ):
                listener.exitChangeTablespaceOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChangeTablespaceOption" ):
                return visitor.visitChangeTablespaceOption(self)
            else:
                return visitor.visitChildren(self)




    def changeTablespaceOption(self):

        localctx = SQLParser.ChangeTablespaceOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_changeTablespaceOption)
        try:
            self.state = 1850
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.INITIAL_SIZE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1843
                self.match(SQLParser.INITIAL_SIZE_SYMBOL)
                self.state = 1845
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                if la_ == 1:
                    self.state = 1844
                    self.match(SQLParser.EQUAL_OPERATOR)


                self.state = 1847
                self.sizeNumber()
                pass
            elif token in [SQLParser.AUTOEXTEND_SIZE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1848
                self.tsOptionAutoextendSize()
                pass
            elif token in [SQLParser.MAX_SIZE_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1849
                self.tsOptionMaxSize()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VIEW_SYMBOL(self):
            return self.getToken(SQLParser.VIEW_SYMBOL, 0)

        def viewRef(self):
            return self.getTypedRuleContext(SQLParser.ViewRefContext,0)


        def viewTail(self):
            return self.getTypedRuleContext(SQLParser.ViewTailContext,0)


        def viewAlgorithm(self):
            return self.getTypedRuleContext(SQLParser.ViewAlgorithmContext,0)


        def definerClause(self):
            return self.getTypedRuleContext(SQLParser.DefinerClauseContext,0)


        def viewSuid(self):
            return self.getTypedRuleContext(SQLParser.ViewSuidContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_alterView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterView" ):
                listener.enterAlterView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterView" ):
                listener.exitAlterView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterView" ):
                return visitor.visitAlterView(self)
            else:
                return visitor.visitChildren(self)




    def alterView(self):

        localctx = SQLParser.AlterViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_alterView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.ALGORITHM_SYMBOL:
                self.state = 1852
                self.viewAlgorithm()


            self.state = 1856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.DEFINER_SYMBOL:
                self.state = 1855
                self.definerClause()


            self.state = 1859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.SQL_SYMBOL:
                self.state = 1858
                self.viewSuid()


            self.state = 1861
            self.match(SQLParser.VIEW_SYMBOL)
            self.state = 1862
            self.viewRef()
            self.state = 1863
            self.viewTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewTailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS_SYMBOL(self):
            return self.getToken(SQLParser.AS_SYMBOL, 0)

        def viewSelect(self):
            return self.getTypedRuleContext(SQLParser.ViewSelectContext,0)


        def columnInternalRefList(self):
            return self.getTypedRuleContext(SQLParser.ColumnInternalRefListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_viewTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewTail" ):
                listener.enterViewTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewTail" ):
                listener.exitViewTail(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitViewTail" ):
                return visitor.visitViewTail(self)
            else:
                return visitor.visitChildren(self)




    def viewTail(self):

        localctx = SQLParser.ViewTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_viewTail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.OPEN_PAR_SYMBOL:
                self.state = 1865
                self.columnInternalRefList()


            self.state = 1868
            self.match(SQLParser.AS_SYMBOL)
            self.state = 1869
            self.viewSelect()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewSelectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryExpressionOrParens(self):
            return self.getTypedRuleContext(SQLParser.QueryExpressionOrParensContext,0)


        def viewCheckOption(self):
            return self.getTypedRuleContext(SQLParser.ViewCheckOptionContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_viewSelect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewSelect" ):
                listener.enterViewSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewSelect" ):
                listener.exitViewSelect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitViewSelect" ):
                return visitor.visitViewSelect(self)
            else:
                return visitor.visitChildren(self)




    def viewSelect(self):

        localctx = SQLParser.ViewSelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_viewSelect)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1871
            self.queryExpressionOrParens()
            self.state = 1873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.WITH_SYMBOL:
                self.state = 1872
                self.viewCheckOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewCheckOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_SYMBOL(self):
            return self.getToken(SQLParser.WITH_SYMBOL, 0)

        def CHECK_SYMBOL(self):
            return self.getToken(SQLParser.CHECK_SYMBOL, 0)

        def OPTION_SYMBOL(self):
            return self.getToken(SQLParser.OPTION_SYMBOL, 0)

        def CASCADED_SYMBOL(self):
            return self.getToken(SQLParser.CASCADED_SYMBOL, 0)

        def LOCAL_SYMBOL(self):
            return self.getToken(SQLParser.LOCAL_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_viewCheckOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewCheckOption" ):
                listener.enterViewCheckOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewCheckOption" ):
                listener.exitViewCheckOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitViewCheckOption" ):
                return visitor.visitViewCheckOption(self)
            else:
                return visitor.visitChildren(self)




    def viewCheckOption(self):

        localctx = SQLParser.ViewCheckOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_viewCheckOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1875
            self.match(SQLParser.WITH_SYMBOL)
            self.state = 1877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.CASCADED_SYMBOL or _la==SQLParser.LOCAL_SYMBOL:
                self.state = 1876
                _la = self._input.LA(1)
                if not(_la==SQLParser.CASCADED_SYMBOL or _la==SQLParser.LOCAL_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1879
            self.match(SQLParser.CHECK_SYMBOL)
            self.state = 1880
            self.match(SQLParser.OPTION_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(SQLParser.CREATE_SYMBOL, 0)

        def createDatabase(self):
            return self.getTypedRuleContext(SQLParser.CreateDatabaseContext,0)


        def createTable(self):
            return self.getTypedRuleContext(SQLParser.CreateTableContext,0)


        def createFunction(self):
            return self.getTypedRuleContext(SQLParser.CreateFunctionContext,0)


        def createProcedure(self):
            return self.getTypedRuleContext(SQLParser.CreateProcedureContext,0)


        def createUdf(self):
            return self.getTypedRuleContext(SQLParser.CreateUdfContext,0)


        def createLogfileGroup(self):
            return self.getTypedRuleContext(SQLParser.CreateLogfileGroupContext,0)


        def createView(self):
            return self.getTypedRuleContext(SQLParser.CreateViewContext,0)


        def createTrigger(self):
            return self.getTypedRuleContext(SQLParser.CreateTriggerContext,0)


        def createIndex(self):
            return self.getTypedRuleContext(SQLParser.CreateIndexContext,0)


        def createServer(self):
            return self.getTypedRuleContext(SQLParser.CreateServerContext,0)


        def createTablespace(self):
            return self.getTypedRuleContext(SQLParser.CreateTablespaceContext,0)


        def createEvent(self):
            return self.getTypedRuleContext(SQLParser.CreateEventContext,0)


        def createRole(self):
            return self.getTypedRuleContext(SQLParser.CreateRoleContext,0)


        def createSpatialReference(self):
            return self.getTypedRuleContext(SQLParser.CreateSpatialReferenceContext,0)


        def createUndoTablespace(self):
            return self.getTypedRuleContext(SQLParser.CreateUndoTablespaceContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_createStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateStatement" ):
                listener.enterCreateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateStatement" ):
                listener.exitCreateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateStatement" ):
                return visitor.visitCreateStatement(self)
            else:
                return visitor.visitChildren(self)




    def createStatement(self):

        localctx = SQLParser.CreateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_createStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1882
            self.match(SQLParser.CREATE_SYMBOL)
            self.state = 1901
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 1883
                self.createDatabase()
                pass

            elif la_ == 2:
                self.state = 1884
                self.createTable()
                pass

            elif la_ == 3:
                self.state = 1885
                self.createFunction()
                pass

            elif la_ == 4:
                self.state = 1886
                self.createProcedure()
                pass

            elif la_ == 5:
                self.state = 1887
                self.createUdf()
                pass

            elif la_ == 6:
                self.state = 1888
                self.createLogfileGroup()
                pass

            elif la_ == 7:
                self.state = 1889
                self.createView()
                pass

            elif la_ == 8:
                self.state = 1890
                self.createTrigger()
                pass

            elif la_ == 9:
                self.state = 1891
                self.createIndex()
                pass

            elif la_ == 10:
                self.state = 1892
                self.createServer()
                pass

            elif la_ == 11:
                self.state = 1893
                self.createTablespace()
                pass

            elif la_ == 12:
                self.state = 1894
                self.createEvent()
                pass

            elif la_ == 13:
                self.state = 1895
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 1896
                self.createRole()
                pass

            elif la_ == 14:
                self.state = 1897
                if not self.serverVersion >= 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80011")
                self.state = 1898
                self.createSpatialReference()
                pass

            elif la_ == 15:
                self.state = 1899
                if not self.serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80014")
                self.state = 1900
                self.createUndoTablespace()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE_SYMBOL(self):
            return self.getToken(SQLParser.DATABASE_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(SQLParser.SchemaNameContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(SQLParser.IfNotExistsContext,0)


        def createDatabaseOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.CreateDatabaseOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.CreateDatabaseOptionContext,i)


        def getRuleIndex(self):
            return SQLParser.RULE_createDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabase" ):
                listener.enterCreateDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabase" ):
                listener.exitCreateDatabase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateDatabase" ):
                return visitor.visitCreateDatabase(self)
            else:
                return visitor.visitChildren(self)




    def createDatabase(self):

        localctx = SQLParser.CreateDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_createDatabase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1903
            self.match(SQLParser.DATABASE_SYMBOL)
            self.state = 1905
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 1904
                self.ifNotExists()


            self.state = 1907
            self.schemaName()
            self.state = 1911
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1908
                    self.createDatabaseOption() 
                self.state = 1913
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDatabaseOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def defaultCharset(self):
            return self.getTypedRuleContext(SQLParser.DefaultCharsetContext,0)


        def defaultCollation(self):
            return self.getTypedRuleContext(SQLParser.DefaultCollationContext,0)


        def defaultEncryption(self):
            return self.getTypedRuleContext(SQLParser.DefaultEncryptionContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_createDatabaseOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabaseOption" ):
                listener.enterCreateDatabaseOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabaseOption" ):
                listener.exitCreateDatabaseOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateDatabaseOption" ):
                return visitor.visitCreateDatabaseOption(self)
            else:
                return visitor.visitChildren(self)




    def createDatabaseOption(self):

        localctx = SQLParser.CreateDatabaseOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_createDatabaseOption)
        try:
            self.state = 1918
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1914
                self.defaultCharset()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1915
                self.defaultCollation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1916
                if not self.serverVersion >= 80016:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80016")
                self.state = 1917
                self.defaultEncryption()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE_SYMBOL(self):
            return self.getToken(SQLParser.TABLE_SYMBOL, 0)

        def tableName(self):
            return self.getTypedRuleContext(SQLParser.TableNameContext,0)


        def LIKE_SYMBOL(self):
            return self.getToken(SQLParser.LIKE_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(SQLParser.TableRefContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def TEMPORARY_SYMBOL(self):
            return self.getToken(SQLParser.TEMPORARY_SYMBOL, 0)

        def ifNotExists(self):
            return self.getTypedRuleContext(SQLParser.IfNotExistsContext,0)


        def tableElementList(self):
            return self.getTypedRuleContext(SQLParser.TableElementListContext,0)


        def createTableOptions(self):
            return self.getTypedRuleContext(SQLParser.CreateTableOptionsContext,0)


        def partitionClause(self):
            return self.getTypedRuleContext(SQLParser.PartitionClauseContext,0)


        def duplicateAsQueryExpression(self):
            return self.getTypedRuleContext(SQLParser.DuplicateAsQueryExpressionContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_createTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTable" ):
                listener.enterCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTable" ):
                listener.exitCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTable" ):
                return visitor.visitCreateTable(self)
            else:
                return visitor.visitChildren(self)




    def createTable(self):

        localctx = SQLParser.CreateTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_createTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.TEMPORARY_SYMBOL:
                self.state = 1920
                self.match(SQLParser.TEMPORARY_SYMBOL)


            self.state = 1923
            self.match(SQLParser.TABLE_SYMBOL)
            self.state = 1925
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 1924
                self.ifNotExists()


            self.state = 1927
            self.tableName()
            self.state = 1950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 1932
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                if la_ == 1:
                    self.state = 1928
                    self.match(SQLParser.OPEN_PAR_SYMBOL)
                    self.state = 1929
                    self.tableElementList()
                    self.state = 1930
                    self.match(SQLParser.CLOSE_PAR_SYMBOL)


                self.state = 1935
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                if la_ == 1:
                    self.state = 1934
                    self.createTableOptions()


                self.state = 1938
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 1937
                    self.partitionClause()


                self.state = 1941
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 1940
                    self.duplicateAsQueryExpression()


                pass

            elif la_ == 2:
                self.state = 1943
                self.match(SQLParser.LIKE_SYMBOL)
                self.state = 1944
                self.tableRef()
                pass

            elif la_ == 3:
                self.state = 1945
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 1946
                self.match(SQLParser.LIKE_SYMBOL)
                self.state = 1947
                self.tableRef()
                self.state = 1948
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableElementListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.TableElementContext)
            else:
                return self.getTypedRuleContext(SQLParser.TableElementContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_tableElementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableElementList" ):
                listener.enterTableElementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableElementList" ):
                listener.exitTableElementList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableElementList" ):
                return visitor.visitTableElementList(self)
            else:
                return visitor.visitChildren(self)




    def tableElementList(self):

        localctx = SQLParser.TableElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_tableElementList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1952
            self.tableElement()
            self.state = 1957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 1953
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 1954
                self.tableElement()
                self.state = 1959
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnDefinition(self):
            return self.getTypedRuleContext(SQLParser.ColumnDefinitionContext,0)


        def tableConstraintDef(self):
            return self.getTypedRuleContext(SQLParser.TableConstraintDefContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_tableElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableElement" ):
                listener.enterTableElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableElement" ):
                listener.exitTableElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableElement" ):
                return visitor.visitTableElement(self)
            else:
                return visitor.visitChildren(self)




    def tableElement(self):

        localctx = SQLParser.TableElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_tableElement)
        try:
            self.state = 1962
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1960
                self.columnDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1961
                self.tableConstraintDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DuplicateAsQueryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryExpressionOrParens(self):
            return self.getTypedRuleContext(SQLParser.QueryExpressionOrParensContext,0)


        def AS_SYMBOL(self):
            return self.getToken(SQLParser.AS_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(SQLParser.REPLACE_SYMBOL, 0)

        def IGNORE_SYMBOL(self):
            return self.getToken(SQLParser.IGNORE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_duplicateAsQueryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDuplicateAsQueryExpression" ):
                listener.enterDuplicateAsQueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDuplicateAsQueryExpression" ):
                listener.exitDuplicateAsQueryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDuplicateAsQueryExpression" ):
                return visitor.visitDuplicateAsQueryExpression(self)
            else:
                return visitor.visitChildren(self)




    def duplicateAsQueryExpression(self):

        localctx = SQLParser.DuplicateAsQueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_duplicateAsQueryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1965
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 1964
                _la = self._input.LA(1)
                if not(_la==SQLParser.IGNORE_SYMBOL or _la==SQLParser.REPLACE_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1968
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 1967
                self.match(SQLParser.AS_SYMBOL)


            self.state = 1970
            self.queryExpressionOrParens()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryExpressionOrParensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryExpression(self):
            return self.getTypedRuleContext(SQLParser.QueryExpressionContext,0)


        def queryExpressionParens(self):
            return self.getTypedRuleContext(SQLParser.QueryExpressionParensContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_queryExpressionOrParens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpressionOrParens" ):
                listener.enterQueryExpressionOrParens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpressionOrParens" ):
                listener.exitQueryExpressionOrParens(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryExpressionOrParens" ):
                return visitor.visitQueryExpressionOrParens(self)
            else:
                return visitor.visitChildren(self)




    def queryExpressionOrParens(self):

        localctx = SQLParser.QueryExpressionOrParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_queryExpressionOrParens)
        try:
            self.state = 1974
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1972
                self.queryExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1973
                self.queryExpressionParens()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRoutineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(SQLParser.CREATE_SYMBOL, 0)

        def EOF(self):
            return self.getToken(SQLParser.EOF, 0)

        def createProcedure(self):
            return self.getTypedRuleContext(SQLParser.CreateProcedureContext,0)


        def createFunction(self):
            return self.getTypedRuleContext(SQLParser.CreateFunctionContext,0)


        def createUdf(self):
            return self.getTypedRuleContext(SQLParser.CreateUdfContext,0)


        def SEMICOLON_SYMBOL(self):
            return self.getToken(SQLParser.SEMICOLON_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_createRoutine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRoutine" ):
                listener.enterCreateRoutine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRoutine" ):
                listener.exitCreateRoutine(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateRoutine" ):
                return visitor.visitCreateRoutine(self)
            else:
                return visitor.visitChildren(self)




    def createRoutine(self):

        localctx = SQLParser.CreateRoutineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_createRoutine)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1976
            self.match(SQLParser.CREATE_SYMBOL)
            self.state = 1980
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 1977
                self.createProcedure()
                pass

            elif la_ == 2:
                self.state = 1978
                self.createFunction()
                pass

            elif la_ == 3:
                self.state = 1979
                self.createUdf()
                pass


            self.state = 1983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.SEMICOLON_SYMBOL:
                self.state = 1982
                self.match(SQLParser.SEMICOLON_SYMBOL)


            self.state = 1985
            self.match(SQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE_SYMBOL(self):
            return self.getToken(SQLParser.PROCEDURE_SYMBOL, 0)

        def procedureName(self):
            return self.getTypedRuleContext(SQLParser.ProcedureNameContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(SQLParser.CompoundStatementContext,0)


        def definerClause(self):
            return self.getTypedRuleContext(SQLParser.DefinerClauseContext,0)


        def procedureParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ProcedureParameterContext)
            else:
                return self.getTypedRuleContext(SQLParser.ProcedureParameterContext,i)


        def routineCreateOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.RoutineCreateOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.RoutineCreateOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_createProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateProcedure" ):
                listener.enterCreateProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateProcedure" ):
                listener.exitCreateProcedure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateProcedure" ):
                return visitor.visitCreateProcedure(self)
            else:
                return visitor.visitChildren(self)




    def createProcedure(self):

        localctx = SQLParser.CreateProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_createProcedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.DEFINER_SYMBOL:
                self.state = 1987
                self.definerClause()


            self.state = 1990
            self.match(SQLParser.PROCEDURE_SYMBOL)
            self.state = 1991
            self.procedureName()
            self.state = 1992
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 2001
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 1993
                self.procedureParameter()
                self.state = 1998
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLParser.COMMA_SYMBOL:
                    self.state = 1994
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 1995
                    self.procedureParameter()
                    self.state = 2000
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2003
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
            self.state = 2007
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2004
                    self.routineCreateOption() 
                self.state = 2009
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

            self.state = 2010
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION_SYMBOL(self):
            return self.getToken(SQLParser.FUNCTION_SYMBOL, 0)

        def functionName(self):
            return self.getTypedRuleContext(SQLParser.FunctionNameContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def RETURNS_SYMBOL(self):
            return self.getToken(SQLParser.RETURNS_SYMBOL, 0)

        def typeWithOptCollate(self):
            return self.getTypedRuleContext(SQLParser.TypeWithOptCollateContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(SQLParser.CompoundStatementContext,0)


        def definerClause(self):
            return self.getTypedRuleContext(SQLParser.DefinerClauseContext,0)


        def functionParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.FunctionParameterContext)
            else:
                return self.getTypedRuleContext(SQLParser.FunctionParameterContext,i)


        def routineCreateOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.RoutineCreateOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.RoutineCreateOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_createFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFunction" ):
                listener.enterCreateFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFunction" ):
                listener.exitCreateFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateFunction" ):
                return visitor.visitCreateFunction(self)
            else:
                return visitor.visitChildren(self)




    def createFunction(self):

        localctx = SQLParser.CreateFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_createFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.DEFINER_SYMBOL:
                self.state = 2012
                self.definerClause()


            self.state = 2015
            self.match(SQLParser.FUNCTION_SYMBOL)
            self.state = 2016
            self.functionName()
            self.state = 2017
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 2026
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 2018
                self.functionParameter()
                self.state = 2023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLParser.COMMA_SYMBOL:
                    self.state = 2019
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 2020
                    self.functionParameter()
                    self.state = 2025
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2028
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
            self.state = 2029
            self.match(SQLParser.RETURNS_SYMBOL)
            self.state = 2030
            self.typeWithOptCollate()
            self.state = 2034
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,129,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2031
                    self.routineCreateOption() 
                self.state = 2036
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,129,self._ctx)

            self.state = 2037
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUdfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None # Token

        def FUNCTION_SYMBOL(self):
            return self.getToken(SQLParser.FUNCTION_SYMBOL, 0)

        def udfName(self):
            return self.getTypedRuleContext(SQLParser.UdfNameContext,0)


        def RETURNS_SYMBOL(self):
            return self.getToken(SQLParser.RETURNS_SYMBOL, 0)

        def SONAME_SYMBOL(self):
            return self.getToken(SQLParser.SONAME_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextLiteralContext,0)


        def STRING_SYMBOL(self):
            return self.getToken(SQLParser.STRING_SYMBOL, 0)

        def INT_SYMBOL(self):
            return self.getToken(SQLParser.INT_SYMBOL, 0)

        def REAL_SYMBOL(self):
            return self.getToken(SQLParser.REAL_SYMBOL, 0)

        def DECIMAL_SYMBOL(self):
            return self.getToken(SQLParser.DECIMAL_SYMBOL, 0)

        def AGGREGATE_SYMBOL(self):
            return self.getToken(SQLParser.AGGREGATE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_createUdf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUdf" ):
                listener.enterCreateUdf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUdf" ):
                listener.exitCreateUdf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateUdf" ):
                return visitor.visitCreateUdf(self)
            else:
                return visitor.visitChildren(self)




    def createUdf(self):

        localctx = SQLParser.CreateUdfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_createUdf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.AGGREGATE_SYMBOL:
                self.state = 2039
                self.match(SQLParser.AGGREGATE_SYMBOL)


            self.state = 2042
            self.match(SQLParser.FUNCTION_SYMBOL)
            self.state = 2043
            self.udfName()
            self.state = 2044
            self.match(SQLParser.RETURNS_SYMBOL)
            self.state = 2045
            localctx.type = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==SQLParser.DECIMAL_SYMBOL or _la==SQLParser.INT_SYMBOL or _la==SQLParser.REAL_SYMBOL or _la==SQLParser.STRING_SYMBOL):
                localctx.type = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2046
            self.match(SQLParser.SONAME_SYMBOL)
            self.state = 2047
            self.textLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineCreateOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def routineOption(self):
            return self.getTypedRuleContext(SQLParser.RoutineOptionContext,0)


        def DETERMINISTIC_SYMBOL(self):
            return self.getToken(SQLParser.DETERMINISTIC_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(SQLParser.NOT_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_routineCreateOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineCreateOption" ):
                listener.enterRoutineCreateOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineCreateOption" ):
                listener.exitRoutineCreateOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutineCreateOption" ):
                return visitor.visitRoutineCreateOption(self)
            else:
                return visitor.visitChildren(self)




    def routineCreateOption(self):

        localctx = SQLParser.RoutineCreateOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_routineCreateOption)
        self._la = 0 # Token type
        try:
            self.state = 2054
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.COMMENT_SYMBOL, SQLParser.CONTAINS_SYMBOL, SQLParser.LANGUAGE_SYMBOL, SQLParser.MODIFIES_SYMBOL, SQLParser.NO_SYMBOL, SQLParser.READS_SYMBOL, SQLParser.SQL_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2049
                self.routineOption()
                pass
            elif token in [SQLParser.DETERMINISTIC_SYMBOL, SQLParser.NOT_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2051
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.NOT_SYMBOL:
                    self.state = 2050
                    self.match(SQLParser.NOT_SYMBOL)


                self.state = 2053
                self.match(SQLParser.DETERMINISTIC_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineAlterOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def routineCreateOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.RoutineCreateOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.RoutineCreateOptionContext,i)


        def getRuleIndex(self):
            return SQLParser.RULE_routineAlterOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineAlterOptions" ):
                listener.enterRoutineAlterOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineAlterOptions" ):
                listener.exitRoutineAlterOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutineAlterOptions" ):
                return visitor.visitRoutineAlterOptions(self)
            else:
                return visitor.visitChildren(self)




    def routineAlterOptions(self):

        localctx = SQLParser.RoutineAlterOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_routineAlterOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2057 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2056
                self.routineCreateOption()
                self.state = 2059 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (SQLParser.COMMENT_SYMBOL - 75)) | (1 << (SQLParser.CONTAINS_SYMBOL - 75)) | (1 << (SQLParser.DETERMINISTIC_SYMBOL - 75)))) != 0) or _la==SQLParser.LANGUAGE_SYMBOL or ((((_la - 347)) & ~0x3f) == 0 and ((1 << (_la - 347)) & ((1 << (SQLParser.MODIFIES_SYMBOL - 347)) | (1 << (SQLParser.NOT_SYMBOL - 347)) | (1 << (SQLParser.NO_SYMBOL - 347)))) != 0) or _la==SQLParser.READS_SYMBOL or _la==SQLParser.SQL_SYMBOL):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.option = None # Token
            self.security = None # Token

        def textLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextLiteralContext,0)


        def COMMENT_SYMBOL(self):
            return self.getToken(SQLParser.COMMENT_SYMBOL, 0)

        def SQL_SYMBOL(self):
            return self.getToken(SQLParser.SQL_SYMBOL, 0)

        def LANGUAGE_SYMBOL(self):
            return self.getToken(SQLParser.LANGUAGE_SYMBOL, 0)

        def NO_SYMBOL(self):
            return self.getToken(SQLParser.NO_SYMBOL, 0)

        def CONTAINS_SYMBOL(self):
            return self.getToken(SQLParser.CONTAINS_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(SQLParser.DATA_SYMBOL, 0)

        def READS_SYMBOL(self):
            return self.getToken(SQLParser.READS_SYMBOL, 0)

        def MODIFIES_SYMBOL(self):
            return self.getToken(SQLParser.MODIFIES_SYMBOL, 0)

        def SECURITY_SYMBOL(self):
            return self.getToken(SQLParser.SECURITY_SYMBOL, 0)

        def DEFINER_SYMBOL(self):
            return self.getToken(SQLParser.DEFINER_SYMBOL, 0)

        def INVOKER_SYMBOL(self):
            return self.getToken(SQLParser.INVOKER_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_routineOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineOption" ):
                listener.enterRoutineOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineOption" ):
                listener.exitRoutineOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutineOption" ):
                return visitor.visitRoutineOption(self)
            else:
                return visitor.visitChildren(self)




    def routineOption(self):

        localctx = SQLParser.RoutineOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_routineOption)
        self._la = 0 # Token type
        try:
            self.state = 2078
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.COMMENT_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2061
                localctx.option = self.match(SQLParser.COMMENT_SYMBOL)
                self.state = 2062
                self.textLiteral()
                pass
            elif token in [SQLParser.LANGUAGE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2063
                localctx.option = self.match(SQLParser.LANGUAGE_SYMBOL)
                self.state = 2064
                self.match(SQLParser.SQL_SYMBOL)
                pass
            elif token in [SQLParser.NO_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2065
                localctx.option = self.match(SQLParser.NO_SYMBOL)
                self.state = 2066
                self.match(SQLParser.SQL_SYMBOL)
                pass
            elif token in [SQLParser.CONTAINS_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2067
                localctx.option = self.match(SQLParser.CONTAINS_SYMBOL)
                self.state = 2068
                self.match(SQLParser.SQL_SYMBOL)
                pass
            elif token in [SQLParser.READS_SYMBOL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2069
                localctx.option = self.match(SQLParser.READS_SYMBOL)
                self.state = 2070
                self.match(SQLParser.SQL_SYMBOL)
                self.state = 2071
                self.match(SQLParser.DATA_SYMBOL)
                pass
            elif token in [SQLParser.MODIFIES_SYMBOL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2072
                localctx.option = self.match(SQLParser.MODIFIES_SYMBOL)
                self.state = 2073
                self.match(SQLParser.SQL_SYMBOL)
                self.state = 2074
                self.match(SQLParser.DATA_SYMBOL)
                pass
            elif token in [SQLParser.SQL_SYMBOL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2075
                localctx.option = self.match(SQLParser.SQL_SYMBOL)
                self.state = 2076
                self.match(SQLParser.SECURITY_SYMBOL)
                self.state = 2077
                localctx.security = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLParser.DEFINER_SYMBOL or _la==SQLParser.INVOKER_SYMBOL):
                    localctx.security = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None # Token

        def createIndexTarget(self):
            return self.getTypedRuleContext(SQLParser.CreateIndexTargetContext,0)


        def INDEX_SYMBOL(self):
            return self.getToken(SQLParser.INDEX_SYMBOL, 0)

        def indexName(self):
            return self.getTypedRuleContext(SQLParser.IndexNameContext,0)


        def onlineOption(self):
            return self.getTypedRuleContext(SQLParser.OnlineOptionContext,0)


        def FULLTEXT_SYMBOL(self):
            return self.getToken(SQLParser.FULLTEXT_SYMBOL, 0)

        def SPATIAL_SYMBOL(self):
            return self.getToken(SQLParser.SPATIAL_SYMBOL, 0)

        def indexLockAndAlgorithm(self):
            return self.getTypedRuleContext(SQLParser.IndexLockAndAlgorithmContext,0)


        def UNIQUE_SYMBOL(self):
            return self.getToken(SQLParser.UNIQUE_SYMBOL, 0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.IndexOptionContext,i)


        def fulltextIndexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.FulltextIndexOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.FulltextIndexOptionContext,i)


        def spatialIndexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.SpatialIndexOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.SpatialIndexOptionContext,i)


        def indexTypeClause(self):
            return self.getTypedRuleContext(SQLParser.IndexTypeClauseContext,0)


        def indexNameAndType(self):
            return self.getTypedRuleContext(SQLParser.IndexNameAndTypeContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_createIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateIndex" ):
                listener.enterCreateIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateIndex" ):
                listener.exitCreateIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateIndex" ):
                return visitor.visitCreateIndex(self)
            else:
                return visitor.visitChildren(self)




    def createIndex(self):

        localctx = SQLParser.CreateIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_createIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2081
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.OFFLINE_SYMBOL or _la==SQLParser.ONLINE_SYMBOL:
                self.state = 2080
                self.onlineOption()


            self.state = 2124
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.INDEX_SYMBOL, SQLParser.UNIQUE_SYMBOL]:
                self.state = 2084
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.UNIQUE_SYMBOL:
                    self.state = 2083
                    self.match(SQLParser.UNIQUE_SYMBOL)


                self.state = 2086
                localctx.type = self.match(SQLParser.INDEX_SYMBOL)
                self.state = 2095
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                if la_ == 1:
                    self.state = 2087
                    if not self.serverVersion >= 80014:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80014")
                    self.state = 2088
                    self.indexName()
                    self.state = 2090
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.TYPE_SYMBOL or _la==SQLParser.USING_SYMBOL:
                        self.state = 2089
                        self.indexTypeClause()


                    pass

                elif la_ == 2:
                    self.state = 2093
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
                    if la_ == 1:
                        self.state = 2092
                        self.indexNameAndType()


                    pass


                self.state = 2097
                self.createIndexTarget()
                self.state = 2101
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2098
                        self.indexOption() 
                    self.state = 2103
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

                pass
            elif token in [SQLParser.FULLTEXT_SYMBOL]:
                self.state = 2104
                localctx.type = self.match(SQLParser.FULLTEXT_SYMBOL)
                self.state = 2105
                self.match(SQLParser.INDEX_SYMBOL)
                self.state = 2106
                self.indexName()
                self.state = 2107
                self.createIndexTarget()
                self.state = 2111
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,141,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2108
                        self.fulltextIndexOption() 
                    self.state = 2113
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,141,self._ctx)

                pass
            elif token in [SQLParser.SPATIAL_SYMBOL]:
                self.state = 2114
                localctx.type = self.match(SQLParser.SPATIAL_SYMBOL)
                self.state = 2115
                self.match(SQLParser.INDEX_SYMBOL)
                self.state = 2116
                self.indexName()
                self.state = 2117
                self.createIndexTarget()
                self.state = 2121
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,142,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2118
                        self.spatialIndexOption() 
                    self.state = 2123
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,142,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 2127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.ALGORITHM_SYMBOL or _la==SQLParser.LOCK_SYMBOL:
                self.state = 2126
                self.indexLockAndAlgorithm()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexNameAndTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexName(self):
            return self.getTypedRuleContext(SQLParser.IndexNameContext,0)


        def USING_SYMBOL(self):
            return self.getToken(SQLParser.USING_SYMBOL, 0)

        def indexType(self):
            return self.getTypedRuleContext(SQLParser.IndexTypeContext,0)


        def TYPE_SYMBOL(self):
            return self.getToken(SQLParser.TYPE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_indexNameAndType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexNameAndType" ):
                listener.enterIndexNameAndType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexNameAndType" ):
                listener.exitIndexNameAndType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexNameAndType" ):
                return visitor.visitIndexNameAndType(self)
            else:
                return visitor.visitChildren(self)




    def indexNameAndType(self):

        localctx = SQLParser.IndexNameAndTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_indexNameAndType)
        try:
            self.state = 2138
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2129
                self.indexName()
                self.state = 2132
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                if la_ == 1:
                    self.state = 2130
                    self.match(SQLParser.USING_SYMBOL)
                    self.state = 2131
                    self.indexType()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2134
                self.indexName()
                self.state = 2135
                self.match(SQLParser.TYPE_SYMBOL)
                self.state = 2136
                self.indexType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateIndexTargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_SYMBOL(self):
            return self.getToken(SQLParser.ON_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(SQLParser.TableRefContext,0)


        def keyListVariants(self):
            return self.getTypedRuleContext(SQLParser.KeyListVariantsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_createIndexTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateIndexTarget" ):
                listener.enterCreateIndexTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateIndexTarget" ):
                listener.exitCreateIndexTarget(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateIndexTarget" ):
                return visitor.visitCreateIndexTarget(self)
            else:
                return visitor.visitChildren(self)




    def createIndexTarget(self):

        localctx = SQLParser.CreateIndexTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_createIndexTarget)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2140
            self.match(SQLParser.ON_SYMBOL)
            self.state = 2141
            self.tableRef()
            self.state = 2142
            self.keyListVariants()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateLogfileGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOGFILE_SYMBOL(self):
            return self.getToken(SQLParser.LOGFILE_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(SQLParser.GROUP_SYMBOL, 0)

        def logfileGroupName(self):
            return self.getTypedRuleContext(SQLParser.LogfileGroupNameContext,0)


        def ADD_SYMBOL(self):
            return self.getToken(SQLParser.ADD_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextLiteralContext,0)


        def UNDOFILE_SYMBOL(self):
            return self.getToken(SQLParser.UNDOFILE_SYMBOL, 0)

        def REDOFILE_SYMBOL(self):
            return self.getToken(SQLParser.REDOFILE_SYMBOL, 0)

        def logfileGroupOptions(self):
            return self.getTypedRuleContext(SQLParser.LogfileGroupOptionsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_createLogfileGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateLogfileGroup" ):
                listener.enterCreateLogfileGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateLogfileGroup" ):
                listener.exitCreateLogfileGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateLogfileGroup" ):
                return visitor.visitCreateLogfileGroup(self)
            else:
                return visitor.visitChildren(self)




    def createLogfileGroup(self):

        localctx = SQLParser.CreateLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_createLogfileGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2144
            self.match(SQLParser.LOGFILE_SYMBOL)
            self.state = 2145
            self.match(SQLParser.GROUP_SYMBOL)
            self.state = 2146
            self.logfileGroupName()
            self.state = 2147
            self.match(SQLParser.ADD_SYMBOL)
            self.state = 2148
            _la = self._input.LA(1)
            if not(_la==SQLParser.REDOFILE_SYMBOL or _la==SQLParser.UNDOFILE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2149
            self.textLiteral()
            self.state = 2151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.COMMENT_SYMBOL or _la==SQLParser.ENGINE_SYMBOL or _la==SQLParser.INITIAL_SIZE_SYMBOL or _la==SQLParser.NODEGROUP_SYMBOL or _la==SQLParser.NO_WAIT_SYMBOL or _la==SQLParser.REDO_BUFFER_SIZE_SYMBOL or _la==SQLParser.STORAGE_SYMBOL or _la==SQLParser.UNDO_BUFFER_SIZE_SYMBOL or _la==SQLParser.WAIT_SYMBOL:
                self.state = 2150
                self.logfileGroupOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogfileGroupOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logfileGroupOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.LogfileGroupOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.LogfileGroupOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_logfileGroupOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogfileGroupOptions" ):
                listener.enterLogfileGroupOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogfileGroupOptions" ):
                listener.exitLogfileGroupOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogfileGroupOptions" ):
                return visitor.visitLogfileGroupOptions(self)
            else:
                return visitor.visitChildren(self)




    def logfileGroupOptions(self):

        localctx = SQLParser.LogfileGroupOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_logfileGroupOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2153
            self.logfileGroupOption()
            self.state = 2160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMENT_SYMBOL or _la==SQLParser.ENGINE_SYMBOL or _la==SQLParser.INITIAL_SIZE_SYMBOL or _la==SQLParser.NODEGROUP_SYMBOL or _la==SQLParser.NO_WAIT_SYMBOL or _la==SQLParser.REDO_BUFFER_SIZE_SYMBOL or _la==SQLParser.STORAGE_SYMBOL or _la==SQLParser.UNDO_BUFFER_SIZE_SYMBOL or _la==SQLParser.WAIT_SYMBOL or _la==SQLParser.COMMA_SYMBOL:
                self.state = 2155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.COMMA_SYMBOL:
                    self.state = 2154
                    self.match(SQLParser.COMMA_SYMBOL)


                self.state = 2157
                self.logfileGroupOption()
                self.state = 2162
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogfileGroupOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tsOptionInitialSize(self):
            return self.getTypedRuleContext(SQLParser.TsOptionInitialSizeContext,0)


        def tsOptionUndoRedoBufferSize(self):
            return self.getTypedRuleContext(SQLParser.TsOptionUndoRedoBufferSizeContext,0)


        def tsOptionNodegroup(self):
            return self.getTypedRuleContext(SQLParser.TsOptionNodegroupContext,0)


        def tsOptionEngine(self):
            return self.getTypedRuleContext(SQLParser.TsOptionEngineContext,0)


        def tsOptionWait(self):
            return self.getTypedRuleContext(SQLParser.TsOptionWaitContext,0)


        def tsOptionComment(self):
            return self.getTypedRuleContext(SQLParser.TsOptionCommentContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_logfileGroupOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogfileGroupOption" ):
                listener.enterLogfileGroupOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogfileGroupOption" ):
                listener.exitLogfileGroupOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogfileGroupOption" ):
                return visitor.visitLogfileGroupOption(self)
            else:
                return visitor.visitChildren(self)




    def logfileGroupOption(self):

        localctx = SQLParser.LogfileGroupOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_logfileGroupOption)
        try:
            self.state = 2169
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.INITIAL_SIZE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2163
                self.tsOptionInitialSize()
                pass
            elif token in [SQLParser.REDO_BUFFER_SIZE_SYMBOL, SQLParser.UNDO_BUFFER_SIZE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2164
                self.tsOptionUndoRedoBufferSize()
                pass
            elif token in [SQLParser.NODEGROUP_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2165
                self.tsOptionNodegroup()
                pass
            elif token in [SQLParser.ENGINE_SYMBOL, SQLParser.STORAGE_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2166
                self.tsOptionEngine()
                pass
            elif token in [SQLParser.NO_WAIT_SYMBOL, SQLParser.WAIT_SYMBOL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2167
                self.tsOptionWait()
                pass
            elif token in [SQLParser.COMMENT_SYMBOL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2168
                self.tsOptionComment()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateServerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVER_SYMBOL(self):
            return self.getToken(SQLParser.SERVER_SYMBOL, 0)

        def serverName(self):
            return self.getTypedRuleContext(SQLParser.ServerNameContext,0)


        def FOREIGN_SYMBOL(self):
            return self.getToken(SQLParser.FOREIGN_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(SQLParser.DATA_SYMBOL, 0)

        def WRAPPER_SYMBOL(self):
            return self.getToken(SQLParser.WRAPPER_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(SQLParser.TextOrIdentifierContext,0)


        def serverOptions(self):
            return self.getTypedRuleContext(SQLParser.ServerOptionsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_createServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateServer" ):
                listener.enterCreateServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateServer" ):
                listener.exitCreateServer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateServer" ):
                return visitor.visitCreateServer(self)
            else:
                return visitor.visitChildren(self)




    def createServer(self):

        localctx = SQLParser.CreateServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_createServer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2171
            self.match(SQLParser.SERVER_SYMBOL)
            self.state = 2172
            self.serverName()
            self.state = 2173
            self.match(SQLParser.FOREIGN_SYMBOL)
            self.state = 2174
            self.match(SQLParser.DATA_SYMBOL)
            self.state = 2175
            self.match(SQLParser.WRAPPER_SYMBOL)
            self.state = 2176
            self.textOrIdentifier()
            self.state = 2177
            self.serverOptions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServerOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONS_SYMBOL(self):
            return self.getToken(SQLParser.OPTIONS_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def serverOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ServerOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.ServerOptionContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_serverOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServerOptions" ):
                listener.enterServerOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServerOptions" ):
                listener.exitServerOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitServerOptions" ):
                return visitor.visitServerOptions(self)
            else:
                return visitor.visitChildren(self)




    def serverOptions(self):

        localctx = SQLParser.ServerOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_serverOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2179
            self.match(SQLParser.OPTIONS_SYMBOL)
            self.state = 2180
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 2181
            self.serverOption()
            self.state = 2186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 2182
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 2183
                self.serverOption()
                self.state = 2188
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2189
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServerOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.option = None # Token

        def textLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextLiteralContext,0)


        def HOST_SYMBOL(self):
            return self.getToken(SQLParser.HOST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(SQLParser.DATABASE_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(SQLParser.USER_SYMBOL, 0)

        def PASSWORD_SYMBOL(self):
            return self.getToken(SQLParser.PASSWORD_SYMBOL, 0)

        def SOCKET_SYMBOL(self):
            return self.getToken(SQLParser.SOCKET_SYMBOL, 0)

        def OWNER_SYMBOL(self):
            return self.getToken(SQLParser.OWNER_SYMBOL, 0)

        def ulong_number(self):
            return self.getTypedRuleContext(SQLParser.Ulong_numberContext,0)


        def PORT_SYMBOL(self):
            return self.getToken(SQLParser.PORT_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_serverOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServerOption" ):
                listener.enterServerOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServerOption" ):
                listener.exitServerOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitServerOption" ):
                return visitor.visitServerOption(self)
            else:
                return visitor.visitChildren(self)




    def serverOption(self):

        localctx = SQLParser.ServerOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_serverOption)
        try:
            self.state = 2205
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.HOST_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2191
                localctx.option = self.match(SQLParser.HOST_SYMBOL)
                self.state = 2192
                self.textLiteral()
                pass
            elif token in [SQLParser.DATABASE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2193
                localctx.option = self.match(SQLParser.DATABASE_SYMBOL)
                self.state = 2194
                self.textLiteral()
                pass
            elif token in [SQLParser.USER_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2195
                localctx.option = self.match(SQLParser.USER_SYMBOL)
                self.state = 2196
                self.textLiteral()
                pass
            elif token in [SQLParser.PASSWORD_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2197
                localctx.option = self.match(SQLParser.PASSWORD_SYMBOL)
                self.state = 2198
                self.textLiteral()
                pass
            elif token in [SQLParser.SOCKET_SYMBOL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2199
                localctx.option = self.match(SQLParser.SOCKET_SYMBOL)
                self.state = 2200
                self.textLiteral()
                pass
            elif token in [SQLParser.OWNER_SYMBOL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2201
                localctx.option = self.match(SQLParser.OWNER_SYMBOL)
                self.state = 2202
                self.textLiteral()
                pass
            elif token in [SQLParser.PORT_SYMBOL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2203
                localctx.option = self.match(SQLParser.PORT_SYMBOL)
                self.state = 2204
                self.ulong_number()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTablespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESPACE_SYMBOL(self):
            return self.getToken(SQLParser.TABLESPACE_SYMBOL, 0)

        def tablespaceName(self):
            return self.getTypedRuleContext(SQLParser.TablespaceNameContext,0)


        def tsDataFileName(self):
            return self.getTypedRuleContext(SQLParser.TsDataFileNameContext,0)


        def USE_SYMBOL(self):
            return self.getToken(SQLParser.USE_SYMBOL, 0)

        def LOGFILE_SYMBOL(self):
            return self.getToken(SQLParser.LOGFILE_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(SQLParser.GROUP_SYMBOL, 0)

        def logfileGroupRef(self):
            return self.getTypedRuleContext(SQLParser.LogfileGroupRefContext,0)


        def tablespaceOptions(self):
            return self.getTypedRuleContext(SQLParser.TablespaceOptionsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_createTablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTablespace" ):
                listener.enterCreateTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTablespace" ):
                listener.exitCreateTablespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTablespace" ):
                return visitor.visitCreateTablespace(self)
            else:
                return visitor.visitChildren(self)




    def createTablespace(self):

        localctx = SQLParser.CreateTablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_createTablespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2207
            self.match(SQLParser.TABLESPACE_SYMBOL)
            self.state = 2208
            self.tablespaceName()
            self.state = 2209
            self.tsDataFileName()
            self.state = 2214
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 2210
                self.match(SQLParser.USE_SYMBOL)
                self.state = 2211
                self.match(SQLParser.LOGFILE_SYMBOL)
                self.state = 2212
                self.match(SQLParser.GROUP_SYMBOL)
                self.state = 2213
                self.logfileGroupRef()


            self.state = 2217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.state = 2216
                self.tablespaceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUndoTablespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDO_SYMBOL(self):
            return self.getToken(SQLParser.UNDO_SYMBOL, 0)

        def TABLESPACE_SYMBOL(self):
            return self.getToken(SQLParser.TABLESPACE_SYMBOL, 0)

        def tablespaceName(self):
            return self.getTypedRuleContext(SQLParser.TablespaceNameContext,0)


        def ADD_SYMBOL(self):
            return self.getToken(SQLParser.ADD_SYMBOL, 0)

        def tsDataFile(self):
            return self.getTypedRuleContext(SQLParser.TsDataFileContext,0)


        def undoTableSpaceOptions(self):
            return self.getTypedRuleContext(SQLParser.UndoTableSpaceOptionsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_createUndoTablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUndoTablespace" ):
                listener.enterCreateUndoTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUndoTablespace" ):
                listener.exitCreateUndoTablespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateUndoTablespace" ):
                return visitor.visitCreateUndoTablespace(self)
            else:
                return visitor.visitChildren(self)




    def createUndoTablespace(self):

        localctx = SQLParser.CreateUndoTablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_createUndoTablespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2219
            self.match(SQLParser.UNDO_SYMBOL)
            self.state = 2220
            self.match(SQLParser.TABLESPACE_SYMBOL)
            self.state = 2221
            self.tablespaceName()
            self.state = 2222
            self.match(SQLParser.ADD_SYMBOL)
            self.state = 2223
            self.tsDataFile()
            self.state = 2225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.ENGINE_SYMBOL or _la==SQLParser.STORAGE_SYMBOL:
                self.state = 2224
                self.undoTableSpaceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsDataFileNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_SYMBOL(self):
            return self.getToken(SQLParser.ADD_SYMBOL, 0)

        def tsDataFile(self):
            return self.getTypedRuleContext(SQLParser.TsDataFileContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_tsDataFileName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsDataFileName" ):
                listener.enterTsDataFileName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsDataFileName" ):
                listener.exitTsDataFileName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTsDataFileName" ):
                return visitor.visitTsDataFileName(self)
            else:
                return visitor.visitChildren(self)




    def tsDataFileName(self):

        localctx = SQLParser.TsDataFileNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_tsDataFileName)
        try:
            self.state = 2234
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2227
                if not self.serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80014")
                self.state = 2230
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                if la_ == 1:
                    self.state = 2228
                    self.match(SQLParser.ADD_SYMBOL)
                    self.state = 2229
                    self.tsDataFile()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2232
                self.match(SQLParser.ADD_SYMBOL)
                self.state = 2233
                self.tsDataFile()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsDataFileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATAFILE_SYMBOL(self):
            return self.getToken(SQLParser.DATAFILE_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextLiteralContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_tsDataFile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsDataFile" ):
                listener.enterTsDataFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsDataFile" ):
                listener.exitTsDataFile(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTsDataFile" ):
                return visitor.visitTsDataFile(self)
            else:
                return visitor.visitChildren(self)




    def tsDataFile(self):

        localctx = SQLParser.TsDataFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_tsDataFile)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2236
            self.match(SQLParser.DATAFILE_SYMBOL)
            self.state = 2237
            self.textLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablespaceOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tablespaceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.TablespaceOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.TablespaceOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_tablespaceOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablespaceOptions" ):
                listener.enterTablespaceOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablespaceOptions" ):
                listener.exitTablespaceOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablespaceOptions" ):
                return visitor.visitTablespaceOptions(self)
            else:
                return visitor.visitChildren(self)




    def tablespaceOptions(self):

        localctx = SQLParser.TablespaceOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_tablespaceOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2239
            self.tablespaceOption()
            self.state = 2246
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2241
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                    if la_ == 1:
                        self.state = 2240
                        self.match(SQLParser.COMMA_SYMBOL)


                    self.state = 2243
                    self.tablespaceOption() 
                self.state = 2248
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablespaceOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tsOptionInitialSize(self):
            return self.getTypedRuleContext(SQLParser.TsOptionInitialSizeContext,0)


        def tsOptionAutoextendSize(self):
            return self.getTypedRuleContext(SQLParser.TsOptionAutoextendSizeContext,0)


        def tsOptionMaxSize(self):
            return self.getTypedRuleContext(SQLParser.TsOptionMaxSizeContext,0)


        def tsOptionExtentSize(self):
            return self.getTypedRuleContext(SQLParser.TsOptionExtentSizeContext,0)


        def tsOptionNodegroup(self):
            return self.getTypedRuleContext(SQLParser.TsOptionNodegroupContext,0)


        def tsOptionEngine(self):
            return self.getTypedRuleContext(SQLParser.TsOptionEngineContext,0)


        def tsOptionWait(self):
            return self.getTypedRuleContext(SQLParser.TsOptionWaitContext,0)


        def tsOptionComment(self):
            return self.getTypedRuleContext(SQLParser.TsOptionCommentContext,0)


        def tsOptionFileblockSize(self):
            return self.getTypedRuleContext(SQLParser.TsOptionFileblockSizeContext,0)


        def tsOptionEncryption(self):
            return self.getTypedRuleContext(SQLParser.TsOptionEncryptionContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_tablespaceOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablespaceOption" ):
                listener.enterTablespaceOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablespaceOption" ):
                listener.exitTablespaceOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablespaceOption" ):
                return visitor.visitTablespaceOption(self)
            else:
                return visitor.visitChildren(self)




    def tablespaceOption(self):

        localctx = SQLParser.TablespaceOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_tablespaceOption)
        try:
            self.state = 2261
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2249
                self.tsOptionInitialSize()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2250
                self.tsOptionAutoextendSize()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2251
                self.tsOptionMaxSize()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2252
                self.tsOptionExtentSize()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2253
                self.tsOptionNodegroup()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2254
                self.tsOptionEngine()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2255
                self.tsOptionWait()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2256
                self.tsOptionComment()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2257
                if not self.serverVersion >= 50707:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50707")
                self.state = 2258
                self.tsOptionFileblockSize()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2259
                if not self.serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80014")
                self.state = 2260
                self.tsOptionEncryption()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionInitialSizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INITIAL_SIZE_SYMBOL(self):
            return self.getToken(SQLParser.INITIAL_SIZE_SYMBOL, 0)

        def sizeNumber(self):
            return self.getTypedRuleContext(SQLParser.SizeNumberContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_tsOptionInitialSize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionInitialSize" ):
                listener.enterTsOptionInitialSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionInitialSize" ):
                listener.exitTsOptionInitialSize(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTsOptionInitialSize" ):
                return visitor.visitTsOptionInitialSize(self)
            else:
                return visitor.visitChildren(self)




    def tsOptionInitialSize(self):

        localctx = SQLParser.TsOptionInitialSizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_tsOptionInitialSize)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2263
            self.match(SQLParser.INITIAL_SIZE_SYMBOL)
            self.state = 2265
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 2264
                self.match(SQLParser.EQUAL_OPERATOR)


            self.state = 2267
            self.sizeNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionUndoRedoBufferSizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sizeNumber(self):
            return self.getTypedRuleContext(SQLParser.SizeNumberContext,0)


        def UNDO_BUFFER_SIZE_SYMBOL(self):
            return self.getToken(SQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0)

        def REDO_BUFFER_SIZE_SYMBOL(self):
            return self.getToken(SQLParser.REDO_BUFFER_SIZE_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_tsOptionUndoRedoBufferSize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionUndoRedoBufferSize" ):
                listener.enterTsOptionUndoRedoBufferSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionUndoRedoBufferSize" ):
                listener.exitTsOptionUndoRedoBufferSize(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTsOptionUndoRedoBufferSize" ):
                return visitor.visitTsOptionUndoRedoBufferSize(self)
            else:
                return visitor.visitChildren(self)




    def tsOptionUndoRedoBufferSize(self):

        localctx = SQLParser.TsOptionUndoRedoBufferSizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_tsOptionUndoRedoBufferSize)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2269
            _la = self._input.LA(1)
            if not(_la==SQLParser.REDO_BUFFER_SIZE_SYMBOL or _la==SQLParser.UNDO_BUFFER_SIZE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2271
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.state = 2270
                self.match(SQLParser.EQUAL_OPERATOR)


            self.state = 2273
            self.sizeNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionAutoextendSizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTOEXTEND_SIZE_SYMBOL(self):
            return self.getToken(SQLParser.AUTOEXTEND_SIZE_SYMBOL, 0)

        def sizeNumber(self):
            return self.getTypedRuleContext(SQLParser.SizeNumberContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_tsOptionAutoextendSize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionAutoextendSize" ):
                listener.enterTsOptionAutoextendSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionAutoextendSize" ):
                listener.exitTsOptionAutoextendSize(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTsOptionAutoextendSize" ):
                return visitor.visitTsOptionAutoextendSize(self)
            else:
                return visitor.visitChildren(self)




    def tsOptionAutoextendSize(self):

        localctx = SQLParser.TsOptionAutoextendSizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_tsOptionAutoextendSize)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2275
            self.match(SQLParser.AUTOEXTEND_SIZE_SYMBOL)
            self.state = 2277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.state = 2276
                self.match(SQLParser.EQUAL_OPERATOR)


            self.state = 2279
            self.sizeNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionMaxSizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAX_SIZE_SYMBOL(self):
            return self.getToken(SQLParser.MAX_SIZE_SYMBOL, 0)

        def sizeNumber(self):
            return self.getTypedRuleContext(SQLParser.SizeNumberContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_tsOptionMaxSize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionMaxSize" ):
                listener.enterTsOptionMaxSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionMaxSize" ):
                listener.exitTsOptionMaxSize(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTsOptionMaxSize" ):
                return visitor.visitTsOptionMaxSize(self)
            else:
                return visitor.visitChildren(self)




    def tsOptionMaxSize(self):

        localctx = SQLParser.TsOptionMaxSizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_tsOptionMaxSize)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2281
            self.match(SQLParser.MAX_SIZE_SYMBOL)
            self.state = 2283
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.state = 2282
                self.match(SQLParser.EQUAL_OPERATOR)


            self.state = 2285
            self.sizeNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionExtentSizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTENT_SIZE_SYMBOL(self):
            return self.getToken(SQLParser.EXTENT_SIZE_SYMBOL, 0)

        def sizeNumber(self):
            return self.getTypedRuleContext(SQLParser.SizeNumberContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_tsOptionExtentSize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionExtentSize" ):
                listener.enterTsOptionExtentSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionExtentSize" ):
                listener.exitTsOptionExtentSize(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTsOptionExtentSize" ):
                return visitor.visitTsOptionExtentSize(self)
            else:
                return visitor.visitChildren(self)




    def tsOptionExtentSize(self):

        localctx = SQLParser.TsOptionExtentSizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_tsOptionExtentSize)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2287
            self.match(SQLParser.EXTENT_SIZE_SYMBOL)
            self.state = 2289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.state = 2288
                self.match(SQLParser.EQUAL_OPERATOR)


            self.state = 2291
            self.sizeNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionNodegroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NODEGROUP_SYMBOL(self):
            return self.getToken(SQLParser.NODEGROUP_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(SQLParser.Real_ulong_numberContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_tsOptionNodegroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionNodegroup" ):
                listener.enterTsOptionNodegroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionNodegroup" ):
                listener.exitTsOptionNodegroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTsOptionNodegroup" ):
                return visitor.visitTsOptionNodegroup(self)
            else:
                return visitor.visitChildren(self)




    def tsOptionNodegroup(self):

        localctx = SQLParser.TsOptionNodegroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_tsOptionNodegroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2293
            self.match(SQLParser.NODEGROUP_SYMBOL)
            self.state = 2295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.EQUAL_OPERATOR:
                self.state = 2294
                self.match(SQLParser.EQUAL_OPERATOR)


            self.state = 2297
            self.real_ulong_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionEngineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENGINE_SYMBOL(self):
            return self.getToken(SQLParser.ENGINE_SYMBOL, 0)

        def engineRef(self):
            return self.getTypedRuleContext(SQLParser.EngineRefContext,0)


        def STORAGE_SYMBOL(self):
            return self.getToken(SQLParser.STORAGE_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_tsOptionEngine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionEngine" ):
                listener.enterTsOptionEngine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionEngine" ):
                listener.exitTsOptionEngine(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTsOptionEngine" ):
                return visitor.visitTsOptionEngine(self)
            else:
                return visitor.visitChildren(self)




    def tsOptionEngine(self):

        localctx = SQLParser.TsOptionEngineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_tsOptionEngine)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.STORAGE_SYMBOL:
                self.state = 2299
                self.match(SQLParser.STORAGE_SYMBOL)


            self.state = 2302
            self.match(SQLParser.ENGINE_SYMBOL)
            self.state = 2304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.state = 2303
                self.match(SQLParser.EQUAL_OPERATOR)


            self.state = 2306
            self.engineRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionWaitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAIT_SYMBOL(self):
            return self.getToken(SQLParser.WAIT_SYMBOL, 0)

        def NO_WAIT_SYMBOL(self):
            return self.getToken(SQLParser.NO_WAIT_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_tsOptionWait

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionWait" ):
                listener.enterTsOptionWait(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionWait" ):
                listener.exitTsOptionWait(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTsOptionWait" ):
                return visitor.visitTsOptionWait(self)
            else:
                return visitor.visitChildren(self)




    def tsOptionWait(self):

        localctx = SQLParser.TsOptionWaitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_tsOptionWait)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2308
            _la = self._input.LA(1)
            if not(_la==SQLParser.NO_WAIT_SYMBOL or _la==SQLParser.WAIT_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionCommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT_SYMBOL(self):
            return self.getToken(SQLParser.COMMENT_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextLiteralContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_tsOptionComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionComment" ):
                listener.enterTsOptionComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionComment" ):
                listener.exitTsOptionComment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTsOptionComment" ):
                return visitor.visitTsOptionComment(self)
            else:
                return visitor.visitChildren(self)




    def tsOptionComment(self):

        localctx = SQLParser.TsOptionCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_tsOptionComment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2310
            self.match(SQLParser.COMMENT_SYMBOL)
            self.state = 2312
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 2311
                self.match(SQLParser.EQUAL_OPERATOR)


            self.state = 2314
            self.textLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionFileblockSizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE_BLOCK_SIZE_SYMBOL(self):
            return self.getToken(SQLParser.FILE_BLOCK_SIZE_SYMBOL, 0)

        def sizeNumber(self):
            return self.getTypedRuleContext(SQLParser.SizeNumberContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_tsOptionFileblockSize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionFileblockSize" ):
                listener.enterTsOptionFileblockSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionFileblockSize" ):
                listener.exitTsOptionFileblockSize(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTsOptionFileblockSize" ):
                return visitor.visitTsOptionFileblockSize(self)
            else:
                return visitor.visitChildren(self)




    def tsOptionFileblockSize(self):

        localctx = SQLParser.TsOptionFileblockSizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_tsOptionFileblockSize)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2316
            self.match(SQLParser.FILE_BLOCK_SIZE_SYMBOL)
            self.state = 2318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.state = 2317
                self.match(SQLParser.EQUAL_OPERATOR)


            self.state = 2320
            self.sizeNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionEncryptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION_SYMBOL(self):
            return self.getToken(SQLParser.ENCRYPTION_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextStringLiteralContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_tsOptionEncryption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionEncryption" ):
                listener.enterTsOptionEncryption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionEncryption" ):
                listener.exitTsOptionEncryption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTsOptionEncryption" ):
                return visitor.visitTsOptionEncryption(self)
            else:
                return visitor.visitChildren(self)




    def tsOptionEncryption(self):

        localctx = SQLParser.TsOptionEncryptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_tsOptionEncryption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2322
            self.match(SQLParser.ENCRYPTION_SYMBOL)
            self.state = 2324
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 2323
                self.match(SQLParser.EQUAL_OPERATOR)


            self.state = 2326
            self.textStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VIEW_SYMBOL(self):
            return self.getToken(SQLParser.VIEW_SYMBOL, 0)

        def viewName(self):
            return self.getTypedRuleContext(SQLParser.ViewNameContext,0)


        def viewTail(self):
            return self.getTypedRuleContext(SQLParser.ViewTailContext,0)


        def viewReplaceOrAlgorithm(self):
            return self.getTypedRuleContext(SQLParser.ViewReplaceOrAlgorithmContext,0)


        def definerClause(self):
            return self.getTypedRuleContext(SQLParser.DefinerClauseContext,0)


        def viewSuid(self):
            return self.getTypedRuleContext(SQLParser.ViewSuidContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_createView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateView" ):
                listener.enterCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateView" ):
                listener.exitCreateView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateView" ):
                return visitor.visitCreateView(self)
            else:
                return visitor.visitChildren(self)




    def createView(self):

        localctx = SQLParser.CreateViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_createView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.ALGORITHM_SYMBOL or _la==SQLParser.OR_SYMBOL:
                self.state = 2328
                self.viewReplaceOrAlgorithm()


            self.state = 2332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.DEFINER_SYMBOL:
                self.state = 2331
                self.definerClause()


            self.state = 2335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.SQL_SYMBOL:
                self.state = 2334
                self.viewSuid()


            self.state = 2337
            self.match(SQLParser.VIEW_SYMBOL)
            self.state = 2338
            self.viewName()
            self.state = 2339
            self.viewTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewReplaceOrAlgorithmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR_SYMBOL(self):
            return self.getToken(SQLParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(SQLParser.REPLACE_SYMBOL, 0)

        def viewAlgorithm(self):
            return self.getTypedRuleContext(SQLParser.ViewAlgorithmContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_viewReplaceOrAlgorithm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewReplaceOrAlgorithm" ):
                listener.enterViewReplaceOrAlgorithm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewReplaceOrAlgorithm" ):
                listener.exitViewReplaceOrAlgorithm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitViewReplaceOrAlgorithm" ):
                return visitor.visitViewReplaceOrAlgorithm(self)
            else:
                return visitor.visitChildren(self)




    def viewReplaceOrAlgorithm(self):

        localctx = SQLParser.ViewReplaceOrAlgorithmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_viewReplaceOrAlgorithm)
        self._la = 0 # Token type
        try:
            self.state = 2347
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.OR_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2341
                self.match(SQLParser.OR_SYMBOL)
                self.state = 2342
                self.match(SQLParser.REPLACE_SYMBOL)
                self.state = 2344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.ALGORITHM_SYMBOL:
                    self.state = 2343
                    self.viewAlgorithm()


                pass
            elif token in [SQLParser.ALGORITHM_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2346
                self.viewAlgorithm()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewAlgorithmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.algorithm = None # Token

        def ALGORITHM_SYMBOL(self):
            return self.getToken(SQLParser.ALGORITHM_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def UNDEFINED_SYMBOL(self):
            return self.getToken(SQLParser.UNDEFINED_SYMBOL, 0)

        def MERGE_SYMBOL(self):
            return self.getToken(SQLParser.MERGE_SYMBOL, 0)

        def TEMPTABLE_SYMBOL(self):
            return self.getToken(SQLParser.TEMPTABLE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_viewAlgorithm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewAlgorithm" ):
                listener.enterViewAlgorithm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewAlgorithm" ):
                listener.exitViewAlgorithm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitViewAlgorithm" ):
                return visitor.visitViewAlgorithm(self)
            else:
                return visitor.visitChildren(self)




    def viewAlgorithm(self):

        localctx = SQLParser.ViewAlgorithmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_viewAlgorithm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2349
            self.match(SQLParser.ALGORITHM_SYMBOL)
            self.state = 2350
            self.match(SQLParser.EQUAL_OPERATOR)
            self.state = 2351
            localctx.algorithm = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==SQLParser.MERGE_SYMBOL or _la==SQLParser.TEMPTABLE_SYMBOL or _la==SQLParser.UNDEFINED_SYMBOL):
                localctx.algorithm = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewSuidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQL_SYMBOL(self):
            return self.getToken(SQLParser.SQL_SYMBOL, 0)

        def SECURITY_SYMBOL(self):
            return self.getToken(SQLParser.SECURITY_SYMBOL, 0)

        def DEFINER_SYMBOL(self):
            return self.getToken(SQLParser.DEFINER_SYMBOL, 0)

        def INVOKER_SYMBOL(self):
            return self.getToken(SQLParser.INVOKER_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_viewSuid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewSuid" ):
                listener.enterViewSuid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewSuid" ):
                listener.exitViewSuid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitViewSuid" ):
                return visitor.visitViewSuid(self)
            else:
                return visitor.visitChildren(self)




    def viewSuid(self):

        localctx = SQLParser.ViewSuidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_viewSuid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2353
            self.match(SQLParser.SQL_SYMBOL)
            self.state = 2354
            self.match(SQLParser.SECURITY_SYMBOL)
            self.state = 2355
            _la = self._input.LA(1)
            if not(_la==SQLParser.DEFINER_SYMBOL or _la==SQLParser.INVOKER_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTriggerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.timing = None # Token
            self.event = None # Token

        def TRIGGER_SYMBOL(self):
            return self.getToken(SQLParser.TRIGGER_SYMBOL, 0)

        def triggerName(self):
            return self.getTypedRuleContext(SQLParser.TriggerNameContext,0)


        def ON_SYMBOL(self):
            return self.getToken(SQLParser.ON_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(SQLParser.TableRefContext,0)


        def FOR_SYMBOL(self):
            return self.getToken(SQLParser.FOR_SYMBOL, 0)

        def EACH_SYMBOL(self):
            return self.getToken(SQLParser.EACH_SYMBOL, 0)

        def ROW_SYMBOL(self):
            return self.getToken(SQLParser.ROW_SYMBOL, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(SQLParser.CompoundStatementContext,0)


        def BEFORE_SYMBOL(self):
            return self.getToken(SQLParser.BEFORE_SYMBOL, 0)

        def AFTER_SYMBOL(self):
            return self.getToken(SQLParser.AFTER_SYMBOL, 0)

        def INSERT_SYMBOL(self):
            return self.getToken(SQLParser.INSERT_SYMBOL, 0)

        def UPDATE_SYMBOL(self):
            return self.getToken(SQLParser.UPDATE_SYMBOL, 0)

        def DELETE_SYMBOL(self):
            return self.getToken(SQLParser.DELETE_SYMBOL, 0)

        def definerClause(self):
            return self.getTypedRuleContext(SQLParser.DefinerClauseContext,0)


        def triggerFollowsPrecedesClause(self):
            return self.getTypedRuleContext(SQLParser.TriggerFollowsPrecedesClauseContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_createTrigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTrigger" ):
                listener.enterCreateTrigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTrigger" ):
                listener.exitCreateTrigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTrigger" ):
                return visitor.visitCreateTrigger(self)
            else:
                return visitor.visitChildren(self)




    def createTrigger(self):

        localctx = SQLParser.CreateTriggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_createTrigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.DEFINER_SYMBOL:
                self.state = 2357
                self.definerClause()


            self.state = 2360
            self.match(SQLParser.TRIGGER_SYMBOL)
            self.state = 2361
            self.triggerName()
            self.state = 2362
            localctx.timing = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==SQLParser.AFTER_SYMBOL or _la==SQLParser.BEFORE_SYMBOL):
                localctx.timing = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2363
            localctx.event = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==SQLParser.DELETE_SYMBOL or _la==SQLParser.INSERT_SYMBOL or _la==SQLParser.UPDATE_SYMBOL):
                localctx.event = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2364
            self.match(SQLParser.ON_SYMBOL)
            self.state = 2365
            self.tableRef()
            self.state = 2366
            self.match(SQLParser.FOR_SYMBOL)
            self.state = 2367
            self.match(SQLParser.EACH_SYMBOL)
            self.state = 2368
            self.match(SQLParser.ROW_SYMBOL)
            self.state = 2370
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.state = 2369
                self.triggerFollowsPrecedesClause()


            self.state = 2372
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerFollowsPrecedesClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token

        def textOrIdentifier(self):
            return self.getTypedRuleContext(SQLParser.TextOrIdentifierContext,0)


        def FOLLOWS_SYMBOL(self):
            return self.getToken(SQLParser.FOLLOWS_SYMBOL, 0)

        def PRECEDES_SYMBOL(self):
            return self.getToken(SQLParser.PRECEDES_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_triggerFollowsPrecedesClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerFollowsPrecedesClause" ):
                listener.enterTriggerFollowsPrecedesClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerFollowsPrecedesClause" ):
                listener.exitTriggerFollowsPrecedesClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTriggerFollowsPrecedesClause" ):
                return visitor.visitTriggerFollowsPrecedesClause(self)
            else:
                return visitor.visitChildren(self)




    def triggerFollowsPrecedesClause(self):

        localctx = SQLParser.TriggerFollowsPrecedesClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_triggerFollowsPrecedesClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2374
            if not self.serverVersion >= 50700:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.serverVersion >= 50700")
            self.state = 2375
            localctx.ordering = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==SQLParser.FOLLOWS_SYMBOL or _la==SQLParser.PRECEDES_SYMBOL):
                localctx.ordering = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2376
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateEventContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENT_SYMBOL(self):
            return self.getToken(SQLParser.EVENT_SYMBOL, 0)

        def eventName(self):
            return self.getTypedRuleContext(SQLParser.EventNameContext,0)


        def ON_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.ON_SYMBOL)
            else:
                return self.getToken(SQLParser.ON_SYMBOL, i)

        def SCHEDULE_SYMBOL(self):
            return self.getToken(SQLParser.SCHEDULE_SYMBOL, 0)

        def schedule(self):
            return self.getTypedRuleContext(SQLParser.ScheduleContext,0)


        def DO_SYMBOL(self):
            return self.getToken(SQLParser.DO_SYMBOL, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(SQLParser.CompoundStatementContext,0)


        def definerClause(self):
            return self.getTypedRuleContext(SQLParser.DefinerClauseContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(SQLParser.IfNotExistsContext,0)


        def COMPLETION_SYMBOL(self):
            return self.getToken(SQLParser.COMPLETION_SYMBOL, 0)

        def PRESERVE_SYMBOL(self):
            return self.getToken(SQLParser.PRESERVE_SYMBOL, 0)

        def ENABLE_SYMBOL(self):
            return self.getToken(SQLParser.ENABLE_SYMBOL, 0)

        def DISABLE_SYMBOL(self):
            return self.getToken(SQLParser.DISABLE_SYMBOL, 0)

        def COMMENT_SYMBOL(self):
            return self.getToken(SQLParser.COMMENT_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextLiteralContext,0)


        def NOT_SYMBOL(self):
            return self.getToken(SQLParser.NOT_SYMBOL, 0)

        def SLAVE_SYMBOL(self):
            return self.getToken(SQLParser.SLAVE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_createEvent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateEvent" ):
                listener.enterCreateEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateEvent" ):
                listener.exitCreateEvent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateEvent" ):
                return visitor.visitCreateEvent(self)
            else:
                return visitor.visitChildren(self)




    def createEvent(self):

        localctx = SQLParser.CreateEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_createEvent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.DEFINER_SYMBOL:
                self.state = 2378
                self.definerClause()


            self.state = 2381
            self.match(SQLParser.EVENT_SYMBOL)
            self.state = 2383
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.state = 2382
                self.ifNotExists()


            self.state = 2385
            self.eventName()
            self.state = 2386
            self.match(SQLParser.ON_SYMBOL)
            self.state = 2387
            self.match(SQLParser.SCHEDULE_SYMBOL)
            self.state = 2388
            self.schedule()
            self.state = 2395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.ON_SYMBOL:
                self.state = 2389
                self.match(SQLParser.ON_SYMBOL)
                self.state = 2390
                self.match(SQLParser.COMPLETION_SYMBOL)
                self.state = 2392
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.NOT_SYMBOL:
                    self.state = 2391
                    self.match(SQLParser.NOT_SYMBOL)


                self.state = 2394
                self.match(SQLParser.PRESERVE_SYMBOL)


            self.state = 2403
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.ENABLE_SYMBOL]:
                self.state = 2397
                self.match(SQLParser.ENABLE_SYMBOL)
                pass
            elif token in [SQLParser.DISABLE_SYMBOL]:
                self.state = 2398
                self.match(SQLParser.DISABLE_SYMBOL)
                self.state = 2401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.ON_SYMBOL:
                    self.state = 2399
                    self.match(SQLParser.ON_SYMBOL)
                    self.state = 2400
                    self.match(SQLParser.SLAVE_SYMBOL)


                pass
            elif token in [SQLParser.COMMENT_SYMBOL, SQLParser.DO_SYMBOL]:
                pass
            else:
                pass
            self.state = 2407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.COMMENT_SYMBOL:
                self.state = 2405
                self.match(SQLParser.COMMENT_SYMBOL)
                self.state = 2406
                self.textLiteral()


            self.state = 2409
            self.match(SQLParser.DO_SYMBOL)
            self.state = 2410
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLE_SYMBOL(self):
            return self.getToken(SQLParser.ROLE_SYMBOL, 0)

        def roleList(self):
            return self.getTypedRuleContext(SQLParser.RoleListContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(SQLParser.IfNotExistsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_createRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRole" ):
                listener.enterCreateRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRole" ):
                listener.exitCreateRole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateRole" ):
                return visitor.visitCreateRole(self)
            else:
                return visitor.visitChildren(self)




    def createRole(self):

        localctx = SQLParser.CreateRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_createRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2412
            self.match(SQLParser.ROLE_SYMBOL)
            self.state = 2414
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.state = 2413
                self.ifNotExists()


            self.state = 2416
            self.roleList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateSpatialReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR_SYMBOL(self):
            return self.getToken(SQLParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(SQLParser.REPLACE_SYMBOL, 0)

        def SPATIAL_SYMBOL(self):
            return self.getToken(SQLParser.SPATIAL_SYMBOL, 0)

        def REFERENCE_SYMBOL(self):
            return self.getToken(SQLParser.REFERENCE_SYMBOL, 0)

        def SYSTEM_SYMBOL(self):
            return self.getToken(SQLParser.SYSTEM_SYMBOL, 0)

        def real_ulonglong_number(self):
            return self.getTypedRuleContext(SQLParser.Real_ulonglong_numberContext,0)


        def srsAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.SrsAttributeContext)
            else:
                return self.getTypedRuleContext(SQLParser.SrsAttributeContext,i)


        def ifNotExists(self):
            return self.getTypedRuleContext(SQLParser.IfNotExistsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_createSpatialReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateSpatialReference" ):
                listener.enterCreateSpatialReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateSpatialReference" ):
                listener.exitCreateSpatialReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateSpatialReference" ):
                return visitor.visitCreateSpatialReference(self)
            else:
                return visitor.visitChildren(self)




    def createSpatialReference(self):

        localctx = SQLParser.CreateSpatialReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_createSpatialReference)
        self._la = 0 # Token type
        try:
            self.state = 2443
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.OR_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2418
                self.match(SQLParser.OR_SYMBOL)
                self.state = 2419
                self.match(SQLParser.REPLACE_SYMBOL)
                self.state = 2420
                self.match(SQLParser.SPATIAL_SYMBOL)
                self.state = 2421
                self.match(SQLParser.REFERENCE_SYMBOL)
                self.state = 2422
                self.match(SQLParser.SYSTEM_SYMBOL)
                self.state = 2423
                self.real_ulonglong_number()
                self.state = 2427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLParser.NAME_SYMBOL or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (SQLParser.DEFINITION_SYMBOL - 715)) | (1 << (SQLParser.DESCRIPTION_SYMBOL - 715)) | (1 << (SQLParser.ORGANIZATION_SYMBOL - 715)))) != 0):
                    self.state = 2424
                    self.srsAttribute()
                    self.state = 2429
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [SQLParser.SPATIAL_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2430
                self.match(SQLParser.SPATIAL_SYMBOL)
                self.state = 2431
                self.match(SQLParser.REFERENCE_SYMBOL)
                self.state = 2432
                self.match(SQLParser.SYSTEM_SYMBOL)
                self.state = 2434
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
                if la_ == 1:
                    self.state = 2433
                    self.ifNotExists()


                self.state = 2436
                self.real_ulonglong_number()
                self.state = 2440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLParser.NAME_SYMBOL or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (SQLParser.DEFINITION_SYMBOL - 715)) | (1 << (SQLParser.DESCRIPTION_SYMBOL - 715)) | (1 << (SQLParser.ORGANIZATION_SYMBOL - 715)))) != 0):
                    self.state = 2437
                    self.srsAttribute()
                    self.state = 2442
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SrsAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME_SYMBOL(self):
            return self.getToken(SQLParser.NAME_SYMBOL, 0)

        def TEXT_SYMBOL(self):
            return self.getToken(SQLParser.TEXT_SYMBOL, 0)

        def textStringNoLinebreak(self):
            return self.getTypedRuleContext(SQLParser.TextStringNoLinebreakContext,0)


        def DEFINITION_SYMBOL(self):
            return self.getToken(SQLParser.DEFINITION_SYMBOL, 0)

        def ORGANIZATION_SYMBOL(self):
            return self.getToken(SQLParser.ORGANIZATION_SYMBOL, 0)

        def IDENTIFIED_SYMBOL(self):
            return self.getToken(SQLParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(SQLParser.BY_SYMBOL, 0)

        def real_ulonglong_number(self):
            return self.getTypedRuleContext(SQLParser.Real_ulonglong_numberContext,0)


        def DESCRIPTION_SYMBOL(self):
            return self.getToken(SQLParser.DESCRIPTION_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_srsAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSrsAttribute" ):
                listener.enterSrsAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSrsAttribute" ):
                listener.exitSrsAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSrsAttribute" ):
                return visitor.visitSrsAttribute(self)
            else:
                return visitor.visitChildren(self)




    def srsAttribute(self):

        localctx = SQLParser.SrsAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_srsAttribute)
        try:
            self.state = 2460
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.NAME_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2445
                self.match(SQLParser.NAME_SYMBOL)
                self.state = 2446
                self.match(SQLParser.TEXT_SYMBOL)
                self.state = 2447
                self.textStringNoLinebreak()
                pass
            elif token in [SQLParser.DEFINITION_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2448
                self.match(SQLParser.DEFINITION_SYMBOL)
                self.state = 2449
                self.match(SQLParser.TEXT_SYMBOL)
                self.state = 2450
                self.textStringNoLinebreak()
                pass
            elif token in [SQLParser.ORGANIZATION_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2451
                self.match(SQLParser.ORGANIZATION_SYMBOL)
                self.state = 2452
                self.textStringNoLinebreak()
                self.state = 2453
                self.match(SQLParser.IDENTIFIED_SYMBOL)
                self.state = 2454
                self.match(SQLParser.BY_SYMBOL)
                self.state = 2455
                self.real_ulonglong_number()
                pass
            elif token in [SQLParser.DESCRIPTION_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2457
                self.match(SQLParser.DESCRIPTION_SYMBOL)
                self.state = 2458
                self.match(SQLParser.TEXT_SYMBOL)
                self.state = 2459
                self.textStringNoLinebreak()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(SQLParser.DROP_SYMBOL, 0)

        def dropDatabase(self):
            return self.getTypedRuleContext(SQLParser.DropDatabaseContext,0)


        def dropEvent(self):
            return self.getTypedRuleContext(SQLParser.DropEventContext,0)


        def dropFunction(self):
            return self.getTypedRuleContext(SQLParser.DropFunctionContext,0)


        def dropProcedure(self):
            return self.getTypedRuleContext(SQLParser.DropProcedureContext,0)


        def dropIndex(self):
            return self.getTypedRuleContext(SQLParser.DropIndexContext,0)


        def dropLogfileGroup(self):
            return self.getTypedRuleContext(SQLParser.DropLogfileGroupContext,0)


        def dropServer(self):
            return self.getTypedRuleContext(SQLParser.DropServerContext,0)


        def dropTable(self):
            return self.getTypedRuleContext(SQLParser.DropTableContext,0)


        def dropTableSpace(self):
            return self.getTypedRuleContext(SQLParser.DropTableSpaceContext,0)


        def dropTrigger(self):
            return self.getTypedRuleContext(SQLParser.DropTriggerContext,0)


        def dropView(self):
            return self.getTypedRuleContext(SQLParser.DropViewContext,0)


        def dropRole(self):
            return self.getTypedRuleContext(SQLParser.DropRoleContext,0)


        def dropSpatialReference(self):
            return self.getTypedRuleContext(SQLParser.DropSpatialReferenceContext,0)


        def dropUndoTablespace(self):
            return self.getTypedRuleContext(SQLParser.DropUndoTablespaceContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_dropStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropStatement" ):
                listener.enterDropStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropStatement" ):
                listener.exitDropStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropStatement" ):
                return visitor.visitDropStatement(self)
            else:
                return visitor.visitChildren(self)




    def dropStatement(self):

        localctx = SQLParser.DropStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_dropStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2462
            self.match(SQLParser.DROP_SYMBOL)
            self.state = 2480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.state = 2463
                self.dropDatabase()
                pass

            elif la_ == 2:
                self.state = 2464
                self.dropEvent()
                pass

            elif la_ == 3:
                self.state = 2465
                self.dropFunction()
                pass

            elif la_ == 4:
                self.state = 2466
                self.dropProcedure()
                pass

            elif la_ == 5:
                self.state = 2467
                self.dropIndex()
                pass

            elif la_ == 6:
                self.state = 2468
                self.dropLogfileGroup()
                pass

            elif la_ == 7:
                self.state = 2469
                self.dropServer()
                pass

            elif la_ == 8:
                self.state = 2470
                self.dropTable()
                pass

            elif la_ == 9:
                self.state = 2471
                self.dropTableSpace()
                pass

            elif la_ == 10:
                self.state = 2472
                self.dropTrigger()
                pass

            elif la_ == 11:
                self.state = 2473
                self.dropView()
                pass

            elif la_ == 12:
                self.state = 2474
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 2475
                self.dropRole()
                pass

            elif la_ == 13:
                self.state = 2476
                if not self.serverVersion >= 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80011")
                self.state = 2477
                self.dropSpatialReference()
                pass

            elif la_ == 14:
                self.state = 2478
                if not self.serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80014")
                self.state = 2479
                self.dropUndoTablespace()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE_SYMBOL(self):
            return self.getToken(SQLParser.DATABASE_SYMBOL, 0)

        def schemaRef(self):
            return self.getTypedRuleContext(SQLParser.SchemaRefContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(SQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_dropDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropDatabase" ):
                listener.enterDropDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropDatabase" ):
                listener.exitDropDatabase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropDatabase" ):
                return visitor.visitDropDatabase(self)
            else:
                return visitor.visitChildren(self)




    def dropDatabase(self):

        localctx = SQLParser.DropDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_dropDatabase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2482
            self.match(SQLParser.DATABASE_SYMBOL)
            self.state = 2484
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.state = 2483
                self.ifExists()


            self.state = 2486
            self.schemaRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropEventContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENT_SYMBOL(self):
            return self.getToken(SQLParser.EVENT_SYMBOL, 0)

        def eventRef(self):
            return self.getTypedRuleContext(SQLParser.EventRefContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(SQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_dropEvent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropEvent" ):
                listener.enterDropEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropEvent" ):
                listener.exitDropEvent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropEvent" ):
                return visitor.visitDropEvent(self)
            else:
                return visitor.visitChildren(self)




    def dropEvent(self):

        localctx = SQLParser.DropEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_dropEvent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2488
            self.match(SQLParser.EVENT_SYMBOL)
            self.state = 2490
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.state = 2489
                self.ifExists()


            self.state = 2492
            self.eventRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION_SYMBOL(self):
            return self.getToken(SQLParser.FUNCTION_SYMBOL, 0)

        def functionRef(self):
            return self.getTypedRuleContext(SQLParser.FunctionRefContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(SQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_dropFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropFunction" ):
                listener.enterDropFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropFunction" ):
                listener.exitDropFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropFunction" ):
                return visitor.visitDropFunction(self)
            else:
                return visitor.visitChildren(self)




    def dropFunction(self):

        localctx = SQLParser.DropFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_dropFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2494
            self.match(SQLParser.FUNCTION_SYMBOL)
            self.state = 2496
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.state = 2495
                self.ifExists()


            self.state = 2498
            self.functionRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE_SYMBOL(self):
            return self.getToken(SQLParser.PROCEDURE_SYMBOL, 0)

        def procedureRef(self):
            return self.getTypedRuleContext(SQLParser.ProcedureRefContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(SQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_dropProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropProcedure" ):
                listener.enterDropProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropProcedure" ):
                listener.exitDropProcedure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropProcedure" ):
                return visitor.visitDropProcedure(self)
            else:
                return visitor.visitChildren(self)




    def dropProcedure(self):

        localctx = SQLParser.DropProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_dropProcedure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2500
            self.match(SQLParser.PROCEDURE_SYMBOL)
            self.state = 2502
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
            if la_ == 1:
                self.state = 2501
                self.ifExists()


            self.state = 2504
            self.procedureRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None # Token

        def indexRef(self):
            return self.getTypedRuleContext(SQLParser.IndexRefContext,0)


        def ON_SYMBOL(self):
            return self.getToken(SQLParser.ON_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(SQLParser.TableRefContext,0)


        def INDEX_SYMBOL(self):
            return self.getToken(SQLParser.INDEX_SYMBOL, 0)

        def onlineOption(self):
            return self.getTypedRuleContext(SQLParser.OnlineOptionContext,0)


        def indexLockAndAlgorithm(self):
            return self.getTypedRuleContext(SQLParser.IndexLockAndAlgorithmContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_dropIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropIndex" ):
                listener.enterDropIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropIndex" ):
                listener.exitDropIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropIndex" ):
                return visitor.visitDropIndex(self)
            else:
                return visitor.visitChildren(self)




    def dropIndex(self):

        localctx = SQLParser.DropIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_dropIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.OFFLINE_SYMBOL or _la==SQLParser.ONLINE_SYMBOL:
                self.state = 2506
                self.onlineOption()


            self.state = 2509
            localctx.type = self.match(SQLParser.INDEX_SYMBOL)
            self.state = 2510
            self.indexRef()
            self.state = 2511
            self.match(SQLParser.ON_SYMBOL)
            self.state = 2512
            self.tableRef()
            self.state = 2514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.ALGORITHM_SYMBOL or _la==SQLParser.LOCK_SYMBOL:
                self.state = 2513
                self.indexLockAndAlgorithm()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropLogfileGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOGFILE_SYMBOL(self):
            return self.getToken(SQLParser.LOGFILE_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(SQLParser.GROUP_SYMBOL, 0)

        def logfileGroupRef(self):
            return self.getTypedRuleContext(SQLParser.LogfileGroupRefContext,0)


        def dropLogfileGroupOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.DropLogfileGroupOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.DropLogfileGroupOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_dropLogfileGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropLogfileGroup" ):
                listener.enterDropLogfileGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropLogfileGroup" ):
                listener.exitDropLogfileGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropLogfileGroup" ):
                return visitor.visitDropLogfileGroup(self)
            else:
                return visitor.visitChildren(self)




    def dropLogfileGroup(self):

        localctx = SQLParser.DropLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_dropLogfileGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2516
            self.match(SQLParser.LOGFILE_SYMBOL)
            self.state = 2517
            self.match(SQLParser.GROUP_SYMBOL)
            self.state = 2518
            self.logfileGroupRef()
            self.state = 2529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.ENGINE_SYMBOL or _la==SQLParser.NO_WAIT_SYMBOL or _la==SQLParser.STORAGE_SYMBOL or _la==SQLParser.WAIT_SYMBOL:
                self.state = 2519
                self.dropLogfileGroupOption()
                self.state = 2526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLParser.ENGINE_SYMBOL or _la==SQLParser.NO_WAIT_SYMBOL or _la==SQLParser.STORAGE_SYMBOL or _la==SQLParser.WAIT_SYMBOL or _la==SQLParser.COMMA_SYMBOL:
                    self.state = 2521
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.COMMA_SYMBOL:
                        self.state = 2520
                        self.match(SQLParser.COMMA_SYMBOL)


                    self.state = 2523
                    self.dropLogfileGroupOption()
                    self.state = 2528
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropLogfileGroupOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tsOptionWait(self):
            return self.getTypedRuleContext(SQLParser.TsOptionWaitContext,0)


        def tsOptionEngine(self):
            return self.getTypedRuleContext(SQLParser.TsOptionEngineContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_dropLogfileGroupOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropLogfileGroupOption" ):
                listener.enterDropLogfileGroupOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropLogfileGroupOption" ):
                listener.exitDropLogfileGroupOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropLogfileGroupOption" ):
                return visitor.visitDropLogfileGroupOption(self)
            else:
                return visitor.visitChildren(self)




    def dropLogfileGroupOption(self):

        localctx = SQLParser.DropLogfileGroupOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_dropLogfileGroupOption)
        try:
            self.state = 2533
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.NO_WAIT_SYMBOL, SQLParser.WAIT_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2531
                self.tsOptionWait()
                pass
            elif token in [SQLParser.ENGINE_SYMBOL, SQLParser.STORAGE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2532
                self.tsOptionEngine()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropServerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVER_SYMBOL(self):
            return self.getToken(SQLParser.SERVER_SYMBOL, 0)

        def serverRef(self):
            return self.getTypedRuleContext(SQLParser.ServerRefContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(SQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_dropServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropServer" ):
                listener.enterDropServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropServer" ):
                listener.exitDropServer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropServer" ):
                return visitor.visitDropServer(self)
            else:
                return visitor.visitChildren(self)




    def dropServer(self):

        localctx = SQLParser.DropServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_dropServer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2535
            self.match(SQLParser.SERVER_SYMBOL)
            self.state = 2537
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.state = 2536
                self.ifExists()


            self.state = 2539
            self.serverRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None # Token

        def tableRefList(self):
            return self.getTypedRuleContext(SQLParser.TableRefListContext,0)


        def TABLE_SYMBOL(self):
            return self.getToken(SQLParser.TABLE_SYMBOL, 0)

        def TABLES_SYMBOL(self):
            return self.getToken(SQLParser.TABLES_SYMBOL, 0)

        def TEMPORARY_SYMBOL(self):
            return self.getToken(SQLParser.TEMPORARY_SYMBOL, 0)

        def ifExists(self):
            return self.getTypedRuleContext(SQLParser.IfExistsContext,0)


        def RESTRICT_SYMBOL(self):
            return self.getToken(SQLParser.RESTRICT_SYMBOL, 0)

        def CASCADE_SYMBOL(self):
            return self.getToken(SQLParser.CASCADE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_dropTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTable" ):
                return visitor.visitDropTable(self)
            else:
                return visitor.visitChildren(self)




    def dropTable(self):

        localctx = SQLParser.DropTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_dropTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.TEMPORARY_SYMBOL:
                self.state = 2541
                self.match(SQLParser.TEMPORARY_SYMBOL)


            self.state = 2544
            localctx.type = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==SQLParser.TABLES_SYMBOL or _la==SQLParser.TABLE_SYMBOL):
                localctx.type = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2546
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.state = 2545
                self.ifExists()


            self.state = 2548
            self.tableRefList()
            self.state = 2550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.CASCADE_SYMBOL or _la==SQLParser.RESTRICT_SYMBOL:
                self.state = 2549
                _la = self._input.LA(1)
                if not(_la==SQLParser.CASCADE_SYMBOL or _la==SQLParser.RESTRICT_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTableSpaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESPACE_SYMBOL(self):
            return self.getToken(SQLParser.TABLESPACE_SYMBOL, 0)

        def tablespaceRef(self):
            return self.getTypedRuleContext(SQLParser.TablespaceRefContext,0)


        def dropLogfileGroupOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.DropLogfileGroupOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.DropLogfileGroupOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_dropTableSpace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTableSpace" ):
                listener.enterDropTableSpace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTableSpace" ):
                listener.exitDropTableSpace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTableSpace" ):
                return visitor.visitDropTableSpace(self)
            else:
                return visitor.visitChildren(self)




    def dropTableSpace(self):

        localctx = SQLParser.DropTableSpaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_dropTableSpace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2552
            self.match(SQLParser.TABLESPACE_SYMBOL)
            self.state = 2553
            self.tablespaceRef()
            self.state = 2564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.ENGINE_SYMBOL or _la==SQLParser.NO_WAIT_SYMBOL or _la==SQLParser.STORAGE_SYMBOL or _la==SQLParser.WAIT_SYMBOL:
                self.state = 2554
                self.dropLogfileGroupOption()
                self.state = 2561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLParser.ENGINE_SYMBOL or _la==SQLParser.NO_WAIT_SYMBOL or _la==SQLParser.STORAGE_SYMBOL or _la==SQLParser.WAIT_SYMBOL or _la==SQLParser.COMMA_SYMBOL:
                    self.state = 2556
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.COMMA_SYMBOL:
                        self.state = 2555
                        self.match(SQLParser.COMMA_SYMBOL)


                    self.state = 2558
                    self.dropLogfileGroupOption()
                    self.state = 2563
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTriggerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRIGGER_SYMBOL(self):
            return self.getToken(SQLParser.TRIGGER_SYMBOL, 0)

        def triggerRef(self):
            return self.getTypedRuleContext(SQLParser.TriggerRefContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(SQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_dropTrigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTrigger" ):
                listener.enterDropTrigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTrigger" ):
                listener.exitDropTrigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTrigger" ):
                return visitor.visitDropTrigger(self)
            else:
                return visitor.visitChildren(self)




    def dropTrigger(self):

        localctx = SQLParser.DropTriggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_dropTrigger)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2566
            self.match(SQLParser.TRIGGER_SYMBOL)
            self.state = 2568
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.state = 2567
                self.ifExists()


            self.state = 2570
            self.triggerRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VIEW_SYMBOL(self):
            return self.getToken(SQLParser.VIEW_SYMBOL, 0)

        def viewRefList(self):
            return self.getTypedRuleContext(SQLParser.ViewRefListContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(SQLParser.IfExistsContext,0)


        def RESTRICT_SYMBOL(self):
            return self.getToken(SQLParser.RESTRICT_SYMBOL, 0)

        def CASCADE_SYMBOL(self):
            return self.getToken(SQLParser.CASCADE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_dropView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropView" ):
                listener.enterDropView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropView" ):
                listener.exitDropView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropView" ):
                return visitor.visitDropView(self)
            else:
                return visitor.visitChildren(self)




    def dropView(self):

        localctx = SQLParser.DropViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_dropView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2572
            self.match(SQLParser.VIEW_SYMBOL)
            self.state = 2574
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.state = 2573
                self.ifExists()


            self.state = 2576
            self.viewRefList()
            self.state = 2578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.CASCADE_SYMBOL or _la==SQLParser.RESTRICT_SYMBOL:
                self.state = 2577
                _la = self._input.LA(1)
                if not(_la==SQLParser.CASCADE_SYMBOL or _la==SQLParser.RESTRICT_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLE_SYMBOL(self):
            return self.getToken(SQLParser.ROLE_SYMBOL, 0)

        def roleList(self):
            return self.getTypedRuleContext(SQLParser.RoleListContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(SQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_dropRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRole" ):
                listener.enterDropRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRole" ):
                listener.exitDropRole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropRole" ):
                return visitor.visitDropRole(self)
            else:
                return visitor.visitChildren(self)




    def dropRole(self):

        localctx = SQLParser.DropRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_dropRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2580
            self.match(SQLParser.ROLE_SYMBOL)
            self.state = 2582
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.state = 2581
                self.ifExists()


            self.state = 2584
            self.roleList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropSpatialReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPATIAL_SYMBOL(self):
            return self.getToken(SQLParser.SPATIAL_SYMBOL, 0)

        def REFERENCE_SYMBOL(self):
            return self.getToken(SQLParser.REFERENCE_SYMBOL, 0)

        def SYSTEM_SYMBOL(self):
            return self.getToken(SQLParser.SYSTEM_SYMBOL, 0)

        def real_ulonglong_number(self):
            return self.getTypedRuleContext(SQLParser.Real_ulonglong_numberContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(SQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_dropSpatialReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropSpatialReference" ):
                listener.enterDropSpatialReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropSpatialReference" ):
                listener.exitDropSpatialReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropSpatialReference" ):
                return visitor.visitDropSpatialReference(self)
            else:
                return visitor.visitChildren(self)




    def dropSpatialReference(self):

        localctx = SQLParser.DropSpatialReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_dropSpatialReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2586
            self.match(SQLParser.SPATIAL_SYMBOL)
            self.state = 2587
            self.match(SQLParser.REFERENCE_SYMBOL)
            self.state = 2588
            self.match(SQLParser.SYSTEM_SYMBOL)
            self.state = 2590
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.state = 2589
                self.ifExists()


            self.state = 2592
            self.real_ulonglong_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropUndoTablespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDO_SYMBOL(self):
            return self.getToken(SQLParser.UNDO_SYMBOL, 0)

        def TABLESPACE_SYMBOL(self):
            return self.getToken(SQLParser.TABLESPACE_SYMBOL, 0)

        def tablespaceRef(self):
            return self.getTypedRuleContext(SQLParser.TablespaceRefContext,0)


        def undoTableSpaceOptions(self):
            return self.getTypedRuleContext(SQLParser.UndoTableSpaceOptionsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_dropUndoTablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropUndoTablespace" ):
                listener.enterDropUndoTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropUndoTablespace" ):
                listener.exitDropUndoTablespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropUndoTablespace" ):
                return visitor.visitDropUndoTablespace(self)
            else:
                return visitor.visitChildren(self)




    def dropUndoTablespace(self):

        localctx = SQLParser.DropUndoTablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_dropUndoTablespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2594
            self.match(SQLParser.UNDO_SYMBOL)
            self.state = 2595
            self.match(SQLParser.TABLESPACE_SYMBOL)
            self.state = 2596
            self.tablespaceRef()
            self.state = 2598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.ENGINE_SYMBOL or _la==SQLParser.STORAGE_SYMBOL:
                self.state = 2597
                self.undoTableSpaceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameTableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME_SYMBOL(self):
            return self.getToken(SQLParser.RENAME_SYMBOL, 0)

        def renamePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.RenamePairContext)
            else:
                return self.getTypedRuleContext(SQLParser.RenamePairContext,i)


        def TABLE_SYMBOL(self):
            return self.getToken(SQLParser.TABLE_SYMBOL, 0)

        def TABLES_SYMBOL(self):
            return self.getToken(SQLParser.TABLES_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_renameTableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTableStatement" ):
                listener.enterRenameTableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTableStatement" ):
                listener.exitRenameTableStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTableStatement" ):
                return visitor.visitRenameTableStatement(self)
            else:
                return visitor.visitChildren(self)




    def renameTableStatement(self):

        localctx = SQLParser.RenameTableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_renameTableStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2600
            self.match(SQLParser.RENAME_SYMBOL)
            self.state = 2601
            _la = self._input.LA(1)
            if not(_la==SQLParser.TABLES_SYMBOL or _la==SQLParser.TABLE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2602
            self.renamePair()
            self.state = 2607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 2603
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 2604
                self.renamePair()
                self.state = 2609
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenamePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRef(self):
            return self.getTypedRuleContext(SQLParser.TableRefContext,0)


        def TO_SYMBOL(self):
            return self.getToken(SQLParser.TO_SYMBOL, 0)

        def tableName(self):
            return self.getTypedRuleContext(SQLParser.TableNameContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_renamePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenamePair" ):
                listener.enterRenamePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenamePair" ):
                listener.exitRenamePair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenamePair" ):
                return visitor.visitRenamePair(self)
            else:
                return visitor.visitChildren(self)




    def renamePair(self):

        localctx = SQLParser.RenamePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_renamePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2610
            self.tableRef()
            self.state = 2611
            self.match(SQLParser.TO_SYMBOL)
            self.state = 2612
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TruncateTableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUNCATE_SYMBOL(self):
            return self.getToken(SQLParser.TRUNCATE_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(SQLParser.TableRefContext,0)


        def TABLE_SYMBOL(self):
            return self.getToken(SQLParser.TABLE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_truncateTableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncateTableStatement" ):
                listener.enterTruncateTableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncateTableStatement" ):
                listener.exitTruncateTableStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTruncateTableStatement" ):
                return visitor.visitTruncateTableStatement(self)
            else:
                return visitor.visitChildren(self)




    def truncateTableStatement(self):

        localctx = SQLParser.TruncateTableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_truncateTableStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2614
            self.match(SQLParser.TRUNCATE_SYMBOL)
            self.state = 2616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.state = 2615
                self.match(SQLParser.TABLE_SYMBOL)


            self.state = 2618
            self.tableRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT_SYMBOL(self):
            return self.getToken(SQLParser.IMPORT_SYMBOL, 0)

        def TABLE_SYMBOL(self):
            return self.getToken(SQLParser.TABLE_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(SQLParser.FROM_SYMBOL, 0)

        def textStringLiteralList(self):
            return self.getTypedRuleContext(SQLParser.TextStringLiteralListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_importStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStatement" ):
                listener.enterImportStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStatement" ):
                listener.exitImportStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportStatement" ):
                return visitor.visitImportStatement(self)
            else:
                return visitor.visitChildren(self)




    def importStatement(self):

        localctx = SQLParser.ImportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_importStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2620
            self.match(SQLParser.IMPORT_SYMBOL)
            self.state = 2621
            self.match(SQLParser.TABLE_SYMBOL)
            self.state = 2622
            self.match(SQLParser.FROM_SYMBOL)
            self.state = 2623
            self.textStringLiteralList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL_SYMBOL(self):
            return self.getToken(SQLParser.CALL_SYMBOL, 0)

        def procedureRef(self):
            return self.getTypedRuleContext(SQLParser.ProcedureRefContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def exprList(self):
            return self.getTypedRuleContext(SQLParser.ExprListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_callStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallStatement" ):
                listener.enterCallStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallStatement" ):
                listener.exitCallStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallStatement" ):
                return visitor.visitCallStatement(self)
            else:
                return visitor.visitChildren(self)




    def callStatement(self):

        localctx = SQLParser.CallStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_callStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2625
            self.match(SQLParser.CALL_SYMBOL)
            self.state = 2626
            self.procedureRef()
            self.state = 2632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.OPEN_PAR_SYMBOL:
                self.state = 2627
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 2629
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
                if la_ == 1:
                    self.state = 2628
                    self.exprList()


                self.state = 2631
                self.match(SQLParser.CLOSE_PAR_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE_SYMBOL(self):
            return self.getToken(SQLParser.DELETE_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(SQLParser.FROM_SYMBOL, 0)

        def tableAliasRefList(self):
            return self.getTypedRuleContext(SQLParser.TableAliasRefListContext,0)


        def tableReferenceList(self):
            return self.getTypedRuleContext(SQLParser.TableReferenceListContext,0)


        def withClause(self):
            return self.getTypedRuleContext(SQLParser.WithClauseContext,0)


        def deleteStatementOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.DeleteStatementOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.DeleteStatementOptionContext,i)


        def USING_SYMBOL(self):
            return self.getToken(SQLParser.USING_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(SQLParser.TableRefContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(SQLParser.WhereClauseContext,0)


        def tableAlias(self):
            return self.getTypedRuleContext(SQLParser.TableAliasContext,0)


        def partitionDelete(self):
            return self.getTypedRuleContext(SQLParser.PartitionDeleteContext,0)


        def orderClause(self):
            return self.getTypedRuleContext(SQLParser.OrderClauseContext,0)


        def simpleLimitClause(self):
            return self.getTypedRuleContext(SQLParser.SimpleLimitClauseContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_deleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteStatement" ):
                listener.enterDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteStatement" ):
                listener.exitDeleteStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteStatement" ):
                return visitor.visitDeleteStatement(self)
            else:
                return visitor.visitChildren(self)




    def deleteStatement(self):

        localctx = SQLParser.DeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_deleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2636
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.state = 2634
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 2635
                self.withClause()


            self.state = 2638
            self.match(SQLParser.DELETE_SYMBOL)
            self.state = 2642
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,221,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2639
                    self.deleteStatementOption() 
                self.state = 2644
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,221,self._ctx)

            self.state = 2677
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
            if la_ == 1:
                self.state = 2645
                self.match(SQLParser.FROM_SYMBOL)
                self.state = 2669
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
                if la_ == 1:
                    self.state = 2646
                    self.tableAliasRefList()
                    self.state = 2647
                    self.match(SQLParser.USING_SYMBOL)
                    self.state = 2648
                    self.tableReferenceList()
                    self.state = 2650
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.WHERE_SYMBOL:
                        self.state = 2649
                        self.whereClause()


                    pass

                elif la_ == 2:
                    self.state = 2652
                    self.tableRef()
                    self.state = 2655
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
                    if la_ == 1:
                        self.state = 2653
                        if not self.serverVersion >= 80017:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.serverVersion >= 80017")
                        self.state = 2654
                        self.tableAlias()


                    self.state = 2658
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
                    if la_ == 1:
                        self.state = 2657
                        self.partitionDelete()


                    self.state = 2661
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.WHERE_SYMBOL:
                        self.state = 2660
                        self.whereClause()


                    self.state = 2664
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.ORDER_SYMBOL:
                        self.state = 2663
                        self.orderClause()


                    self.state = 2667
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.LIMIT_SYMBOL:
                        self.state = 2666
                        self.simpleLimitClause()


                    pass


                pass

            elif la_ == 2:
                self.state = 2671
                self.tableAliasRefList()
                self.state = 2672
                self.match(SQLParser.FROM_SYMBOL)
                self.state = 2673
                self.tableReferenceList()
                self.state = 2675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.WHERE_SYMBOL:
                    self.state = 2674
                    self.whereClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION_SYMBOL(self):
            return self.getToken(SQLParser.PARTITION_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SQLParser.IdentifierListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_partitionDelete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDelete" ):
                listener.enterPartitionDelete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDelete" ):
                listener.exitPartitionDelete(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionDelete" ):
                return visitor.visitPartitionDelete(self)
            else:
                return visitor.visitChildren(self)




    def partitionDelete(self):

        localctx = SQLParser.PartitionDeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_partitionDelete)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2679
            if not self.serverVersion >= 50602:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.serverVersion >= 50602")
            self.state = 2680
            self.match(SQLParser.PARTITION_SYMBOL)
            self.state = 2681
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 2682
            self.identifierList()
            self.state = 2683
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteStatementOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUICK_SYMBOL(self):
            return self.getToken(SQLParser.QUICK_SYMBOL, 0)

        def LOW_PRIORITY_SYMBOL(self):
            return self.getToken(SQLParser.LOW_PRIORITY_SYMBOL, 0)

        def IGNORE_SYMBOL(self):
            return self.getToken(SQLParser.IGNORE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_deleteStatementOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteStatementOption" ):
                listener.enterDeleteStatementOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteStatementOption" ):
                listener.exitDeleteStatementOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteStatementOption" ):
                return visitor.visitDeleteStatementOption(self)
            else:
                return visitor.visitChildren(self)




    def deleteStatementOption(self):

        localctx = SQLParser.DeleteStatementOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_deleteStatementOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2685
            _la = self._input.LA(1)
            if not(_la==SQLParser.IGNORE_SYMBOL or _la==SQLParser.LOW_PRIORITY_SYMBOL or _la==SQLParser.QUICK_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO_SYMBOL(self):
            return self.getToken(SQLParser.DO_SYMBOL, 0)

        def exprList(self):
            return self.getTypedRuleContext(SQLParser.ExprListContext,0)


        def selectItemList(self):
            return self.getTypedRuleContext(SQLParser.SelectItemListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_doStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoStatement" ):
                listener.enterDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoStatement" ):
                listener.exitDoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoStatement" ):
                return visitor.visitDoStatement(self)
            else:
                return visitor.visitChildren(self)




    def doStatement(self):

        localctx = SQLParser.DoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_doStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2687
            self.match(SQLParser.DO_SYMBOL)
            self.state = 2692
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
            if la_ == 1:
                self.state = 2688
                if not self.serverVersion < 50709:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 50709")
                self.state = 2689
                self.exprList()
                pass

            elif la_ == 2:
                self.state = 2690
                if not self.serverVersion >= 50709:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50709")
                self.state = 2691
                self.selectItemList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HANDLER_SYMBOL(self):
            return self.getToken(SQLParser.HANDLER_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(SQLParser.TableRefContext,0)


        def OPEN_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def CLOSE_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_SYMBOL, 0)

        def READ_SYMBOL(self):
            return self.getToken(SQLParser.READ_SYMBOL, 0)

        def handlerReadOrScan(self):
            return self.getTypedRuleContext(SQLParser.HandlerReadOrScanContext,0)


        def tableAlias(self):
            return self.getTypedRuleContext(SQLParser.TableAliasContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(SQLParser.WhereClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(SQLParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_handlerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerStatement" ):
                listener.enterHandlerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerStatement" ):
                listener.exitHandlerStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandlerStatement" ):
                return visitor.visitHandlerStatement(self)
            else:
                return visitor.visitChildren(self)




    def handlerStatement(self):

        localctx = SQLParser.HandlerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_handlerStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2694
            self.match(SQLParser.HANDLER_SYMBOL)
            self.state = 2712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
            if la_ == 1:
                self.state = 2695
                self.tableRef()
                self.state = 2696
                self.match(SQLParser.OPEN_SYMBOL)
                self.state = 2698
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                if la_ == 1:
                    self.state = 2697
                    self.tableAlias()


                pass

            elif la_ == 2:
                self.state = 2700
                self.identifier()
                self.state = 2710
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLParser.CLOSE_SYMBOL]:
                    self.state = 2701
                    self.match(SQLParser.CLOSE_SYMBOL)
                    pass
                elif token in [SQLParser.READ_SYMBOL]:
                    self.state = 2702
                    self.match(SQLParser.READ_SYMBOL)
                    self.state = 2703
                    self.handlerReadOrScan()
                    self.state = 2705
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.WHERE_SYMBOL:
                        self.state = 2704
                        self.whereClause()


                    self.state = 2708
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.LIMIT_SYMBOL:
                        self.state = 2707
                        self.limitClause()


                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerReadOrScanContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIRST_SYMBOL(self):
            return self.getToken(SQLParser.FIRST_SYMBOL, 0)

        def NEXT_SYMBOL(self):
            return self.getToken(SQLParser.NEXT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def values(self):
            return self.getTypedRuleContext(SQLParser.ValuesContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def PREV_SYMBOL(self):
            return self.getToken(SQLParser.PREV_SYMBOL, 0)

        def LAST_SYMBOL(self):
            return self.getToken(SQLParser.LAST_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def LESS_THAN_OPERATOR(self):
            return self.getToken(SQLParser.LESS_THAN_OPERATOR, 0)

        def GREATER_THAN_OPERATOR(self):
            return self.getToken(SQLParser.GREATER_THAN_OPERATOR, 0)

        def LESS_OR_EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.LESS_OR_EQUAL_OPERATOR, 0)

        def GREATER_OR_EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.GREATER_OR_EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_handlerReadOrScan

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerReadOrScan" ):
                listener.enterHandlerReadOrScan(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerReadOrScan" ):
                listener.exitHandlerReadOrScan(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandlerReadOrScan" ):
                return visitor.visitHandlerReadOrScan(self)
            else:
                return visitor.visitChildren(self)




    def handlerReadOrScan(self):

        localctx = SQLParser.HandlerReadOrScanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_handlerReadOrScan)
        self._la = 0 # Token type
        try:
            self.state = 2724
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2714
                _la = self._input.LA(1)
                if not(_la==SQLParser.FIRST_SYMBOL or _la==SQLParser.NEXT_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2715
                self.identifier()
                self.state = 2722
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLParser.FIRST_SYMBOL, SQLParser.LAST_SYMBOL, SQLParser.NEXT_SYMBOL, SQLParser.PREV_SYMBOL]:
                    self.state = 2716
                    _la = self._input.LA(1)
                    if not(_la==SQLParser.FIRST_SYMBOL or _la==SQLParser.LAST_SYMBOL or _la==SQLParser.NEXT_SYMBOL or _la==SQLParser.PREV_SYMBOL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [SQLParser.EQUAL_OPERATOR, SQLParser.GREATER_OR_EQUAL_OPERATOR, SQLParser.GREATER_THAN_OPERATOR, SQLParser.LESS_OR_EQUAL_OPERATOR, SQLParser.LESS_THAN_OPERATOR]:
                    self.state = 2717
                    _la = self._input.LA(1)
                    if not(((((_la - 750)) & ~0x3f) == 0 and ((1 << (_la - 750)) & ((1 << (SQLParser.EQUAL_OPERATOR - 750)) | (1 << (SQLParser.GREATER_OR_EQUAL_OPERATOR - 750)) | (1 << (SQLParser.GREATER_THAN_OPERATOR - 750)) | (1 << (SQLParser.LESS_OR_EQUAL_OPERATOR - 750)) | (1 << (SQLParser.LESS_THAN_OPERATOR - 750)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2718
                    self.match(SQLParser.OPEN_PAR_SYMBOL)
                    self.state = 2719
                    self.values()
                    self.state = 2720
                    self.match(SQLParser.CLOSE_PAR_SYMBOL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT_SYMBOL(self):
            return self.getToken(SQLParser.INSERT_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(SQLParser.TableRefContext,0)


        def insertFromConstructor(self):
            return self.getTypedRuleContext(SQLParser.InsertFromConstructorContext,0)


        def SET_SYMBOL(self):
            return self.getToken(SQLParser.SET_SYMBOL, 0)

        def updateList(self):
            return self.getTypedRuleContext(SQLParser.UpdateListContext,0)


        def insertQueryExpression(self):
            return self.getTypedRuleContext(SQLParser.InsertQueryExpressionContext,0)


        def insertLockOption(self):
            return self.getTypedRuleContext(SQLParser.InsertLockOptionContext,0)


        def IGNORE_SYMBOL(self):
            return self.getToken(SQLParser.IGNORE_SYMBOL, 0)

        def INTO_SYMBOL(self):
            return self.getToken(SQLParser.INTO_SYMBOL, 0)

        def usePartition(self):
            return self.getTypedRuleContext(SQLParser.UsePartitionContext,0)


        def insertUpdateList(self):
            return self.getTypedRuleContext(SQLParser.InsertUpdateListContext,0)


        def valuesReference(self):
            return self.getTypedRuleContext(SQLParser.ValuesReferenceContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_insertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatement" ):
                listener.enterInsertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatement" ):
                listener.exitInsertStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertStatement" ):
                return visitor.visitInsertStatement(self)
            else:
                return visitor.visitChildren(self)




    def insertStatement(self):

        localctx = SQLParser.InsertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_insertStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2726
            self.match(SQLParser.INSERT_SYMBOL)
            self.state = 2728
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
            if la_ == 1:
                self.state = 2727
                self.insertLockOption()


            self.state = 2731
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.state = 2730
                self.match(SQLParser.IGNORE_SYMBOL)


            self.state = 2734
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                self.state = 2733
                self.match(SQLParser.INTO_SYMBOL)


            self.state = 2736
            self.tableRef()
            self.state = 2738
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.state = 2737
                self.usePartition()


            self.state = 2752
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
            if la_ == 1:
                self.state = 2740
                self.insertFromConstructor()
                self.state = 2743
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
                if la_ == 1:
                    self.state = 2741
                    if not  self.serverVersion >= 80018:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, " self.serverVersion >= 80018")
                    self.state = 2742
                    self.valuesReference()


                pass

            elif la_ == 2:
                self.state = 2745
                self.match(SQLParser.SET_SYMBOL)
                self.state = 2746
                self.updateList()
                self.state = 2749
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
                if la_ == 1:
                    self.state = 2747
                    if not  self.serverVersion >= 80018:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, " self.serverVersion >= 80018")
                    self.state = 2748
                    self.valuesReference()


                pass

            elif la_ == 3:
                self.state = 2751
                self.insertQueryExpression()
                pass


            self.state = 2755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.ON_SYMBOL:
                self.state = 2754
                self.insertUpdateList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertLockOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOW_PRIORITY_SYMBOL(self):
            return self.getToken(SQLParser.LOW_PRIORITY_SYMBOL, 0)

        def DELAYED_SYMBOL(self):
            return self.getToken(SQLParser.DELAYED_SYMBOL, 0)

        def HIGH_PRIORITY_SYMBOL(self):
            return self.getToken(SQLParser.HIGH_PRIORITY_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_insertLockOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertLockOption" ):
                listener.enterInsertLockOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertLockOption" ):
                listener.exitInsertLockOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertLockOption" ):
                return visitor.visitInsertLockOption(self)
            else:
                return visitor.visitChildren(self)




    def insertLockOption(self):

        localctx = SQLParser.InsertLockOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_insertLockOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2757
            _la = self._input.LA(1)
            if not(_la==SQLParser.DELAYED_SYMBOL or _la==SQLParser.HIGH_PRIORITY_SYMBOL or _la==SQLParser.LOW_PRIORITY_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertFromConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertValues(self):
            return self.getTypedRuleContext(SQLParser.InsertValuesContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def fields(self):
            return self.getTypedRuleContext(SQLParser.FieldsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_insertFromConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertFromConstructor" ):
                listener.enterInsertFromConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertFromConstructor" ):
                listener.exitInsertFromConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertFromConstructor" ):
                return visitor.visitInsertFromConstructor(self)
            else:
                return visitor.visitChildren(self)




    def insertFromConstructor(self):

        localctx = SQLParser.InsertFromConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_insertFromConstructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.OPEN_PAR_SYMBOL:
                self.state = 2759
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 2761
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
                if la_ == 1:
                    self.state = 2760
                    self.fields()


                self.state = 2763
                self.match(SQLParser.CLOSE_PAR_SYMBOL)


            self.state = 2766
            self.insertValues()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.InsertIdentifierContext)
            else:
                return self.getTypedRuleContext(SQLParser.InsertIdentifierContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_fields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFields" ):
                listener.enterFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFields" ):
                listener.exitFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFields" ):
                return visitor.visitFields(self)
            else:
                return visitor.visitChildren(self)




    def fields(self):

        localctx = SQLParser.FieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_fields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2768
            self.insertIdentifier()
            self.state = 2773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 2769
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 2770
                self.insertIdentifier()
                self.state = 2775
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertValuesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueList(self):
            return self.getTypedRuleContext(SQLParser.ValueListContext,0)


        def VALUES_SYMBOL(self):
            return self.getToken(SQLParser.VALUES_SYMBOL, 0)

        def VALUE_SYMBOL(self):
            return self.getToken(SQLParser.VALUE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_insertValues

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertValues" ):
                listener.enterInsertValues(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertValues" ):
                listener.exitInsertValues(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertValues" ):
                return visitor.visitInsertValues(self)
            else:
                return visitor.visitChildren(self)




    def insertValues(self):

        localctx = SQLParser.InsertValuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_insertValues)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2776
            _la = self._input.LA(1)
            if not(_la==SQLParser.VALUES_SYMBOL or _la==SQLParser.VALUE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2777
            self.valueList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertQueryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryExpressionOrParens(self):
            return self.getTypedRuleContext(SQLParser.QueryExpressionOrParensContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def fields(self):
            return self.getTypedRuleContext(SQLParser.FieldsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_insertQueryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertQueryExpression" ):
                listener.enterInsertQueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertQueryExpression" ):
                listener.exitInsertQueryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertQueryExpression" ):
                return visitor.visitInsertQueryExpression(self)
            else:
                return visitor.visitChildren(self)




    def insertQueryExpression(self):

        localctx = SQLParser.InsertQueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_insertQueryExpression)
        try:
            self.state = 2786
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2779
                self.queryExpressionOrParens()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2780
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 2782
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
                if la_ == 1:
                    self.state = 2781
                    self.fields()


                self.state = 2784
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                self.state = 2785
                self.queryExpressionOrParens()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.OPEN_PAR_SYMBOL)
            else:
                return self.getToken(SQLParser.OPEN_PAR_SYMBOL, i)

        def CLOSE_PAR_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.CLOSE_PAR_SYMBOL)
            else:
                return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, i)

        def values(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ValuesContext)
            else:
                return self.getTypedRuleContext(SQLParser.ValuesContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_valueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueList" ):
                listener.enterValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueList" ):
                listener.exitValueList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueList" ):
                return visitor.visitValueList(self)
            else:
                return visitor.visitChildren(self)




    def valueList(self):

        localctx = SQLParser.ValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_valueList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2788
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 2790
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
            if la_ == 1:
                self.state = 2789
                self.values()


            self.state = 2792
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
            self.state = 2801
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,254,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2793
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 2794
                    self.match(SQLParser.OPEN_PAR_SYMBOL)
                    self.state = 2796
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
                    if la_ == 1:
                        self.state = 2795
                        self.values()


                    self.state = 2798
                    self.match(SQLParser.CLOSE_PAR_SYMBOL) 
                self.state = 2803
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,254,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValuesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLParser.ExprContext,i)


        def DEFAULT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.DEFAULT_SYMBOL)
            else:
                return self.getToken(SQLParser.DEFAULT_SYMBOL, i)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_values

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues" ):
                listener.enterValues(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues" ):
                listener.exitValues(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValues" ):
                return visitor.visitValues(self)
            else:
                return visitor.visitChildren(self)




    def values(self):

        localctx = SQLParser.ValuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_values)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2806
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.state = 2804
                self.expr(0)
                pass

            elif la_ == 2:
                self.state = 2805
                self.match(SQLParser.DEFAULT_SYMBOL)
                pass


            self.state = 2815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 2808
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 2811
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
                if la_ == 1:
                    self.state = 2809
                    self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 2810
                    self.match(SQLParser.DEFAULT_SYMBOL)
                    pass


                self.state = 2817
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValuesReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS_SYMBOL(self):
            return self.getToken(SQLParser.AS_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def columnInternalRefList(self):
            return self.getTypedRuleContext(SQLParser.ColumnInternalRefListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_valuesReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValuesReference" ):
                listener.enterValuesReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValuesReference" ):
                listener.exitValuesReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValuesReference" ):
                return visitor.visitValuesReference(self)
            else:
                return visitor.visitChildren(self)




    def valuesReference(self):

        localctx = SQLParser.ValuesReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_valuesReference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2818
            self.match(SQLParser.AS_SYMBOL)
            self.state = 2819
            self.identifier()
            self.state = 2821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.OPEN_PAR_SYMBOL:
                self.state = 2820
                self.columnInternalRefList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertUpdateListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_SYMBOL(self):
            return self.getToken(SQLParser.ON_SYMBOL, 0)

        def DUPLICATE_SYMBOL(self):
            return self.getToken(SQLParser.DUPLICATE_SYMBOL, 0)

        def KEY_SYMBOL(self):
            return self.getToken(SQLParser.KEY_SYMBOL, 0)

        def UPDATE_SYMBOL(self):
            return self.getToken(SQLParser.UPDATE_SYMBOL, 0)

        def updateList(self):
            return self.getTypedRuleContext(SQLParser.UpdateListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_insertUpdateList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertUpdateList" ):
                listener.enterInsertUpdateList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertUpdateList" ):
                listener.exitInsertUpdateList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertUpdateList" ):
                return visitor.visitInsertUpdateList(self)
            else:
                return visitor.visitChildren(self)




    def insertUpdateList(self):

        localctx = SQLParser.InsertUpdateListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_insertUpdateList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2823
            self.match(SQLParser.ON_SYMBOL)
            self.state = 2824
            self.match(SQLParser.DUPLICATE_SYMBOL)
            self.state = 2825
            self.match(SQLParser.KEY_SYMBOL)
            self.state = 2826
            self.match(SQLParser.UPDATE_SYMBOL)
            self.state = 2827
            self.updateList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD_SYMBOL(self):
            return self.getToken(SQLParser.LOAD_SYMBOL, 0)

        def dataOrXml(self):
            return self.getTypedRuleContext(SQLParser.DataOrXmlContext,0)


        def INFILE_SYMBOL(self):
            return self.getToken(SQLParser.INFILE_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextLiteralContext,0)


        def INTO_SYMBOL(self):
            return self.getToken(SQLParser.INTO_SYMBOL, 0)

        def TABLE_SYMBOL(self):
            return self.getToken(SQLParser.TABLE_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(SQLParser.TableRefContext,0)


        def loadDataFileTail(self):
            return self.getTypedRuleContext(SQLParser.LoadDataFileTailContext,0)


        def LOCAL_SYMBOL(self):
            return self.getToken(SQLParser.LOCAL_SYMBOL, 0)

        def usePartition(self):
            return self.getTypedRuleContext(SQLParser.UsePartitionContext,0)


        def charsetClause(self):
            return self.getTypedRuleContext(SQLParser.CharsetClauseContext,0)


        def xmlRowsIdentifiedBy(self):
            return self.getTypedRuleContext(SQLParser.XmlRowsIdentifiedByContext,0)


        def fieldsClause(self):
            return self.getTypedRuleContext(SQLParser.FieldsClauseContext,0)


        def linesClause(self):
            return self.getTypedRuleContext(SQLParser.LinesClauseContext,0)


        def LOW_PRIORITY_SYMBOL(self):
            return self.getToken(SQLParser.LOW_PRIORITY_SYMBOL, 0)

        def CONCURRENT_SYMBOL(self):
            return self.getToken(SQLParser.CONCURRENT_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(SQLParser.REPLACE_SYMBOL, 0)

        def IGNORE_SYMBOL(self):
            return self.getToken(SQLParser.IGNORE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_loadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadStatement" ):
                listener.enterLoadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadStatement" ):
                listener.exitLoadStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoadStatement" ):
                return visitor.visitLoadStatement(self)
            else:
                return visitor.visitChildren(self)




    def loadStatement(self):

        localctx = SQLParser.LoadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_loadStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2829
            self.match(SQLParser.LOAD_SYMBOL)
            self.state = 2830
            self.dataOrXml()
            self.state = 2832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.CONCURRENT_SYMBOL or _la==SQLParser.LOW_PRIORITY_SYMBOL:
                self.state = 2831
                _la = self._input.LA(1)
                if not(_la==SQLParser.CONCURRENT_SYMBOL or _la==SQLParser.LOW_PRIORITY_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.LOCAL_SYMBOL:
                self.state = 2834
                self.match(SQLParser.LOCAL_SYMBOL)


            self.state = 2837
            self.match(SQLParser.INFILE_SYMBOL)
            self.state = 2838
            self.textLiteral()
            self.state = 2840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.IGNORE_SYMBOL or _la==SQLParser.REPLACE_SYMBOL:
                self.state = 2839
                _la = self._input.LA(1)
                if not(_la==SQLParser.IGNORE_SYMBOL or _la==SQLParser.REPLACE_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2842
            self.match(SQLParser.INTO_SYMBOL)
            self.state = 2843
            self.match(SQLParser.TABLE_SYMBOL)
            self.state = 2844
            self.tableRef()
            self.state = 2846
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
            if la_ == 1:
                self.state = 2845
                self.usePartition()


            self.state = 2849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.CHARSET_SYMBOL or _la==SQLParser.CHAR_SYMBOL:
                self.state = 2848
                self.charsetClause()


            self.state = 2852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.ROWS_SYMBOL:
                self.state = 2851
                self.xmlRowsIdentifiedBy()


            self.state = 2855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.COLUMNS_SYMBOL:
                self.state = 2854
                self.fieldsClause()


            self.state = 2858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.LINES_SYMBOL:
                self.state = 2857
                self.linesClause()


            self.state = 2860
            self.loadDataFileTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataOrXmlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATA_SYMBOL(self):
            return self.getToken(SQLParser.DATA_SYMBOL, 0)

        def XML_SYMBOL(self):
            return self.getToken(SQLParser.XML_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_dataOrXml

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataOrXml" ):
                listener.enterDataOrXml(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataOrXml" ):
                listener.exitDataOrXml(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataOrXml" ):
                return visitor.visitDataOrXml(self)
            else:
                return visitor.visitChildren(self)




    def dataOrXml(self):

        localctx = SQLParser.DataOrXmlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_dataOrXml)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2862
            _la = self._input.LA(1)
            if not(_la==SQLParser.DATA_SYMBOL or _la==SQLParser.XML_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XmlRowsIdentifiedByContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROWS_SYMBOL(self):
            return self.getToken(SQLParser.ROWS_SYMBOL, 0)

        def IDENTIFIED_SYMBOL(self):
            return self.getToken(SQLParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(SQLParser.BY_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(SQLParser.TextStringContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_xmlRowsIdentifiedBy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlRowsIdentifiedBy" ):
                listener.enterXmlRowsIdentifiedBy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlRowsIdentifiedBy" ):
                listener.exitXmlRowsIdentifiedBy(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlRowsIdentifiedBy" ):
                return visitor.visitXmlRowsIdentifiedBy(self)
            else:
                return visitor.visitChildren(self)




    def xmlRowsIdentifiedBy(self):

        localctx = SQLParser.XmlRowsIdentifiedByContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_xmlRowsIdentifiedBy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2864
            self.match(SQLParser.ROWS_SYMBOL)
            self.state = 2865
            self.match(SQLParser.IDENTIFIED_SYMBOL)
            self.state = 2866
            self.match(SQLParser.BY_SYMBOL)
            self.state = 2867
            self.textString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadDataFileTailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IGNORE_SYMBOL(self):
            return self.getToken(SQLParser.IGNORE_SYMBOL, 0)

        def INT_NUMBER(self):
            return self.getToken(SQLParser.INT_NUMBER, 0)

        def loadDataFileTargetList(self):
            return self.getTypedRuleContext(SQLParser.LoadDataFileTargetListContext,0)


        def SET_SYMBOL(self):
            return self.getToken(SQLParser.SET_SYMBOL, 0)

        def updateList(self):
            return self.getTypedRuleContext(SQLParser.UpdateListContext,0)


        def LINES_SYMBOL(self):
            return self.getToken(SQLParser.LINES_SYMBOL, 0)

        def ROWS_SYMBOL(self):
            return self.getToken(SQLParser.ROWS_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_loadDataFileTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadDataFileTail" ):
                listener.enterLoadDataFileTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadDataFileTail" ):
                listener.exitLoadDataFileTail(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoadDataFileTail" ):
                return visitor.visitLoadDataFileTail(self)
            else:
                return visitor.visitChildren(self)




    def loadDataFileTail(self):

        localctx = SQLParser.LoadDataFileTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_loadDataFileTail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.IGNORE_SYMBOL:
                self.state = 2869
                self.match(SQLParser.IGNORE_SYMBOL)
                self.state = 2870
                self.match(SQLParser.INT_NUMBER)
                self.state = 2871
                _la = self._input.LA(1)
                if not(_la==SQLParser.LINES_SYMBOL or _la==SQLParser.ROWS_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.OPEN_PAR_SYMBOL:
                self.state = 2874
                self.loadDataFileTargetList()


            self.state = 2879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.SET_SYMBOL:
                self.state = 2877
                self.match(SQLParser.SET_SYMBOL)
                self.state = 2878
                self.updateList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadDataFileTargetListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def fieldOrVariableList(self):
            return self.getTypedRuleContext(SQLParser.FieldOrVariableListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_loadDataFileTargetList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadDataFileTargetList" ):
                listener.enterLoadDataFileTargetList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadDataFileTargetList" ):
                listener.exitLoadDataFileTargetList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoadDataFileTargetList" ):
                return visitor.visitLoadDataFileTargetList(self)
            else:
                return visitor.visitChildren(self)




    def loadDataFileTargetList(self):

        localctx = SQLParser.LoadDataFileTargetListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_loadDataFileTargetList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2881
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 2883
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
            if la_ == 1:
                self.state = 2882
                self.fieldOrVariableList()


            self.state = 2885
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldOrVariableListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ColumnRefContext)
            else:
                return self.getTypedRuleContext(SQLParser.ColumnRefContext,i)


        def userVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.UserVariableContext)
            else:
                return self.getTypedRuleContext(SQLParser.UserVariableContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_fieldOrVariableList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldOrVariableList" ):
                listener.enterFieldOrVariableList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldOrVariableList" ):
                listener.exitFieldOrVariableList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldOrVariableList" ):
                return visitor.visitFieldOrVariableList(self)
            else:
                return visitor.visitChildren(self)




    def fieldOrVariableList(self):

        localctx = SQLParser.FieldOrVariableListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_fieldOrVariableList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2889
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.state = 2887
                self.columnRef()
                pass

            elif la_ == 2:
                self.state = 2888
                self.userVariable()
                pass


            self.state = 2898
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 2891
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 2894
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
                if la_ == 1:
                    self.state = 2892
                    self.columnRef()
                    pass

                elif la_ == 2:
                    self.state = 2893
                    self.userVariable()
                    pass


                self.state = 2900
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACE_SYMBOL(self):
            return self.getToken(SQLParser.REPLACE_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(SQLParser.TableRefContext,0)


        def insertFromConstructor(self):
            return self.getTypedRuleContext(SQLParser.InsertFromConstructorContext,0)


        def SET_SYMBOL(self):
            return self.getToken(SQLParser.SET_SYMBOL, 0)

        def updateList(self):
            return self.getTypedRuleContext(SQLParser.UpdateListContext,0)


        def insertQueryExpression(self):
            return self.getTypedRuleContext(SQLParser.InsertQueryExpressionContext,0)


        def INTO_SYMBOL(self):
            return self.getToken(SQLParser.INTO_SYMBOL, 0)

        def usePartition(self):
            return self.getTypedRuleContext(SQLParser.UsePartitionContext,0)


        def LOW_PRIORITY_SYMBOL(self):
            return self.getToken(SQLParser.LOW_PRIORITY_SYMBOL, 0)

        def DELAYED_SYMBOL(self):
            return self.getToken(SQLParser.DELAYED_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_replaceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceStatement" ):
                listener.enterReplaceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceStatement" ):
                listener.exitReplaceStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceStatement" ):
                return visitor.visitReplaceStatement(self)
            else:
                return visitor.visitChildren(self)




    def replaceStatement(self):

        localctx = SQLParser.ReplaceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_replaceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2901
            self.match(SQLParser.REPLACE_SYMBOL)
            self.state = 2903
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                self.state = 2902
                _la = self._input.LA(1)
                if not(_la==SQLParser.DELAYED_SYMBOL or _la==SQLParser.LOW_PRIORITY_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2906
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
            if la_ == 1:
                self.state = 2905
                self.match(SQLParser.INTO_SYMBOL)


            self.state = 2908
            self.tableRef()
            self.state = 2910
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.state = 2909
                self.usePartition()


            self.state = 2916
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
            if la_ == 1:
                self.state = 2912
                self.insertFromConstructor()
                pass

            elif la_ == 2:
                self.state = 2913
                self.match(SQLParser.SET_SYMBOL)
                self.state = 2914
                self.updateList()
                pass

            elif la_ == 3:
                self.state = 2915
                self.insertQueryExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryExpression(self):
            return self.getTypedRuleContext(SQLParser.QueryExpressionContext,0)


        def lockingClauseList(self):
            return self.getTypedRuleContext(SQLParser.LockingClauseListContext,0)


        def queryExpressionParens(self):
            return self.getTypedRuleContext(SQLParser.QueryExpressionParensContext,0)


        def selectStatementWithInto(self):
            return self.getTypedRuleContext(SQLParser.SelectStatementWithIntoContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_selectStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStatement" ):
                listener.enterSelectStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStatement" ):
                listener.exitSelectStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStatement" ):
                return visitor.visitSelectStatement(self)
            else:
                return visitor.visitChildren(self)




    def selectStatement(self):

        localctx = SQLParser.SelectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_selectStatement)
        self._la = 0 # Token type
        try:
            self.state = 2924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2918
                self.queryExpression()
                self.state = 2920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.FOR_SYMBOL or _la==SQLParser.LOCK_SYMBOL:
                    self.state = 2919
                    self.lockingClauseList()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2922
                self.queryExpressionParens()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2923
                self.selectStatementWithInto()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStatementWithIntoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def selectStatementWithInto(self):
            return self.getTypedRuleContext(SQLParser.SelectStatementWithIntoContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def queryExpression(self):
            return self.getTypedRuleContext(SQLParser.QueryExpressionContext,0)


        def intoClause(self):
            return self.getTypedRuleContext(SQLParser.IntoClauseContext,0)


        def lockingClauseList(self):
            return self.getTypedRuleContext(SQLParser.LockingClauseListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_selectStatementWithInto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStatementWithInto" ):
                listener.enterSelectStatementWithInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStatementWithInto" ):
                listener.exitSelectStatementWithInto(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStatementWithInto" ):
                return visitor.visitSelectStatementWithInto(self)
            else:
                return visitor.visitChildren(self)




    def selectStatementWithInto(self):

        localctx = SQLParser.SelectStatementWithIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_selectStatementWithInto)
        self._la = 0 # Token type
        try:
            self.state = 2938
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2926
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 2927
                self.selectStatementWithInto()
                self.state = 2928
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2930
                self.queryExpression()
                self.state = 2931
                self.intoClause()
                self.state = 2933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.FOR_SYMBOL or _la==SQLParser.LOCK_SYMBOL:
                    self.state = 2932
                    self.lockingClauseList()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2935
                self.lockingClauseList()
                self.state = 2936
                self.intoClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryExpressionBody(self):
            return self.getTypedRuleContext(SQLParser.QueryExpressionBodyContext,0)


        def queryExpressionParens(self):
            return self.getTypedRuleContext(SQLParser.QueryExpressionParensContext,0)


        def withClause(self):
            return self.getTypedRuleContext(SQLParser.WithClauseContext,0)


        def procedureAnalyseClause(self):
            return self.getTypedRuleContext(SQLParser.ProcedureAnalyseClauseContext,0)


        def orderClause(self):
            return self.getTypedRuleContext(SQLParser.OrderClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(SQLParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_queryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpression" ):
                listener.enterQueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpression" ):
                listener.exitQueryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryExpression" ):
                return visitor.visitQueryExpression(self)
            else:
                return visitor.visitChildren(self)




    def queryExpression(self):

        localctx = SQLParser.QueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_queryExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2942
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                self.state = 2940
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 2941
                self.withClause()


            self.state = 2958
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.state = 2944
                self.queryExpressionBody()
                self.state = 2946
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
                if la_ == 1:
                    self.state = 2945
                    self.orderClause()


                self.state = 2949
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
                if la_ == 1:
                    self.state = 2948
                    self.limitClause()


                pass

            elif la_ == 2:
                self.state = 2951
                self.queryExpressionParens()
                self.state = 2953
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
                if la_ == 1:
                    self.state = 2952
                    self.orderClause()


                self.state = 2956
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
                if la_ == 1:
                    self.state = 2955
                    self.limitClause()


                pass


            self.state = 2962
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
            if la_ == 1:
                self.state = 2960
                if not self.serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 80000")
                self.state = 2961
                self.procedureAnalyseClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryExpressionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryPrimary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.QueryPrimaryContext)
            else:
                return self.getTypedRuleContext(SQLParser.QueryPrimaryContext,i)


        def queryExpressionParens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.QueryExpressionParensContext)
            else:
                return self.getTypedRuleContext(SQLParser.QueryExpressionParensContext,i)


        def UNION_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.UNION_SYMBOL)
            else:
                return self.getToken(SQLParser.UNION_SYMBOL, i)

        def unionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.UnionOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.UnionOptionContext,i)


        def getRuleIndex(self):
            return SQLParser.RULE_queryExpressionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpressionBody" ):
                listener.enterQueryExpressionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpressionBody" ):
                listener.exitQueryExpressionBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryExpressionBody" ):
                return visitor.visitQueryExpressionBody(self)
            else:
                return visitor.visitChildren(self)




    def queryExpressionBody(self):

        localctx = SQLParser.QueryExpressionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_queryExpressionBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2974
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.state = 2964
                self.queryPrimary()
                pass

            elif la_ == 2:
                self.state = 2965
                self.queryExpressionParens()
                self.state = 2966
                self.match(SQLParser.UNION_SYMBOL)
                self.state = 2968
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
                if la_ == 1:
                    self.state = 2967
                    self.unionOption()


                self.state = 2972
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
                if la_ == 1:
                    self.state = 2970
                    self.queryPrimary()
                    pass

                elif la_ == 2:
                    self.state = 2971
                    self.queryExpressionParens()
                    pass


                pass


            self.state = 2986
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,294,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2976
                    self.match(SQLParser.UNION_SYMBOL)
                    self.state = 2978
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
                    if la_ == 1:
                        self.state = 2977
                        self.unionOption()


                    self.state = 2982
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
                    if la_ == 1:
                        self.state = 2980
                        self.queryPrimary()
                        pass

                    elif la_ == 2:
                        self.state = 2981
                        self.queryExpressionParens()
                        pass

             
                self.state = 2988
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,294,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryExpressionParensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def queryExpressionParens(self):
            return self.getTypedRuleContext(SQLParser.QueryExpressionParensContext,0)


        def queryExpression(self):
            return self.getTypedRuleContext(SQLParser.QueryExpressionContext,0)


        def lockingClauseList(self):
            return self.getTypedRuleContext(SQLParser.LockingClauseListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_queryExpressionParens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpressionParens" ):
                listener.enterQueryExpressionParens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpressionParens" ):
                listener.exitQueryExpressionParens(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryExpressionParens" ):
                return visitor.visitQueryExpressionParens(self)
            else:
                return visitor.visitChildren(self)




    def queryExpressionParens(self):

        localctx = SQLParser.QueryExpressionParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_queryExpressionParens)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2989
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 2995
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.state = 2990
                self.queryExpressionParens()
                pass

            elif la_ == 2:
                self.state = 2991
                self.queryExpression()
                self.state = 2993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.FOR_SYMBOL or _la==SQLParser.LOCK_SYMBOL:
                    self.state = 2992
                    self.lockingClauseList()


                pass


            self.state = 2997
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def querySpecification(self):
            return self.getTypedRuleContext(SQLParser.QuerySpecificationContext,0)


        def tableValueConstructor(self):
            return self.getTypedRuleContext(SQLParser.TableValueConstructorContext,0)


        def explicitTable(self):
            return self.getTypedRuleContext(SQLParser.ExplicitTableContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_queryPrimary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryPrimary" ):
                listener.enterQueryPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryPrimary" ):
                listener.exitQueryPrimary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryPrimary" ):
                return visitor.visitQueryPrimary(self)
            else:
                return visitor.visitChildren(self)




    def queryPrimary(self):

        localctx = SQLParser.QueryPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_queryPrimary)
        try:
            self.state = 3004
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2999
                self.querySpecification()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3000
                if not self.serverVersion >= 80019:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80019")
                self.state = 3001
                self.tableValueConstructor()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3002
                if not self.serverVersion >= 80019:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80019")
                self.state = 3003
                self.explicitTable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT_SYMBOL(self):
            return self.getToken(SQLParser.SELECT_SYMBOL, 0)

        def selectItemList(self):
            return self.getTypedRuleContext(SQLParser.SelectItemListContext,0)


        def selectOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.SelectOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.SelectOptionContext,i)


        def intoClause(self):
            return self.getTypedRuleContext(SQLParser.IntoClauseContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(SQLParser.FromClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(SQLParser.WhereClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(SQLParser.GroupByClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(SQLParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(SQLParser.WindowClauseContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_querySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecification" ):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecification" ):
                listener.exitQuerySpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuerySpecification" ):
                return visitor.visitQuerySpecification(self)
            else:
                return visitor.visitChildren(self)




    def querySpecification(self):

        localctx = SQLParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_querySpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3006
            self.match(SQLParser.SELECT_SYMBOL)
            self.state = 3010
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,298,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3007
                    self.selectOption() 
                self.state = 3012
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,298,self._ctx)

            self.state = 3013
            self.selectItemList()
            self.state = 3015
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
            if la_ == 1:
                self.state = 3014
                self.intoClause()


            self.state = 3018
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
            if la_ == 1:
                self.state = 3017
                self.fromClause()


            self.state = 3021
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.state = 3020
                self.whereClause()


            self.state = 3024
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
            if la_ == 1:
                self.state = 3023
                self.groupByClause()


            self.state = 3027
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
            if la_ == 1:
                self.state = 3026
                self.havingClause()


            self.state = 3031
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
            if la_ == 1:
                self.state = 3029
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 3030
                self.windowClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryExpressionParens(self):
            return self.getTypedRuleContext(SQLParser.QueryExpressionParensContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery" ):
                return visitor.visitSubquery(self)
            else:
                return visitor.visitChildren(self)




    def subquery(self):

        localctx = SQLParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3033
            self.queryExpressionParens()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL_SYMBOL(self):
            return self.getToken(SQLParser.ALL_SYMBOL, 0)

        def DISTINCT_SYMBOL(self):
            return self.getToken(SQLParser.DISTINCT_SYMBOL, 0)

        def STRAIGHT_JOIN_SYMBOL(self):
            return self.getToken(SQLParser.STRAIGHT_JOIN_SYMBOL, 0)

        def HIGH_PRIORITY_SYMBOL(self):
            return self.getToken(SQLParser.HIGH_PRIORITY_SYMBOL, 0)

        def SQL_SMALL_RESULT_SYMBOL(self):
            return self.getToken(SQLParser.SQL_SMALL_RESULT_SYMBOL, 0)

        def SQL_BIG_RESULT_SYMBOL(self):
            return self.getToken(SQLParser.SQL_BIG_RESULT_SYMBOL, 0)

        def SQL_BUFFER_RESULT_SYMBOL(self):
            return self.getToken(SQLParser.SQL_BUFFER_RESULT_SYMBOL, 0)

        def SQL_CALC_FOUND_ROWS_SYMBOL(self):
            return self.getToken(SQLParser.SQL_CALC_FOUND_ROWS_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_querySpecOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecOption" ):
                listener.enterQuerySpecOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecOption" ):
                listener.exitQuerySpecOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuerySpecOption" ):
                return visitor.visitQuerySpecOption(self)
            else:
                return visitor.visitChildren(self)




    def querySpecOption(self):

        localctx = SQLParser.QuerySpecOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_querySpecOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3035
            _la = self._input.LA(1)
            if not(_la==SQLParser.ALL_SYMBOL or _la==SQLParser.DISTINCT_SYMBOL or _la==SQLParser.HIGH_PRIORITY_SYMBOL or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (SQLParser.SQL_BIG_RESULT_SYMBOL - 531)) | (1 << (SQLParser.SQL_BUFFER_RESULT_SYMBOL - 531)) | (1 << (SQLParser.SQL_CALC_FOUND_ROWS_SYMBOL - 531)) | (1 << (SQLParser.SQL_SMALL_RESULT_SYMBOL - 531)) | (1 << (SQLParser.STRAIGHT_JOIN_SYMBOL - 531)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT_SYMBOL(self):
            return self.getToken(SQLParser.LIMIT_SYMBOL, 0)

        def limitOptions(self):
            return self.getTypedRuleContext(SQLParser.LimitOptionsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_limitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitClause" ):
                listener.enterLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitClause" ):
                listener.exitLimitClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitClause" ):
                return visitor.visitLimitClause(self)
            else:
                return visitor.visitChildren(self)




    def limitClause(self):

        localctx = SQLParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_limitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3037
            self.match(SQLParser.LIMIT_SYMBOL)
            self.state = 3038
            self.limitOptions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleLimitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT_SYMBOL(self):
            return self.getToken(SQLParser.LIMIT_SYMBOL, 0)

        def limitOption(self):
            return self.getTypedRuleContext(SQLParser.LimitOptionContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_simpleLimitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleLimitClause" ):
                listener.enterSimpleLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleLimitClause" ):
                listener.exitSimpleLimitClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleLimitClause" ):
                return visitor.visitSimpleLimitClause(self)
            else:
                return visitor.visitChildren(self)




    def simpleLimitClause(self):

        localctx = SQLParser.SimpleLimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_simpleLimitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3040
            self.match(SQLParser.LIMIT_SYMBOL)
            self.state = 3041
            self.limitOption()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def limitOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.LimitOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.LimitOptionContext,i)


        def COMMA_SYMBOL(self):
            return self.getToken(SQLParser.COMMA_SYMBOL, 0)

        def OFFSET_SYMBOL(self):
            return self.getToken(SQLParser.OFFSET_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_limitOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitOptions" ):
                listener.enterLimitOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitOptions" ):
                listener.exitLimitOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitOptions" ):
                return visitor.visitLimitOptions(self)
            else:
                return visitor.visitChildren(self)




    def limitOptions(self):

        localctx = SQLParser.LimitOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_limitOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3043
            self.limitOption()
            self.state = 3046
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,305,self._ctx)
            if la_ == 1:
                self.state = 3044
                _la = self._input.LA(1)
                if not(_la==SQLParser.OFFSET_SYMBOL or _la==SQLParser.COMMA_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3045
                self.limitOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def PARAM_MARKER(self):
            return self.getToken(SQLParser.PARAM_MARKER, 0)

        def ULONGLONG_NUMBER(self):
            return self.getToken(SQLParser.ULONGLONG_NUMBER, 0)

        def LONG_NUMBER(self):
            return self.getToken(SQLParser.LONG_NUMBER, 0)

        def INT_NUMBER(self):
            return self.getToken(SQLParser.INT_NUMBER, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_limitOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitOption" ):
                listener.enterLimitOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitOption" ):
                listener.exitLimitOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitOption" ):
                return visitor.visitLimitOption(self)
            else:
                return visitor.visitChildren(self)




    def limitOption(self):

        localctx = SQLParser.LimitOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_limitOption)
        self._la = 0 # Token type
        try:
            self.state = 3050
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3048
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3049
                _la = self._input.LA(1)
                if not(((((_la - 747)) & ~0x3f) == 0 and ((1 << (_la - 747)) & ((1 << (SQLParser.INT_NUMBER - 747)) | (1 << (SQLParser.LONG_NUMBER - 747)) | (1 << (SQLParser.ULONGLONG_NUMBER - 747)) | (1 << (SQLParser.PARAM_MARKER - 747)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntoClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO_SYMBOL(self):
            return self.getToken(SQLParser.INTO_SYMBOL, 0)

        def OUTFILE_SYMBOL(self):
            return self.getToken(SQLParser.OUTFILE_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextStringLiteralContext,0)


        def DUMPFILE_SYMBOL(self):
            return self.getToken(SQLParser.DUMPFILE_SYMBOL, 0)

        def textOrIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.TextOrIdentifierContext)
            else:
                return self.getTypedRuleContext(SQLParser.TextOrIdentifierContext,i)


        def userVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.UserVariableContext)
            else:
                return self.getTypedRuleContext(SQLParser.UserVariableContext,i)


        def charsetClause(self):
            return self.getTypedRuleContext(SQLParser.CharsetClauseContext,0)


        def fieldsClause(self):
            return self.getTypedRuleContext(SQLParser.FieldsClauseContext,0)


        def linesClause(self):
            return self.getTypedRuleContext(SQLParser.LinesClauseContext,0)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_intoClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntoClause" ):
                listener.enterIntoClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntoClause" ):
                listener.exitIntoClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntoClause" ):
                return visitor.visitIntoClause(self)
            else:
                return visitor.visitChildren(self)




    def intoClause(self):

        localctx = SQLParser.IntoClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_intoClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3052
            self.match(SQLParser.INTO_SYMBOL)
            self.state = 3080
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
            if la_ == 1:
                self.state = 3053
                self.match(SQLParser.OUTFILE_SYMBOL)
                self.state = 3054
                self.textStringLiteral()
                self.state = 3056
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
                if la_ == 1:
                    self.state = 3055
                    self.charsetClause()


                self.state = 3059
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
                if la_ == 1:
                    self.state = 3058
                    self.fieldsClause()


                self.state = 3062
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
                if la_ == 1:
                    self.state = 3061
                    self.linesClause()


                pass

            elif la_ == 2:
                self.state = 3064
                self.match(SQLParser.DUMPFILE_SYMBOL)
                self.state = 3065
                self.textStringLiteral()
                pass

            elif la_ == 3:
                self.state = 3068
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
                if la_ == 1:
                    self.state = 3066
                    self.textOrIdentifier()
                    pass

                elif la_ == 2:
                    self.state = 3067
                    self.userVariable()
                    pass


                self.state = 3077
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,312,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3070
                        self.match(SQLParser.COMMA_SYMBOL)
                        self.state = 3073
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
                        if la_ == 1:
                            self.state = 3071
                            self.textOrIdentifier()
                            pass

                        elif la_ == 2:
                            self.state = 3072
                            self.userVariable()
                            pass

                 
                    self.state = 3079
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,312,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureAnalyseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE_SYMBOL(self):
            return self.getToken(SQLParser.PROCEDURE_SYMBOL, 0)

        def ANALYSE_SYMBOL(self):
            return self.getToken(SQLParser.ANALYSE_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def INT_NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.INT_NUMBER)
            else:
                return self.getToken(SQLParser.INT_NUMBER, i)

        def COMMA_SYMBOL(self):
            return self.getToken(SQLParser.COMMA_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_procedureAnalyseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureAnalyseClause" ):
                listener.enterProcedureAnalyseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureAnalyseClause" ):
                listener.exitProcedureAnalyseClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureAnalyseClause" ):
                return visitor.visitProcedureAnalyseClause(self)
            else:
                return visitor.visitChildren(self)




    def procedureAnalyseClause(self):

        localctx = SQLParser.ProcedureAnalyseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_procedureAnalyseClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3082
            self.match(SQLParser.PROCEDURE_SYMBOL)
            self.state = 3083
            self.match(SQLParser.ANALYSE_SYMBOL)
            self.state = 3084
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 3090
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.INT_NUMBER:
                self.state = 3085
                self.match(SQLParser.INT_NUMBER)
                self.state = 3088
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.COMMA_SYMBOL:
                    self.state = 3086
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 3087
                    self.match(SQLParser.INT_NUMBER)




            self.state = 3092
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING_SYMBOL(self):
            return self.getToken(SQLParser.HAVING_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_havingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHavingClause" ):
                listener.enterHavingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHavingClause" ):
                listener.exitHavingClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHavingClause" ):
                return visitor.visitHavingClause(self)
            else:
                return visitor.visitChildren(self)




    def havingClause(self):

        localctx = SQLParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3094
            self.match(SQLParser.HAVING_SYMBOL)
            self.state = 3095
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW_SYMBOL(self):
            return self.getToken(SQLParser.WINDOW_SYMBOL, 0)

        def windowDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.WindowDefinitionContext)
            else:
                return self.getTypedRuleContext(SQLParser.WindowDefinitionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_windowClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowClause" ):
                listener.enterWindowClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowClause" ):
                listener.exitWindowClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowClause" ):
                return visitor.visitWindowClause(self)
            else:
                return visitor.visitChildren(self)




    def windowClause(self):

        localctx = SQLParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_windowClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3097
            self.match(SQLParser.WINDOW_SYMBOL)
            self.state = 3098
            self.windowDefinition()
            self.state = 3103
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,316,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3099
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 3100
                    self.windowDefinition() 
                self.state = 3105
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,316,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def windowName(self):
            return self.getTypedRuleContext(SQLParser.WindowNameContext,0)


        def AS_SYMBOL(self):
            return self.getToken(SQLParser.AS_SYMBOL, 0)

        def windowSpec(self):
            return self.getTypedRuleContext(SQLParser.WindowSpecContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_windowDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowDefinition" ):
                listener.enterWindowDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowDefinition" ):
                listener.exitWindowDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowDefinition" ):
                return visitor.visitWindowDefinition(self)
            else:
                return visitor.visitChildren(self)




    def windowDefinition(self):

        localctx = SQLParser.WindowDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_windowDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3106
            self.windowName()
            self.state = 3107
            self.match(SQLParser.AS_SYMBOL)
            self.state = 3108
            self.windowSpec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def windowSpecDetails(self):
            return self.getTypedRuleContext(SQLParser.WindowSpecDetailsContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_windowSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowSpec" ):
                listener.enterWindowSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowSpec" ):
                listener.exitWindowSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowSpec" ):
                return visitor.visitWindowSpec(self)
            else:
                return visitor.visitChildren(self)




    def windowSpec(self):

        localctx = SQLParser.WindowSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_windowSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3110
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 3111
            self.windowSpecDetails()
            self.state = 3112
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowSpecDetailsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def windowName(self):
            return self.getTypedRuleContext(SQLParser.WindowNameContext,0)


        def PARTITION_SYMBOL(self):
            return self.getToken(SQLParser.PARTITION_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(SQLParser.BY_SYMBOL, 0)

        def orderList(self):
            return self.getTypedRuleContext(SQLParser.OrderListContext,0)


        def orderClause(self):
            return self.getTypedRuleContext(SQLParser.OrderClauseContext,0)


        def windowFrameClause(self):
            return self.getTypedRuleContext(SQLParser.WindowFrameClauseContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_windowSpecDetails

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowSpecDetails" ):
                listener.enterWindowSpecDetails(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowSpecDetails" ):
                listener.exitWindowSpecDetails(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowSpecDetails" ):
                return visitor.visitWindowSpecDetails(self)
            else:
                return visitor.visitChildren(self)




    def windowSpecDetails(self):

        localctx = SQLParser.WindowSpecDetailsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_windowSpecDetails)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3115
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
            if la_ == 1:
                self.state = 3114
                self.windowName()


            self.state = 3120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.PARTITION_SYMBOL:
                self.state = 3117
                self.match(SQLParser.PARTITION_SYMBOL)
                self.state = 3118
                self.match(SQLParser.BY_SYMBOL)
                self.state = 3119
                self.orderList()


            self.state = 3123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.ORDER_SYMBOL:
                self.state = 3122
                self.orderClause()


            self.state = 3126
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.RANGE_SYMBOL or _la==SQLParser.ROWS_SYMBOL or _la==SQLParser.GROUPS_SYMBOL:
                self.state = 3125
                self.windowFrameClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def windowFrameUnits(self):
            return self.getTypedRuleContext(SQLParser.WindowFrameUnitsContext,0)


        def windowFrameExtent(self):
            return self.getTypedRuleContext(SQLParser.WindowFrameExtentContext,0)


        def windowFrameExclusion(self):
            return self.getTypedRuleContext(SQLParser.WindowFrameExclusionContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_windowFrameClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrameClause" ):
                listener.enterWindowFrameClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrameClause" ):
                listener.exitWindowFrameClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowFrameClause" ):
                return visitor.visitWindowFrameClause(self)
            else:
                return visitor.visitChildren(self)




    def windowFrameClause(self):

        localctx = SQLParser.WindowFrameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_windowFrameClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3128
            self.windowFrameUnits()
            self.state = 3129
            self.windowFrameExtent()
            self.state = 3131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.EXCLUDE_SYMBOL:
                self.state = 3130
                self.windowFrameExclusion()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameUnitsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROWS_SYMBOL(self):
            return self.getToken(SQLParser.ROWS_SYMBOL, 0)

        def RANGE_SYMBOL(self):
            return self.getToken(SQLParser.RANGE_SYMBOL, 0)

        def GROUPS_SYMBOL(self):
            return self.getToken(SQLParser.GROUPS_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_windowFrameUnits

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrameUnits" ):
                listener.enterWindowFrameUnits(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrameUnits" ):
                listener.exitWindowFrameUnits(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowFrameUnits" ):
                return visitor.visitWindowFrameUnits(self)
            else:
                return visitor.visitChildren(self)




    def windowFrameUnits(self):

        localctx = SQLParser.WindowFrameUnitsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_windowFrameUnits)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3133
            _la = self._input.LA(1)
            if not(_la==SQLParser.RANGE_SYMBOL or _la==SQLParser.ROWS_SYMBOL or _la==SQLParser.GROUPS_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameExtentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def windowFrameStart(self):
            return self.getTypedRuleContext(SQLParser.WindowFrameStartContext,0)


        def windowFrameBetween(self):
            return self.getTypedRuleContext(SQLParser.WindowFrameBetweenContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_windowFrameExtent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrameExtent" ):
                listener.enterWindowFrameExtent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrameExtent" ):
                listener.exitWindowFrameExtent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowFrameExtent" ):
                return visitor.visitWindowFrameExtent(self)
            else:
                return visitor.visitChildren(self)




    def windowFrameExtent(self):

        localctx = SQLParser.WindowFrameExtentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_windowFrameExtent)
        try:
            self.state = 3137
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.CURRENT_SYMBOL, SQLParser.INTERVAL_SYMBOL, SQLParser.UNBOUNDED_SYMBOL, SQLParser.INT_NUMBER, SQLParser.LONG_NUMBER, SQLParser.ULONGLONG_NUMBER, SQLParser.PARAM_MARKER, SQLParser.DECIMAL_NUMBER, SQLParser.FLOAT_NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3135
                self.windowFrameStart()
                pass
            elif token in [SQLParser.BETWEEN_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3136
                self.windowFrameBetween()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameStartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED_SYMBOL(self):
            return self.getToken(SQLParser.UNBOUNDED_SYMBOL, 0)

        def PRECEDING_SYMBOL(self):
            return self.getToken(SQLParser.PRECEDING_SYMBOL, 0)

        def ulonglong_number(self):
            return self.getTypedRuleContext(SQLParser.Ulonglong_numberContext,0)


        def PARAM_MARKER(self):
            return self.getToken(SQLParser.PARAM_MARKER, 0)

        def INTERVAL_SYMBOL(self):
            return self.getToken(SQLParser.INTERVAL_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def interval(self):
            return self.getTypedRuleContext(SQLParser.IntervalContext,0)


        def CURRENT_SYMBOL(self):
            return self.getToken(SQLParser.CURRENT_SYMBOL, 0)

        def ROW_SYMBOL(self):
            return self.getToken(SQLParser.ROW_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_windowFrameStart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrameStart" ):
                listener.enterWindowFrameStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrameStart" ):
                listener.exitWindowFrameStart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowFrameStart" ):
                return visitor.visitWindowFrameStart(self)
            else:
                return visitor.visitChildren(self)




    def windowFrameStart(self):

        localctx = SQLParser.WindowFrameStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_windowFrameStart)
        try:
            self.state = 3153
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.UNBOUNDED_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3139
                self.match(SQLParser.UNBOUNDED_SYMBOL)
                self.state = 3140
                self.match(SQLParser.PRECEDING_SYMBOL)
                pass
            elif token in [SQLParser.INT_NUMBER, SQLParser.LONG_NUMBER, SQLParser.ULONGLONG_NUMBER, SQLParser.DECIMAL_NUMBER, SQLParser.FLOAT_NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3141
                self.ulonglong_number()
                self.state = 3142
                self.match(SQLParser.PRECEDING_SYMBOL)
                pass
            elif token in [SQLParser.PARAM_MARKER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3144
                self.match(SQLParser.PARAM_MARKER)
                self.state = 3145
                self.match(SQLParser.PRECEDING_SYMBOL)
                pass
            elif token in [SQLParser.INTERVAL_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3146
                self.match(SQLParser.INTERVAL_SYMBOL)
                self.state = 3147
                self.expr(0)
                self.state = 3148
                self.interval()
                self.state = 3149
                self.match(SQLParser.PRECEDING_SYMBOL)
                pass
            elif token in [SQLParser.CURRENT_SYMBOL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3151
                self.match(SQLParser.CURRENT_SYMBOL)
                self.state = 3152
                self.match(SQLParser.ROW_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameBetweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN_SYMBOL(self):
            return self.getToken(SQLParser.BETWEEN_SYMBOL, 0)

        def windowFrameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.WindowFrameBoundContext)
            else:
                return self.getTypedRuleContext(SQLParser.WindowFrameBoundContext,i)


        def AND_SYMBOL(self):
            return self.getToken(SQLParser.AND_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_windowFrameBetween

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrameBetween" ):
                listener.enterWindowFrameBetween(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrameBetween" ):
                listener.exitWindowFrameBetween(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowFrameBetween" ):
                return visitor.visitWindowFrameBetween(self)
            else:
                return visitor.visitChildren(self)




    def windowFrameBetween(self):

        localctx = SQLParser.WindowFrameBetweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_windowFrameBetween)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3155
            self.match(SQLParser.BETWEEN_SYMBOL)
            self.state = 3156
            self.windowFrameBound()
            self.state = 3157
            self.match(SQLParser.AND_SYMBOL)
            self.state = 3158
            self.windowFrameBound()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def windowFrameStart(self):
            return self.getTypedRuleContext(SQLParser.WindowFrameStartContext,0)


        def UNBOUNDED_SYMBOL(self):
            return self.getToken(SQLParser.UNBOUNDED_SYMBOL, 0)

        def FOLLOWING_SYMBOL(self):
            return self.getToken(SQLParser.FOLLOWING_SYMBOL, 0)

        def ulonglong_number(self):
            return self.getTypedRuleContext(SQLParser.Ulonglong_numberContext,0)


        def PARAM_MARKER(self):
            return self.getToken(SQLParser.PARAM_MARKER, 0)

        def INTERVAL_SYMBOL(self):
            return self.getToken(SQLParser.INTERVAL_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def interval(self):
            return self.getTypedRuleContext(SQLParser.IntervalContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_windowFrameBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrameBound" ):
                listener.enterWindowFrameBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrameBound" ):
                listener.exitWindowFrameBound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowFrameBound" ):
                return visitor.visitWindowFrameBound(self)
            else:
                return visitor.visitChildren(self)




    def windowFrameBound(self):

        localctx = SQLParser.WindowFrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_windowFrameBound)
        try:
            self.state = 3173
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3160
                self.windowFrameStart()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3161
                self.match(SQLParser.UNBOUNDED_SYMBOL)
                self.state = 3162
                self.match(SQLParser.FOLLOWING_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3163
                self.ulonglong_number()
                self.state = 3164
                self.match(SQLParser.FOLLOWING_SYMBOL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3166
                self.match(SQLParser.PARAM_MARKER)
                self.state = 3167
                self.match(SQLParser.FOLLOWING_SYMBOL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3168
                self.match(SQLParser.INTERVAL_SYMBOL)
                self.state = 3169
                self.expr(0)
                self.state = 3170
                self.interval()
                self.state = 3171
                self.match(SQLParser.FOLLOWING_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameExclusionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLUDE_SYMBOL(self):
            return self.getToken(SQLParser.EXCLUDE_SYMBOL, 0)

        def CURRENT_SYMBOL(self):
            return self.getToken(SQLParser.CURRENT_SYMBOL, 0)

        def ROW_SYMBOL(self):
            return self.getToken(SQLParser.ROW_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(SQLParser.GROUP_SYMBOL, 0)

        def TIES_SYMBOL(self):
            return self.getToken(SQLParser.TIES_SYMBOL, 0)

        def NO_SYMBOL(self):
            return self.getToken(SQLParser.NO_SYMBOL, 0)

        def OTHERS_SYMBOL(self):
            return self.getToken(SQLParser.OTHERS_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_windowFrameExclusion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrameExclusion" ):
                listener.enterWindowFrameExclusion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrameExclusion" ):
                listener.exitWindowFrameExclusion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowFrameExclusion" ):
                return visitor.visitWindowFrameExclusion(self)
            else:
                return visitor.visitChildren(self)




    def windowFrameExclusion(self):

        localctx = SQLParser.WindowFrameExclusionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_windowFrameExclusion)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3175
            self.match(SQLParser.EXCLUDE_SYMBOL)
            self.state = 3182
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.CURRENT_SYMBOL]:
                self.state = 3176
                self.match(SQLParser.CURRENT_SYMBOL)
                self.state = 3177
                self.match(SQLParser.ROW_SYMBOL)
                pass
            elif token in [SQLParser.GROUP_SYMBOL]:
                self.state = 3178
                self.match(SQLParser.GROUP_SYMBOL)
                pass
            elif token in [SQLParser.TIES_SYMBOL]:
                self.state = 3179
                self.match(SQLParser.TIES_SYMBOL)
                pass
            elif token in [SQLParser.NO_SYMBOL]:
                self.state = 3180
                self.match(SQLParser.NO_SYMBOL)
                self.state = 3181
                self.match(SQLParser.OTHERS_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_SYMBOL(self):
            return self.getToken(SQLParser.WITH_SYMBOL, 0)

        def commonTableExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.CommonTableExpressionContext)
            else:
                return self.getTypedRuleContext(SQLParser.CommonTableExpressionContext,i)


        def RECURSIVE_SYMBOL(self):
            return self.getToken(SQLParser.RECURSIVE_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_withClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithClause" ):
                listener.enterWithClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithClause" ):
                listener.exitWithClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithClause" ):
                return visitor.visitWithClause(self)
            else:
                return visitor.visitChildren(self)




    def withClause(self):

        localctx = SQLParser.WithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_withClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3184
            self.match(SQLParser.WITH_SYMBOL)
            self.state = 3186
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
            if la_ == 1:
                self.state = 3185
                self.match(SQLParser.RECURSIVE_SYMBOL)


            self.state = 3188
            self.commonTableExpression()
            self.state = 3193
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,327,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3189
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 3190
                    self.commonTableExpression() 
                self.state = 3195
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,327,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommonTableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def AS_SYMBOL(self):
            return self.getToken(SQLParser.AS_SYMBOL, 0)

        def subquery(self):
            return self.getTypedRuleContext(SQLParser.SubqueryContext,0)


        def columnInternalRefList(self):
            return self.getTypedRuleContext(SQLParser.ColumnInternalRefListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_commonTableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommonTableExpression" ):
                listener.enterCommonTableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommonTableExpression" ):
                listener.exitCommonTableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommonTableExpression" ):
                return visitor.visitCommonTableExpression(self)
            else:
                return visitor.visitChildren(self)




    def commonTableExpression(self):

        localctx = SQLParser.CommonTableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_commonTableExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3196
            self.identifier()
            self.state = 3198
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.OPEN_PAR_SYMBOL:
                self.state = 3197
                self.columnInternalRefList()


            self.state = 3200
            self.match(SQLParser.AS_SYMBOL)
            self.state = 3201
            self.subquery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP_SYMBOL(self):
            return self.getToken(SQLParser.GROUP_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(SQLParser.BY_SYMBOL, 0)

        def orderList(self):
            return self.getTypedRuleContext(SQLParser.OrderListContext,0)


        def olapOption(self):
            return self.getTypedRuleContext(SQLParser.OlapOptionContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_groupByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByClause" ):
                listener.enterGroupByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByClause" ):
                listener.exitGroupByClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupByClause" ):
                return visitor.visitGroupByClause(self)
            else:
                return visitor.visitChildren(self)




    def groupByClause(self):

        localctx = SQLParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_groupByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3203
            self.match(SQLParser.GROUP_SYMBOL)
            self.state = 3204
            self.match(SQLParser.BY_SYMBOL)
            self.state = 3205
            self.orderList()
            self.state = 3207
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,329,self._ctx)
            if la_ == 1:
                self.state = 3206
                self.olapOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OlapOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_SYMBOL(self):
            return self.getToken(SQLParser.WITH_SYMBOL, 0)

        def ROLLUP_SYMBOL(self):
            return self.getToken(SQLParser.ROLLUP_SYMBOL, 0)

        def CUBE_SYMBOL(self):
            return self.getToken(SQLParser.CUBE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_olapOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOlapOption" ):
                listener.enterOlapOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOlapOption" ):
                listener.exitOlapOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOlapOption" ):
                return visitor.visitOlapOption(self)
            else:
                return visitor.visitChildren(self)




    def olapOption(self):

        localctx = SQLParser.OlapOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_olapOption)
        try:
            self.state = 3214
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3209
                self.match(SQLParser.WITH_SYMBOL)
                self.state = 3210
                self.match(SQLParser.ROLLUP_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3211
                if not self.serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 80000")
                self.state = 3212
                self.match(SQLParser.WITH_SYMBOL)
                self.state = 3213
                self.match(SQLParser.CUBE_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER_SYMBOL(self):
            return self.getToken(SQLParser.ORDER_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(SQLParser.BY_SYMBOL, 0)

        def orderList(self):
            return self.getTypedRuleContext(SQLParser.OrderListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_orderClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderClause" ):
                listener.enterOrderClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderClause" ):
                listener.exitOrderClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderClause" ):
                return visitor.visitOrderClause(self)
            else:
                return visitor.visitChildren(self)




    def orderClause(self):

        localctx = SQLParser.OrderClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_orderClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3216
            self.match(SQLParser.ORDER_SYMBOL)
            self.state = 3217
            self.match(SQLParser.BY_SYMBOL)
            self.state = 3218
            self.orderList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASC_SYMBOL(self):
            return self.getToken(SQLParser.ASC_SYMBOL, 0)

        def DESC_SYMBOL(self):
            return self.getToken(SQLParser.DESC_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_direction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirection" ):
                listener.enterDirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirection" ):
                listener.exitDirection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDirection" ):
                return visitor.visitDirection(self)
            else:
                return visitor.visitChildren(self)




    def direction(self):

        localctx = SQLParser.DirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_direction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3220
            _la = self._input.LA(1)
            if not(_la==SQLParser.ASC_SYMBOL or _la==SQLParser.DESC_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM_SYMBOL(self):
            return self.getToken(SQLParser.FROM_SYMBOL, 0)

        def DUAL_SYMBOL(self):
            return self.getToken(SQLParser.DUAL_SYMBOL, 0)

        def tableReferenceList(self):
            return self.getTypedRuleContext(SQLParser.TableReferenceListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_fromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClause" ):
                listener.enterFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClause" ):
                listener.exitFromClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromClause" ):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)




    def fromClause(self):

        localctx = SQLParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3222
            self.match(SQLParser.FROM_SYMBOL)
            self.state = 3225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
            if la_ == 1:
                self.state = 3223
                self.match(SQLParser.DUAL_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 3224
                self.tableReferenceList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableReferenceListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.TableReferenceContext)
            else:
                return self.getTypedRuleContext(SQLParser.TableReferenceContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_tableReferenceList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableReferenceList" ):
                listener.enterTableReferenceList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableReferenceList" ):
                listener.exitTableReferenceList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableReferenceList" ):
                return visitor.visitTableReferenceList(self)
            else:
                return visitor.visitChildren(self)




    def tableReferenceList(self):

        localctx = SQLParser.TableReferenceListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_tableReferenceList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3227
            self.tableReference()
            self.state = 3232
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,332,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3228
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 3229
                    self.tableReference() 
                self.state = 3234
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,332,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableValueConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES_SYMBOL(self):
            return self.getToken(SQLParser.VALUES_SYMBOL, 0)

        def rowValueExplicit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.RowValueExplicitContext)
            else:
                return self.getTypedRuleContext(SQLParser.RowValueExplicitContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_tableValueConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableValueConstructor" ):
                listener.enterTableValueConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableValueConstructor" ):
                listener.exitTableValueConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableValueConstructor" ):
                return visitor.visitTableValueConstructor(self)
            else:
                return visitor.visitChildren(self)




    def tableValueConstructor(self):

        localctx = SQLParser.TableValueConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_tableValueConstructor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3235
            self.match(SQLParser.VALUES_SYMBOL)
            self.state = 3236
            self.rowValueExplicit()
            self.state = 3241
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,333,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3237
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 3238
                    self.rowValueExplicit() 
                self.state = 3243
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,333,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE_SYMBOL(self):
            return self.getToken(SQLParser.TABLE_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(SQLParser.TableRefContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_explicitTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitTable" ):
                listener.enterExplicitTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitTable" ):
                listener.exitExplicitTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitTable" ):
                return visitor.visitExplicitTable(self)
            else:
                return visitor.visitChildren(self)




    def explicitTable(self):

        localctx = SQLParser.ExplicitTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_explicitTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3244
            self.match(SQLParser.TABLE_SYMBOL)
            self.state = 3245
            self.tableRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowValueExplicitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROW_SYMBOL(self):
            return self.getToken(SQLParser.ROW_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def values(self):
            return self.getTypedRuleContext(SQLParser.ValuesContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_rowValueExplicit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowValueExplicit" ):
                listener.enterRowValueExplicit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowValueExplicit" ):
                listener.exitRowValueExplicit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowValueExplicit" ):
                return visitor.visitRowValueExplicit(self)
            else:
                return visitor.visitChildren(self)




    def rowValueExplicit(self):

        localctx = SQLParser.RowValueExplicitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_rowValueExplicit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3247
            self.match(SQLParser.ROW_SYMBOL)
            self.state = 3248
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 3250
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
            if la_ == 1:
                self.state = 3249
                self.values()


            self.state = 3252
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def querySpecOption(self):
            return self.getTypedRuleContext(SQLParser.QuerySpecOptionContext,0)


        def SQL_NO_CACHE_SYMBOL(self):
            return self.getToken(SQLParser.SQL_NO_CACHE_SYMBOL, 0)

        def SQL_CACHE_SYMBOL(self):
            return self.getToken(SQLParser.SQL_CACHE_SYMBOL, 0)

        def MAX_STATEMENT_TIME_SYMBOL(self):
            return self.getToken(SQLParser.MAX_STATEMENT_TIME_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(SQLParser.Real_ulong_numberContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_selectOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectOption" ):
                listener.enterSelectOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectOption" ):
                listener.exitSelectOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectOption" ):
                return visitor.visitSelectOption(self)
            else:
                return visitor.visitChildren(self)




    def selectOption(self):

        localctx = SQLParser.SelectOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_selectOption)
        try:
            self.state = 3262
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3254
                self.querySpecOption()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3255
                self.match(SQLParser.SQL_NO_CACHE_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3256
                if not self.serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 80000")
                self.state = 3257
                self.match(SQLParser.SQL_CACHE_SYMBOL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3258
                if not self.serverVersion >= 50704 and self.serverVersion < 50708:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50704 and self.serverVersion < 50708")
                self.state = 3259
                self.match(SQLParser.MAX_STATEMENT_TIME_SYMBOL)
                self.state = 3260
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3261
                self.real_ulong_number()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockingClauseListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lockingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.LockingClauseContext)
            else:
                return self.getTypedRuleContext(SQLParser.LockingClauseContext,i)


        def getRuleIndex(self):
            return SQLParser.RULE_lockingClauseList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockingClauseList" ):
                listener.enterLockingClauseList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockingClauseList" ):
                listener.exitLockingClauseList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLockingClauseList" ):
                return visitor.visitLockingClauseList(self)
            else:
                return visitor.visitChildren(self)




    def lockingClauseList(self):

        localctx = SQLParser.LockingClauseListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_lockingClauseList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3265 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3264
                self.lockingClause()
                self.state = 3267 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SQLParser.FOR_SYMBOL or _la==SQLParser.LOCK_SYMBOL):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR_SYMBOL(self):
            return self.getToken(SQLParser.FOR_SYMBOL, 0)

        def lockStrengh(self):
            return self.getTypedRuleContext(SQLParser.LockStrenghContext,0)


        def OF_SYMBOL(self):
            return self.getToken(SQLParser.OF_SYMBOL, 0)

        def tableAliasRefList(self):
            return self.getTypedRuleContext(SQLParser.TableAliasRefListContext,0)


        def lockedRowAction(self):
            return self.getTypedRuleContext(SQLParser.LockedRowActionContext,0)


        def LOCK_SYMBOL(self):
            return self.getToken(SQLParser.LOCK_SYMBOL, 0)

        def IN_SYMBOL(self):
            return self.getToken(SQLParser.IN_SYMBOL, 0)

        def SHARE_SYMBOL(self):
            return self.getToken(SQLParser.SHARE_SYMBOL, 0)

        def MODE_SYMBOL(self):
            return self.getToken(SQLParser.MODE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_lockingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockingClause" ):
                listener.enterLockingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockingClause" ):
                listener.exitLockingClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLockingClause" ):
                return visitor.visitLockingClause(self)
            else:
                return visitor.visitChildren(self)




    def lockingClause(self):

        localctx = SQLParser.LockingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_lockingClause)
        try:
            self.state = 3284
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.FOR_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3269
                self.match(SQLParser.FOR_SYMBOL)
                self.state = 3270
                self.lockStrengh()
                self.state = 3274
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
                if la_ == 1:
                    self.state = 3271
                    if not self.serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80000")
                    self.state = 3272
                    self.match(SQLParser.OF_SYMBOL)
                    self.state = 3273
                    self.tableAliasRefList()


                self.state = 3278
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,338,self._ctx)
                if la_ == 1:
                    self.state = 3276
                    if not self.serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80000")
                    self.state = 3277
                    self.lockedRowAction()


                pass
            elif token in [SQLParser.LOCK_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3280
                self.match(SQLParser.LOCK_SYMBOL)
                self.state = 3281
                self.match(SQLParser.IN_SYMBOL)
                self.state = 3282
                self.match(SQLParser.SHARE_SYMBOL)
                self.state = 3283
                self.match(SQLParser.MODE_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockStrenghContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_SYMBOL(self):
            return self.getToken(SQLParser.UPDATE_SYMBOL, 0)

        def SHARE_SYMBOL(self):
            return self.getToken(SQLParser.SHARE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_lockStrengh

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockStrengh" ):
                listener.enterLockStrengh(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockStrengh" ):
                listener.exitLockStrengh(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLockStrengh" ):
                return visitor.visitLockStrengh(self)
            else:
                return visitor.visitChildren(self)




    def lockStrengh(self):

        localctx = SQLParser.LockStrenghContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_lockStrengh)
        try:
            self.state = 3289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3286
                self.match(SQLParser.UPDATE_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3287
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 3288
                self.match(SQLParser.SHARE_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockedRowActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKIP_SYMBOL(self):
            return self.getToken(SQLParser.SKIP_SYMBOL, 0)

        def LOCKED_SYMBOL(self):
            return self.getToken(SQLParser.LOCKED_SYMBOL, 0)

        def NOWAIT_SYMBOL(self):
            return self.getToken(SQLParser.NOWAIT_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_lockedRowAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockedRowAction" ):
                listener.enterLockedRowAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockedRowAction" ):
                listener.exitLockedRowAction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLockedRowAction" ):
                return visitor.visitLockedRowAction(self)
            else:
                return visitor.visitChildren(self)




    def lockedRowAction(self):

        localctx = SQLParser.LockedRowActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_lockedRowAction)
        try:
            self.state = 3294
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.SKIP_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3291
                self.match(SQLParser.SKIP_SYMBOL)
                self.state = 3292
                self.match(SQLParser.LOCKED_SYMBOL)
                pass
            elif token in [SQLParser.NOWAIT_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3293
                self.match(SQLParser.NOWAIT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectItemListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.SelectItemContext)
            else:
                return self.getTypedRuleContext(SQLParser.SelectItemContext,i)


        def MULT_OPERATOR(self):
            return self.getToken(SQLParser.MULT_OPERATOR, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_selectItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectItemList" ):
                listener.enterSelectItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectItemList" ):
                listener.exitSelectItemList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectItemList" ):
                return visitor.visitSelectItemList(self)
            else:
                return visitor.visitChildren(self)




    def selectItemList(self):

        localctx = SQLParser.SelectItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_selectItemList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3298
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,342,self._ctx)
            if la_ == 1:
                self.state = 3296
                self.selectItem()
                pass

            elif la_ == 2:
                self.state = 3297
                self.match(SQLParser.MULT_OPERATOR)
                pass


            self.state = 3304
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,343,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3300
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 3301
                    self.selectItem() 
                self.state = 3306
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,343,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableWild(self):
            return self.getTypedRuleContext(SQLParser.TableWildContext,0)


        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def selectAlias(self):
            return self.getTypedRuleContext(SQLParser.SelectAliasContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_selectItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectItem" ):
                listener.enterSelectItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectItem" ):
                listener.exitSelectItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectItem" ):
                return visitor.visitSelectItem(self)
            else:
                return visitor.visitChildren(self)




    def selectItem(self):

        localctx = SQLParser.SelectItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_selectItem)
        try:
            self.state = 3312
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3307
                self.tableWild()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3308
                self.expr(0)
                self.state = 3310
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
                if la_ == 1:
                    self.state = 3309
                    self.selectAlias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def textStringLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextStringLiteralContext,0)


        def AS_SYMBOL(self):
            return self.getToken(SQLParser.AS_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_selectAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectAlias" ):
                listener.enterSelectAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectAlias" ):
                listener.exitSelectAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectAlias" ):
                return visitor.visitSelectAlias(self)
            else:
                return visitor.visitChildren(self)




    def selectAlias(self):

        localctx = SQLParser.SelectAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_selectAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3315
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,346,self._ctx)
            if la_ == 1:
                self.state = 3314
                self.match(SQLParser.AS_SYMBOL)


            self.state = 3319
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,347,self._ctx)
            if la_ == 1:
                self.state = 3317
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 3318
                self.textStringLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE_SYMBOL(self):
            return self.getToken(SQLParser.WHERE_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_whereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhereClause" ):
                listener.enterWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhereClause" ):
                listener.exitWhereClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhereClause" ):
                return visitor.visitWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def whereClause(self):

        localctx = SQLParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3321
            self.match(SQLParser.WHERE_SYMBOL)
            self.state = 3322
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableFactor(self):
            return self.getTypedRuleContext(SQLParser.TableFactorContext,0)


        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_CURLY_SYMBOL, 0)

        def escapedTableReference(self):
            return self.getTypedRuleContext(SQLParser.EscapedTableReferenceContext,0)


        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_CURLY_SYMBOL, 0)

        def joinedTable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.JoinedTableContext)
            else:
                return self.getTypedRuleContext(SQLParser.JoinedTableContext,i)


        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def OJ_SYMBOL(self):
            return self.getToken(SQLParser.OJ_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_tableReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableReference" ):
                listener.enterTableReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableReference" ):
                listener.exitTableReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableReference" ):
                return visitor.visitTableReference(self)
            else:
                return visitor.visitChildren(self)




    def tableReference(self):

        localctx = SQLParser.TableReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_tableReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3334
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,349,self._ctx)
            if la_ == 1:
                self.state = 3324
                self.tableFactor()
                pass

            elif la_ == 2:
                self.state = 3325
                self.match(SQLParser.OPEN_CURLY_SYMBOL)
                self.state = 3329
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,348,self._ctx)
                if la_ == 1:
                    self.state = 3326
                    if not self.serverVersion < 80017:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion < 80017")
                    self.state = 3327
                    self.identifier()
                    pass

                elif la_ == 2:
                    self.state = 3328
                    self.match(SQLParser.OJ_SYMBOL)
                    pass


                self.state = 3331
                self.escapedTableReference()
                self.state = 3332
                self.match(SQLParser.CLOSE_CURLY_SYMBOL)
                pass


            self.state = 3339
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,350,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3336
                    self.joinedTable() 
                self.state = 3341
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,350,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EscapedTableReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableFactor(self):
            return self.getTypedRuleContext(SQLParser.TableFactorContext,0)


        def joinedTable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.JoinedTableContext)
            else:
                return self.getTypedRuleContext(SQLParser.JoinedTableContext,i)


        def getRuleIndex(self):
            return SQLParser.RULE_escapedTableReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEscapedTableReference" ):
                listener.enterEscapedTableReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEscapedTableReference" ):
                listener.exitEscapedTableReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEscapedTableReference" ):
                return visitor.visitEscapedTableReference(self)
            else:
                return visitor.visitChildren(self)




    def escapedTableReference(self):

        localctx = SQLParser.EscapedTableReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_escapedTableReference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3342
            self.tableFactor()
            self.state = 3346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.CROSS_SYMBOL or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & ((1 << (SQLParser.INNER_SYMBOL - 239)) | (1 << (SQLParser.JOIN_SYMBOL - 239)) | (1 << (SQLParser.LEFT_SYMBOL - 239)))) != 0) or _la==SQLParser.NATURAL_SYMBOL or _la==SQLParser.RIGHT_SYMBOL or _la==SQLParser.STRAIGHT_JOIN_SYMBOL:
                self.state = 3343
                self.joinedTable()
                self.state = 3348
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinedTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerJoinType(self):
            return self.getTypedRuleContext(SQLParser.InnerJoinTypeContext,0)


        def tableReference(self):
            return self.getTypedRuleContext(SQLParser.TableReferenceContext,0)


        def ON_SYMBOL(self):
            return self.getToken(SQLParser.ON_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def USING_SYMBOL(self):
            return self.getToken(SQLParser.USING_SYMBOL, 0)

        def identifierListWithParentheses(self):
            return self.getTypedRuleContext(SQLParser.IdentifierListWithParenthesesContext,0)


        def outerJoinType(self):
            return self.getTypedRuleContext(SQLParser.OuterJoinTypeContext,0)


        def naturalJoinType(self):
            return self.getTypedRuleContext(SQLParser.NaturalJoinTypeContext,0)


        def tableFactor(self):
            return self.getTypedRuleContext(SQLParser.TableFactorContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_joinedTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinedTable" ):
                listener.enterJoinedTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinedTable" ):
                listener.exitJoinedTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinedTable" ):
                return visitor.visitJoinedTable(self)
            else:
                return visitor.visitChildren(self)




    def joinedTable(self):

        localctx = SQLParser.JoinedTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_joinedTable)
        try:
            self.state = 3368
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.CROSS_SYMBOL, SQLParser.INNER_SYMBOL, SQLParser.JOIN_SYMBOL, SQLParser.STRAIGHT_JOIN_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3349
                self.innerJoinType()
                self.state = 3350
                self.tableReference()
                self.state = 3355
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,352,self._ctx)
                if la_ == 1:
                    self.state = 3351
                    self.match(SQLParser.ON_SYMBOL)
                    self.state = 3352
                    self.expr(0)

                elif la_ == 2:
                    self.state = 3353
                    self.match(SQLParser.USING_SYMBOL)
                    self.state = 3354
                    self.identifierListWithParentheses()


                pass
            elif token in [SQLParser.LEFT_SYMBOL, SQLParser.RIGHT_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3357
                self.outerJoinType()
                self.state = 3358
                self.tableReference()
                self.state = 3363
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLParser.ON_SYMBOL]:
                    self.state = 3359
                    self.match(SQLParser.ON_SYMBOL)
                    self.state = 3360
                    self.expr(0)
                    pass
                elif token in [SQLParser.USING_SYMBOL]:
                    self.state = 3361
                    self.match(SQLParser.USING_SYMBOL)
                    self.state = 3362
                    self.identifierListWithParentheses()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [SQLParser.NATURAL_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3365
                self.naturalJoinType()
                self.state = 3366
                self.tableFactor()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NaturalJoinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NATURAL_SYMBOL(self):
            return self.getToken(SQLParser.NATURAL_SYMBOL, 0)

        def JOIN_SYMBOL(self):
            return self.getToken(SQLParser.JOIN_SYMBOL, 0)

        def INNER_SYMBOL(self):
            return self.getToken(SQLParser.INNER_SYMBOL, 0)

        def LEFT_SYMBOL(self):
            return self.getToken(SQLParser.LEFT_SYMBOL, 0)

        def RIGHT_SYMBOL(self):
            return self.getToken(SQLParser.RIGHT_SYMBOL, 0)

        def OUTER_SYMBOL(self):
            return self.getToken(SQLParser.OUTER_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_naturalJoinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNaturalJoinType" ):
                listener.enterNaturalJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNaturalJoinType" ):
                listener.exitNaturalJoinType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNaturalJoinType" ):
                return visitor.visitNaturalJoinType(self)
            else:
                return visitor.visitChildren(self)




    def naturalJoinType(self):

        localctx = SQLParser.NaturalJoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_naturalJoinType)
        self._la = 0 # Token type
        try:
            self.state = 3381
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3370
                self.match(SQLParser.NATURAL_SYMBOL)
                self.state = 3372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.INNER_SYMBOL:
                    self.state = 3371
                    self.match(SQLParser.INNER_SYMBOL)


                self.state = 3374
                self.match(SQLParser.JOIN_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3375
                self.match(SQLParser.NATURAL_SYMBOL)
                self.state = 3376
                _la = self._input.LA(1)
                if not(_la==SQLParser.LEFT_SYMBOL or _la==SQLParser.RIGHT_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.OUTER_SYMBOL:
                    self.state = 3377
                    self.match(SQLParser.OUTER_SYMBOL)


                self.state = 3380
                self.match(SQLParser.JOIN_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerJoinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None # Token

        def JOIN_SYMBOL(self):
            return self.getToken(SQLParser.JOIN_SYMBOL, 0)

        def INNER_SYMBOL(self):
            return self.getToken(SQLParser.INNER_SYMBOL, 0)

        def CROSS_SYMBOL(self):
            return self.getToken(SQLParser.CROSS_SYMBOL, 0)

        def STRAIGHT_JOIN_SYMBOL(self):
            return self.getToken(SQLParser.STRAIGHT_JOIN_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_innerJoinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerJoinType" ):
                listener.enterInnerJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerJoinType" ):
                listener.exitInnerJoinType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerJoinType" ):
                return visitor.visitInnerJoinType(self)
            else:
                return visitor.visitChildren(self)




    def innerJoinType(self):

        localctx = SQLParser.InnerJoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_innerJoinType)
        self._la = 0 # Token type
        try:
            self.state = 3388
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.CROSS_SYMBOL, SQLParser.INNER_SYMBOL, SQLParser.JOIN_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.CROSS_SYMBOL or _la==SQLParser.INNER_SYMBOL:
                    self.state = 3383
                    localctx.type = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SQLParser.CROSS_SYMBOL or _la==SQLParser.INNER_SYMBOL):
                        localctx.type = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3386
                self.match(SQLParser.JOIN_SYMBOL)
                pass
            elif token in [SQLParser.STRAIGHT_JOIN_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3387
                localctx.type = self.match(SQLParser.STRAIGHT_JOIN_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OuterJoinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None # Token

        def JOIN_SYMBOL(self):
            return self.getToken(SQLParser.JOIN_SYMBOL, 0)

        def LEFT_SYMBOL(self):
            return self.getToken(SQLParser.LEFT_SYMBOL, 0)

        def RIGHT_SYMBOL(self):
            return self.getToken(SQLParser.RIGHT_SYMBOL, 0)

        def OUTER_SYMBOL(self):
            return self.getToken(SQLParser.OUTER_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_outerJoinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOuterJoinType" ):
                listener.enterOuterJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOuterJoinType" ):
                listener.exitOuterJoinType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOuterJoinType" ):
                return visitor.visitOuterJoinType(self)
            else:
                return visitor.visitChildren(self)




    def outerJoinType(self):

        localctx = SQLParser.OuterJoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_outerJoinType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3390
            localctx.type = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==SQLParser.LEFT_SYMBOL or _la==SQLParser.RIGHT_SYMBOL):
                localctx.type = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.OUTER_SYMBOL:
                self.state = 3391
                self.match(SQLParser.OUTER_SYMBOL)


            self.state = 3394
            self.match(SQLParser.JOIN_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableFactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleTable(self):
            return self.getTypedRuleContext(SQLParser.SingleTableContext,0)


        def singleTableParens(self):
            return self.getTypedRuleContext(SQLParser.SingleTableParensContext,0)


        def derivedTable(self):
            return self.getTypedRuleContext(SQLParser.DerivedTableContext,0)


        def tableReferenceListParens(self):
            return self.getTypedRuleContext(SQLParser.TableReferenceListParensContext,0)


        def tableFunction(self):
            return self.getTypedRuleContext(SQLParser.TableFunctionContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_tableFactor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFactor" ):
                listener.enterTableFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFactor" ):
                listener.exitTableFactor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFactor" ):
                return visitor.visitTableFactor(self)
            else:
                return visitor.visitChildren(self)




    def tableFactor(self):

        localctx = SQLParser.TableFactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_tableFactor)
        try:
            self.state = 3402
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3396
                self.singleTable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3397
                self.singleTableParens()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3398
                self.derivedTable()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3399
                self.tableReferenceListParens()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3400
                if not self.serverVersion >= 80004:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80004")
                self.state = 3401
                self.tableFunction()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRef(self):
            return self.getTypedRuleContext(SQLParser.TableRefContext,0)


        def usePartition(self):
            return self.getTypedRuleContext(SQLParser.UsePartitionContext,0)


        def tableAlias(self):
            return self.getTypedRuleContext(SQLParser.TableAliasContext,0)


        def indexHintList(self):
            return self.getTypedRuleContext(SQLParser.IndexHintListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_singleTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleTable" ):
                listener.enterSingleTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleTable" ):
                listener.exitSingleTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleTable" ):
                return visitor.visitSingleTable(self)
            else:
                return visitor.visitChildren(self)




    def singleTable(self):

        localctx = SQLParser.SingleTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_singleTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3404
            self.tableRef()
            self.state = 3406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,362,self._ctx)
            if la_ == 1:
                self.state = 3405
                self.usePartition()


            self.state = 3409
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
            if la_ == 1:
                self.state = 3408
                self.tableAlias()


            self.state = 3412
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,364,self._ctx)
            if la_ == 1:
                self.state = 3411
                self.indexHintList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableParensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def singleTable(self):
            return self.getTypedRuleContext(SQLParser.SingleTableContext,0)


        def singleTableParens(self):
            return self.getTypedRuleContext(SQLParser.SingleTableParensContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_singleTableParens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleTableParens" ):
                listener.enterSingleTableParens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleTableParens" ):
                listener.exitSingleTableParens(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleTableParens" ):
                return visitor.visitSingleTableParens(self)
            else:
                return visitor.visitChildren(self)




    def singleTableParens(self):

        localctx = SQLParser.SingleTableParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_singleTableParens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3414
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 3417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
            if la_ == 1:
                self.state = 3415
                self.singleTable()
                pass

            elif la_ == 2:
                self.state = 3416
                self.singleTableParens()
                pass


            self.state = 3419
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DerivedTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(SQLParser.SubqueryContext,0)


        def tableAlias(self):
            return self.getTypedRuleContext(SQLParser.TableAliasContext,0)


        def columnInternalRefList(self):
            return self.getTypedRuleContext(SQLParser.ColumnInternalRefListContext,0)


        def LATERAL_SYMBOL(self):
            return self.getToken(SQLParser.LATERAL_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_derivedTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDerivedTable" ):
                listener.enterDerivedTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDerivedTable" ):
                listener.exitDerivedTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDerivedTable" ):
                return visitor.visitDerivedTable(self)
            else:
                return visitor.visitChildren(self)




    def derivedTable(self):

        localctx = SQLParser.DerivedTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_derivedTable)
        try:
            self.state = 3438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,370,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3421
                self.subquery()
                self.state = 3423
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,366,self._ctx)
                if la_ == 1:
                    self.state = 3422
                    self.tableAlias()


                self.state = 3427
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,367,self._ctx)
                if la_ == 1:
                    self.state = 3425
                    if not self.serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80000")
                    self.state = 3426
                    self.columnInternalRefList()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3429
                if not self.serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80014")
                self.state = 3430
                self.match(SQLParser.LATERAL_SYMBOL)
                self.state = 3431
                self.subquery()
                self.state = 3433
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
                if la_ == 1:
                    self.state = 3432
                    self.tableAlias()


                self.state = 3436
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,369,self._ctx)
                if la_ == 1:
                    self.state = 3435
                    self.columnInternalRefList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableReferenceListParensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def tableReferenceList(self):
            return self.getTypedRuleContext(SQLParser.TableReferenceListContext,0)


        def tableReferenceListParens(self):
            return self.getTypedRuleContext(SQLParser.TableReferenceListParensContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_tableReferenceListParens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableReferenceListParens" ):
                listener.enterTableReferenceListParens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableReferenceListParens" ):
                listener.exitTableReferenceListParens(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableReferenceListParens" ):
                return visitor.visitTableReferenceListParens(self)
            else:
                return visitor.visitChildren(self)




    def tableReferenceListParens(self):

        localctx = SQLParser.TableReferenceListParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_tableReferenceListParens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3440
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 3443
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
            if la_ == 1:
                self.state = 3441
                self.tableReferenceList()
                pass

            elif la_ == 2:
                self.state = 3442
                self.tableReferenceListParens()
                pass


            self.state = 3445
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_TABLE_SYMBOL(self):
            return self.getToken(SQLParser.JSON_TABLE_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def COMMA_SYMBOL(self):
            return self.getToken(SQLParser.COMMA_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextStringLiteralContext,0)


        def columnsClause(self):
            return self.getTypedRuleContext(SQLParser.ColumnsClauseContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def tableAlias(self):
            return self.getTypedRuleContext(SQLParser.TableAliasContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_tableFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFunction" ):
                listener.enterTableFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFunction" ):
                listener.exitTableFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFunction" ):
                return visitor.visitTableFunction(self)
            else:
                return visitor.visitChildren(self)




    def tableFunction(self):

        localctx = SQLParser.TableFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_tableFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3447
            self.match(SQLParser.JSON_TABLE_SYMBOL)
            self.state = 3448
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 3449
            self.expr(0)
            self.state = 3450
            self.match(SQLParser.COMMA_SYMBOL)
            self.state = 3451
            self.textStringLiteral()
            self.state = 3452
            self.columnsClause()
            self.state = 3453
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
            self.state = 3455
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,372,self._ctx)
            if la_ == 1:
                self.state = 3454
                self.tableAlias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLUMNS_SYMBOL(self):
            return self.getToken(SQLParser.COLUMNS_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def jtColumn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.JtColumnContext)
            else:
                return self.getTypedRuleContext(SQLParser.JtColumnContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_columnsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnsClause" ):
                listener.enterColumnsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnsClause" ):
                listener.exitColumnsClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnsClause" ):
                return visitor.visitColumnsClause(self)
            else:
                return visitor.visitChildren(self)




    def columnsClause(self):

        localctx = SQLParser.ColumnsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_columnsClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3457
            self.match(SQLParser.COLUMNS_SYMBOL)
            self.state = 3458
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 3459
            self.jtColumn()
            self.state = 3464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 3460
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 3461
                self.jtColumn()
                self.state = 3466
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3467
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JtColumnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def FOR_SYMBOL(self):
            return self.getToken(SQLParser.FOR_SYMBOL, 0)

        def ORDINALITY_SYMBOL(self):
            return self.getToken(SQLParser.ORDINALITY_SYMBOL, 0)

        def dataType(self):
            return self.getTypedRuleContext(SQLParser.DataTypeContext,0)


        def PATH_SYMBOL(self):
            return self.getToken(SQLParser.PATH_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextStringLiteralContext,0)


        def collate(self):
            return self.getTypedRuleContext(SQLParser.CollateContext,0)


        def EXISTS_SYMBOL(self):
            return self.getToken(SQLParser.EXISTS_SYMBOL, 0)

        def onEmptyOrError(self):
            return self.getTypedRuleContext(SQLParser.OnEmptyOrErrorContext,0)


        def NESTED_SYMBOL(self):
            return self.getToken(SQLParser.NESTED_SYMBOL, 0)

        def columnsClause(self):
            return self.getTypedRuleContext(SQLParser.ColumnsClauseContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_jtColumn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJtColumn" ):
                listener.enterJtColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJtColumn" ):
                listener.exitJtColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJtColumn" ):
                return visitor.visitJtColumn(self)
            else:
                return visitor.visitChildren(self)




    def jtColumn(self):

        localctx = SQLParser.JtColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_jtColumn)
        self._la = 0 # Token type
        try:
            self.state = 3492
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,377,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3469
                self.identifier()
                self.state = 3470
                self.match(SQLParser.FOR_SYMBOL)
                self.state = 3471
                self.match(SQLParser.ORDINALITY_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3473
                self.identifier()
                self.state = 3474
                self.dataType()
                self.state = 3477
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
                if la_ == 1:
                    self.state = 3475
                    if not self.serverVersion >= 80014:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80014")
                    self.state = 3476
                    self.collate()


                self.state = 3480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.EXISTS_SYMBOL:
                    self.state = 3479
                    self.match(SQLParser.EXISTS_SYMBOL)


                self.state = 3482
                self.match(SQLParser.PATH_SYMBOL)
                self.state = 3483
                self.textStringLiteral()
                self.state = 3485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.DEFAULT_SYMBOL or _la==SQLParser.ERROR_SYMBOL or _la==SQLParser.NULL_SYMBOL:
                    self.state = 3484
                    self.onEmptyOrError()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3487
                self.match(SQLParser.NESTED_SYMBOL)
                self.state = 3488
                self.match(SQLParser.PATH_SYMBOL)
                self.state = 3489
                self.textStringLiteral()
                self.state = 3490
                self.columnsClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnEmptyOrErrorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def onEmpty(self):
            return self.getTypedRuleContext(SQLParser.OnEmptyContext,0)


        def onError(self):
            return self.getTypedRuleContext(SQLParser.OnErrorContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_onEmptyOrError

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnEmptyOrError" ):
                listener.enterOnEmptyOrError(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnEmptyOrError" ):
                listener.exitOnEmptyOrError(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOnEmptyOrError" ):
                return visitor.visitOnEmptyOrError(self)
            else:
                return visitor.visitChildren(self)




    def onEmptyOrError(self):

        localctx = SQLParser.OnEmptyOrErrorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_onEmptyOrError)
        self._la = 0 # Token type
        try:
            self.state = 3502
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,380,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3494
                self.onEmpty()
                self.state = 3496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.DEFAULT_SYMBOL or _la==SQLParser.ERROR_SYMBOL or _la==SQLParser.NULL_SYMBOL:
                    self.state = 3495
                    self.onError()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3498
                self.onError()
                self.state = 3500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.DEFAULT_SYMBOL or _la==SQLParser.ERROR_SYMBOL or _la==SQLParser.NULL_SYMBOL:
                    self.state = 3499
                    self.onEmpty()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnEmptyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jtOnResponse(self):
            return self.getTypedRuleContext(SQLParser.JtOnResponseContext,0)


        def ON_SYMBOL(self):
            return self.getToken(SQLParser.ON_SYMBOL, 0)

        def EMPTY_SYMBOL(self):
            return self.getToken(SQLParser.EMPTY_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_onEmpty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnEmpty" ):
                listener.enterOnEmpty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnEmpty" ):
                listener.exitOnEmpty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOnEmpty" ):
                return visitor.visitOnEmpty(self)
            else:
                return visitor.visitChildren(self)




    def onEmpty(self):

        localctx = SQLParser.OnEmptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_onEmpty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3504
            self.jtOnResponse()
            self.state = 3505
            self.match(SQLParser.ON_SYMBOL)
            self.state = 3506
            self.match(SQLParser.EMPTY_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnErrorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jtOnResponse(self):
            return self.getTypedRuleContext(SQLParser.JtOnResponseContext,0)


        def ON_SYMBOL(self):
            return self.getToken(SQLParser.ON_SYMBOL, 0)

        def ERROR_SYMBOL(self):
            return self.getToken(SQLParser.ERROR_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_onError

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnError" ):
                listener.enterOnError(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnError" ):
                listener.exitOnError(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOnError" ):
                return visitor.visitOnError(self)
            else:
                return visitor.visitChildren(self)




    def onError(self):

        localctx = SQLParser.OnErrorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_onError)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3508
            self.jtOnResponse()
            self.state = 3509
            self.match(SQLParser.ON_SYMBOL)
            self.state = 3510
            self.match(SQLParser.ERROR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JtOnResponseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR_SYMBOL(self):
            return self.getToken(SQLParser.ERROR_SYMBOL, 0)

        def NULL_SYMBOL(self):
            return self.getToken(SQLParser.NULL_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(SQLParser.DEFAULT_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_jtOnResponse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJtOnResponse" ):
                listener.enterJtOnResponse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJtOnResponse" ):
                listener.exitJtOnResponse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJtOnResponse" ):
                return visitor.visitJtOnResponse(self)
            else:
                return visitor.visitChildren(self)




    def jtOnResponse(self):

        localctx = SQLParser.JtOnResponseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_jtOnResponse)
        try:
            self.state = 3516
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.ERROR_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3512
                self.match(SQLParser.ERROR_SYMBOL)
                pass
            elif token in [SQLParser.NULL_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3513
                self.match(SQLParser.NULL_SYMBOL)
                pass
            elif token in [SQLParser.DEFAULT_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3514
                self.match(SQLParser.DEFAULT_SYMBOL)
                self.state = 3515
                self.textStringLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT_SYMBOL(self):
            return self.getToken(SQLParser.DISTINCT_SYMBOL, 0)

        def ALL_SYMBOL(self):
            return self.getToken(SQLParser.ALL_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_unionOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionOption" ):
                listener.enterUnionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionOption" ):
                listener.exitUnionOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionOption" ):
                return visitor.visitUnionOption(self)
            else:
                return visitor.visitChildren(self)




    def unionOption(self):

        localctx = SQLParser.UnionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_unionOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3518
            _la = self._input.LA(1)
            if not(_la==SQLParser.ALL_SYMBOL or _la==SQLParser.DISTINCT_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def AS_SYMBOL(self):
            return self.getToken(SQLParser.AS_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_tableAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableAlias" ):
                listener.enterTableAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableAlias" ):
                listener.exitTableAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableAlias" ):
                return visitor.visitTableAlias(self)
            else:
                return visitor.visitChildren(self)




    def tableAlias(self):

        localctx = SQLParser.TableAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_tableAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3523
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
            if la_ == 1:
                self.state = 3520
                self.match(SQLParser.AS_SYMBOL)

            elif la_ == 2:
                self.state = 3521
                if not self.serverVersion < 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 80017")
                self.state = 3522
                self.match(SQLParser.EQUAL_OPERATOR)


            self.state = 3525
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexHintListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexHint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.IndexHintContext)
            else:
                return self.getTypedRuleContext(SQLParser.IndexHintContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_indexHintList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexHintList" ):
                listener.enterIndexHintList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexHintList" ):
                listener.exitIndexHintList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexHintList" ):
                return visitor.visitIndexHintList(self)
            else:
                return visitor.visitChildren(self)




    def indexHintList(self):

        localctx = SQLParser.IndexHintListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_indexHintList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3527
            self.indexHint()
            self.state = 3532
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,383,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3528
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 3529
                    self.indexHint() 
                self.state = 3534
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,383,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexHintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexHintType(self):
            return self.getTypedRuleContext(SQLParser.IndexHintTypeContext,0)


        def keyOrIndex(self):
            return self.getTypedRuleContext(SQLParser.KeyOrIndexContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def indexList(self):
            return self.getTypedRuleContext(SQLParser.IndexListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def indexHintClause(self):
            return self.getTypedRuleContext(SQLParser.IndexHintClauseContext,0)


        def USE_SYMBOL(self):
            return self.getToken(SQLParser.USE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_indexHint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexHint" ):
                listener.enterIndexHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexHint" ):
                listener.exitIndexHint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexHint" ):
                return visitor.visitIndexHint(self)
            else:
                return visitor.visitChildren(self)




    def indexHint(self):

        localctx = SQLParser.IndexHintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_indexHint)
        self._la = 0 # Token type
        try:
            self.state = 3555
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.FORCE_SYMBOL, SQLParser.IGNORE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3535
                self.indexHintType()
                self.state = 3536
                self.keyOrIndex()
                self.state = 3538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.FOR_SYMBOL:
                    self.state = 3537
                    self.indexHintClause()


                self.state = 3540
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 3541
                self.indexList()
                self.state = 3542
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [SQLParser.USE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3544
                self.match(SQLParser.USE_SYMBOL)
                self.state = 3545
                self.keyOrIndex()
                self.state = 3547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.FOR_SYMBOL:
                    self.state = 3546
                    self.indexHintClause()


                self.state = 3549
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 3551
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,386,self._ctx)
                if la_ == 1:
                    self.state = 3550
                    self.indexList()


                self.state = 3553
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexHintTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORCE_SYMBOL(self):
            return self.getToken(SQLParser.FORCE_SYMBOL, 0)

        def IGNORE_SYMBOL(self):
            return self.getToken(SQLParser.IGNORE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_indexHintType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexHintType" ):
                listener.enterIndexHintType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexHintType" ):
                listener.exitIndexHintType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexHintType" ):
                return visitor.visitIndexHintType(self)
            else:
                return visitor.visitChildren(self)




    def indexHintType(self):

        localctx = SQLParser.IndexHintTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_indexHintType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3557
            _la = self._input.LA(1)
            if not(_la==SQLParser.FORCE_SYMBOL or _la==SQLParser.IGNORE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyOrIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEY_SYMBOL(self):
            return self.getToken(SQLParser.KEY_SYMBOL, 0)

        def INDEX_SYMBOL(self):
            return self.getToken(SQLParser.INDEX_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_keyOrIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyOrIndex" ):
                listener.enterKeyOrIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyOrIndex" ):
                listener.exitKeyOrIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyOrIndex" ):
                return visitor.visitKeyOrIndex(self)
            else:
                return visitor.visitChildren(self)




    def keyOrIndex(self):

        localctx = SQLParser.KeyOrIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_keyOrIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3559
            _la = self._input.LA(1)
            if not(_la==SQLParser.INDEX_SYMBOL or _la==SQLParser.KEY_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintKeyTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIMARY_SYMBOL(self):
            return self.getToken(SQLParser.PRIMARY_SYMBOL, 0)

        def KEY_SYMBOL(self):
            return self.getToken(SQLParser.KEY_SYMBOL, 0)

        def UNIQUE_SYMBOL(self):
            return self.getToken(SQLParser.UNIQUE_SYMBOL, 0)

        def keyOrIndex(self):
            return self.getTypedRuleContext(SQLParser.KeyOrIndexContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_constraintKeyType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintKeyType" ):
                listener.enterConstraintKeyType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintKeyType" ):
                listener.exitConstraintKeyType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstraintKeyType" ):
                return visitor.visitConstraintKeyType(self)
            else:
                return visitor.visitChildren(self)




    def constraintKeyType(self):

        localctx = SQLParser.ConstraintKeyTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_constraintKeyType)
        self._la = 0 # Token type
        try:
            self.state = 3567
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.PRIMARY_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3561
                self.match(SQLParser.PRIMARY_SYMBOL)
                self.state = 3562
                self.match(SQLParser.KEY_SYMBOL)
                pass
            elif token in [SQLParser.UNIQUE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3563
                self.match(SQLParser.UNIQUE_SYMBOL)
                self.state = 3565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.INDEX_SYMBOL or _la==SQLParser.KEY_SYMBOL:
                    self.state = 3564
                    self.keyOrIndex()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexHintClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR_SYMBOL(self):
            return self.getToken(SQLParser.FOR_SYMBOL, 0)

        def JOIN_SYMBOL(self):
            return self.getToken(SQLParser.JOIN_SYMBOL, 0)

        def ORDER_SYMBOL(self):
            return self.getToken(SQLParser.ORDER_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(SQLParser.BY_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(SQLParser.GROUP_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_indexHintClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexHintClause" ):
                listener.enterIndexHintClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexHintClause" ):
                listener.exitIndexHintClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexHintClause" ):
                return visitor.visitIndexHintClause(self)
            else:
                return visitor.visitChildren(self)




    def indexHintClause(self):

        localctx = SQLParser.IndexHintClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_indexHintClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3569
            self.match(SQLParser.FOR_SYMBOL)
            self.state = 3575
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.JOIN_SYMBOL]:
                self.state = 3570
                self.match(SQLParser.JOIN_SYMBOL)
                pass
            elif token in [SQLParser.ORDER_SYMBOL]:
                self.state = 3571
                self.match(SQLParser.ORDER_SYMBOL)
                self.state = 3572
                self.match(SQLParser.BY_SYMBOL)
                pass
            elif token in [SQLParser.GROUP_SYMBOL]:
                self.state = 3573
                self.match(SQLParser.GROUP_SYMBOL)
                self.state = 3574
                self.match(SQLParser.BY_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexListElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.IndexListElementContext)
            else:
                return self.getTypedRuleContext(SQLParser.IndexListElementContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_indexList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexList" ):
                listener.enterIndexList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexList" ):
                listener.exitIndexList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexList" ):
                return visitor.visitIndexList(self)
            else:
                return visitor.visitChildren(self)




    def indexList(self):

        localctx = SQLParser.IndexListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_indexList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3577
            self.indexListElement()
            self.state = 3582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 3578
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 3579
                self.indexListElement()
                self.state = 3584
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexListElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def PRIMARY_SYMBOL(self):
            return self.getToken(SQLParser.PRIMARY_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_indexListElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexListElement" ):
                listener.enterIndexListElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexListElement" ):
                listener.exitIndexListElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexListElement" ):
                return visitor.visitIndexListElement(self)
            else:
                return visitor.visitChildren(self)




    def indexListElement(self):

        localctx = SQLParser.IndexListElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_indexListElement)
        try:
            self.state = 3587
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,392,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3585
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3586
                self.match(SQLParser.PRIMARY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_SYMBOL(self):
            return self.getToken(SQLParser.UPDATE_SYMBOL, 0)

        def tableReferenceList(self):
            return self.getTypedRuleContext(SQLParser.TableReferenceListContext,0)


        def SET_SYMBOL(self):
            return self.getToken(SQLParser.SET_SYMBOL, 0)

        def updateList(self):
            return self.getTypedRuleContext(SQLParser.UpdateListContext,0)


        def withClause(self):
            return self.getTypedRuleContext(SQLParser.WithClauseContext,0)


        def LOW_PRIORITY_SYMBOL(self):
            return self.getToken(SQLParser.LOW_PRIORITY_SYMBOL, 0)

        def IGNORE_SYMBOL(self):
            return self.getToken(SQLParser.IGNORE_SYMBOL, 0)

        def whereClause(self):
            return self.getTypedRuleContext(SQLParser.WhereClauseContext,0)


        def orderClause(self):
            return self.getTypedRuleContext(SQLParser.OrderClauseContext,0)


        def simpleLimitClause(self):
            return self.getTypedRuleContext(SQLParser.SimpleLimitClauseContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_updateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateStatement" ):
                listener.enterUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateStatement" ):
                listener.exitUpdateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdateStatement" ):
                return visitor.visitUpdateStatement(self)
            else:
                return visitor.visitChildren(self)




    def updateStatement(self):

        localctx = SQLParser.UpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_updateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3591
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,393,self._ctx)
            if la_ == 1:
                self.state = 3589
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 3590
                self.withClause()


            self.state = 3593
            self.match(SQLParser.UPDATE_SYMBOL)
            self.state = 3595
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,394,self._ctx)
            if la_ == 1:
                self.state = 3594
                self.match(SQLParser.LOW_PRIORITY_SYMBOL)


            self.state = 3598
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,395,self._ctx)
            if la_ == 1:
                self.state = 3597
                self.match(SQLParser.IGNORE_SYMBOL)


            self.state = 3600
            self.tableReferenceList()
            self.state = 3601
            self.match(SQLParser.SET_SYMBOL)
            self.state = 3602
            self.updateList()
            self.state = 3604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.WHERE_SYMBOL:
                self.state = 3603
                self.whereClause()


            self.state = 3607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.ORDER_SYMBOL:
                self.state = 3606
                self.orderClause()


            self.state = 3610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.LIMIT_SYMBOL:
                self.state = 3609
                self.simpleLimitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionOrLockingStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transactionStatement(self):
            return self.getTypedRuleContext(SQLParser.TransactionStatementContext,0)


        def savepointStatement(self):
            return self.getTypedRuleContext(SQLParser.SavepointStatementContext,0)


        def lockStatement(self):
            return self.getTypedRuleContext(SQLParser.LockStatementContext,0)


        def xaStatement(self):
            return self.getTypedRuleContext(SQLParser.XaStatementContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_transactionOrLockingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionOrLockingStatement" ):
                listener.enterTransactionOrLockingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionOrLockingStatement" ):
                listener.exitTransactionOrLockingStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransactionOrLockingStatement" ):
                return visitor.visitTransactionOrLockingStatement(self)
            else:
                return visitor.visitChildren(self)




    def transactionOrLockingStatement(self):

        localctx = SQLParser.TransactionOrLockingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_transactionOrLockingStatement)
        try:
            self.state = 3616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,399,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3612
                self.transactionStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3613
                self.savepointStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3614
                self.lockStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3615
                self.xaStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START_SYMBOL(self):
            return self.getToken(SQLParser.START_SYMBOL, 0)

        def TRANSACTION_SYMBOL(self):
            return self.getToken(SQLParser.TRANSACTION_SYMBOL, 0)

        def transactionCharacteristic(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.TransactionCharacteristicContext)
            else:
                return self.getTypedRuleContext(SQLParser.TransactionCharacteristicContext,i)


        def COMMIT_SYMBOL(self):
            return self.getToken(SQLParser.COMMIT_SYMBOL, 0)

        def WORK_SYMBOL(self):
            return self.getToken(SQLParser.WORK_SYMBOL, 0)

        def AND_SYMBOL(self):
            return self.getToken(SQLParser.AND_SYMBOL, 0)

        def CHAIN_SYMBOL(self):
            return self.getToken(SQLParser.CHAIN_SYMBOL, 0)

        def RELEASE_SYMBOL(self):
            return self.getToken(SQLParser.RELEASE_SYMBOL, 0)

        def NO_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.NO_SYMBOL)
            else:
                return self.getToken(SQLParser.NO_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_transactionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionStatement" ):
                listener.enterTransactionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionStatement" ):
                listener.exitTransactionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransactionStatement" ):
                return visitor.visitTransactionStatement(self)
            else:
                return visitor.visitChildren(self)




    def transactionStatement(self):

        localctx = SQLParser.TransactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_transactionStatement)
        self._la = 0 # Token type
        try:
            self.state = 3643
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.START_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3618
                self.match(SQLParser.START_SYMBOL)
                self.state = 3619
                self.match(SQLParser.TRANSACTION_SYMBOL)
                self.state = 3623
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,400,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3620
                        self.transactionCharacteristic() 
                    self.state = 3625
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,400,self._ctx)

                pass
            elif token in [SQLParser.COMMIT_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3626
                self.match(SQLParser.COMMIT_SYMBOL)
                self.state = 3628
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.WORK_SYMBOL:
                    self.state = 3627
                    self.match(SQLParser.WORK_SYMBOL)


                self.state = 3635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.AND_SYMBOL:
                    self.state = 3630
                    self.match(SQLParser.AND_SYMBOL)
                    self.state = 3632
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.NO_SYMBOL:
                        self.state = 3631
                        self.match(SQLParser.NO_SYMBOL)


                    self.state = 3634
                    self.match(SQLParser.CHAIN_SYMBOL)


                self.state = 3641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.NO_SYMBOL or _la==SQLParser.RELEASE_SYMBOL:
                    self.state = 3638
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.NO_SYMBOL:
                        self.state = 3637
                        self.match(SQLParser.NO_SYMBOL)


                    self.state = 3640
                    self.match(SQLParser.RELEASE_SYMBOL)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeginWorkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN_SYMBOL(self):
            return self.getToken(SQLParser.BEGIN_SYMBOL, 0)

        def WORK_SYMBOL(self):
            return self.getToken(SQLParser.WORK_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_beginWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeginWork" ):
                listener.enterBeginWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeginWork" ):
                listener.exitBeginWork(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeginWork" ):
                return visitor.visitBeginWork(self)
            else:
                return visitor.visitChildren(self)




    def beginWork(self):

        localctx = SQLParser.BeginWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_beginWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3645
            self.match(SQLParser.BEGIN_SYMBOL)
            self.state = 3647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.WORK_SYMBOL:
                self.state = 3646
                self.match(SQLParser.WORK_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionCharacteristicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_SYMBOL(self):
            return self.getToken(SQLParser.WITH_SYMBOL, 0)

        def CONSISTENT_SYMBOL(self):
            return self.getToken(SQLParser.CONSISTENT_SYMBOL, 0)

        def SNAPSHOT_SYMBOL(self):
            return self.getToken(SQLParser.SNAPSHOT_SYMBOL, 0)

        def READ_SYMBOL(self):
            return self.getToken(SQLParser.READ_SYMBOL, 0)

        def WRITE_SYMBOL(self):
            return self.getToken(SQLParser.WRITE_SYMBOL, 0)

        def ONLY_SYMBOL(self):
            return self.getToken(SQLParser.ONLY_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_transactionCharacteristic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionCharacteristic" ):
                listener.enterTransactionCharacteristic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionCharacteristic" ):
                listener.exitTransactionCharacteristic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransactionCharacteristic" ):
                return visitor.visitTransactionCharacteristic(self)
            else:
                return visitor.visitChildren(self)




    def transactionCharacteristic(self):

        localctx = SQLParser.TransactionCharacteristicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_transactionCharacteristic)
        self._la = 0 # Token type
        try:
            self.state = 3655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,408,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3649
                self.match(SQLParser.WITH_SYMBOL)
                self.state = 3650
                self.match(SQLParser.CONSISTENT_SYMBOL)
                self.state = 3651
                self.match(SQLParser.SNAPSHOT_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3652
                if not self.serverVersion >= 50605:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50605")
                self.state = 3653
                self.match(SQLParser.READ_SYMBOL)
                self.state = 3654
                _la = self._input.LA(1)
                if not(_la==SQLParser.ONLY_SYMBOL or _la==SQLParser.WRITE_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SavepointStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVEPOINT_SYMBOL(self):
            return self.getToken(SQLParser.SAVEPOINT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def ROLLBACK_SYMBOL(self):
            return self.getToken(SQLParser.ROLLBACK_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(SQLParser.TO_SYMBOL, 0)

        def WORK_SYMBOL(self):
            return self.getToken(SQLParser.WORK_SYMBOL, 0)

        def AND_SYMBOL(self):
            return self.getToken(SQLParser.AND_SYMBOL, 0)

        def CHAIN_SYMBOL(self):
            return self.getToken(SQLParser.CHAIN_SYMBOL, 0)

        def RELEASE_SYMBOL(self):
            return self.getToken(SQLParser.RELEASE_SYMBOL, 0)

        def NO_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.NO_SYMBOL)
            else:
                return self.getToken(SQLParser.NO_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_savepointStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepointStatement" ):
                listener.enterSavepointStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepointStatement" ):
                listener.exitSavepointStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSavepointStatement" ):
                return visitor.visitSavepointStatement(self)
            else:
                return visitor.visitChildren(self)




    def savepointStatement(self):

        localctx = SQLParser.SavepointStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_savepointStatement)
        self._la = 0 # Token type
        try:
            self.state = 3686
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.SAVEPOINT_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3657
                self.match(SQLParser.SAVEPOINT_SYMBOL)
                self.state = 3658
                self.identifier()
                pass
            elif token in [SQLParser.ROLLBACK_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3659
                self.match(SQLParser.ROLLBACK_SYMBOL)
                self.state = 3661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.WORK_SYMBOL:
                    self.state = 3660
                    self.match(SQLParser.WORK_SYMBOL)


                self.state = 3681
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLParser.TO_SYMBOL]:
                    self.state = 3663
                    self.match(SQLParser.TO_SYMBOL)
                    self.state = 3665
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,410,self._ctx)
                    if la_ == 1:
                        self.state = 3664
                        self.match(SQLParser.SAVEPOINT_SYMBOL)


                    self.state = 3667
                    self.identifier()
                    pass
                elif token in [SQLParser.EOF, SQLParser.AND_SYMBOL, SQLParser.NO_SYMBOL, SQLParser.RELEASE_SYMBOL, SQLParser.SEMICOLON_SYMBOL]:
                    self.state = 3673
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.AND_SYMBOL:
                        self.state = 3668
                        self.match(SQLParser.AND_SYMBOL)
                        self.state = 3670
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SQLParser.NO_SYMBOL:
                            self.state = 3669
                            self.match(SQLParser.NO_SYMBOL)


                        self.state = 3672
                        self.match(SQLParser.CHAIN_SYMBOL)


                    self.state = 3679
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.NO_SYMBOL or _la==SQLParser.RELEASE_SYMBOL:
                        self.state = 3676
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SQLParser.NO_SYMBOL:
                            self.state = 3675
                            self.match(SQLParser.NO_SYMBOL)


                        self.state = 3678
                        self.match(SQLParser.RELEASE_SYMBOL)


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [SQLParser.RELEASE_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3683
                self.match(SQLParser.RELEASE_SYMBOL)
                self.state = 3684
                self.match(SQLParser.SAVEPOINT_SYMBOL)
                self.state = 3685
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK_SYMBOL(self):
            return self.getToken(SQLParser.LOCK_SYMBOL, 0)

        def lockItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.LockItemContext)
            else:
                return self.getTypedRuleContext(SQLParser.LockItemContext,i)


        def TABLES_SYMBOL(self):
            return self.getToken(SQLParser.TABLES_SYMBOL, 0)

        def TABLE_SYMBOL(self):
            return self.getToken(SQLParser.TABLE_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def INSTANCE_SYMBOL(self):
            return self.getToken(SQLParser.INSTANCE_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(SQLParser.FOR_SYMBOL, 0)

        def BACKUP_SYMBOL(self):
            return self.getToken(SQLParser.BACKUP_SYMBOL, 0)

        def UNLOCK_SYMBOL(self):
            return self.getToken(SQLParser.UNLOCK_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_lockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockStatement" ):
                listener.enterLockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockStatement" ):
                listener.exitLockStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLockStatement" ):
                return visitor.visitLockStatement(self)
            else:
                return visitor.visitChildren(self)




    def lockStatement(self):

        localctx = SQLParser.LockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_lockStatement)
        self._la = 0 # Token type
        try:
            self.state = 3710
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,419,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3688
                self.match(SQLParser.LOCK_SYMBOL)
                self.state = 3689
                _la = self._input.LA(1)
                if not(_la==SQLParser.TABLES_SYMBOL or _la==SQLParser.TABLE_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3690
                self.lockItem()
                self.state = 3695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLParser.COMMA_SYMBOL:
                    self.state = 3691
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 3692
                    self.lockItem()
                    self.state = 3697
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3698
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 3699
                self.match(SQLParser.LOCK_SYMBOL)
                self.state = 3700
                self.match(SQLParser.INSTANCE_SYMBOL)
                self.state = 3701
                self.match(SQLParser.FOR_SYMBOL)
                self.state = 3702
                self.match(SQLParser.BACKUP_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3703
                self.match(SQLParser.UNLOCK_SYMBOL)
                self.state = 3708
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,418,self._ctx)
                if la_ == 1:
                    self.state = 3704
                    self.match(SQLParser.TABLES_SYMBOL)
                    pass

                elif la_ == 2:
                    self.state = 3705
                    self.match(SQLParser.TABLE_SYMBOL)
                    pass

                elif la_ == 3:
                    self.state = 3706
                    if not self.serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80000")
                    self.state = 3707
                    self.match(SQLParser.INSTANCE_SYMBOL)
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRef(self):
            return self.getTypedRuleContext(SQLParser.TableRefContext,0)


        def lockOption(self):
            return self.getTypedRuleContext(SQLParser.LockOptionContext,0)


        def tableAlias(self):
            return self.getTypedRuleContext(SQLParser.TableAliasContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_lockItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockItem" ):
                listener.enterLockItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockItem" ):
                listener.exitLockItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLockItem" ):
                return visitor.visitLockItem(self)
            else:
                return visitor.visitChildren(self)




    def lockItem(self):

        localctx = SQLParser.LockItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_lockItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3712
            self.tableRef()
            self.state = 3714
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,420,self._ctx)
            if la_ == 1:
                self.state = 3713
                self.tableAlias()


            self.state = 3716
            self.lockOption()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ_SYMBOL(self):
            return self.getToken(SQLParser.READ_SYMBOL, 0)

        def LOCAL_SYMBOL(self):
            return self.getToken(SQLParser.LOCAL_SYMBOL, 0)

        def WRITE_SYMBOL(self):
            return self.getToken(SQLParser.WRITE_SYMBOL, 0)

        def LOW_PRIORITY_SYMBOL(self):
            return self.getToken(SQLParser.LOW_PRIORITY_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_lockOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockOption" ):
                listener.enterLockOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockOption" ):
                listener.exitLockOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLockOption" ):
                return visitor.visitLockOption(self)
            else:
                return visitor.visitChildren(self)




    def lockOption(self):

        localctx = SQLParser.LockOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_lockOption)
        self._la = 0 # Token type
        try:
            self.state = 3726
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.READ_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3718
                self.match(SQLParser.READ_SYMBOL)
                self.state = 3720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.LOCAL_SYMBOL:
                    self.state = 3719
                    self.match(SQLParser.LOCAL_SYMBOL)


                pass
            elif token in [SQLParser.LOW_PRIORITY_SYMBOL, SQLParser.WRITE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.LOW_PRIORITY_SYMBOL:
                    self.state = 3722
                    self.match(SQLParser.LOW_PRIORITY_SYMBOL)


                self.state = 3725
                self.match(SQLParser.WRITE_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA_SYMBOL(self):
            return self.getToken(SQLParser.XA_SYMBOL, 0)

        def xid(self):
            return self.getTypedRuleContext(SQLParser.XidContext,0)


        def END_SYMBOL(self):
            return self.getToken(SQLParser.END_SYMBOL, 0)

        def PREPARE_SYMBOL(self):
            return self.getToken(SQLParser.PREPARE_SYMBOL, 0)

        def COMMIT_SYMBOL(self):
            return self.getToken(SQLParser.COMMIT_SYMBOL, 0)

        def ROLLBACK_SYMBOL(self):
            return self.getToken(SQLParser.ROLLBACK_SYMBOL, 0)

        def RECOVER_SYMBOL(self):
            return self.getToken(SQLParser.RECOVER_SYMBOL, 0)

        def xaConvert(self):
            return self.getTypedRuleContext(SQLParser.XaConvertContext,0)


        def START_SYMBOL(self):
            return self.getToken(SQLParser.START_SYMBOL, 0)

        def BEGIN_SYMBOL(self):
            return self.getToken(SQLParser.BEGIN_SYMBOL, 0)

        def SUSPEND_SYMBOL(self):
            return self.getToken(SQLParser.SUSPEND_SYMBOL, 0)

        def ONE_SYMBOL(self):
            return self.getToken(SQLParser.ONE_SYMBOL, 0)

        def PHASE_SYMBOL(self):
            return self.getToken(SQLParser.PHASE_SYMBOL, 0)

        def JOIN_SYMBOL(self):
            return self.getToken(SQLParser.JOIN_SYMBOL, 0)

        def RESUME_SYMBOL(self):
            return self.getToken(SQLParser.RESUME_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(SQLParser.FOR_SYMBOL, 0)

        def MIGRATE_SYMBOL(self):
            return self.getToken(SQLParser.MIGRATE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_xaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaStatement" ):
                listener.enterXaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaStatement" ):
                listener.exitXaStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXaStatement" ):
                return visitor.visitXaStatement(self)
            else:
                return visitor.visitChildren(self)




    def xaStatement(self):

        localctx = SQLParser.XaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_xaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3728
            self.match(SQLParser.XA_SYMBOL)
            self.state = 3755
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.BEGIN_SYMBOL, SQLParser.START_SYMBOL]:
                self.state = 3729
                _la = self._input.LA(1)
                if not(_la==SQLParser.BEGIN_SYMBOL or _la==SQLParser.START_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3730
                self.xid()
                self.state = 3732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.JOIN_SYMBOL or _la==SQLParser.RESUME_SYMBOL:
                    self.state = 3731
                    _la = self._input.LA(1)
                    if not(_la==SQLParser.JOIN_SYMBOL or _la==SQLParser.RESUME_SYMBOL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [SQLParser.END_SYMBOL]:
                self.state = 3734
                self.match(SQLParser.END_SYMBOL)
                self.state = 3735
                self.xid()
                self.state = 3741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.SUSPEND_SYMBOL:
                    self.state = 3736
                    self.match(SQLParser.SUSPEND_SYMBOL)
                    self.state = 3739
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.FOR_SYMBOL:
                        self.state = 3737
                        self.match(SQLParser.FOR_SYMBOL)
                        self.state = 3738
                        self.match(SQLParser.MIGRATE_SYMBOL)




                pass
            elif token in [SQLParser.PREPARE_SYMBOL]:
                self.state = 3743
                self.match(SQLParser.PREPARE_SYMBOL)
                self.state = 3744
                self.xid()
                pass
            elif token in [SQLParser.COMMIT_SYMBOL]:
                self.state = 3745
                self.match(SQLParser.COMMIT_SYMBOL)
                self.state = 3746
                self.xid()
                self.state = 3749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.ONE_SYMBOL:
                    self.state = 3747
                    self.match(SQLParser.ONE_SYMBOL)
                    self.state = 3748
                    self.match(SQLParser.PHASE_SYMBOL)


                pass
            elif token in [SQLParser.ROLLBACK_SYMBOL]:
                self.state = 3751
                self.match(SQLParser.ROLLBACK_SYMBOL)
                self.state = 3752
                self.xid()
                pass
            elif token in [SQLParser.RECOVER_SYMBOL]:
                self.state = 3753
                self.match(SQLParser.RECOVER_SYMBOL)
                self.state = 3754
                self.xaConvert()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaConvertContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONVERT_SYMBOL(self):
            return self.getToken(SQLParser.CONVERT_SYMBOL, 0)

        def XID_SYMBOL(self):
            return self.getToken(SQLParser.XID_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_xaConvert

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaConvert" ):
                listener.enterXaConvert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaConvert" ):
                listener.exitXaConvert(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXaConvert" ):
                return visitor.visitXaConvert(self)
            else:
                return visitor.visitChildren(self)




    def xaConvert(self):

        localctx = SQLParser.XaConvertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_xaConvert)
        self._la = 0 # Token type
        try:
            self.state = 3763
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,430,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3757
                if not self.serverVersion >= 50704:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50704")
                self.state = 3760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.CONVERT_SYMBOL:
                    self.state = 3758
                    self.match(SQLParser.CONVERT_SYMBOL)
                    self.state = 3759
                    self.match(SQLParser.XID_SYMBOL)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.TextStringContext)
            else:
                return self.getTypedRuleContext(SQLParser.TextStringContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def ulong_number(self):
            return self.getTypedRuleContext(SQLParser.Ulong_numberContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_xid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXid" ):
                listener.enterXid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXid" ):
                listener.exitXid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXid" ):
                return visitor.visitXid(self)
            else:
                return visitor.visitChildren(self)




    def xid(self):

        localctx = SQLParser.XidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_xid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3765
            self.textString()
            self.state = 3772
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.COMMA_SYMBOL:
                self.state = 3766
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 3767
                self.textString()
                self.state = 3770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.COMMA_SYMBOL:
                    self.state = 3768
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 3769
                    self.ulong_number()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplicationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PURGE_SYMBOL(self):
            return self.getToken(SQLParser.PURGE_SYMBOL, 0)

        def LOGS_SYMBOL(self):
            return self.getToken(SQLParser.LOGS_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(SQLParser.BINARY_SYMBOL, 0)

        def MASTER_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(SQLParser.TO_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextLiteralContext,0)


        def BEFORE_SYMBOL(self):
            return self.getToken(SQLParser.BEFORE_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def changeMaster(self):
            return self.getTypedRuleContext(SQLParser.ChangeMasterContext,0)


        def RESET_SYMBOL(self):
            return self.getToken(SQLParser.RESET_SYMBOL, 0)

        def resetOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ResetOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.ResetOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def PERSIST_SYMBOL(self):
            return self.getToken(SQLParser.PERSIST_SYMBOL, 0)

        def ifExists(self):
            return self.getTypedRuleContext(SQLParser.IfExistsContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def slave(self):
            return self.getTypedRuleContext(SQLParser.SlaveContext,0)


        def changeReplication(self):
            return self.getTypedRuleContext(SQLParser.ChangeReplicationContext,0)


        def replicationLoad(self):
            return self.getTypedRuleContext(SQLParser.ReplicationLoadContext,0)


        def groupReplication(self):
            return self.getTypedRuleContext(SQLParser.GroupReplicationContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_replicationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplicationStatement" ):
                listener.enterReplicationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplicationStatement" ):
                listener.exitReplicationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplicationStatement" ):
                return visitor.visitReplicationStatement(self)
            else:
                return visitor.visitChildren(self)




    def replicationStatement(self):

        localctx = SQLParser.ReplicationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_replicationStatement)
        self._la = 0 # Token type
        try:
            self.state = 3807
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,436,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3774
                self.match(SQLParser.PURGE_SYMBOL)
                self.state = 3775
                _la = self._input.LA(1)
                if not(_la==SQLParser.BINARY_SYMBOL or _la==SQLParser.MASTER_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3776
                self.match(SQLParser.LOGS_SYMBOL)
                self.state = 3781
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLParser.TO_SYMBOL]:
                    self.state = 3777
                    self.match(SQLParser.TO_SYMBOL)
                    self.state = 3778
                    self.textLiteral()
                    pass
                elif token in [SQLParser.BEFORE_SYMBOL]:
                    self.state = 3779
                    self.match(SQLParser.BEFORE_SYMBOL)
                    self.state = 3780
                    self.expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3783
                self.changeMaster()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3784
                self.match(SQLParser.RESET_SYMBOL)
                self.state = 3785
                self.resetOption()
                self.state = 3790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLParser.COMMA_SYMBOL:
                    self.state = 3786
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 3787
                    self.resetOption()
                    self.state = 3792
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3793
                if not self.serverVersion > 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion > 80000")
                self.state = 3794
                self.match(SQLParser.RESET_SYMBOL)
                self.state = 3795
                self.match(SQLParser.PERSIST_SYMBOL)
                self.state = 3799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.IF_SYMBOL:
                    self.state = 3796
                    self.ifExists()
                    self.state = 3797
                    self.identifier()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3801
                self.slave()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3802
                if not self.serverVersion >= 50700:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50700")
                self.state = 3803
                self.changeReplication()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3804
                self.replicationLoad()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3805
                if not self.serverVersion > 50706:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion > 50706")
                self.state = 3806
                self.groupReplication()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResetOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.option = None # Token

        def MASTER_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SYMBOL, 0)

        def masterResetOptions(self):
            return self.getTypedRuleContext(SQLParser.MasterResetOptionsContext,0)


        def CACHE_SYMBOL(self):
            return self.getToken(SQLParser.CACHE_SYMBOL, 0)

        def QUERY_SYMBOL(self):
            return self.getToken(SQLParser.QUERY_SYMBOL, 0)

        def SLAVE_SYMBOL(self):
            return self.getToken(SQLParser.SLAVE_SYMBOL, 0)

        def ALL_SYMBOL(self):
            return self.getToken(SQLParser.ALL_SYMBOL, 0)

        def channel(self):
            return self.getTypedRuleContext(SQLParser.ChannelContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_resetOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetOption" ):
                listener.enterResetOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetOption" ):
                listener.exitResetOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetOption" ):
                return visitor.visitResetOption(self)
            else:
                return visitor.visitChildren(self)




    def resetOption(self):

        localctx = SQLParser.ResetOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_resetOption)
        try:
            self.state = 3823
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,440,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3809
                localctx.option = self.match(SQLParser.MASTER_SYMBOL)
                self.state = 3811
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,437,self._ctx)
                if la_ == 1:
                    self.state = 3810
                    self.masterResetOptions()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3813
                if not self.serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 80000")
                self.state = 3814
                localctx.option = self.match(SQLParser.QUERY_SYMBOL)
                self.state = 3815
                self.match(SQLParser.CACHE_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3816
                localctx.option = self.match(SQLParser.SLAVE_SYMBOL)
                self.state = 3818
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,438,self._ctx)
                if la_ == 1:
                    self.state = 3817
                    self.match(SQLParser.ALL_SYMBOL)


                self.state = 3821
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,439,self._ctx)
                if la_ == 1:
                    self.state = 3820
                    self.channel()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MasterResetOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO_SYMBOL(self):
            return self.getToken(SQLParser.TO_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(SQLParser.Real_ulong_numberContext,0)


        def real_ulonglong_number(self):
            return self.getTypedRuleContext(SQLParser.Real_ulonglong_numberContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_masterResetOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterResetOptions" ):
                listener.enterMasterResetOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterResetOptions" ):
                listener.exitMasterResetOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMasterResetOptions" ):
                return visitor.visitMasterResetOptions(self)
            else:
                return visitor.visitChildren(self)




    def masterResetOptions(self):

        localctx = SQLParser.MasterResetOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_masterResetOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3825
            if not self.serverVersion >= 80000:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.serverVersion >= 80000")
            self.state = 3826
            self.match(SQLParser.TO_SYMBOL)
            self.state = 3831
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,441,self._ctx)
            if la_ == 1:
                self.state = 3827
                if not self.serverVersion < 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 80017")
                self.state = 3828
                self.real_ulong_number()
                pass

            elif la_ == 2:
                self.state = 3829
                if not self.serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80017")
                self.state = 3830
                self.real_ulonglong_number()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplicationLoadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD_SYMBOL(self):
            return self.getToken(SQLParser.LOAD_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(SQLParser.FROM_SYMBOL, 0)

        def MASTER_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(SQLParser.DATA_SYMBOL, 0)

        def TABLE_SYMBOL(self):
            return self.getToken(SQLParser.TABLE_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(SQLParser.TableRefContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_replicationLoad

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplicationLoad" ):
                listener.enterReplicationLoad(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplicationLoad" ):
                listener.exitReplicationLoad(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplicationLoad" ):
                return visitor.visitReplicationLoad(self)
            else:
                return visitor.visitChildren(self)




    def replicationLoad(self):

        localctx = SQLParser.ReplicationLoadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_replicationLoad)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3833
            self.match(SQLParser.LOAD_SYMBOL)
            self.state = 3837
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.DATA_SYMBOL]:
                self.state = 3834
                self.match(SQLParser.DATA_SYMBOL)
                pass
            elif token in [SQLParser.TABLE_SYMBOL]:
                self.state = 3835
                self.match(SQLParser.TABLE_SYMBOL)
                self.state = 3836
                self.tableRef()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3839
            self.match(SQLParser.FROM_SYMBOL)
            self.state = 3840
            self.match(SQLParser.MASTER_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChangeMasterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE_SYMBOL(self):
            return self.getToken(SQLParser.CHANGE_SYMBOL, 0)

        def MASTER_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(SQLParser.TO_SYMBOL, 0)

        def changeMasterOptions(self):
            return self.getTypedRuleContext(SQLParser.ChangeMasterOptionsContext,0)


        def channel(self):
            return self.getTypedRuleContext(SQLParser.ChannelContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_changeMaster

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeMaster" ):
                listener.enterChangeMaster(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeMaster" ):
                listener.exitChangeMaster(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChangeMaster" ):
                return visitor.visitChangeMaster(self)
            else:
                return visitor.visitChildren(self)




    def changeMaster(self):

        localctx = SQLParser.ChangeMasterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_changeMaster)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3842
            self.match(SQLParser.CHANGE_SYMBOL)
            self.state = 3843
            self.match(SQLParser.MASTER_SYMBOL)
            self.state = 3844
            self.match(SQLParser.TO_SYMBOL)
            self.state = 3845
            self.changeMasterOptions()
            self.state = 3847
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,443,self._ctx)
            if la_ == 1:
                self.state = 3846
                self.channel()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChangeMasterOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def masterOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.MasterOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.MasterOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_changeMasterOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeMasterOptions" ):
                listener.enterChangeMasterOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeMasterOptions" ):
                listener.exitChangeMasterOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChangeMasterOptions" ):
                return visitor.visitChangeMasterOptions(self)
            else:
                return visitor.visitChildren(self)




    def changeMasterOptions(self):

        localctx = SQLParser.ChangeMasterOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_changeMasterOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3849
            self.masterOption()
            self.state = 3854
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,444,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3850
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 3851
                    self.masterOption() 
                self.state = 3856
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,444,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MasterOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MASTER_HOST_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_HOST_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def textStringNoLinebreak(self):
            return self.getTypedRuleContext(SQLParser.TextStringNoLinebreakContext,0)


        def NETWORK_NAMESPACE_SYMBOL(self):
            return self.getToken(SQLParser.NETWORK_NAMESPACE_SYMBOL, 0)

        def MASTER_BIND_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_BIND_SYMBOL, 0)

        def MASTER_USER_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_USER_SYMBOL, 0)

        def MASTER_PASSWORD_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_PASSWORD_SYMBOL, 0)

        def MASTER_PORT_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_PORT_SYMBOL, 0)

        def ulong_number(self):
            return self.getTypedRuleContext(SQLParser.Ulong_numberContext,0)


        def MASTER_CONNECT_RETRY_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0)

        def MASTER_RETRY_COUNT_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_RETRY_COUNT_SYMBOL, 0)

        def MASTER_DELAY_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_DELAY_SYMBOL, 0)

        def MASTER_SSL_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SSL_SYMBOL, 0)

        def MASTER_SSL_CA_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SSL_CA_SYMBOL, 0)

        def MASTER_SSL_CAPATH_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SSL_CAPATH_SYMBOL, 0)

        def MASTER_TLS_VERSION_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_TLS_VERSION_SYMBOL, 0)

        def MASTER_SSL_CERT_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SSL_CERT_SYMBOL, 0)

        def MASTER_TLS_CIPHERSUITES_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0)

        def masterTlsCiphersuitesDef(self):
            return self.getTypedRuleContext(SQLParser.MasterTlsCiphersuitesDefContext,0)


        def MASTER_SSL_CIPHER_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SSL_CIPHER_SYMBOL, 0)

        def MASTER_SSL_KEY_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SSL_KEY_SYMBOL, 0)

        def MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL, 0)

        def MASTER_SSL_CRL_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SSL_CRL_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextLiteralContext,0)


        def MASTER_SSL_CRLPATH_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0)

        def MASTER_PUBLIC_KEY_PATH_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0)

        def GET_MASTER_PUBLIC_KEY_SYMBOL(self):
            return self.getToken(SQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0)

        def MASTER_HEARTBEAT_PERIOD_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0)

        def IGNORE_SERVER_IDS_SYMBOL(self):
            return self.getToken(SQLParser.IGNORE_SERVER_IDS_SYMBOL, 0)

        def serverIdList(self):
            return self.getTypedRuleContext(SQLParser.ServerIdListContext,0)


        def MASTER_COMPRESSION_ALGORITHM_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextStringLiteralContext,0)


        def MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0)

        def MASTER_AUTO_POSITION_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_AUTO_POSITION_SYMBOL, 0)

        def PRIVILEGE_CHECKS_USER_SYMBOL(self):
            return self.getToken(SQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0)

        def privilegeCheckDef(self):
            return self.getTypedRuleContext(SQLParser.PrivilegeCheckDefContext,0)


        def REQUIRE_ROW_FORMAT_SYMBOL(self):
            return self.getToken(SQLParser.REQUIRE_ROW_FORMAT_SYMBOL, 0)

        def REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL(self):
            return self.getToken(SQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL, 0)

        def tablePrimaryKeyCheckDef(self):
            return self.getTypedRuleContext(SQLParser.TablePrimaryKeyCheckDefContext,0)


        def masterFileDef(self):
            return self.getTypedRuleContext(SQLParser.MasterFileDefContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_masterOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterOption" ):
                listener.enterMasterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterOption" ):
                listener.exitMasterOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMasterOption" ):
                return visitor.visitMasterOption(self)
            else:
                return visitor.visitChildren(self)




    def masterOption(self):

        localctx = SQLParser.MasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_masterOption)
        try:
            self.state = 3948
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.MASTER_HOST_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3857
                self.match(SQLParser.MASTER_HOST_SYMBOL)
                self.state = 3858
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3859
                self.textStringNoLinebreak()
                pass
            elif token in [SQLParser.NETWORK_NAMESPACE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3860
                self.match(SQLParser.NETWORK_NAMESPACE_SYMBOL)
                self.state = 3861
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3862
                self.textStringNoLinebreak()
                pass
            elif token in [SQLParser.MASTER_BIND_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3863
                self.match(SQLParser.MASTER_BIND_SYMBOL)
                self.state = 3864
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3865
                self.textStringNoLinebreak()
                pass
            elif token in [SQLParser.MASTER_USER_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3866
                self.match(SQLParser.MASTER_USER_SYMBOL)
                self.state = 3867
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3868
                self.textStringNoLinebreak()
                pass
            elif token in [SQLParser.MASTER_PASSWORD_SYMBOL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3869
                self.match(SQLParser.MASTER_PASSWORD_SYMBOL)
                self.state = 3870
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3871
                self.textStringNoLinebreak()
                pass
            elif token in [SQLParser.MASTER_PORT_SYMBOL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3872
                self.match(SQLParser.MASTER_PORT_SYMBOL)
                self.state = 3873
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3874
                self.ulong_number()
                pass
            elif token in [SQLParser.MASTER_CONNECT_RETRY_SYMBOL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3875
                self.match(SQLParser.MASTER_CONNECT_RETRY_SYMBOL)
                self.state = 3876
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3877
                self.ulong_number()
                pass
            elif token in [SQLParser.MASTER_RETRY_COUNT_SYMBOL]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3878
                self.match(SQLParser.MASTER_RETRY_COUNT_SYMBOL)
                self.state = 3879
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3880
                self.ulong_number()
                pass
            elif token in [SQLParser.MASTER_DELAY_SYMBOL]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3881
                self.match(SQLParser.MASTER_DELAY_SYMBOL)
                self.state = 3882
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3883
                self.ulong_number()
                pass
            elif token in [SQLParser.MASTER_SSL_SYMBOL]:
                self.enterOuterAlt(localctx, 10)
                self.state = 3884
                self.match(SQLParser.MASTER_SSL_SYMBOL)
                self.state = 3885
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3886
                self.ulong_number()
                pass
            elif token in [SQLParser.MASTER_SSL_CA_SYMBOL]:
                self.enterOuterAlt(localctx, 11)
                self.state = 3887
                self.match(SQLParser.MASTER_SSL_CA_SYMBOL)
                self.state = 3888
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3889
                self.textStringNoLinebreak()
                pass
            elif token in [SQLParser.MASTER_SSL_CAPATH_SYMBOL]:
                self.enterOuterAlt(localctx, 12)
                self.state = 3890
                self.match(SQLParser.MASTER_SSL_CAPATH_SYMBOL)
                self.state = 3891
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3892
                self.textStringNoLinebreak()
                pass
            elif token in [SQLParser.MASTER_TLS_VERSION_SYMBOL]:
                self.enterOuterAlt(localctx, 13)
                self.state = 3893
                self.match(SQLParser.MASTER_TLS_VERSION_SYMBOL)
                self.state = 3894
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3895
                self.textStringNoLinebreak()
                pass
            elif token in [SQLParser.MASTER_SSL_CERT_SYMBOL]:
                self.enterOuterAlt(localctx, 14)
                self.state = 3896
                self.match(SQLParser.MASTER_SSL_CERT_SYMBOL)
                self.state = 3897
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3898
                self.textStringNoLinebreak()
                pass
            elif token in [SQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL]:
                self.enterOuterAlt(localctx, 15)
                self.state = 3899
                self.match(SQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL)
                self.state = 3900
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3901
                self.masterTlsCiphersuitesDef()
                pass
            elif token in [SQLParser.MASTER_SSL_CIPHER_SYMBOL]:
                self.enterOuterAlt(localctx, 16)
                self.state = 3902
                self.match(SQLParser.MASTER_SSL_CIPHER_SYMBOL)
                self.state = 3903
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3904
                self.textStringNoLinebreak()
                pass
            elif token in [SQLParser.MASTER_SSL_KEY_SYMBOL]:
                self.enterOuterAlt(localctx, 17)
                self.state = 3905
                self.match(SQLParser.MASTER_SSL_KEY_SYMBOL)
                self.state = 3906
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3907
                self.textStringNoLinebreak()
                pass
            elif token in [SQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL]:
                self.enterOuterAlt(localctx, 18)
                self.state = 3908
                self.match(SQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL)
                self.state = 3909
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3910
                self.ulong_number()
                pass
            elif token in [SQLParser.MASTER_SSL_CRL_SYMBOL]:
                self.enterOuterAlt(localctx, 19)
                self.state = 3911
                self.match(SQLParser.MASTER_SSL_CRL_SYMBOL)
                self.state = 3912
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3913
                self.textLiteral()
                pass
            elif token in [SQLParser.MASTER_SSL_CRLPATH_SYMBOL]:
                self.enterOuterAlt(localctx, 20)
                self.state = 3914
                self.match(SQLParser.MASTER_SSL_CRLPATH_SYMBOL)
                self.state = 3915
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3916
                self.textStringNoLinebreak()
                pass
            elif token in [SQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL]:
                self.enterOuterAlt(localctx, 21)
                self.state = 3917
                self.match(SQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL)
                self.state = 3918
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3919
                self.textStringNoLinebreak()
                pass
            elif token in [SQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL]:
                self.enterOuterAlt(localctx, 22)
                self.state = 3920
                self.match(SQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL)
                self.state = 3921
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3922
                self.ulong_number()
                pass
            elif token in [SQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL]:
                self.enterOuterAlt(localctx, 23)
                self.state = 3923
                self.match(SQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL)
                self.state = 3924
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3925
                self.ulong_number()
                pass
            elif token in [SQLParser.IGNORE_SERVER_IDS_SYMBOL]:
                self.enterOuterAlt(localctx, 24)
                self.state = 3926
                self.match(SQLParser.IGNORE_SERVER_IDS_SYMBOL)
                self.state = 3927
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3928
                self.serverIdList()
                pass
            elif token in [SQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL]:
                self.enterOuterAlt(localctx, 25)
                self.state = 3929
                self.match(SQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL)
                self.state = 3930
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3931
                self.textStringLiteral()
                pass
            elif token in [SQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL]:
                self.enterOuterAlt(localctx, 26)
                self.state = 3932
                self.match(SQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL)
                self.state = 3933
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3934
                self.ulong_number()
                pass
            elif token in [SQLParser.MASTER_AUTO_POSITION_SYMBOL]:
                self.enterOuterAlt(localctx, 27)
                self.state = 3935
                self.match(SQLParser.MASTER_AUTO_POSITION_SYMBOL)
                self.state = 3936
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3937
                self.ulong_number()
                pass
            elif token in [SQLParser.PRIVILEGE_CHECKS_USER_SYMBOL]:
                self.enterOuterAlt(localctx, 28)
                self.state = 3938
                self.match(SQLParser.PRIVILEGE_CHECKS_USER_SYMBOL)
                self.state = 3939
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3940
                self.privilegeCheckDef()
                pass
            elif token in [SQLParser.REQUIRE_ROW_FORMAT_SYMBOL]:
                self.enterOuterAlt(localctx, 29)
                self.state = 3941
                self.match(SQLParser.REQUIRE_ROW_FORMAT_SYMBOL)
                self.state = 3942
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3943
                self.ulong_number()
                pass
            elif token in [SQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL]:
                self.enterOuterAlt(localctx, 30)
                self.state = 3944
                self.match(SQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL)
                self.state = 3945
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3946
                self.tablePrimaryKeyCheckDef()
                pass
            elif token in [SQLParser.MASTER_LOG_FILE_SYMBOL, SQLParser.MASTER_LOG_POS_SYMBOL, SQLParser.RELAY_LOG_FILE_SYMBOL, SQLParser.RELAY_LOG_POS_SYMBOL]:
                self.enterOuterAlt(localctx, 31)
                self.state = 3947
                self.masterFileDef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeCheckDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userIdentifierOrText(self):
            return self.getTypedRuleContext(SQLParser.UserIdentifierOrTextContext,0)


        def NULL_SYMBOL(self):
            return self.getToken(SQLParser.NULL_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_privilegeCheckDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegeCheckDef" ):
                listener.enterPrivilegeCheckDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegeCheckDef" ):
                listener.exitPrivilegeCheckDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivilegeCheckDef" ):
                return visitor.visitPrivilegeCheckDef(self)
            else:
                return visitor.visitChildren(self)




    def privilegeCheckDef(self):

        localctx = SQLParser.PrivilegeCheckDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_privilegeCheckDef)
        try:
            self.state = 3952
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,446,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3950
                self.userIdentifierOrText()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3951
                self.match(SQLParser.NULL_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePrimaryKeyCheckDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STREAM_SYMBOL(self):
            return self.getToken(SQLParser.STREAM_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(SQLParser.ON_SYMBOL, 0)

        def OFF_SYMBOL(self):
            return self.getToken(SQLParser.OFF_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_tablePrimaryKeyCheckDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePrimaryKeyCheckDef" ):
                listener.enterTablePrimaryKeyCheckDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePrimaryKeyCheckDef" ):
                listener.exitTablePrimaryKeyCheckDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablePrimaryKeyCheckDef" ):
                return visitor.visitTablePrimaryKeyCheckDef(self)
            else:
                return visitor.visitChildren(self)




    def tablePrimaryKeyCheckDef(self):

        localctx = SQLParser.TablePrimaryKeyCheckDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_tablePrimaryKeyCheckDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3954
            _la = self._input.LA(1)
            if not(_la==SQLParser.ON_SYMBOL or _la==SQLParser.STREAM_SYMBOL or _la==SQLParser.OFF_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MasterTlsCiphersuitesDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringNoLinebreak(self):
            return self.getTypedRuleContext(SQLParser.TextStringNoLinebreakContext,0)


        def NULL_SYMBOL(self):
            return self.getToken(SQLParser.NULL_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_masterTlsCiphersuitesDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterTlsCiphersuitesDef" ):
                listener.enterMasterTlsCiphersuitesDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterTlsCiphersuitesDef" ):
                listener.exitMasterTlsCiphersuitesDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMasterTlsCiphersuitesDef" ):
                return visitor.visitMasterTlsCiphersuitesDef(self)
            else:
                return visitor.visitChildren(self)




    def masterTlsCiphersuitesDef(self):

        localctx = SQLParser.MasterTlsCiphersuitesDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_masterTlsCiphersuitesDef)
        try:
            self.state = 3958
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,447,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3956
                self.textStringNoLinebreak()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3957
                self.match(SQLParser.NULL_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MasterFileDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MASTER_LOG_FILE_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_LOG_FILE_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def textStringNoLinebreak(self):
            return self.getTypedRuleContext(SQLParser.TextStringNoLinebreakContext,0)


        def MASTER_LOG_POS_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_LOG_POS_SYMBOL, 0)

        def ulonglong_number(self):
            return self.getTypedRuleContext(SQLParser.Ulonglong_numberContext,0)


        def RELAY_LOG_FILE_SYMBOL(self):
            return self.getToken(SQLParser.RELAY_LOG_FILE_SYMBOL, 0)

        def RELAY_LOG_POS_SYMBOL(self):
            return self.getToken(SQLParser.RELAY_LOG_POS_SYMBOL, 0)

        def ulong_number(self):
            return self.getTypedRuleContext(SQLParser.Ulong_numberContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_masterFileDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterFileDef" ):
                listener.enterMasterFileDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterFileDef" ):
                listener.exitMasterFileDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMasterFileDef" ):
                return visitor.visitMasterFileDef(self)
            else:
                return visitor.visitChildren(self)




    def masterFileDef(self):

        localctx = SQLParser.MasterFileDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_masterFileDef)
        try:
            self.state = 3972
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.MASTER_LOG_FILE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3960
                self.match(SQLParser.MASTER_LOG_FILE_SYMBOL)
                self.state = 3961
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3962
                self.textStringNoLinebreak()
                pass
            elif token in [SQLParser.MASTER_LOG_POS_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3963
                self.match(SQLParser.MASTER_LOG_POS_SYMBOL)
                self.state = 3964
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3965
                self.ulonglong_number()
                pass
            elif token in [SQLParser.RELAY_LOG_FILE_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3966
                self.match(SQLParser.RELAY_LOG_FILE_SYMBOL)
                self.state = 3967
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3968
                self.textStringNoLinebreak()
                pass
            elif token in [SQLParser.RELAY_LOG_POS_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3969
                self.match(SQLParser.RELAY_LOG_POS_SYMBOL)
                self.state = 3970
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 3971
                self.ulong_number()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServerIdListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def ulong_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.Ulong_numberContext)
            else:
                return self.getTypedRuleContext(SQLParser.Ulong_numberContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_serverIdList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServerIdList" ):
                listener.enterServerIdList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServerIdList" ):
                listener.exitServerIdList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitServerIdList" ):
                return visitor.visitServerIdList(self)
            else:
                return visitor.visitChildren(self)




    def serverIdList(self):

        localctx = SQLParser.ServerIdListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_serverIdList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3974
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 3983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 747)) & ~0x3f) == 0 and ((1 << (_la - 747)) & ((1 << (SQLParser.INT_NUMBER - 747)) | (1 << (SQLParser.LONG_NUMBER - 747)) | (1 << (SQLParser.ULONGLONG_NUMBER - 747)) | (1 << (SQLParser.HEX_NUMBER - 747)) | (1 << (SQLParser.DECIMAL_NUMBER - 747)) | (1 << (SQLParser.FLOAT_NUMBER - 747)))) != 0):
                self.state = 3975
                self.ulong_number()
                self.state = 3980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLParser.COMMA_SYMBOL:
                    self.state = 3976
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 3977
                    self.ulong_number()
                    self.state = 3982
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3985
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChangeReplicationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE_SYMBOL(self):
            return self.getToken(SQLParser.CHANGE_SYMBOL, 0)

        def REPLICATION_SYMBOL(self):
            return self.getToken(SQLParser.REPLICATION_SYMBOL, 0)

        def FILTER_SYMBOL(self):
            return self.getToken(SQLParser.FILTER_SYMBOL, 0)

        def filterDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.FilterDefinitionContext)
            else:
                return self.getTypedRuleContext(SQLParser.FilterDefinitionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def channel(self):
            return self.getTypedRuleContext(SQLParser.ChannelContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_changeReplication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeReplication" ):
                listener.enterChangeReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeReplication" ):
                listener.exitChangeReplication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChangeReplication" ):
                return visitor.visitChangeReplication(self)
            else:
                return visitor.visitChildren(self)




    def changeReplication(self):

        localctx = SQLParser.ChangeReplicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_changeReplication)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3987
            self.match(SQLParser.CHANGE_SYMBOL)
            self.state = 3988
            self.match(SQLParser.REPLICATION_SYMBOL)
            self.state = 3989
            self.match(SQLParser.FILTER_SYMBOL)
            self.state = 3990
            self.filterDefinition()
            self.state = 3995
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,451,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3991
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 3992
                    self.filterDefinition() 
                self.state = 3997
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,451,self._ctx)

            self.state = 4000
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,452,self._ctx)
            if la_ == 1:
                self.state = 3998
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 3999
                self.channel()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilterDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLICATE_DO_DB_SYMBOL(self):
            return self.getToken(SQLParser.REPLICATE_DO_DB_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def filterDbList(self):
            return self.getTypedRuleContext(SQLParser.FilterDbListContext,0)


        def REPLICATE_IGNORE_DB_SYMBOL(self):
            return self.getToken(SQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0)

        def REPLICATE_DO_TABLE_SYMBOL(self):
            return self.getToken(SQLParser.REPLICATE_DO_TABLE_SYMBOL, 0)

        def filterTableList(self):
            return self.getTypedRuleContext(SQLParser.FilterTableListContext,0)


        def REPLICATE_IGNORE_TABLE_SYMBOL(self):
            return self.getToken(SQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0)

        def REPLICATE_WILD_DO_TABLE_SYMBOL(self):
            return self.getToken(SQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0)

        def filterStringList(self):
            return self.getTypedRuleContext(SQLParser.FilterStringListContext,0)


        def REPLICATE_WILD_IGNORE_TABLE_SYMBOL(self):
            return self.getToken(SQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0)

        def REPLICATE_REWRITE_DB_SYMBOL(self):
            return self.getToken(SQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0)

        def filterDbPairList(self):
            return self.getTypedRuleContext(SQLParser.FilterDbPairListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_filterDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilterDefinition" ):
                listener.enterFilterDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilterDefinition" ):
                listener.exitFilterDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFilterDefinition" ):
                return visitor.visitFilterDefinition(self)
            else:
                return visitor.visitChildren(self)




    def filterDefinition(self):

        localctx = SQLParser.FilterDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_filterDefinition)
        self._la = 0 # Token type
        try:
            self.state = 4051
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.REPLICATE_DO_DB_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4002
                self.match(SQLParser.REPLICATE_DO_DB_SYMBOL)
                self.state = 4003
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 4004
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 4006
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,453,self._ctx)
                if la_ == 1:
                    self.state = 4005
                    self.filterDbList()


                self.state = 4008
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [SQLParser.REPLICATE_IGNORE_DB_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4009
                self.match(SQLParser.REPLICATE_IGNORE_DB_SYMBOL)
                self.state = 4010
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 4011
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 4013
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,454,self._ctx)
                if la_ == 1:
                    self.state = 4012
                    self.filterDbList()


                self.state = 4015
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [SQLParser.REPLICATE_DO_TABLE_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4016
                self.match(SQLParser.REPLICATE_DO_TABLE_SYMBOL)
                self.state = 4017
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 4018
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 4020
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,455,self._ctx)
                if la_ == 1:
                    self.state = 4019
                    self.filterTableList()


                self.state = 4022
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [SQLParser.REPLICATE_IGNORE_TABLE_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4023
                self.match(SQLParser.REPLICATE_IGNORE_TABLE_SYMBOL)
                self.state = 4024
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 4025
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 4027
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,456,self._ctx)
                if la_ == 1:
                    self.state = 4026
                    self.filterTableList()


                self.state = 4029
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [SQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4030
                self.match(SQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL)
                self.state = 4031
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 4032
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 4034
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,457,self._ctx)
                if la_ == 1:
                    self.state = 4033
                    self.filterStringList()


                self.state = 4036
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [SQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4037
                self.match(SQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL)
                self.state = 4038
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 4039
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 4041
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,458,self._ctx)
                if la_ == 1:
                    self.state = 4040
                    self.filterStringList()


                self.state = 4043
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [SQLParser.REPLICATE_REWRITE_DB_SYMBOL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4044
                self.match(SQLParser.REPLICATE_REWRITE_DB_SYMBOL)
                self.state = 4045
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 4046
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 4048
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.OPEN_PAR_SYMBOL:
                    self.state = 4047
                    self.filterDbPairList()


                self.state = 4050
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilterDbListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def schemaRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.SchemaRefContext)
            else:
                return self.getTypedRuleContext(SQLParser.SchemaRefContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_filterDbList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilterDbList" ):
                listener.enterFilterDbList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilterDbList" ):
                listener.exitFilterDbList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFilterDbList" ):
                return visitor.visitFilterDbList(self)
            else:
                return visitor.visitChildren(self)




    def filterDbList(self):

        localctx = SQLParser.FilterDbListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_filterDbList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4053
            self.schemaRef()
            self.state = 4058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 4054
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 4055
                self.schemaRef()
                self.state = 4060
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilterTableListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def filterTableRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.FilterTableRefContext)
            else:
                return self.getTypedRuleContext(SQLParser.FilterTableRefContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_filterTableList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilterTableList" ):
                listener.enterFilterTableList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilterTableList" ):
                listener.exitFilterTableList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFilterTableList" ):
                return visitor.visitFilterTableList(self)
            else:
                return visitor.visitChildren(self)




    def filterTableList(self):

        localctx = SQLParser.FilterTableListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_filterTableList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4061
            self.filterTableRef()
            self.state = 4066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 4062
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 4063
                self.filterTableRef()
                self.state = 4068
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilterStringListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def filterWildDbTableString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.FilterWildDbTableStringContext)
            else:
                return self.getTypedRuleContext(SQLParser.FilterWildDbTableStringContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_filterStringList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilterStringList" ):
                listener.enterFilterStringList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilterStringList" ):
                listener.exitFilterStringList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFilterStringList" ):
                return visitor.visitFilterStringList(self)
            else:
                return visitor.visitChildren(self)




    def filterStringList(self):

        localctx = SQLParser.FilterStringListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_filterStringList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4069
            self.filterWildDbTableString()
            self.state = 4074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 4070
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 4071
                self.filterWildDbTableString()
                self.state = 4076
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilterWildDbTableStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringNoLinebreak(self):
            return self.getTypedRuleContext(SQLParser.TextStringNoLinebreakContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_filterWildDbTableString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilterWildDbTableString" ):
                listener.enterFilterWildDbTableString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilterWildDbTableString" ):
                listener.exitFilterWildDbTableString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFilterWildDbTableString" ):
                return visitor.visitFilterWildDbTableString(self)
            else:
                return visitor.visitChildren(self)




    def filterWildDbTableString(self):

        localctx = SQLParser.FilterWildDbTableStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_filterWildDbTableString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4077
            self.textStringNoLinebreak()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilterDbPairListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def schemaIdentifierPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.SchemaIdentifierPairContext)
            else:
                return self.getTypedRuleContext(SQLParser.SchemaIdentifierPairContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_filterDbPairList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilterDbPairList" ):
                listener.enterFilterDbPairList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilterDbPairList" ):
                listener.exitFilterDbPairList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFilterDbPairList" ):
                return visitor.visitFilterDbPairList(self)
            else:
                return visitor.visitChildren(self)




    def filterDbPairList(self):

        localctx = SQLParser.FilterDbPairListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_filterDbPairList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4079
            self.schemaIdentifierPair()
            self.state = 4084
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 4080
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 4081
                self.schemaIdentifierPair()
                self.state = 4086
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SlaveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START_SYMBOL(self):
            return self.getToken(SQLParser.START_SYMBOL, 0)

        def SLAVE_SYMBOL(self):
            return self.getToken(SQLParser.SLAVE_SYMBOL, 0)

        def slaveConnectionOptions(self):
            return self.getTypedRuleContext(SQLParser.SlaveConnectionOptionsContext,0)


        def slaveThreadOptions(self):
            return self.getTypedRuleContext(SQLParser.SlaveThreadOptionsContext,0)


        def UNTIL_SYMBOL(self):
            return self.getToken(SQLParser.UNTIL_SYMBOL, 0)

        def slaveUntilOptions(self):
            return self.getTypedRuleContext(SQLParser.SlaveUntilOptionsContext,0)


        def channel(self):
            return self.getTypedRuleContext(SQLParser.ChannelContext,0)


        def STOP_SYMBOL(self):
            return self.getToken(SQLParser.STOP_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_slave

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlave" ):
                listener.enterSlave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlave" ):
                listener.exitSlave(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSlave" ):
                return visitor.visitSlave(self)
            else:
                return visitor.visitChildren(self)




    def slave(self):

        localctx = SQLParser.SlaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_slave)
        try:
            self.state = 4108
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.START_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4087
                self.match(SQLParser.START_SYMBOL)
                self.state = 4088
                self.match(SQLParser.SLAVE_SYMBOL)
                self.state = 4090
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,465,self._ctx)
                if la_ == 1:
                    self.state = 4089
                    self.slaveThreadOptions()


                self.state = 4094
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,466,self._ctx)
                if la_ == 1:
                    self.state = 4092
                    self.match(SQLParser.UNTIL_SYMBOL)
                    self.state = 4093
                    self.slaveUntilOptions()


                self.state = 4096
                self.slaveConnectionOptions()
                self.state = 4098
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,467,self._ctx)
                if la_ == 1:
                    self.state = 4097
                    self.channel()


                pass
            elif token in [SQLParser.STOP_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4100
                self.match(SQLParser.STOP_SYMBOL)
                self.state = 4101
                self.match(SQLParser.SLAVE_SYMBOL)
                self.state = 4103
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,468,self._ctx)
                if la_ == 1:
                    self.state = 4102
                    self.slaveThreadOptions()


                self.state = 4106
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,469,self._ctx)
                if la_ == 1:
                    self.state = 4105
                    self.channel()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SlaveUntilOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def masterFileDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.MasterFileDefContext)
            else:
                return self.getTypedRuleContext(SQLParser.MasterFileDefContext,i)


        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def textString(self):
            return self.getTypedRuleContext(SQLParser.TextStringContext,0)


        def SQL_AFTER_MTS_GAPS_SYMBOL(self):
            return self.getToken(SQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0)

        def SQL_BEFORE_GTIDS_SYMBOL(self):
            return self.getToken(SQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0)

        def SQL_AFTER_GTIDS_SYMBOL(self):
            return self.getToken(SQLParser.SQL_AFTER_GTIDS_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_slaveUntilOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlaveUntilOptions" ):
                listener.enterSlaveUntilOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlaveUntilOptions" ):
                listener.exitSlaveUntilOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSlaveUntilOptions" ):
                return visitor.visitSlaveUntilOptions(self)
            else:
                return visitor.visitChildren(self)




    def slaveUntilOptions(self):

        localctx = SQLParser.SlaveUntilOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_slaveUntilOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4117
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,471,self._ctx)
            if la_ == 1:
                self.state = 4110
                self.masterFileDef()
                pass

            elif la_ == 2:
                self.state = 4111
                if not self.serverVersion >= 50606:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50606")
                self.state = 4112
                _la = self._input.LA(1)
                if not(_la==SQLParser.SQL_AFTER_GTIDS_SYMBOL or _la==SQLParser.SQL_BEFORE_GTIDS_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4113
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 4114
                self.textString()
                pass

            elif la_ == 3:
                self.state = 4115
                if not self.serverVersion >= 50606:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50606")
                self.state = 4116
                self.match(SQLParser.SQL_AFTER_MTS_GAPS_SYMBOL)
                pass


            self.state = 4123
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,472,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4119
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 4120
                    self.masterFileDef() 
                self.state = 4125
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,472,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SlaveConnectionOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER_SYMBOL(self):
            return self.getToken(SQLParser.USER_SYMBOL, 0)

        def EQUAL_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.EQUAL_OPERATOR)
            else:
                return self.getToken(SQLParser.EQUAL_OPERATOR, i)

        def textString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.TextStringContext)
            else:
                return self.getTypedRuleContext(SQLParser.TextStringContext,i)


        def PASSWORD_SYMBOL(self):
            return self.getToken(SQLParser.PASSWORD_SYMBOL, 0)

        def DEFAULT_AUTH_SYMBOL(self):
            return self.getToken(SQLParser.DEFAULT_AUTH_SYMBOL, 0)

        def PLUGIN_DIR_SYMBOL(self):
            return self.getToken(SQLParser.PLUGIN_DIR_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_slaveConnectionOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlaveConnectionOptions" ):
                listener.enterSlaveConnectionOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlaveConnectionOptions" ):
                listener.exitSlaveConnectionOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSlaveConnectionOptions" ):
                return visitor.visitSlaveConnectionOptions(self)
            else:
                return visitor.visitChildren(self)




    def slaveConnectionOptions(self):

        localctx = SQLParser.SlaveConnectionOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_slaveConnectionOptions)
        try:
            self.state = 4148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,477,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4126
                if not self.serverVersion >= 50604:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50604")
                self.state = 4130
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,473,self._ctx)
                if la_ == 1:
                    self.state = 4127
                    self.match(SQLParser.USER_SYMBOL)
                    self.state = 4128
                    self.match(SQLParser.EQUAL_OPERATOR)
                    self.state = 4129
                    self.textString()


                self.state = 4135
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,474,self._ctx)
                if la_ == 1:
                    self.state = 4132
                    self.match(SQLParser.PASSWORD_SYMBOL)
                    self.state = 4133
                    self.match(SQLParser.EQUAL_OPERATOR)
                    self.state = 4134
                    self.textString()


                self.state = 4140
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,475,self._ctx)
                if la_ == 1:
                    self.state = 4137
                    self.match(SQLParser.DEFAULT_AUTH_SYMBOL)
                    self.state = 4138
                    self.match(SQLParser.EQUAL_OPERATOR)
                    self.state = 4139
                    self.textString()


                self.state = 4145
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,476,self._ctx)
                if la_ == 1:
                    self.state = 4142
                    self.match(SQLParser.PLUGIN_DIR_SYMBOL)
                    self.state = 4143
                    self.match(SQLParser.EQUAL_OPERATOR)
                    self.state = 4144
                    self.textString()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SlaveThreadOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def slaveThreadOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.SlaveThreadOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.SlaveThreadOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_slaveThreadOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlaveThreadOptions" ):
                listener.enterSlaveThreadOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlaveThreadOptions" ):
                listener.exitSlaveThreadOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSlaveThreadOptions" ):
                return visitor.visitSlaveThreadOptions(self)
            else:
                return visitor.visitChildren(self)




    def slaveThreadOptions(self):

        localctx = SQLParser.SlaveThreadOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_slaveThreadOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4150
            self.slaveThreadOption()
            self.state = 4155
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,478,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4151
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 4152
                    self.slaveThreadOption() 
                self.state = 4157
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,478,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SlaveThreadOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELAY_THREAD_SYMBOL(self):
            return self.getToken(SQLParser.RELAY_THREAD_SYMBOL, 0)

        def SQL_THREAD_SYMBOL(self):
            return self.getToken(SQLParser.SQL_THREAD_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_slaveThreadOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlaveThreadOption" ):
                listener.enterSlaveThreadOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlaveThreadOption" ):
                listener.exitSlaveThreadOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSlaveThreadOption" ):
                return visitor.visitSlaveThreadOption(self)
            else:
                return visitor.visitChildren(self)




    def slaveThreadOption(self):

        localctx = SQLParser.SlaveThreadOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_slaveThreadOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4158
            _la = self._input.LA(1)
            if not(_la==SQLParser.RELAY_THREAD_SYMBOL or _la==SQLParser.SQL_THREAD_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupReplicationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP_REPLICATION_SYMBOL(self):
            return self.getToken(SQLParser.GROUP_REPLICATION_SYMBOL, 0)

        def START_SYMBOL(self):
            return self.getToken(SQLParser.START_SYMBOL, 0)

        def STOP_SYMBOL(self):
            return self.getToken(SQLParser.STOP_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_groupReplication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupReplication" ):
                listener.enterGroupReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupReplication" ):
                listener.exitGroupReplication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupReplication" ):
                return visitor.visitGroupReplication(self)
            else:
                return visitor.visitChildren(self)




    def groupReplication(self):

        localctx = SQLParser.GroupReplicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_groupReplication)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4160
            _la = self._input.LA(1)
            if not(_la==SQLParser.START_SYMBOL or _la==SQLParser.STOP_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4161
            self.match(SQLParser.GROUP_REPLICATION_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreparedStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None # Token

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(SQLParser.FROM_SYMBOL, 0)

        def PREPARE_SYMBOL(self):
            return self.getToken(SQLParser.PREPARE_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextLiteralContext,0)


        def userVariable(self):
            return self.getTypedRuleContext(SQLParser.UserVariableContext,0)


        def executeStatement(self):
            return self.getTypedRuleContext(SQLParser.ExecuteStatementContext,0)


        def DEALLOCATE_SYMBOL(self):
            return self.getToken(SQLParser.DEALLOCATE_SYMBOL, 0)

        def DROP_SYMBOL(self):
            return self.getToken(SQLParser.DROP_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_preparedStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreparedStatement" ):
                listener.enterPreparedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreparedStatement" ):
                listener.exitPreparedStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPreparedStatement" ):
                return visitor.visitPreparedStatement(self)
            else:
                return visitor.visitChildren(self)




    def preparedStatement(self):

        localctx = SQLParser.PreparedStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_preparedStatement)
        self._la = 0 # Token type
        try:
            self.state = 4174
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.PREPARE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4163
                localctx.type = self.match(SQLParser.PREPARE_SYMBOL)
                self.state = 4164
                self.identifier()
                self.state = 4165
                self.match(SQLParser.FROM_SYMBOL)
                self.state = 4168
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,479,self._ctx)
                if la_ == 1:
                    self.state = 4166
                    self.textLiteral()
                    pass

                elif la_ == 2:
                    self.state = 4167
                    self.userVariable()
                    pass


                pass
            elif token in [SQLParser.EXECUTE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4170
                self.executeStatement()
                pass
            elif token in [SQLParser.DEALLOCATE_SYMBOL, SQLParser.DROP_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4171
                localctx.type = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLParser.DEALLOCATE_SYMBOL or _la==SQLParser.DROP_SYMBOL):
                    localctx.type = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4172
                self.match(SQLParser.PREPARE_SYMBOL)
                self.state = 4173
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE_SYMBOL(self):
            return self.getToken(SQLParser.EXECUTE_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def USING_SYMBOL(self):
            return self.getToken(SQLParser.USING_SYMBOL, 0)

        def executeVarList(self):
            return self.getTypedRuleContext(SQLParser.ExecuteVarListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_executeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteStatement" ):
                listener.enterExecuteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteStatement" ):
                listener.exitExecuteStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecuteStatement" ):
                return visitor.visitExecuteStatement(self)
            else:
                return visitor.visitChildren(self)




    def executeStatement(self):

        localctx = SQLParser.ExecuteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_executeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4176
            self.match(SQLParser.EXECUTE_SYMBOL)
            self.state = 4177
            self.identifier()
            self.state = 4180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.USING_SYMBOL:
                self.state = 4178
                self.match(SQLParser.USING_SYMBOL)
                self.state = 4179
                self.executeVarList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteVarListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.UserVariableContext)
            else:
                return self.getTypedRuleContext(SQLParser.UserVariableContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_executeVarList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteVarList" ):
                listener.enterExecuteVarList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteVarList" ):
                listener.exitExecuteVarList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecuteVarList" ):
                return visitor.visitExecuteVarList(self)
            else:
                return visitor.visitChildren(self)




    def executeVarList(self):

        localctx = SQLParser.ExecuteVarListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_executeVarList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4182
            self.userVariable()
            self.state = 4187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 4183
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 4184
                self.userVariable()
                self.state = 4189
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CloneStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLONE_SYMBOL(self):
            return self.getToken(SQLParser.CLONE_SYMBOL, 0)

        def LOCAL_SYMBOL(self):
            return self.getToken(SQLParser.LOCAL_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(SQLParser.DATA_SYMBOL, 0)

        def DIRECTORY_SYMBOL(self):
            return self.getToken(SQLParser.DIRECTORY_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextStringLiteralContext,0)


        def REMOTE_SYMBOL(self):
            return self.getToken(SQLParser.REMOTE_SYMBOL, 0)

        def INSTANCE_SYMBOL(self):
            return self.getToken(SQLParser.INSTANCE_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(SQLParser.FROM_SYMBOL, 0)

        def user(self):
            return self.getTypedRuleContext(SQLParser.UserContext,0)


        def COLON_SYMBOL(self):
            return self.getToken(SQLParser.COLON_SYMBOL, 0)

        def ulong_number(self):
            return self.getTypedRuleContext(SQLParser.Ulong_numberContext,0)


        def IDENTIFIED_SYMBOL(self):
            return self.getToken(SQLParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(SQLParser.BY_SYMBOL, 0)

        def equal(self):
            return self.getTypedRuleContext(SQLParser.EqualContext,0)


        def FOR_SYMBOL(self):
            return self.getToken(SQLParser.FOR_SYMBOL, 0)

        def REPLICATION_SYMBOL(self):
            return self.getToken(SQLParser.REPLICATION_SYMBOL, 0)

        def dataDirSSL(self):
            return self.getTypedRuleContext(SQLParser.DataDirSSLContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_cloneStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloneStatement" ):
                listener.enterCloneStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloneStatement" ):
                listener.exitCloneStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCloneStatement" ):
                return visitor.visitCloneStatement(self)
            else:
                return visitor.visitChildren(self)




    def cloneStatement(self):

        localctx = SQLParser.CloneStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_cloneStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4190
            self.match(SQLParser.CLONE_SYMBOL)
            self.state = 4215
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,486,self._ctx)
            if la_ == 1:
                self.state = 4191
                self.match(SQLParser.LOCAL_SYMBOL)
                self.state = 4192
                self.match(SQLParser.DATA_SYMBOL)
                self.state = 4193
                self.match(SQLParser.DIRECTORY_SYMBOL)
                self.state = 4195
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,483,self._ctx)
                if la_ == 1:
                    self.state = 4194
                    self.equal()


                self.state = 4197
                self.textStringLiteral()
                pass

            elif la_ == 2:
                self.state = 4198
                self.match(SQLParser.REMOTE_SYMBOL)
                self.state = 4201
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.FOR_SYMBOL:
                    self.state = 4199
                    self.match(SQLParser.FOR_SYMBOL)
                    self.state = 4200
                    self.match(SQLParser.REPLICATION_SYMBOL)


                pass

            elif la_ == 3:
                self.state = 4203
                if not self.serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80014")
                self.state = 4204
                self.match(SQLParser.INSTANCE_SYMBOL)
                self.state = 4205
                self.match(SQLParser.FROM_SYMBOL)
                self.state = 4206
                self.user()
                self.state = 4207
                self.match(SQLParser.COLON_SYMBOL)
                self.state = 4208
                self.ulong_number()
                self.state = 4209
                self.match(SQLParser.IDENTIFIED_SYMBOL)
                self.state = 4210
                self.match(SQLParser.BY_SYMBOL)
                self.state = 4211
                self.textStringLiteral()
                self.state = 4213
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.DATA_SYMBOL or _la==SQLParser.REQUIRE_SYMBOL:
                    self.state = 4212
                    self.dataDirSSL()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataDirSSLContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ssl(self):
            return self.getTypedRuleContext(SQLParser.SslContext,0)


        def DATA_SYMBOL(self):
            return self.getToken(SQLParser.DATA_SYMBOL, 0)

        def DIRECTORY_SYMBOL(self):
            return self.getToken(SQLParser.DIRECTORY_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextStringLiteralContext,0)


        def equal(self):
            return self.getTypedRuleContext(SQLParser.EqualContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_dataDirSSL

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataDirSSL" ):
                listener.enterDataDirSSL(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataDirSSL" ):
                listener.exitDataDirSSL(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataDirSSL" ):
                return visitor.visitDataDirSSL(self)
            else:
                return visitor.visitChildren(self)




    def dataDirSSL(self):

        localctx = SQLParser.DataDirSSLContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_dataDirSSL)
        self._la = 0 # Token type
        try:
            self.state = 4227
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.REQUIRE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4217
                self.ssl()
                pass
            elif token in [SQLParser.DATA_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4218
                self.match(SQLParser.DATA_SYMBOL)
                self.state = 4219
                self.match(SQLParser.DIRECTORY_SYMBOL)
                self.state = 4221
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,487,self._ctx)
                if la_ == 1:
                    self.state = 4220
                    self.equal()


                self.state = 4223
                self.textStringLiteral()
                self.state = 4225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.REQUIRE_SYMBOL:
                    self.state = 4224
                    self.ssl()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SslContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REQUIRE_SYMBOL(self):
            return self.getToken(SQLParser.REQUIRE_SYMBOL, 0)

        def SSL_SYMBOL(self):
            return self.getToken(SQLParser.SSL_SYMBOL, 0)

        def NO_SYMBOL(self):
            return self.getToken(SQLParser.NO_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_ssl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSsl" ):
                listener.enterSsl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSsl" ):
                listener.exitSsl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSsl" ):
                return visitor.visitSsl(self)
            else:
                return visitor.visitChildren(self)




    def ssl(self):

        localctx = SQLParser.SslContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_ssl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4229
            self.match(SQLParser.REQUIRE_SYMBOL)
            self.state = 4231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.NO_SYMBOL:
                self.state = 4230
                self.match(SQLParser.NO_SYMBOL)


            self.state = 4233
            self.match(SQLParser.SSL_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccountManagementStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterUser(self):
            return self.getTypedRuleContext(SQLParser.AlterUserContext,0)


        def createUser(self):
            return self.getTypedRuleContext(SQLParser.CreateUserContext,0)


        def dropUser(self):
            return self.getTypedRuleContext(SQLParser.DropUserContext,0)


        def grant(self):
            return self.getTypedRuleContext(SQLParser.GrantContext,0)


        def renameUser(self):
            return self.getTypedRuleContext(SQLParser.RenameUserContext,0)


        def revoke(self):
            return self.getTypedRuleContext(SQLParser.RevokeContext,0)


        def setRole(self):
            return self.getTypedRuleContext(SQLParser.SetRoleContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_accountManagementStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccountManagementStatement" ):
                listener.enterAccountManagementStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccountManagementStatement" ):
                listener.exitAccountManagementStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccountManagementStatement" ):
                return visitor.visitAccountManagementStatement(self)
            else:
                return visitor.visitChildren(self)




    def accountManagementStatement(self):

        localctx = SQLParser.AccountManagementStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_accountManagementStatement)
        try:
            self.state = 4244
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,491,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4235
                if not self.serverVersion >= 50606:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50606")
                self.state = 4236
                self.alterUser()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4237
                self.createUser()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4238
                self.dropUser()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4239
                self.grant()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4240
                self.renameUser()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4241
                self.revoke()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4242
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 4243
                self.setRole()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(SQLParser.ALTER_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(SQLParser.USER_SYMBOL, 0)

        def alterUserTail(self):
            return self.getTypedRuleContext(SQLParser.AlterUserTailContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(SQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_alterUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUser" ):
                listener.enterAlterUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUser" ):
                listener.exitAlterUser(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterUser" ):
                return visitor.visitAlterUser(self)
            else:
                return visitor.visitChildren(self)




    def alterUser(self):

        localctx = SQLParser.AlterUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_alterUser)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4246
            self.match(SQLParser.ALTER_SYMBOL)
            self.state = 4247
            self.match(SQLParser.USER_SYMBOL)
            self.state = 4250
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,492,self._ctx)
            if la_ == 1:
                self.state = 4248
                if not self.serverVersion >= 50706:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50706")
                self.state = 4249
                self.ifExists()


            self.state = 4252
            self.alterUserTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterUserTailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createUserTail(self):
            return self.getTypedRuleContext(SQLParser.CreateUserTailContext,0)


        def createUserList(self):
            return self.getTypedRuleContext(SQLParser.CreateUserListContext,0)


        def alterUserList(self):
            return self.getTypedRuleContext(SQLParser.AlterUserListContext,0)


        def user(self):
            return self.getTypedRuleContext(SQLParser.UserContext,0)


        def IDENTIFIED_SYMBOL(self):
            return self.getToken(SQLParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(SQLParser.BY_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(SQLParser.TextStringContext,0)


        def replacePassword(self):
            return self.getTypedRuleContext(SQLParser.ReplacePasswordContext,0)


        def retainCurrentPassword(self):
            return self.getTypedRuleContext(SQLParser.RetainCurrentPasswordContext,0)


        def discardOldPassword(self):
            return self.getTypedRuleContext(SQLParser.DiscardOldPasswordContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(SQLParser.DEFAULT_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(SQLParser.ROLE_SYMBOL, 0)

        def ALL_SYMBOL(self):
            return self.getToken(SQLParser.ALL_SYMBOL, 0)

        def NONE_SYMBOL(self):
            return self.getToken(SQLParser.NONE_SYMBOL, 0)

        def roleList(self):
            return self.getTypedRuleContext(SQLParser.RoleListContext,0)


        def RANDOM_SYMBOL(self):
            return self.getToken(SQLParser.RANDOM_SYMBOL, 0)

        def PASSWORD_SYMBOL(self):
            return self.getToken(SQLParser.PASSWORD_SYMBOL, 0)

        def WITH_SYMBOL(self):
            return self.getToken(SQLParser.WITH_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(SQLParser.TextOrIdentifierContext,0)


        def FAILED_LOGIN_ATTEMPTS_SYMBOL(self):
            return self.getToken(SQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(SQLParser.Real_ulong_numberContext,0)


        def PASSWORD_LOCK_TIME_SYMBOL(self):
            return self.getToken(SQLParser.PASSWORD_LOCK_TIME_SYMBOL, 0)

        def UNBOUNDED_SYMBOL(self):
            return self.getToken(SQLParser.UNBOUNDED_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_alterUserTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUserTail" ):
                listener.enterAlterUserTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUserTail" ):
                listener.exitAlterUserTail(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterUserTail" ):
                return visitor.visitAlterUserTail(self)
            else:
                return visitor.visitChildren(self)




    def alterUserTail(self):

        localctx = SQLParser.AlterUserTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_alterUserTail)
        self._la = 0 # Token type
        try:
            self.state = 4308
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,500,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4258
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,493,self._ctx)
                if la_ == 1:
                    self.state = 4254
                    if not self.serverVersion < 80014:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion < 80014")
                    self.state = 4255
                    self.createUserList()
                    pass

                elif la_ == 2:
                    self.state = 4256
                    if not self.serverVersion >= 80014:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80014")
                    self.state = 4257
                    self.alterUserList()
                    pass


                self.state = 4260
                self.createUserTail()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4262
                if not self.serverVersion >= 50706:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50706")
                self.state = 4263
                self.user()
                self.state = 4264
                self.match(SQLParser.IDENTIFIED_SYMBOL)
                self.state = 4265
                self.match(SQLParser.BY_SYMBOL)
                self.state = 4266
                self.textString()
                self.state = 4269
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,494,self._ctx)
                if la_ == 1:
                    self.state = 4267
                    if not self.serverVersion >= 80014:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80014")
                    self.state = 4268
                    self.replacePassword()


                self.state = 4273
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,495,self._ctx)
                if la_ == 1:
                    self.state = 4271
                    if not self.serverVersion >= 80014:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80014")
                    self.state = 4272
                    self.retainCurrentPassword()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4275
                if not self.serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80014")
                self.state = 4276
                self.user()
                self.state = 4277
                self.discardOldPassword()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4279
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 4280
                self.user()
                self.state = 4281
                self.match(SQLParser.DEFAULT_SYMBOL)
                self.state = 4282
                self.match(SQLParser.ROLE_SYMBOL)
                self.state = 4286
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,496,self._ctx)
                if la_ == 1:
                    self.state = 4283
                    self.match(SQLParser.ALL_SYMBOL)
                    pass

                elif la_ == 2:
                    self.state = 4284
                    self.match(SQLParser.NONE_SYMBOL)
                    pass

                elif la_ == 3:
                    self.state = 4285
                    self.roleList()
                    pass


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4288
                if not self.serverVersion >= 80018:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80018")
                self.state = 4289
                self.user()
                self.state = 4290
                self.match(SQLParser.IDENTIFIED_SYMBOL)
                self.state = 4293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.WITH_SYMBOL:
                    self.state = 4291
                    self.match(SQLParser.WITH_SYMBOL)
                    self.state = 4292
                    self.textOrIdentifier()


                self.state = 4295
                self.match(SQLParser.BY_SYMBOL)
                self.state = 4296
                self.match(SQLParser.RANDOM_SYMBOL)
                self.state = 4297
                self.match(SQLParser.PASSWORD_SYMBOL)
                self.state = 4299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.RETAIN_SYMBOL:
                    self.state = 4298
                    self.retainCurrentPassword()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4301
                self.match(SQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL)
                self.state = 4302
                self.real_ulong_number()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4303
                self.match(SQLParser.PASSWORD_LOCK_TIME_SYMBOL)
                self.state = 4306
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLParser.INT_NUMBER, SQLParser.LONG_NUMBER, SQLParser.ULONGLONG_NUMBER, SQLParser.HEX_NUMBER]:
                    self.state = 4304
                    self.real_ulong_number()
                    pass
                elif token in [SQLParser.UNBOUNDED_SYMBOL]:
                    self.state = 4305
                    self.match(SQLParser.UNBOUNDED_SYMBOL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER_SYMBOL(self):
            return self.getToken(SQLParser.USER_SYMBOL, 0)

        def parentheses(self):
            return self.getTypedRuleContext(SQLParser.ParenthesesContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_userFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserFunction" ):
                listener.enterUserFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserFunction" ):
                listener.exitUserFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserFunction" ):
                return visitor.visitUserFunction(self)
            else:
                return visitor.visitChildren(self)




    def userFunction(self):

        localctx = SQLParser.UserFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_userFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4310
            self.match(SQLParser.USER_SYMBOL)
            self.state = 4311
            self.parentheses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(SQLParser.CREATE_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(SQLParser.USER_SYMBOL, 0)

        def createUserList(self):
            return self.getTypedRuleContext(SQLParser.CreateUserListContext,0)


        def defaultRoleClause(self):
            return self.getTypedRuleContext(SQLParser.DefaultRoleClauseContext,0)


        def createUserTail(self):
            return self.getTypedRuleContext(SQLParser.CreateUserTailContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(SQLParser.IfNotExistsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_createUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUser" ):
                listener.enterCreateUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUser" ):
                listener.exitCreateUser(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateUser" ):
                return visitor.visitCreateUser(self)
            else:
                return visitor.visitChildren(self)




    def createUser(self):

        localctx = SQLParser.CreateUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_createUser)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4313
            self.match(SQLParser.CREATE_SYMBOL)
            self.state = 4314
            self.match(SQLParser.USER_SYMBOL)
            self.state = 4318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,501,self._ctx)
            if la_ == 1:
                self.state = 4315
                if not self.serverVersion >= 50706:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50706")
                self.state = 4316
                self.ifNotExists()
                pass

            elif la_ == 2:
                pass


            self.state = 4320
            self.createUserList()
            self.state = 4321
            self.defaultRoleClause()
            self.state = 4322
            self.createUserTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUserTailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requireClause(self):
            return self.getTypedRuleContext(SQLParser.RequireClauseContext,0)


        def connectOptions(self):
            return self.getTypedRuleContext(SQLParser.ConnectOptionsContext,0)


        def accountLockPasswordExpireOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.AccountLockPasswordExpireOptionsContext)
            else:
                return self.getTypedRuleContext(SQLParser.AccountLockPasswordExpireOptionsContext,i)


        def getRuleIndex(self):
            return SQLParser.RULE_createUserTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUserTail" ):
                listener.enterCreateUserTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUserTail" ):
                listener.exitCreateUserTail(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateUserTail" ):
                return visitor.visitCreateUserTail(self)
            else:
                return visitor.visitChildren(self)




    def createUserTail(self):

        localctx = SQLParser.CreateUserTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_createUserTail)
        self._la = 0 # Token type
        try:
            self.state = 4338
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,505,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4324
                if not self.serverVersion >= 50706:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50706")
                self.state = 4326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.REQUIRE_SYMBOL:
                    self.state = 4325
                    self.requireClause()


                self.state = 4329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.WITH_SYMBOL:
                    self.state = 4328
                    self.connectOptions()


                self.state = 4334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLParser.ACCOUNT_SYMBOL or _la==SQLParser.PASSWORD_SYMBOL:
                    self.state = 4331
                    self.accountLockPasswordExpireOptions()
                    self.state = 4336
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultRoleClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT_SYMBOL(self):
            return self.getToken(SQLParser.DEFAULT_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(SQLParser.ROLE_SYMBOL, 0)

        def roleList(self):
            return self.getTypedRuleContext(SQLParser.RoleListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_defaultRoleClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultRoleClause" ):
                listener.enterDefaultRoleClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultRoleClause" ):
                listener.exitDefaultRoleClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultRoleClause" ):
                return visitor.visitDefaultRoleClause(self)
            else:
                return visitor.visitChildren(self)




    def defaultRoleClause(self):

        localctx = SQLParser.DefaultRoleClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_defaultRoleClause)
        try:
            self.state = 4347
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,507,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4340
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 4344
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,506,self._ctx)
                if la_ == 1:
                    self.state = 4341
                    self.match(SQLParser.DEFAULT_SYMBOL)
                    self.state = 4342
                    self.match(SQLParser.ROLE_SYMBOL)
                    self.state = 4343
                    self.roleList()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequireClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.option = None # Token

        def REQUIRE_SYMBOL(self):
            return self.getToken(SQLParser.REQUIRE_SYMBOL, 0)

        def requireList(self):
            return self.getTypedRuleContext(SQLParser.RequireListContext,0)


        def SSL_SYMBOL(self):
            return self.getToken(SQLParser.SSL_SYMBOL, 0)

        def X509_SYMBOL(self):
            return self.getToken(SQLParser.X509_SYMBOL, 0)

        def NONE_SYMBOL(self):
            return self.getToken(SQLParser.NONE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_requireClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequireClause" ):
                listener.enterRequireClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequireClause" ):
                listener.exitRequireClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRequireClause" ):
                return visitor.visitRequireClause(self)
            else:
                return visitor.visitChildren(self)




    def requireClause(self):

        localctx = SQLParser.RequireClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_requireClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4349
            self.match(SQLParser.REQUIRE_SYMBOL)
            self.state = 4352
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.CIPHER_SYMBOL, SQLParser.ISSUER_SYMBOL, SQLParser.SUBJECT_SYMBOL]:
                self.state = 4350
                self.requireList()
                pass
            elif token in [SQLParser.NONE_SYMBOL, SQLParser.SSL_SYMBOL, SQLParser.X509_SYMBOL]:
                self.state = 4351
                localctx.option = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLParser.NONE_SYMBOL or _la==SQLParser.SSL_SYMBOL or _la==SQLParser.X509_SYMBOL):
                    localctx.option = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_SYMBOL(self):
            return self.getToken(SQLParser.WITH_SYMBOL, 0)

        def MAX_QUERIES_PER_HOUR_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.MAX_QUERIES_PER_HOUR_SYMBOL)
            else:
                return self.getToken(SQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, i)

        def ulong_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.Ulong_numberContext)
            else:
                return self.getTypedRuleContext(SQLParser.Ulong_numberContext,i)


        def MAX_UPDATES_PER_HOUR_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.MAX_UPDATES_PER_HOUR_SYMBOL)
            else:
                return self.getToken(SQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, i)

        def MAX_CONNECTIONS_PER_HOUR_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL)
            else:
                return self.getToken(SQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, i)

        def MAX_USER_CONNECTIONS_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.MAX_USER_CONNECTIONS_SYMBOL)
            else:
                return self.getToken(SQLParser.MAX_USER_CONNECTIONS_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_connectOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConnectOptions" ):
                listener.enterConnectOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConnectOptions" ):
                listener.exitConnectOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectOptions" ):
                return visitor.visitConnectOptions(self)
            else:
                return visitor.visitChildren(self)




    def connectOptions(self):

        localctx = SQLParser.ConnectOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_connectOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4354
            self.match(SQLParser.WITH_SYMBOL)
            self.state = 4363 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4363
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLParser.MAX_QUERIES_PER_HOUR_SYMBOL]:
                    self.state = 4355
                    self.match(SQLParser.MAX_QUERIES_PER_HOUR_SYMBOL)
                    self.state = 4356
                    self.ulong_number()
                    pass
                elif token in [SQLParser.MAX_UPDATES_PER_HOUR_SYMBOL]:
                    self.state = 4357
                    self.match(SQLParser.MAX_UPDATES_PER_HOUR_SYMBOL)
                    self.state = 4358
                    self.ulong_number()
                    pass
                elif token in [SQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL]:
                    self.state = 4359
                    self.match(SQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL)
                    self.state = 4360
                    self.ulong_number()
                    pass
                elif token in [SQLParser.MAX_USER_CONNECTIONS_SYMBOL]:
                    self.state = 4361
                    self.match(SQLParser.MAX_USER_CONNECTIONS_SYMBOL)
                    self.state = 4362
                    self.ulong_number()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4365 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (SQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL - 321)) | (1 << (SQLParser.MAX_QUERIES_PER_HOUR_SYMBOL - 321)) | (1 << (SQLParser.MAX_UPDATES_PER_HOUR_SYMBOL - 321)) | (1 << (SQLParser.MAX_USER_CONNECTIONS_SYMBOL - 321)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccountLockPasswordExpireOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNT_SYMBOL(self):
            return self.getToken(SQLParser.ACCOUNT_SYMBOL, 0)

        def LOCK_SYMBOL(self):
            return self.getToken(SQLParser.LOCK_SYMBOL, 0)

        def UNLOCK_SYMBOL(self):
            return self.getToken(SQLParser.UNLOCK_SYMBOL, 0)

        def PASSWORD_SYMBOL(self):
            return self.getToken(SQLParser.PASSWORD_SYMBOL, 0)

        def EXPIRE_SYMBOL(self):
            return self.getToken(SQLParser.EXPIRE_SYMBOL, 0)

        def HISTORY_SYMBOL(self):
            return self.getToken(SQLParser.HISTORY_SYMBOL, 0)

        def REUSE_SYMBOL(self):
            return self.getToken(SQLParser.REUSE_SYMBOL, 0)

        def INTERVAL_SYMBOL(self):
            return self.getToken(SQLParser.INTERVAL_SYMBOL, 0)

        def REQUIRE_SYMBOL(self):
            return self.getToken(SQLParser.REQUIRE_SYMBOL, 0)

        def CURRENT_SYMBOL(self):
            return self.getToken(SQLParser.CURRENT_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(SQLParser.Real_ulong_numberContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(SQLParser.DEFAULT_SYMBOL, 0)

        def DAY_SYMBOL(self):
            return self.getToken(SQLParser.DAY_SYMBOL, 0)

        def NEVER_SYMBOL(self):
            return self.getToken(SQLParser.NEVER_SYMBOL, 0)

        def OPTIONAL_SYMBOL(self):
            return self.getToken(SQLParser.OPTIONAL_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_accountLockPasswordExpireOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccountLockPasswordExpireOptions" ):
                listener.enterAccountLockPasswordExpireOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccountLockPasswordExpireOptions" ):
                listener.exitAccountLockPasswordExpireOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccountLockPasswordExpireOptions" ):
                return visitor.visitAccountLockPasswordExpireOptions(self)
            else:
                return visitor.visitChildren(self)




    def accountLockPasswordExpireOptions(self):

        localctx = SQLParser.AccountLockPasswordExpireOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_accountLockPasswordExpireOptions)
        self._la = 0 # Token type
        try:
            self.state = 4400
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.ACCOUNT_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4367
                self.match(SQLParser.ACCOUNT_SYMBOL)
                self.state = 4368
                _la = self._input.LA(1)
                if not(_la==SQLParser.LOCK_SYMBOL or _la==SQLParser.UNLOCK_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [SQLParser.PASSWORD_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4369
                self.match(SQLParser.PASSWORD_SYMBOL)
                self.state = 4398
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,515,self._ctx)
                if la_ == 1:
                    self.state = 4370
                    self.match(SQLParser.EXPIRE_SYMBOL)
                    self.state = 4377
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SQLParser.INTERVAL_SYMBOL]:
                        self.state = 4371
                        self.match(SQLParser.INTERVAL_SYMBOL)
                        self.state = 4372
                        self.real_ulong_number()
                        self.state = 4373
                        self.match(SQLParser.DAY_SYMBOL)
                        pass
                    elif token in [SQLParser.NEVER_SYMBOL]:
                        self.state = 4375
                        self.match(SQLParser.NEVER_SYMBOL)
                        pass
                    elif token in [SQLParser.DEFAULT_SYMBOL]:
                        self.state = 4376
                        self.match(SQLParser.DEFAULT_SYMBOL)
                        pass
                    elif token in [SQLParser.EOF, SQLParser.ACCOUNT_SYMBOL, SQLParser.PASSWORD_SYMBOL, SQLParser.SEMICOLON_SYMBOL]:
                        pass
                    else:
                        pass
                    pass

                elif la_ == 2:
                    self.state = 4379
                    self.match(SQLParser.HISTORY_SYMBOL)
                    self.state = 4382
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SQLParser.INT_NUMBER, SQLParser.LONG_NUMBER, SQLParser.ULONGLONG_NUMBER, SQLParser.HEX_NUMBER]:
                        self.state = 4380
                        self.real_ulong_number()
                        pass
                    elif token in [SQLParser.DEFAULT_SYMBOL]:
                        self.state = 4381
                        self.match(SQLParser.DEFAULT_SYMBOL)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 3:
                    self.state = 4384
                    self.match(SQLParser.REUSE_SYMBOL)
                    self.state = 4385
                    self.match(SQLParser.INTERVAL_SYMBOL)
                    self.state = 4390
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SQLParser.INT_NUMBER, SQLParser.LONG_NUMBER, SQLParser.ULONGLONG_NUMBER, SQLParser.HEX_NUMBER]:
                        self.state = 4386
                        self.real_ulong_number()
                        self.state = 4387
                        self.match(SQLParser.DAY_SYMBOL)
                        pass
                    elif token in [SQLParser.DEFAULT_SYMBOL]:
                        self.state = 4389
                        self.match(SQLParser.DEFAULT_SYMBOL)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 4:
                    self.state = 4392
                    if not self.serverVersion >= 80014:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80014")
                    self.state = 4393
                    self.match(SQLParser.REQUIRE_SYMBOL)
                    self.state = 4394
                    self.match(SQLParser.CURRENT_SYMBOL)
                    self.state = 4396
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.DEFAULT_SYMBOL or _la==SQLParser.OPTIONAL_SYMBOL:
                        self.state = 4395
                        _la = self._input.LA(1)
                        if not(_la==SQLParser.DEFAULT_SYMBOL or _la==SQLParser.OPTIONAL_SYMBOL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(SQLParser.DROP_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(SQLParser.USER_SYMBOL, 0)

        def userList(self):
            return self.getTypedRuleContext(SQLParser.UserListContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(SQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_dropUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropUser" ):
                listener.enterDropUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropUser" ):
                listener.exitDropUser(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropUser" ):
                return visitor.visitDropUser(self)
            else:
                return visitor.visitChildren(self)




    def dropUser(self):

        localctx = SQLParser.DropUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_dropUser)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4402
            self.match(SQLParser.DROP_SYMBOL)
            self.state = 4403
            self.match(SQLParser.USER_SYMBOL)
            self.state = 4406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,517,self._ctx)
            if la_ == 1:
                self.state = 4404
                if not self.serverVersion >= 50706:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50706")
                self.state = 4405
                self.ifExists()


            self.state = 4408
            self.userList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.GRANT_SYMBOL)
            else:
                return self.getToken(SQLParser.GRANT_SYMBOL, i)

        def roleOrPrivilegesList(self):
            return self.getTypedRuleContext(SQLParser.RoleOrPrivilegesListContext,0)


        def TO_SYMBOL(self):
            return self.getToken(SQLParser.TO_SYMBOL, 0)

        def userList(self):
            return self.getTypedRuleContext(SQLParser.UserListContext,0)


        def ON_SYMBOL(self):
            return self.getToken(SQLParser.ON_SYMBOL, 0)

        def grantIdentifier(self):
            return self.getTypedRuleContext(SQLParser.GrantIdentifierContext,0)


        def grantTargetList(self):
            return self.getTypedRuleContext(SQLParser.GrantTargetListContext,0)


        def PROXY_SYMBOL(self):
            return self.getToken(SQLParser.PROXY_SYMBOL, 0)

        def user(self):
            return self.getTypedRuleContext(SQLParser.UserContext,0)


        def ALL_SYMBOL(self):
            return self.getToken(SQLParser.ALL_SYMBOL, 0)

        def WITH_SYMBOL(self):
            return self.getToken(SQLParser.WITH_SYMBOL, 0)

        def ADMIN_SYMBOL(self):
            return self.getToken(SQLParser.ADMIN_SYMBOL, 0)

        def OPTION_SYMBOL(self):
            return self.getToken(SQLParser.OPTION_SYMBOL, 0)

        def aclType(self):
            return self.getTypedRuleContext(SQLParser.AclTypeContext,0)


        def versionedRequireClause(self):
            return self.getTypedRuleContext(SQLParser.VersionedRequireClauseContext,0)


        def grantOptions(self):
            return self.getTypedRuleContext(SQLParser.GrantOptionsContext,0)


        def grantAs(self):
            return self.getTypedRuleContext(SQLParser.GrantAsContext,0)


        def PRIVILEGES_SYMBOL(self):
            return self.getToken(SQLParser.PRIVILEGES_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_grant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant" ):
                listener.enterGrant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant" ):
                listener.exitGrant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrant" ):
                return visitor.visitGrant(self)
            else:
                return visitor.visitChildren(self)




    def grant(self):

        localctx = SQLParser.GrantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_grant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4410
            self.match(SQLParser.GRANT_SYMBOL)
            self.state = 4453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,526,self._ctx)
            if la_ == 1:
                self.state = 4411
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 4412
                self.roleOrPrivilegesList()
                self.state = 4413
                self.match(SQLParser.TO_SYMBOL)
                self.state = 4414
                self.userList()
                self.state = 4418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.WITH_SYMBOL:
                    self.state = 4415
                    self.match(SQLParser.WITH_SYMBOL)
                    self.state = 4416
                    self.match(SQLParser.ADMIN_SYMBOL)
                    self.state = 4417
                    self.match(SQLParser.OPTION_SYMBOL)


                pass

            elif la_ == 2:
                self.state = 4425
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,520,self._ctx)
                if la_ == 1:
                    self.state = 4420
                    self.roleOrPrivilegesList()
                    pass

                elif la_ == 2:
                    self.state = 4421
                    self.match(SQLParser.ALL_SYMBOL)
                    self.state = 4423
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.PRIVILEGES_SYMBOL:
                        self.state = 4422
                        self.match(SQLParser.PRIVILEGES_SYMBOL)


                    pass


                self.state = 4427
                self.match(SQLParser.ON_SYMBOL)
                self.state = 4429
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,521,self._ctx)
                if la_ == 1:
                    self.state = 4428
                    self.aclType()


                self.state = 4431
                self.grantIdentifier()
                self.state = 4432
                self.match(SQLParser.TO_SYMBOL)
                self.state = 4433
                self.grantTargetList()
                self.state = 4435
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,522,self._ctx)
                if la_ == 1:
                    self.state = 4434
                    self.versionedRequireClause()


                self.state = 4438
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,523,self._ctx)
                if la_ == 1:
                    self.state = 4437
                    self.grantOptions()


                self.state = 4441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.AS_SYMBOL:
                    self.state = 4440
                    self.grantAs()


                pass

            elif la_ == 3:
                self.state = 4443
                self.match(SQLParser.PROXY_SYMBOL)
                self.state = 4444
                self.match(SQLParser.ON_SYMBOL)
                self.state = 4445
                self.user()
                self.state = 4446
                self.match(SQLParser.TO_SYMBOL)
                self.state = 4447
                self.grantTargetList()
                self.state = 4451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.WITH_SYMBOL:
                    self.state = 4448
                    self.match(SQLParser.WITH_SYMBOL)
                    self.state = 4449
                    self.match(SQLParser.GRANT_SYMBOL)
                    self.state = 4450
                    self.match(SQLParser.OPTION_SYMBOL)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantTargetListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createUserList(self):
            return self.getTypedRuleContext(SQLParser.CreateUserListContext,0)


        def userList(self):
            return self.getTypedRuleContext(SQLParser.UserListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_grantTargetList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantTargetList" ):
                listener.enterGrantTargetList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantTargetList" ):
                listener.exitGrantTargetList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrantTargetList" ):
                return visitor.visitGrantTargetList(self)
            else:
                return visitor.visitChildren(self)




    def grantTargetList(self):

        localctx = SQLParser.GrantTargetListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_grantTargetList)
        try:
            self.state = 4459
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,527,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4455
                if not self.serverVersion < 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 80011")
                self.state = 4456
                self.createUserList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4457
                if not self.serverVersion >= 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80011")
                self.state = 4458
                self.userList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_SYMBOL(self):
            return self.getToken(SQLParser.WITH_SYMBOL, 0)

        def grantOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.GrantOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.GrantOptionContext,i)


        def GRANT_SYMBOL(self):
            return self.getToken(SQLParser.GRANT_SYMBOL, 0)

        def OPTION_SYMBOL(self):
            return self.getToken(SQLParser.OPTION_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_grantOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantOptions" ):
                listener.enterGrantOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantOptions" ):
                listener.exitGrantOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrantOptions" ):
                return visitor.visitGrantOptions(self)
            else:
                return visitor.visitChildren(self)




    def grantOptions(self):

        localctx = SQLParser.GrantOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_grantOptions)
        self._la = 0 # Token type
        try:
            self.state = 4472
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,529,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4461
                if not self.serverVersion < 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 80011")
                self.state = 4462
                self.match(SQLParser.WITH_SYMBOL)
                self.state = 4464 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4463
                    self.grantOption()
                    self.state = 4466 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SQLParser.GRANT_SYMBOL or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (SQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL - 321)) | (1 << (SQLParser.MAX_QUERIES_PER_HOUR_SYMBOL - 321)) | (1 << (SQLParser.MAX_UPDATES_PER_HOUR_SYMBOL - 321)) | (1 << (SQLParser.MAX_USER_CONNECTIONS_SYMBOL - 321)))) != 0)):
                        break

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4468
                if not self.serverVersion >= 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80011")
                self.state = 4469
                self.match(SQLParser.WITH_SYMBOL)
                self.state = 4470
                self.match(SQLParser.GRANT_SYMBOL)
                self.state = 4471
                self.match(SQLParser.OPTION_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptRoleListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT_SYMBOL(self):
            return self.getToken(SQLParser.EXCEPT_SYMBOL, 0)

        def roleList(self):
            return self.getTypedRuleContext(SQLParser.RoleListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_exceptRoleList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptRoleList" ):
                listener.enterExceptRoleList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptRoleList" ):
                listener.exitExceptRoleList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExceptRoleList" ):
                return visitor.visitExceptRoleList(self)
            else:
                return visitor.visitChildren(self)




    def exceptRoleList(self):

        localctx = SQLParser.ExceptRoleListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_exceptRoleList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4474
            self.match(SQLParser.EXCEPT_SYMBOL)
            self.state = 4475
            self.roleList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithRolesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_SYMBOL(self):
            return self.getToken(SQLParser.WITH_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(SQLParser.ROLE_SYMBOL, 0)

        def roleList(self):
            return self.getTypedRuleContext(SQLParser.RoleListContext,0)


        def ALL_SYMBOL(self):
            return self.getToken(SQLParser.ALL_SYMBOL, 0)

        def NONE_SYMBOL(self):
            return self.getToken(SQLParser.NONE_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(SQLParser.DEFAULT_SYMBOL, 0)

        def exceptRoleList(self):
            return self.getTypedRuleContext(SQLParser.ExceptRoleListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_withRoles

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithRoles" ):
                listener.enterWithRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithRoles" ):
                listener.exitWithRoles(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithRoles" ):
                return visitor.visitWithRoles(self)
            else:
                return visitor.visitChildren(self)




    def withRoles(self):

        localctx = SQLParser.WithRolesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_withRoles)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4477
            self.match(SQLParser.WITH_SYMBOL)
            self.state = 4478
            self.match(SQLParser.ROLE_SYMBOL)
            self.state = 4486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,531,self._ctx)
            if la_ == 1:
                self.state = 4479
                self.roleList()
                pass

            elif la_ == 2:
                self.state = 4480
                self.match(SQLParser.ALL_SYMBOL)
                self.state = 4482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.EXCEPT_SYMBOL:
                    self.state = 4481
                    self.exceptRoleList()


                pass

            elif la_ == 3:
                self.state = 4484
                self.match(SQLParser.NONE_SYMBOL)
                pass

            elif la_ == 4:
                self.state = 4485
                self.match(SQLParser.DEFAULT_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantAsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS_SYMBOL(self):
            return self.getToken(SQLParser.AS_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(SQLParser.USER_SYMBOL, 0)

        def withRoles(self):
            return self.getTypedRuleContext(SQLParser.WithRolesContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_grantAs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantAs" ):
                listener.enterGrantAs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantAs" ):
                listener.exitGrantAs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrantAs" ):
                return visitor.visitGrantAs(self)
            else:
                return visitor.visitChildren(self)




    def grantAs(self):

        localctx = SQLParser.GrantAsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_grantAs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4488
            self.match(SQLParser.AS_SYMBOL)
            self.state = 4489
            self.match(SQLParser.USER_SYMBOL)
            self.state = 4491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.WITH_SYMBOL:
                self.state = 4490
                self.withRoles()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionedRequireClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requireClause(self):
            return self.getTypedRuleContext(SQLParser.RequireClauseContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_versionedRequireClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionedRequireClause" ):
                listener.enterVersionedRequireClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionedRequireClause" ):
                listener.exitVersionedRequireClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersionedRequireClause" ):
                return visitor.visitVersionedRequireClause(self)
            else:
                return visitor.visitChildren(self)




    def versionedRequireClause(self):

        localctx = SQLParser.VersionedRequireClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_versionedRequireClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4493
            if not self.serverVersion < 80011:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.serverVersion < 80011")
            self.state = 4494
            self.requireClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME_SYMBOL(self):
            return self.getToken(SQLParser.RENAME_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(SQLParser.USER_SYMBOL, 0)

        def user(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.UserContext)
            else:
                return self.getTypedRuleContext(SQLParser.UserContext,i)


        def TO_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.TO_SYMBOL)
            else:
                return self.getToken(SQLParser.TO_SYMBOL, i)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_renameUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameUser" ):
                listener.enterRenameUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameUser" ):
                listener.exitRenameUser(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameUser" ):
                return visitor.visitRenameUser(self)
            else:
                return visitor.visitChildren(self)




    def renameUser(self):

        localctx = SQLParser.RenameUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_renameUser)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4496
            self.match(SQLParser.RENAME_SYMBOL)
            self.state = 4497
            self.match(SQLParser.USER_SYMBOL)
            self.state = 4498
            self.user()
            self.state = 4499
            self.match(SQLParser.TO_SYMBOL)
            self.state = 4500
            self.user()
            self.state = 4508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 4501
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 4502
                self.user()
                self.state = 4503
                self.match(SQLParser.TO_SYMBOL)
                self.state = 4504
                self.user()
                self.state = 4510
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE_SYMBOL(self):
            return self.getToken(SQLParser.REVOKE_SYMBOL, 0)

        def roleOrPrivilegesList(self):
            return self.getTypedRuleContext(SQLParser.RoleOrPrivilegesListContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(SQLParser.FROM_SYMBOL, 0)

        def userList(self):
            return self.getTypedRuleContext(SQLParser.UserListContext,0)


        def onTypeTo(self):
            return self.getTypedRuleContext(SQLParser.OnTypeToContext,0)


        def ALL_SYMBOL(self):
            return self.getToken(SQLParser.ALL_SYMBOL, 0)

        def PROXY_SYMBOL(self):
            return self.getToken(SQLParser.PROXY_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(SQLParser.ON_SYMBOL, 0)

        def user(self):
            return self.getTypedRuleContext(SQLParser.UserContext,0)


        def grantIdentifier(self):
            return self.getTypedRuleContext(SQLParser.GrantIdentifierContext,0)


        def COMMA_SYMBOL(self):
            return self.getToken(SQLParser.COMMA_SYMBOL, 0)

        def GRANT_SYMBOL(self):
            return self.getToken(SQLParser.GRANT_SYMBOL, 0)

        def OPTION_SYMBOL(self):
            return self.getToken(SQLParser.OPTION_SYMBOL, 0)

        def PRIVILEGES_SYMBOL(self):
            return self.getToken(SQLParser.PRIVILEGES_SYMBOL, 0)

        def aclType(self):
            return self.getTypedRuleContext(SQLParser.AclTypeContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_revoke

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke" ):
                listener.enterRevoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke" ):
                listener.exitRevoke(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRevoke" ):
                return visitor.visitRevoke(self)
            else:
                return visitor.visitChildren(self)




    def revoke(self):

        localctx = SQLParser.RevokeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_revoke)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4511
            self.match(SQLParser.REVOKE_SYMBOL)
            self.state = 4545
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,537,self._ctx)
            if la_ == 1:
                self.state = 4512
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 4513
                self.roleOrPrivilegesList()
                self.state = 4514
                self.match(SQLParser.FROM_SYMBOL)
                self.state = 4515
                self.userList()
                pass

            elif la_ == 2:
                self.state = 4517
                self.roleOrPrivilegesList()
                self.state = 4518
                self.onTypeTo()
                self.state = 4519
                self.match(SQLParser.FROM_SYMBOL)
                self.state = 4520
                self.userList()
                pass

            elif la_ == 3:
                self.state = 4522
                self.match(SQLParser.ALL_SYMBOL)
                self.state = 4524
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,534,self._ctx)
                if la_ == 1:
                    self.state = 4523
                    self.match(SQLParser.PRIVILEGES_SYMBOL)


                self.state = 4537
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,536,self._ctx)
                if la_ == 1:
                    self.state = 4526
                    if not self.serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80000")
                    self.state = 4527
                    self.match(SQLParser.ON_SYMBOL)
                    self.state = 4529
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,535,self._ctx)
                    if la_ == 1:
                        self.state = 4528
                        self.aclType()


                    self.state = 4531
                    self.grantIdentifier()
                    pass

                elif la_ == 2:
                    self.state = 4532
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 4533
                    self.match(SQLParser.GRANT_SYMBOL)
                    self.state = 4534
                    self.match(SQLParser.OPTION_SYMBOL)
                    self.state = 4535
                    self.match(SQLParser.FROM_SYMBOL)
                    self.state = 4536
                    self.userList()
                    pass


                pass

            elif la_ == 4:
                self.state = 4539
                self.match(SQLParser.PROXY_SYMBOL)
                self.state = 4540
                self.match(SQLParser.ON_SYMBOL)
                self.state = 4541
                self.user()
                self.state = 4542
                self.match(SQLParser.FROM_SYMBOL)
                self.state = 4543
                self.userList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnTypeToContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_SYMBOL(self):
            return self.getToken(SQLParser.ON_SYMBOL, 0)

        def grantIdentifier(self):
            return self.getTypedRuleContext(SQLParser.GrantIdentifierContext,0)


        def aclType(self):
            return self.getTypedRuleContext(SQLParser.AclTypeContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_onTypeTo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnTypeTo" ):
                listener.enterOnTypeTo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnTypeTo" ):
                listener.exitOnTypeTo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOnTypeTo" ):
                return visitor.visitOnTypeTo(self)
            else:
                return visitor.visitChildren(self)




    def onTypeTo(self):

        localctx = SQLParser.OnTypeToContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_onTypeTo)
        self._la = 0 # Token type
        try:
            self.state = 4561
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,541,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4547
                if not self.serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 80000")
                self.state = 4548
                self.match(SQLParser.ON_SYMBOL)
                self.state = 4550
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,538,self._ctx)
                if la_ == 1:
                    self.state = 4549
                    self.aclType()


                self.state = 4552
                self.grantIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4553
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 4559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.ON_SYMBOL:
                    self.state = 4554
                    self.match(SQLParser.ON_SYMBOL)
                    self.state = 4556
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,539,self._ctx)
                    if la_ == 1:
                        self.state = 4555
                        self.aclType()


                    self.state = 4558
                    self.grantIdentifier()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AclTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE_SYMBOL(self):
            return self.getToken(SQLParser.TABLE_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(SQLParser.FUNCTION_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(SQLParser.PROCEDURE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_aclType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAclType" ):
                listener.enterAclType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAclType" ):
                listener.exitAclType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAclType" ):
                return visitor.visitAclType(self)
            else:
                return visitor.visitChildren(self)




    def aclType(self):

        localctx = SQLParser.AclTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_aclType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4563
            _la = self._input.LA(1)
            if not(_la==SQLParser.FUNCTION_SYMBOL or _la==SQLParser.PROCEDURE_SYMBOL or _la==SQLParser.TABLE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleOrPrivilegesListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def roleOrPrivilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.RoleOrPrivilegeContext)
            else:
                return self.getTypedRuleContext(SQLParser.RoleOrPrivilegeContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_roleOrPrivilegesList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleOrPrivilegesList" ):
                listener.enterRoleOrPrivilegesList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleOrPrivilegesList" ):
                listener.exitRoleOrPrivilegesList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoleOrPrivilegesList" ):
                return visitor.visitRoleOrPrivilegesList(self)
            else:
                return visitor.visitChildren(self)




    def roleOrPrivilegesList(self):

        localctx = SQLParser.RoleOrPrivilegesListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_roleOrPrivilegesList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4565
            self.roleOrPrivilege()
            self.state = 4570
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,542,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4566
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 4567
                    self.roleOrPrivilege() 
                self.state = 4572
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,542,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleOrPrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.object = None # Token

        def roleIdentifierOrText(self):
            return self.getTypedRuleContext(SQLParser.RoleIdentifierOrTextContext,0)


        def AT_TEXT_SUFFIX(self):
            return self.getToken(SQLParser.AT_TEXT_SUFFIX, 0)

        def AT_SIGN_SYMBOL(self):
            return self.getToken(SQLParser.AT_SIGN_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(SQLParser.TextOrIdentifierContext,0)


        def columnInternalRefList(self):
            return self.getTypedRuleContext(SQLParser.ColumnInternalRefListContext,0)


        def SELECT_SYMBOL(self):
            return self.getToken(SQLParser.SELECT_SYMBOL, 0)

        def INSERT_SYMBOL(self):
            return self.getToken(SQLParser.INSERT_SYMBOL, 0)

        def UPDATE_SYMBOL(self):
            return self.getToken(SQLParser.UPDATE_SYMBOL, 0)

        def REFERENCES_SYMBOL(self):
            return self.getToken(SQLParser.REFERENCES_SYMBOL, 0)

        def DELETE_SYMBOL(self):
            return self.getToken(SQLParser.DELETE_SYMBOL, 0)

        def USAGE_SYMBOL(self):
            return self.getToken(SQLParser.USAGE_SYMBOL, 0)

        def INDEX_SYMBOL(self):
            return self.getToken(SQLParser.INDEX_SYMBOL, 0)

        def DROP_SYMBOL(self):
            return self.getToken(SQLParser.DROP_SYMBOL, 0)

        def EXECUTE_SYMBOL(self):
            return self.getToken(SQLParser.EXECUTE_SYMBOL, 0)

        def RELOAD_SYMBOL(self):
            return self.getToken(SQLParser.RELOAD_SYMBOL, 0)

        def SHUTDOWN_SYMBOL(self):
            return self.getToken(SQLParser.SHUTDOWN_SYMBOL, 0)

        def PROCESS_SYMBOL(self):
            return self.getToken(SQLParser.PROCESS_SYMBOL, 0)

        def FILE_SYMBOL(self):
            return self.getToken(SQLParser.FILE_SYMBOL, 0)

        def PROXY_SYMBOL(self):
            return self.getToken(SQLParser.PROXY_SYMBOL, 0)

        def SUPER_SYMBOL(self):
            return self.getToken(SQLParser.SUPER_SYMBOL, 0)

        def EVENT_SYMBOL(self):
            return self.getToken(SQLParser.EVENT_SYMBOL, 0)

        def TRIGGER_SYMBOL(self):
            return self.getToken(SQLParser.TRIGGER_SYMBOL, 0)

        def GRANT_SYMBOL(self):
            return self.getToken(SQLParser.GRANT_SYMBOL, 0)

        def OPTION_SYMBOL(self):
            return self.getToken(SQLParser.OPTION_SYMBOL, 0)

        def SHOW_SYMBOL(self):
            return self.getToken(SQLParser.SHOW_SYMBOL, 0)

        def DATABASES_SYMBOL(self):
            return self.getToken(SQLParser.DATABASES_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(SQLParser.CREATE_SYMBOL, 0)

        def TEMPORARY_SYMBOL(self):
            return self.getToken(SQLParser.TEMPORARY_SYMBOL, 0)

        def TABLES_SYMBOL(self):
            return self.getToken(SQLParser.TABLES_SYMBOL, 0)

        def ROUTINE_SYMBOL(self):
            return self.getToken(SQLParser.ROUTINE_SYMBOL, 0)

        def TABLESPACE_SYMBOL(self):
            return self.getToken(SQLParser.TABLESPACE_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(SQLParser.USER_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(SQLParser.VIEW_SYMBOL, 0)

        def LOCK_SYMBOL(self):
            return self.getToken(SQLParser.LOCK_SYMBOL, 0)

        def REPLICATION_SYMBOL(self):
            return self.getToken(SQLParser.REPLICATION_SYMBOL, 0)

        def CLIENT_SYMBOL(self):
            return self.getToken(SQLParser.CLIENT_SYMBOL, 0)

        def SLAVE_SYMBOL(self):
            return self.getToken(SQLParser.SLAVE_SYMBOL, 0)

        def ALTER_SYMBOL(self):
            return self.getToken(SQLParser.ALTER_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(SQLParser.ROLE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_roleOrPrivilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleOrPrivilege" ):
                listener.enterRoleOrPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleOrPrivilege" ):
                listener.exitRoleOrPrivilege(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoleOrPrivilege" ):
                return visitor.visitRoleOrPrivilege(self)
            else:
                return visitor.visitChildren(self)




    def roleOrPrivilege(self):

        localctx = SQLParser.RoleOrPrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_roleOrPrivilege)
        self._la = 0 # Token type
        try:
            self.state = 4614
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,549,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4573
                if not self.serverVersion > 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion > 80000")
                self.state = 4584
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,545,self._ctx)
                if la_ == 1:
                    self.state = 4574
                    self.roleIdentifierOrText()
                    self.state = 4576
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,543,self._ctx)
                    if la_ == 1:
                        self.state = 4575
                        self.columnInternalRefList()


                    pass

                elif la_ == 2:
                    self.state = 4578
                    self.roleIdentifierOrText()
                    self.state = 4582
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SQLParser.AT_TEXT_SUFFIX]:
                        self.state = 4579
                        self.match(SQLParser.AT_TEXT_SUFFIX)
                        pass
                    elif token in [SQLParser.AT_SIGN_SYMBOL]:
                        self.state = 4580
                        self.match(SQLParser.AT_SIGN_SYMBOL)
                        self.state = 4581
                        self.textOrIdentifier()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4586
                _la = self._input.LA(1)
                if not(_la==SQLParser.INSERT_SYMBOL or _la==SQLParser.REFERENCES_SYMBOL or _la==SQLParser.SELECT_SYMBOL or _la==SQLParser.UPDATE_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4588
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,546,self._ctx)
                if la_ == 1:
                    self.state = 4587
                    self.columnInternalRefList()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4590
                _la = self._input.LA(1)
                if not(((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & ((1 << (SQLParser.DELETE_SYMBOL - 133)) | (1 << (SQLParser.DROP_SYMBOL - 133)) | (1 << (SQLParser.EVENT_SYMBOL - 133)) | (1 << (SQLParser.EXECUTE_SYMBOL - 133)) | (1 << (SQLParser.FILE_SYMBOL - 133)))) != 0) or _la==SQLParser.INDEX_SYMBOL or ((((_la - 423)) & ~0x3f) == 0 and ((1 << (_la - 423)) & ((1 << (SQLParser.PROCESS_SYMBOL - 423)) | (1 << (SQLParser.PROXY_SYMBOL - 423)) | (1 << (SQLParser.RELOAD_SYMBOL - 423)))) != 0) or _la==SQLParser.SHUTDOWN_SYMBOL or _la==SQLParser.SUPER_SYMBOL or _la==SQLParser.TRIGGER_SYMBOL or _la==SQLParser.USAGE_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4591
                self.match(SQLParser.GRANT_SYMBOL)
                self.state = 4592
                self.match(SQLParser.OPTION_SYMBOL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4593
                self.match(SQLParser.SHOW_SYMBOL)
                self.state = 4594
                self.match(SQLParser.DATABASES_SYMBOL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4595
                self.match(SQLParser.CREATE_SYMBOL)
                self.state = 4599
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,547,self._ctx)
                if la_ == 1:
                    self.state = 4596
                    self.match(SQLParser.TEMPORARY_SYMBOL)
                    self.state = 4597
                    localctx.object = self.match(SQLParser.TABLES_SYMBOL)

                elif la_ == 2:
                    self.state = 4598
                    localctx.object = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SQLParser.ROUTINE_SYMBOL or _la==SQLParser.TABLESPACE_SYMBOL or _la==SQLParser.USER_SYMBOL or _la==SQLParser.VIEW_SYMBOL):
                        localctx.object = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4601
                self.match(SQLParser.LOCK_SYMBOL)
                self.state = 4602
                self.match(SQLParser.TABLES_SYMBOL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4603
                self.match(SQLParser.REPLICATION_SYMBOL)
                self.state = 4604
                localctx.object = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLParser.CLIENT_SYMBOL or _la==SQLParser.SLAVE_SYMBOL):
                    localctx.object = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4605
                self.match(SQLParser.SHOW_SYMBOL)
                self.state = 4606
                self.match(SQLParser.VIEW_SYMBOL)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4607
                self.match(SQLParser.ALTER_SYMBOL)
                self.state = 4609
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,548,self._ctx)
                if la_ == 1:
                    self.state = 4608
                    self.match(SQLParser.ROUTINE_SYMBOL)


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4611
                if not self.serverVersion > 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion > 80000")
                self.state = 4612
                _la = self._input.LA(1)
                if not(_la==SQLParser.CREATE_SYMBOL or _la==SQLParser.DROP_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4613
                self.match(SQLParser.ROLE_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MULT_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.MULT_OPERATOR)
            else:
                return self.getToken(SQLParser.MULT_OPERATOR, i)

        def DOT_SYMBOL(self):
            return self.getToken(SQLParser.DOT_SYMBOL, 0)

        def schemaRef(self):
            return self.getTypedRuleContext(SQLParser.SchemaRefContext,0)


        def tableRef(self):
            return self.getTypedRuleContext(SQLParser.TableRefContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_grantIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantIdentifier" ):
                listener.enterGrantIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantIdentifier" ):
                listener.exitGrantIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrantIdentifier" ):
                return visitor.visitGrantIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def grantIdentifier(self):

        localctx = SQLParser.GrantIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_grantIdentifier)
        self._la = 0 # Token type
        try:
            self.state = 4632
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,552,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4616
                self.match(SQLParser.MULT_OPERATOR)
                self.state = 4619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.DOT_SYMBOL:
                    self.state = 4617
                    self.match(SQLParser.DOT_SYMBOL)
                    self.state = 4618
                    self.match(SQLParser.MULT_OPERATOR)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4621
                self.schemaRef()
                self.state = 4624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.DOT_SYMBOL:
                    self.state = 4622
                    self.match(SQLParser.DOT_SYMBOL)
                    self.state = 4623
                    self.match(SQLParser.MULT_OPERATOR)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4626
                self.tableRef()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4627
                if not self.serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80017")
                self.state = 4628
                self.schemaRef()
                self.state = 4629
                self.match(SQLParser.DOT_SYMBOL)
                self.state = 4630
                self.tableRef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequireListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requireListElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.RequireListElementContext)
            else:
                return self.getTypedRuleContext(SQLParser.RequireListElementContext,i)


        def AND_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.AND_SYMBOL)
            else:
                return self.getToken(SQLParser.AND_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_requireList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequireList" ):
                listener.enterRequireList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequireList" ):
                listener.exitRequireList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRequireList" ):
                return visitor.visitRequireList(self)
            else:
                return visitor.visitChildren(self)




    def requireList(self):

        localctx = SQLParser.RequireListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_requireList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4634
            self.requireListElement()
            self.state = 4641
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,554,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4636
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.AND_SYMBOL:
                        self.state = 4635
                        self.match(SQLParser.AND_SYMBOL)


                    self.state = 4638
                    self.requireListElement() 
                self.state = 4643
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,554,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequireListElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.element = None # Token

        def textString(self):
            return self.getTypedRuleContext(SQLParser.TextStringContext,0)


        def CIPHER_SYMBOL(self):
            return self.getToken(SQLParser.CIPHER_SYMBOL, 0)

        def ISSUER_SYMBOL(self):
            return self.getToken(SQLParser.ISSUER_SYMBOL, 0)

        def SUBJECT_SYMBOL(self):
            return self.getToken(SQLParser.SUBJECT_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_requireListElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequireListElement" ):
                listener.enterRequireListElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequireListElement" ):
                listener.exitRequireListElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRequireListElement" ):
                return visitor.visitRequireListElement(self)
            else:
                return visitor.visitChildren(self)




    def requireListElement(self):

        localctx = SQLParser.RequireListElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_requireListElement)
        try:
            self.state = 4650
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.CIPHER_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4644
                localctx.element = self.match(SQLParser.CIPHER_SYMBOL)
                self.state = 4645
                self.textString()
                pass
            elif token in [SQLParser.ISSUER_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4646
                localctx.element = self.match(SQLParser.ISSUER_SYMBOL)
                self.state = 4647
                self.textString()
                pass
            elif token in [SQLParser.SUBJECT_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4648
                localctx.element = self.match(SQLParser.SUBJECT_SYMBOL)
                self.state = 4649
                self.textString()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.option = None # Token

        def OPTION_SYMBOL(self):
            return self.getToken(SQLParser.OPTION_SYMBOL, 0)

        def GRANT_SYMBOL(self):
            return self.getToken(SQLParser.GRANT_SYMBOL, 0)

        def ulong_number(self):
            return self.getTypedRuleContext(SQLParser.Ulong_numberContext,0)


        def MAX_QUERIES_PER_HOUR_SYMBOL(self):
            return self.getToken(SQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0)

        def MAX_UPDATES_PER_HOUR_SYMBOL(self):
            return self.getToken(SQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0)

        def MAX_CONNECTIONS_PER_HOUR_SYMBOL(self):
            return self.getToken(SQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0)

        def MAX_USER_CONNECTIONS_SYMBOL(self):
            return self.getToken(SQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_grantOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantOption" ):
                listener.enterGrantOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantOption" ):
                listener.exitGrantOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrantOption" ):
                return visitor.visitGrantOption(self)
            else:
                return visitor.visitChildren(self)




    def grantOption(self):

        localctx = SQLParser.GrantOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_grantOption)
        try:
            self.state = 4662
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.GRANT_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4652
                localctx.option = self.match(SQLParser.GRANT_SYMBOL)
                self.state = 4653
                self.match(SQLParser.OPTION_SYMBOL)
                pass
            elif token in [SQLParser.MAX_QUERIES_PER_HOUR_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4654
                localctx.option = self.match(SQLParser.MAX_QUERIES_PER_HOUR_SYMBOL)
                self.state = 4655
                self.ulong_number()
                pass
            elif token in [SQLParser.MAX_UPDATES_PER_HOUR_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4656
                localctx.option = self.match(SQLParser.MAX_UPDATES_PER_HOUR_SYMBOL)
                self.state = 4657
                self.ulong_number()
                pass
            elif token in [SQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4658
                localctx.option = self.match(SQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL)
                self.state = 4659
                self.ulong_number()
                pass
            elif token in [SQLParser.MAX_USER_CONNECTIONS_SYMBOL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4660
                localctx.option = self.match(SQLParser.MAX_USER_CONNECTIONS_SYMBOL)
                self.state = 4661
                self.ulong_number()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET_SYMBOL(self):
            return self.getToken(SQLParser.SET_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(SQLParser.ROLE_SYMBOL, 0)

        def roleList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.RoleListContext)
            else:
                return self.getTypedRuleContext(SQLParser.RoleListContext,i)


        def NONE_SYMBOL(self):
            return self.getToken(SQLParser.NONE_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(SQLParser.DEFAULT_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(SQLParser.TO_SYMBOL, 0)

        def ALL_SYMBOL(self):
            return self.getToken(SQLParser.ALL_SYMBOL, 0)

        def EXCEPT_SYMBOL(self):
            return self.getToken(SQLParser.EXCEPT_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_setRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetRole" ):
                listener.enterSetRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetRole" ):
                listener.exitSetRole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetRole" ):
                return visitor.visitSetRole(self)
            else:
                return visitor.visitChildren(self)




    def setRole(self):

        localctx = SQLParser.SetRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_setRole)
        self._la = 0 # Token type
        try:
            self.state = 4687
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,559,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4664
                self.match(SQLParser.SET_SYMBOL)
                self.state = 4665
                self.match(SQLParser.ROLE_SYMBOL)
                self.state = 4666
                self.roleList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4667
                self.match(SQLParser.SET_SYMBOL)
                self.state = 4668
                self.match(SQLParser.ROLE_SYMBOL)
                self.state = 4669
                _la = self._input.LA(1)
                if not(_la==SQLParser.DEFAULT_SYMBOL or _la==SQLParser.NONE_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4670
                self.match(SQLParser.SET_SYMBOL)
                self.state = 4671
                self.match(SQLParser.DEFAULT_SYMBOL)
                self.state = 4672
                self.match(SQLParser.ROLE_SYMBOL)
                self.state = 4676
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,557,self._ctx)
                if la_ == 1:
                    self.state = 4673
                    self.roleList()
                    pass

                elif la_ == 2:
                    self.state = 4674
                    self.match(SQLParser.NONE_SYMBOL)
                    pass

                elif la_ == 3:
                    self.state = 4675
                    self.match(SQLParser.ALL_SYMBOL)
                    pass


                self.state = 4678
                self.match(SQLParser.TO_SYMBOL)
                self.state = 4679
                self.roleList()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4680
                self.match(SQLParser.SET_SYMBOL)
                self.state = 4681
                self.match(SQLParser.ROLE_SYMBOL)
                self.state = 4682
                self.match(SQLParser.ALL_SYMBOL)
                self.state = 4685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.EXCEPT_SYMBOL:
                    self.state = 4683
                    self.match(SQLParser.EXCEPT_SYMBOL)
                    self.state = 4684
                    self.roleList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def role(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.RoleContext)
            else:
                return self.getTypedRuleContext(SQLParser.RoleContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_roleList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleList" ):
                listener.enterRoleList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleList" ):
                listener.exitRoleList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoleList" ):
                return visitor.visitRoleList(self)
            else:
                return visitor.visitChildren(self)




    def roleList(self):

        localctx = SQLParser.RoleListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_roleList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4689
            self.role()
            self.state = 4694
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,560,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4690
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 4691
                    self.role() 
                self.state = 4696
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,560,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def roleIdentifierOrText(self):
            return self.getTypedRuleContext(SQLParser.RoleIdentifierOrTextContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(SQLParser.AT_SIGN_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(SQLParser.TextOrIdentifierContext,0)


        def AT_TEXT_SUFFIX(self):
            return self.getToken(SQLParser.AT_TEXT_SUFFIX, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRole" ):
                listener.enterRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRole" ):
                listener.exitRole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRole" ):
                return visitor.visitRole(self)
            else:
                return visitor.visitChildren(self)




    def role(self):

        localctx = SQLParser.RoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_role)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4697
            self.roleIdentifierOrText()
            self.state = 4701
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,561,self._ctx)
            if la_ == 1:
                self.state = 4698
                self.match(SQLParser.AT_SIGN_SYMBOL)
                self.state = 4699
                self.textOrIdentifier()

            elif la_ == 2:
                self.state = 4700
                self.match(SQLParser.AT_TEXT_SUFFIX)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableAdministrationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None # Token

        def TABLE_SYMBOL(self):
            return self.getToken(SQLParser.TABLE_SYMBOL, 0)

        def tableRefList(self):
            return self.getTypedRuleContext(SQLParser.TableRefListContext,0)


        def ANALYZE_SYMBOL(self):
            return self.getToken(SQLParser.ANALYZE_SYMBOL, 0)

        def noWriteToBinLog(self):
            return self.getTypedRuleContext(SQLParser.NoWriteToBinLogContext,0)


        def histogram(self):
            return self.getTypedRuleContext(SQLParser.HistogramContext,0)


        def CHECK_SYMBOL(self):
            return self.getToken(SQLParser.CHECK_SYMBOL, 0)

        def checkOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.CheckOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.CheckOptionContext,i)


        def CHECKSUM_SYMBOL(self):
            return self.getToken(SQLParser.CHECKSUM_SYMBOL, 0)

        def QUICK_SYMBOL(self):
            return self.getToken(SQLParser.QUICK_SYMBOL, 0)

        def EXTENDED_SYMBOL(self):
            return self.getToken(SQLParser.EXTENDED_SYMBOL, 0)

        def OPTIMIZE_SYMBOL(self):
            return self.getToken(SQLParser.OPTIMIZE_SYMBOL, 0)

        def REPAIR_SYMBOL(self):
            return self.getToken(SQLParser.REPAIR_SYMBOL, 0)

        def repairType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.RepairTypeContext)
            else:
                return self.getTypedRuleContext(SQLParser.RepairTypeContext,i)


        def getRuleIndex(self):
            return SQLParser.RULE_tableAdministrationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableAdministrationStatement" ):
                listener.enterTableAdministrationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableAdministrationStatement" ):
                listener.exitTableAdministrationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableAdministrationStatement" ):
                return visitor.visitTableAdministrationStatement(self)
            else:
                return visitor.visitChildren(self)




    def tableAdministrationStatement(self):

        localctx = SQLParser.TableAdministrationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_tableAdministrationStatement)
        self._la = 0 # Token type
        try:
            self.state = 4746
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.ANALYZE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4703
                localctx.type = self.match(SQLParser.ANALYZE_SYMBOL)
                self.state = 4705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.LOCAL_SYMBOL or _la==SQLParser.NO_WRITE_TO_BINLOG_SYMBOL:
                    self.state = 4704
                    self.noWriteToBinLog()


                self.state = 4707
                self.match(SQLParser.TABLE_SYMBOL)
                self.state = 4708
                self.tableRefList()
                self.state = 4711
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,563,self._ctx)
                if la_ == 1:
                    self.state = 4709
                    if not self.serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80000")
                    self.state = 4710
                    self.histogram()


                pass
            elif token in [SQLParser.CHECK_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4713
                localctx.type = self.match(SQLParser.CHECK_SYMBOL)
                self.state = 4714
                self.match(SQLParser.TABLE_SYMBOL)
                self.state = 4715
                self.tableRefList()
                self.state = 4719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLParser.CHANGED_SYMBOL or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (SQLParser.EXTENDED_SYMBOL - 180)) | (1 << (SQLParser.FAST_SYMBOL - 180)) | (1 << (SQLParser.FOR_SYMBOL - 180)))) != 0) or _la==SQLParser.MEDIUM_SYMBOL or _la==SQLParser.QUICK_SYMBOL:
                    self.state = 4716
                    self.checkOption()
                    self.state = 4721
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [SQLParser.CHECKSUM_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4722
                localctx.type = self.match(SQLParser.CHECKSUM_SYMBOL)
                self.state = 4723
                self.match(SQLParser.TABLE_SYMBOL)
                self.state = 4724
                self.tableRefList()
                self.state = 4726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.EXTENDED_SYMBOL or _la==SQLParser.QUICK_SYMBOL:
                    self.state = 4725
                    _la = self._input.LA(1)
                    if not(_la==SQLParser.EXTENDED_SYMBOL or _la==SQLParser.QUICK_SYMBOL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [SQLParser.OPTIMIZE_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4728
                localctx.type = self.match(SQLParser.OPTIMIZE_SYMBOL)
                self.state = 4730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.LOCAL_SYMBOL or _la==SQLParser.NO_WRITE_TO_BINLOG_SYMBOL:
                    self.state = 4729
                    self.noWriteToBinLog()


                self.state = 4732
                self.match(SQLParser.TABLE_SYMBOL)
                self.state = 4733
                self.tableRefList()
                pass
            elif token in [SQLParser.REPAIR_SYMBOL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4734
                localctx.type = self.match(SQLParser.REPAIR_SYMBOL)
                self.state = 4736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.LOCAL_SYMBOL or _la==SQLParser.NO_WRITE_TO_BINLOG_SYMBOL:
                    self.state = 4735
                    self.noWriteToBinLog()


                self.state = 4738
                self.match(SQLParser.TABLE_SYMBOL)
                self.state = 4739
                self.tableRefList()
                self.state = 4743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLParser.EXTENDED_SYMBOL or _la==SQLParser.QUICK_SYMBOL or _la==SQLParser.USE_FRM_SYMBOL:
                    self.state = 4740
                    self.repairType()
                    self.state = 4745
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HistogramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_SYMBOL(self):
            return self.getToken(SQLParser.UPDATE_SYMBOL, 0)

        def HISTOGRAM_SYMBOL(self):
            return self.getToken(SQLParser.HISTOGRAM_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(SQLParser.ON_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SQLParser.IdentifierListContext,0)


        def WITH_SYMBOL(self):
            return self.getToken(SQLParser.WITH_SYMBOL, 0)

        def INT_NUMBER(self):
            return self.getToken(SQLParser.INT_NUMBER, 0)

        def BUCKETS_SYMBOL(self):
            return self.getToken(SQLParser.BUCKETS_SYMBOL, 0)

        def DROP_SYMBOL(self):
            return self.getToken(SQLParser.DROP_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_histogram

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHistogram" ):
                listener.enterHistogram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHistogram" ):
                listener.exitHistogram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHistogram" ):
                return visitor.visitHistogram(self)
            else:
                return visitor.visitChildren(self)




    def histogram(self):

        localctx = SQLParser.HistogramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_histogram)
        self._la = 0 # Token type
        try:
            self.state = 4761
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.UPDATE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4748
                self.match(SQLParser.UPDATE_SYMBOL)
                self.state = 4749
                self.match(SQLParser.HISTOGRAM_SYMBOL)
                self.state = 4750
                self.match(SQLParser.ON_SYMBOL)
                self.state = 4751
                self.identifierList()
                self.state = 4755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.WITH_SYMBOL:
                    self.state = 4752
                    self.match(SQLParser.WITH_SYMBOL)
                    self.state = 4753
                    self.match(SQLParser.INT_NUMBER)
                    self.state = 4754
                    self.match(SQLParser.BUCKETS_SYMBOL)


                pass
            elif token in [SQLParser.DROP_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4757
                self.match(SQLParser.DROP_SYMBOL)
                self.state = 4758
                self.match(SQLParser.HISTOGRAM_SYMBOL)
                self.state = 4759
                self.match(SQLParser.ON_SYMBOL)
                self.state = 4760
                self.identifierList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR_SYMBOL(self):
            return self.getToken(SQLParser.FOR_SYMBOL, 0)

        def UPGRADE_SYMBOL(self):
            return self.getToken(SQLParser.UPGRADE_SYMBOL, 0)

        def QUICK_SYMBOL(self):
            return self.getToken(SQLParser.QUICK_SYMBOL, 0)

        def FAST_SYMBOL(self):
            return self.getToken(SQLParser.FAST_SYMBOL, 0)

        def MEDIUM_SYMBOL(self):
            return self.getToken(SQLParser.MEDIUM_SYMBOL, 0)

        def EXTENDED_SYMBOL(self):
            return self.getToken(SQLParser.EXTENDED_SYMBOL, 0)

        def CHANGED_SYMBOL(self):
            return self.getToken(SQLParser.CHANGED_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_checkOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckOption" ):
                listener.enterCheckOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckOption" ):
                listener.exitCheckOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCheckOption" ):
                return visitor.visitCheckOption(self)
            else:
                return visitor.visitChildren(self)




    def checkOption(self):

        localctx = SQLParser.CheckOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_checkOption)
        self._la = 0 # Token type
        try:
            self.state = 4766
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.FOR_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4763
                self.match(SQLParser.FOR_SYMBOL)
                self.state = 4764
                self.match(SQLParser.UPGRADE_SYMBOL)
                pass
            elif token in [SQLParser.CHANGED_SYMBOL, SQLParser.EXTENDED_SYMBOL, SQLParser.FAST_SYMBOL, SQLParser.MEDIUM_SYMBOL, SQLParser.QUICK_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4765
                _la = self._input.LA(1)
                if not(_la==SQLParser.CHANGED_SYMBOL or _la==SQLParser.EXTENDED_SYMBOL or _la==SQLParser.FAST_SYMBOL or _la==SQLParser.MEDIUM_SYMBOL or _la==SQLParser.QUICK_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RepairTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUICK_SYMBOL(self):
            return self.getToken(SQLParser.QUICK_SYMBOL, 0)

        def EXTENDED_SYMBOL(self):
            return self.getToken(SQLParser.EXTENDED_SYMBOL, 0)

        def USE_FRM_SYMBOL(self):
            return self.getToken(SQLParser.USE_FRM_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_repairType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepairType" ):
                listener.enterRepairType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepairType" ):
                listener.exitRepairType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRepairType" ):
                return visitor.visitRepairType(self)
            else:
                return visitor.visitChildren(self)




    def repairType(self):

        localctx = SQLParser.RepairTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_repairType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4768
            _la = self._input.LA(1)
            if not(_la==SQLParser.EXTENDED_SYMBOL or _la==SQLParser.QUICK_SYMBOL or _la==SQLParser.USE_FRM_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstallUninstallStatmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.action = None # Token
            self.type = None # Token

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def SONAME_SYMBOL(self):
            return self.getToken(SQLParser.SONAME_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextStringLiteralContext,0)


        def INSTALL_SYMBOL(self):
            return self.getToken(SQLParser.INSTALL_SYMBOL, 0)

        def PLUGIN_SYMBOL(self):
            return self.getToken(SQLParser.PLUGIN_SYMBOL, 0)

        def textStringLiteralList(self):
            return self.getTypedRuleContext(SQLParser.TextStringLiteralListContext,0)


        def COMPONENT_SYMBOL(self):
            return self.getToken(SQLParser.COMPONENT_SYMBOL, 0)

        def pluginRef(self):
            return self.getTypedRuleContext(SQLParser.PluginRefContext,0)


        def UNINSTALL_SYMBOL(self):
            return self.getToken(SQLParser.UNINSTALL_SYMBOL, 0)

        def componentRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ComponentRefContext)
            else:
                return self.getTypedRuleContext(SQLParser.ComponentRefContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_installUninstallStatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstallUninstallStatment" ):
                listener.enterInstallUninstallStatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstallUninstallStatment" ):
                listener.exitInstallUninstallStatment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstallUninstallStatment" ):
                return visitor.visitInstallUninstallStatment(self)
            else:
                return visitor.visitChildren(self)




    def installUninstallStatment(self):

        localctx = SQLParser.InstallUninstallStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_installUninstallStatment)
        self._la = 0 # Token type
        try:
            self.state = 4792
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,574,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4770
                localctx.action = self.match(SQLParser.INSTALL_SYMBOL)
                self.state = 4771
                localctx.type = self.match(SQLParser.PLUGIN_SYMBOL)
                self.state = 4772
                self.identifier()
                self.state = 4773
                self.match(SQLParser.SONAME_SYMBOL)
                self.state = 4774
                self.textStringLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4776
                localctx.action = self.match(SQLParser.INSTALL_SYMBOL)
                self.state = 4777
                localctx.type = self.match(SQLParser.COMPONENT_SYMBOL)
                self.state = 4778
                self.textStringLiteralList()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4779
                localctx.action = self.match(SQLParser.UNINSTALL_SYMBOL)
                self.state = 4780
                localctx.type = self.match(SQLParser.PLUGIN_SYMBOL)
                self.state = 4781
                self.pluginRef()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4782
                localctx.action = self.match(SQLParser.UNINSTALL_SYMBOL)
                self.state = 4783
                localctx.type = self.match(SQLParser.COMPONENT_SYMBOL)
                self.state = 4784
                self.componentRef()
                self.state = 4789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLParser.COMMA_SYMBOL:
                    self.state = 4785
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 4786
                    self.componentRef()
                    self.state = 4791
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET_SYMBOL(self):
            return self.getToken(SQLParser.SET_SYMBOL, 0)

        def startOptionValueList(self):
            return self.getTypedRuleContext(SQLParser.StartOptionValueListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_setStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetStatement" ):
                listener.enterSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetStatement" ):
                listener.exitSetStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetStatement" ):
                return visitor.visitSetStatement(self)
            else:
                return visitor.visitChildren(self)




    def setStatement(self):

        localctx = SQLParser.SetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_setStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4794
            self.match(SQLParser.SET_SYMBOL)
            self.state = 4795
            self.startOptionValueList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartOptionValueListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionValueNoOptionType(self):
            return self.getTypedRuleContext(SQLParser.OptionValueNoOptionTypeContext,0)


        def optionValueListContinued(self):
            return self.getTypedRuleContext(SQLParser.OptionValueListContinuedContext,0)


        def TRANSACTION_SYMBOL(self):
            return self.getToken(SQLParser.TRANSACTION_SYMBOL, 0)

        def transactionCharacteristics(self):
            return self.getTypedRuleContext(SQLParser.TransactionCharacteristicsContext,0)


        def optionType(self):
            return self.getTypedRuleContext(SQLParser.OptionTypeContext,0)


        def startOptionValueListFollowingOptionType(self):
            return self.getTypedRuleContext(SQLParser.StartOptionValueListFollowingOptionTypeContext,0)


        def PASSWORD_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.PASSWORD_SYMBOL)
            else:
                return self.getToken(SQLParser.PASSWORD_SYMBOL, i)

        def equal(self):
            return self.getTypedRuleContext(SQLParser.EqualContext,0)


        def textString(self):
            return self.getTypedRuleContext(SQLParser.TextStringContext,0)


        def OLD_PASSWORD_SYMBOL(self):
            return self.getToken(SQLParser.OLD_PASSWORD_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(SQLParser.FOR_SYMBOL, 0)

        def user(self):
            return self.getTypedRuleContext(SQLParser.UserContext,0)


        def replacePassword(self):
            return self.getTypedRuleContext(SQLParser.ReplacePasswordContext,0)


        def retainCurrentPassword(self):
            return self.getTypedRuleContext(SQLParser.RetainCurrentPasswordContext,0)


        def TO_SYMBOL(self):
            return self.getToken(SQLParser.TO_SYMBOL, 0)

        def RANDOM_SYMBOL(self):
            return self.getToken(SQLParser.RANDOM_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_startOptionValueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartOptionValueList" ):
                listener.enterStartOptionValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartOptionValueList" ):
                listener.exitStartOptionValueList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartOptionValueList" ):
                return visitor.visitStartOptionValueList(self)
            else:
                return visitor.visitChildren(self)




    def startOptionValueList(self):

        localctx = SQLParser.StartOptionValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_startOptionValueList)
        self._la = 0 # Token type
        try:
            self.state = 4853
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,584,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4797
                self.optionValueNoOptionType()
                self.state = 4798
                self.optionValueListContinued()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4800
                self.match(SQLParser.TRANSACTION_SYMBOL)
                self.state = 4801
                self.transactionCharacteristics()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4802
                self.optionType()
                self.state = 4803
                self.startOptionValueListFollowingOptionType()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4805
                self.match(SQLParser.PASSWORD_SYMBOL)
                self.state = 4808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.FOR_SYMBOL:
                    self.state = 4806
                    self.match(SQLParser.FOR_SYMBOL)
                    self.state = 4807
                    self.user()


                self.state = 4810
                self.equal()
                self.state = 4837
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,580,self._ctx)
                if la_ == 1:
                    self.state = 4811
                    self.textString()
                    self.state = 4813
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.REPLACE_SYMBOL:
                        self.state = 4812
                        self.replacePassword()


                    self.state = 4816
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.RETAIN_SYMBOL:
                        self.state = 4815
                        self.retainCurrentPassword()


                    pass

                elif la_ == 2:
                    self.state = 4818
                    self.textString()
                    self.state = 4820
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.REPLACE_SYMBOL:
                        self.state = 4819
                        self.replacePassword()


                    self.state = 4823
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.RETAIN_SYMBOL:
                        self.state = 4822
                        self.retainCurrentPassword()


                    pass

                elif la_ == 3:
                    self.state = 4825
                    if not self.serverVersion < 50706:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion < 50706")
                    self.state = 4826
                    self.match(SQLParser.OLD_PASSWORD_SYMBOL)
                    self.state = 4827
                    self.match(SQLParser.OPEN_PAR_SYMBOL)
                    self.state = 4828
                    self.textString()
                    self.state = 4829
                    self.match(SQLParser.CLOSE_PAR_SYMBOL)
                    pass

                elif la_ == 4:
                    self.state = 4831
                    if not self.serverVersion < 80014:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion < 80014")
                    self.state = 4832
                    self.match(SQLParser.PASSWORD_SYMBOL)
                    self.state = 4833
                    self.match(SQLParser.OPEN_PAR_SYMBOL)
                    self.state = 4834
                    self.textString()
                    self.state = 4835
                    self.match(SQLParser.CLOSE_PAR_SYMBOL)
                    pass


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4839
                if not self.serverVersion >= 80018:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80018")
                self.state = 4840
                self.match(SQLParser.PASSWORD_SYMBOL)
                self.state = 4843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.FOR_SYMBOL:
                    self.state = 4841
                    self.match(SQLParser.FOR_SYMBOL)
                    self.state = 4842
                    self.user()


                self.state = 4845
                self.match(SQLParser.TO_SYMBOL)
                self.state = 4846
                self.match(SQLParser.RANDOM_SYMBOL)
                self.state = 4848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.REPLACE_SYMBOL:
                    self.state = 4847
                    self.replacePassword()


                self.state = 4851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.RETAIN_SYMBOL:
                    self.state = 4850
                    self.retainCurrentPassword()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionCharacteristicsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transactionAccessMode(self):
            return self.getTypedRuleContext(SQLParser.TransactionAccessModeContext,0)


        def isolationLevel(self):
            return self.getTypedRuleContext(SQLParser.IsolationLevelContext,0)


        def COMMA_SYMBOL(self):
            return self.getToken(SQLParser.COMMA_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_transactionCharacteristics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionCharacteristics" ):
                listener.enterTransactionCharacteristics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionCharacteristics" ):
                listener.exitTransactionCharacteristics(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransactionCharacteristics" ):
                return visitor.visitTransactionCharacteristics(self)
            else:
                return visitor.visitChildren(self)




    def transactionCharacteristics(self):

        localctx = SQLParser.TransactionCharacteristicsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_transactionCharacteristics)
        self._la = 0 # Token type
        try:
            self.state = 4864
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.READ_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4855
                self.transactionAccessMode()
                self.state = 4857
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.ISOLATION_SYMBOL:
                    self.state = 4856
                    self.isolationLevel()


                pass
            elif token in [SQLParser.ISOLATION_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4859
                self.isolationLevel()
                self.state = 4862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.COMMA_SYMBOL:
                    self.state = 4860
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 4861
                    self.transactionAccessMode()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionAccessModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ_SYMBOL(self):
            return self.getToken(SQLParser.READ_SYMBOL, 0)

        def WRITE_SYMBOL(self):
            return self.getToken(SQLParser.WRITE_SYMBOL, 0)

        def ONLY_SYMBOL(self):
            return self.getToken(SQLParser.ONLY_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_transactionAccessMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionAccessMode" ):
                listener.enterTransactionAccessMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionAccessMode" ):
                listener.exitTransactionAccessMode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransactionAccessMode" ):
                return visitor.visitTransactionAccessMode(self)
            else:
                return visitor.visitChildren(self)




    def transactionAccessMode(self):

        localctx = SQLParser.TransactionAccessModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_transactionAccessMode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4866
            self.match(SQLParser.READ_SYMBOL)
            self.state = 4867
            _la = self._input.LA(1)
            if not(_la==SQLParser.ONLY_SYMBOL or _la==SQLParser.WRITE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsolationLevelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISOLATION_SYMBOL(self):
            return self.getToken(SQLParser.ISOLATION_SYMBOL, 0)

        def LEVEL_SYMBOL(self):
            return self.getToken(SQLParser.LEVEL_SYMBOL, 0)

        def REPEATABLE_SYMBOL(self):
            return self.getToken(SQLParser.REPEATABLE_SYMBOL, 0)

        def READ_SYMBOL(self):
            return self.getToken(SQLParser.READ_SYMBOL, 0)

        def SERIALIZABLE_SYMBOL(self):
            return self.getToken(SQLParser.SERIALIZABLE_SYMBOL, 0)

        def COMMITTED_SYMBOL(self):
            return self.getToken(SQLParser.COMMITTED_SYMBOL, 0)

        def UNCOMMITTED_SYMBOL(self):
            return self.getToken(SQLParser.UNCOMMITTED_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_isolationLevel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsolationLevel" ):
                listener.enterIsolationLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsolationLevel" ):
                listener.exitIsolationLevel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsolationLevel" ):
                return visitor.visitIsolationLevel(self)
            else:
                return visitor.visitChildren(self)




    def isolationLevel(self):

        localctx = SQLParser.IsolationLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_isolationLevel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4869
            self.match(SQLParser.ISOLATION_SYMBOL)
            self.state = 4870
            self.match(SQLParser.LEVEL_SYMBOL)
            self.state = 4876
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.REPEATABLE_SYMBOL]:
                self.state = 4871
                self.match(SQLParser.REPEATABLE_SYMBOL)
                self.state = 4872
                self.match(SQLParser.READ_SYMBOL)
                pass
            elif token in [SQLParser.READ_SYMBOL]:
                self.state = 4873
                self.match(SQLParser.READ_SYMBOL)
                self.state = 4874
                _la = self._input.LA(1)
                if not(_la==SQLParser.COMMITTED_SYMBOL or _la==SQLParser.UNCOMMITTED_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [SQLParser.SERIALIZABLE_SYMBOL]:
                self.state = 4875
                self.match(SQLParser.SERIALIZABLE_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionValueListContinuedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def optionValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.OptionValueContext)
            else:
                return self.getTypedRuleContext(SQLParser.OptionValueContext,i)


        def getRuleIndex(self):
            return SQLParser.RULE_optionValueListContinued

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionValueListContinued" ):
                listener.enterOptionValueListContinued(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionValueListContinued" ):
                listener.exitOptionValueListContinued(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionValueListContinued" ):
                return visitor.visitOptionValueListContinued(self)
            else:
                return visitor.visitChildren(self)




    def optionValueListContinued(self):

        localctx = SQLParser.OptionValueListContinuedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_optionValueListContinued)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 4878
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 4879
                self.optionValue()
                self.state = 4884
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionValueNoOptionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def internalVariableName(self):
            return self.getTypedRuleContext(SQLParser.InternalVariableNameContext,0)


        def equal(self):
            return self.getTypedRuleContext(SQLParser.EqualContext,0)


        def setExprOrDefault(self):
            return self.getTypedRuleContext(SQLParser.SetExprOrDefaultContext,0)


        def charsetClause(self):
            return self.getTypedRuleContext(SQLParser.CharsetClauseContext,0)


        def userVariable(self):
            return self.getTypedRuleContext(SQLParser.UserVariableContext,0)


        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def setSystemVariable(self):
            return self.getTypedRuleContext(SQLParser.SetSystemVariableContext,0)


        def NAMES_SYMBOL(self):
            return self.getToken(SQLParser.NAMES_SYMBOL, 0)

        def charsetName(self):
            return self.getTypedRuleContext(SQLParser.CharsetNameContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(SQLParser.DEFAULT_SYMBOL, 0)

        def collate(self):
            return self.getTypedRuleContext(SQLParser.CollateContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_optionValueNoOptionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionValueNoOptionType" ):
                listener.enterOptionValueNoOptionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionValueNoOptionType" ):
                listener.exitOptionValueNoOptionType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionValueNoOptionType" ):
                return visitor.visitOptionValueNoOptionType(self)
            else:
                return visitor.visitChildren(self)




    def optionValueNoOptionType(self):

        localctx = SQLParser.OptionValueNoOptionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_optionValueNoOptionType)
        self._la = 0 # Token type
        try:
            self.state = 4910
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,592,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4885
                self.internalVariableName()
                self.state = 4886
                self.equal()
                self.state = 4887
                self.setExprOrDefault()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4889
                self.charsetClause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4890
                self.userVariable()
                self.state = 4891
                self.equal()
                self.state = 4892
                self.expr(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4894
                self.setSystemVariable()
                self.state = 4895
                self.equal()
                self.state = 4896
                self.setExprOrDefault()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4898
                self.match(SQLParser.NAMES_SYMBOL)
                self.state = 4908
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,591,self._ctx)
                if la_ == 1:
                    self.state = 4899
                    self.equal()
                    self.state = 4900
                    self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 4902
                    self.charsetName()
                    self.state = 4904
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.COLLATE_SYMBOL:
                        self.state = 4903
                        self.collate()


                    pass

                elif la_ == 3:
                    self.state = 4906
                    if not self.serverVersion >= 80011:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80011")
                    self.state = 4907
                    self.match(SQLParser.DEFAULT_SYMBOL)
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionType(self):
            return self.getTypedRuleContext(SQLParser.OptionTypeContext,0)


        def internalVariableName(self):
            return self.getTypedRuleContext(SQLParser.InternalVariableNameContext,0)


        def equal(self):
            return self.getTypedRuleContext(SQLParser.EqualContext,0)


        def setExprOrDefault(self):
            return self.getTypedRuleContext(SQLParser.SetExprOrDefaultContext,0)


        def optionValueNoOptionType(self):
            return self.getTypedRuleContext(SQLParser.OptionValueNoOptionTypeContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_optionValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionValue" ):
                listener.enterOptionValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionValue" ):
                listener.exitOptionValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionValue" ):
                return visitor.visitOptionValue(self)
            else:
                return visitor.visitChildren(self)




    def optionValue(self):

        localctx = SQLParser.OptionValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_optionValue)
        try:
            self.state = 4918
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,593,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4912
                self.optionType()
                self.state = 4913
                self.internalVariableName()
                self.state = 4914
                self.equal()
                self.state = 4915
                self.setExprOrDefault()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4917
                self.optionValueNoOptionType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetSystemVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_AT_SIGN_SYMBOL(self):
            return self.getToken(SQLParser.AT_AT_SIGN_SYMBOL, 0)

        def internalVariableName(self):
            return self.getTypedRuleContext(SQLParser.InternalVariableNameContext,0)


        def setVarIdentType(self):
            return self.getTypedRuleContext(SQLParser.SetVarIdentTypeContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_setSystemVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetSystemVariable" ):
                listener.enterSetSystemVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetSystemVariable" ):
                listener.exitSetSystemVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetSystemVariable" ):
                return visitor.visitSetSystemVariable(self)
            else:
                return visitor.visitChildren(self)




    def setSystemVariable(self):

        localctx = SQLParser.SetSystemVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_setSystemVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4920
            self.match(SQLParser.AT_AT_SIGN_SYMBOL)
            self.state = 4922
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,594,self._ctx)
            if la_ == 1:
                self.state = 4921
                self.setVarIdentType()


            self.state = 4924
            self.internalVariableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartOptionValueListFollowingOptionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionValueFollowingOptionType(self):
            return self.getTypedRuleContext(SQLParser.OptionValueFollowingOptionTypeContext,0)


        def optionValueListContinued(self):
            return self.getTypedRuleContext(SQLParser.OptionValueListContinuedContext,0)


        def TRANSACTION_SYMBOL(self):
            return self.getToken(SQLParser.TRANSACTION_SYMBOL, 0)

        def transactionCharacteristics(self):
            return self.getTypedRuleContext(SQLParser.TransactionCharacteristicsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_startOptionValueListFollowingOptionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartOptionValueListFollowingOptionType" ):
                listener.enterStartOptionValueListFollowingOptionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartOptionValueListFollowingOptionType" ):
                listener.exitStartOptionValueListFollowingOptionType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartOptionValueListFollowingOptionType" ):
                return visitor.visitStartOptionValueListFollowingOptionType(self)
            else:
                return visitor.visitChildren(self)




    def startOptionValueListFollowingOptionType(self):

        localctx = SQLParser.StartOptionValueListFollowingOptionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_startOptionValueListFollowingOptionType)
        try:
            self.state = 4931
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,595,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4926
                self.optionValueFollowingOptionType()
                self.state = 4927
                self.optionValueListContinued()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4929
                self.match(SQLParser.TRANSACTION_SYMBOL)
                self.state = 4930
                self.transactionCharacteristics()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionValueFollowingOptionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def internalVariableName(self):
            return self.getTypedRuleContext(SQLParser.InternalVariableNameContext,0)


        def equal(self):
            return self.getTypedRuleContext(SQLParser.EqualContext,0)


        def setExprOrDefault(self):
            return self.getTypedRuleContext(SQLParser.SetExprOrDefaultContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_optionValueFollowingOptionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionValueFollowingOptionType" ):
                listener.enterOptionValueFollowingOptionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionValueFollowingOptionType" ):
                listener.exitOptionValueFollowingOptionType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionValueFollowingOptionType" ):
                return visitor.visitOptionValueFollowingOptionType(self)
            else:
                return visitor.visitChildren(self)




    def optionValueFollowingOptionType(self):

        localctx = SQLParser.OptionValueFollowingOptionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_optionValueFollowingOptionType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4933
            self.internalVariableName()
            self.state = 4934
            self.equal()
            self.state = 4935
            self.setExprOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetExprOrDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(SQLParser.DEFAULT_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(SQLParser.ON_SYMBOL, 0)

        def ALL_SYMBOL(self):
            return self.getToken(SQLParser.ALL_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(SQLParser.BINARY_SYMBOL, 0)

        def ROW_SYMBOL(self):
            return self.getToken(SQLParser.ROW_SYMBOL, 0)

        def SYSTEM_SYMBOL(self):
            return self.getToken(SQLParser.SYSTEM_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_setExprOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetExprOrDefault" ):
                listener.enterSetExprOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetExprOrDefault" ):
                listener.exitSetExprOrDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetExprOrDefault" ):
                return visitor.visitSetExprOrDefault(self)
            else:
                return visitor.visitChildren(self)




    def setExprOrDefault(self):

        localctx = SQLParser.SetExprOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_setExprOrDefault)
        self._la = 0 # Token type
        try:
            self.state = 4941
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,596,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4937
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4938
                _la = self._input.LA(1)
                if not(_la==SQLParser.ALL_SYMBOL or _la==SQLParser.BINARY_SYMBOL or _la==SQLParser.DEFAULT_SYMBOL or _la==SQLParser.ON_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4939
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 4940
                _la = self._input.LA(1)
                if not(_la==SQLParser.ROW_SYMBOL or _la==SQLParser.SYSTEM_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # Token
            self.object = None # Token

        def SHOW_SYMBOL(self):
            return self.getToken(SQLParser.SHOW_SYMBOL, 0)

        def STATUS_SYMBOL(self):
            return self.getToken(SQLParser.STATUS_SYMBOL, 0)

        def TABLES_SYMBOL(self):
            return self.getToken(SQLParser.TABLES_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(SQLParser.TableRefContext,0)


        def EVENTS_SYMBOL(self):
            return self.getToken(SQLParser.EVENTS_SYMBOL, 0)

        def fromOrIn(self):
            return self.getTypedRuleContext(SQLParser.FromOrInContext,0)


        def COUNT_SYMBOL(self):
            return self.getToken(SQLParser.COUNT_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def MULT_OPERATOR(self):
            return self.getToken(SQLParser.MULT_OPERATOR, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def charset(self):
            return self.getTypedRuleContext(SQLParser.CharsetContext,0)


        def FOR_SYMBOL(self):
            return self.getToken(SQLParser.FOR_SYMBOL, 0)

        def user(self):
            return self.getTypedRuleContext(SQLParser.UserContext,0)


        def USING_SYMBOL(self):
            return self.getToken(SQLParser.USING_SYMBOL, 0)

        def userList(self):
            return self.getTypedRuleContext(SQLParser.UserListContext,0)


        def CODE_SYMBOL(self):
            return self.getToken(SQLParser.CODE_SYMBOL, 0)

        def procedureRef(self):
            return self.getTypedRuleContext(SQLParser.ProcedureRefContext,0)


        def functionRef(self):
            return self.getTypedRuleContext(SQLParser.FunctionRefContext,0)


        def AUTHORS_SYMBOL(self):
            return self.getToken(SQLParser.AUTHORS_SYMBOL, 0)

        def DATABASES_SYMBOL(self):
            return self.getToken(SQLParser.DATABASES_SYMBOL, 0)

        def TRIGGERS_SYMBOL(self):
            return self.getToken(SQLParser.TRIGGERS_SYMBOL, 0)

        def TABLE_SYMBOL(self):
            return self.getToken(SQLParser.TABLE_SYMBOL, 0)

        def OPEN_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_SYMBOL, 0)

        def PLUGINS_SYMBOL(self):
            return self.getToken(SQLParser.PLUGINS_SYMBOL, 0)

        def ENGINE_SYMBOL(self):
            return self.getToken(SQLParser.ENGINE_SYMBOL, 0)

        def MUTEX_SYMBOL(self):
            return self.getToken(SQLParser.MUTEX_SYMBOL, 0)

        def LOGS_SYMBOL(self):
            return self.getToken(SQLParser.LOGS_SYMBOL, 0)

        def COLUMNS_SYMBOL(self):
            return self.getToken(SQLParser.COLUMNS_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(SQLParser.FROM_SYMBOL, 0)

        def IN_SYMBOL(self):
            return self.getToken(SQLParser.IN_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(SQLParser.BINARY_SYMBOL, 0)

        def MASTER_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SYMBOL, 0)

        def SLAVE_SYMBOL(self):
            return self.getToken(SQLParser.SLAVE_SYMBOL, 0)

        def ENGINES_SYMBOL(self):
            return self.getToken(SQLParser.ENGINES_SYMBOL, 0)

        def WARNINGS_SYMBOL(self):
            return self.getToken(SQLParser.WARNINGS_SYMBOL, 0)

        def ERRORS_SYMBOL(self):
            return self.getToken(SQLParser.ERRORS_SYMBOL, 0)

        def PROFILES_SYMBOL(self):
            return self.getToken(SQLParser.PROFILES_SYMBOL, 0)

        def PROFILE_SYMBOL(self):
            return self.getToken(SQLParser.PROFILE_SYMBOL, 0)

        def PROCESSLIST_SYMBOL(self):
            return self.getToken(SQLParser.PROCESSLIST_SYMBOL, 0)

        def COLLATION_SYMBOL(self):
            return self.getToken(SQLParser.COLLATION_SYMBOL, 0)

        def CONTRIBUTORS_SYMBOL(self):
            return self.getToken(SQLParser.CONTRIBUTORS_SYMBOL, 0)

        def PRIVILEGES_SYMBOL(self):
            return self.getToken(SQLParser.PRIVILEGES_SYMBOL, 0)

        def GRANTS_SYMBOL(self):
            return self.getToken(SQLParser.GRANTS_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(SQLParser.CREATE_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(SQLParser.PROCEDURE_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(SQLParser.FUNCTION_SYMBOL, 0)

        def engineRef(self):
            return self.getTypedRuleContext(SQLParser.EngineRefContext,0)


        def ALL_SYMBOL(self):
            return self.getToken(SQLParser.ALL_SYMBOL, 0)

        def HOSTS_SYMBOL(self):
            return self.getToken(SQLParser.HOSTS_SYMBOL, 0)

        def nonBlocking(self):
            return self.getTypedRuleContext(SQLParser.NonBlockingContext,0)


        def BINLOG_SYMBOL(self):
            return self.getToken(SQLParser.BINLOG_SYMBOL, 0)

        def RELAYLOG_SYMBOL(self):
            return self.getToken(SQLParser.RELAYLOG_SYMBOL, 0)

        def INDEX_SYMBOL(self):
            return self.getToken(SQLParser.INDEX_SYMBOL, 0)

        def INDEXES_SYMBOL(self):
            return self.getToken(SQLParser.INDEXES_SYMBOL, 0)

        def KEYS_SYMBOL(self):
            return self.getToken(SQLParser.KEYS_SYMBOL, 0)

        def VARIABLES_SYMBOL(self):
            return self.getToken(SQLParser.VARIABLES_SYMBOL, 0)

        def schemaRef(self):
            return self.getTypedRuleContext(SQLParser.SchemaRefContext,0)


        def eventRef(self):
            return self.getTypedRuleContext(SQLParser.EventRefContext,0)


        def triggerRef(self):
            return self.getTypedRuleContext(SQLParser.TriggerRefContext,0)


        def viewRef(self):
            return self.getTypedRuleContext(SQLParser.ViewRefContext,0)


        def likeOrWhere(self):
            return self.getTypedRuleContext(SQLParser.LikeOrWhereContext,0)


        def showCommandType(self):
            return self.getTypedRuleContext(SQLParser.ShowCommandTypeContext,0)


        def inDb(self):
            return self.getTypedRuleContext(SQLParser.InDbContext,0)


        def FULL_SYMBOL(self):
            return self.getToken(SQLParser.FULL_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(SQLParser.TextStringContext,0)


        def ulonglong_number(self):
            return self.getTypedRuleContext(SQLParser.Ulonglong_numberContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(SQLParser.LimitClauseContext,0)


        def channel(self):
            return self.getTypedRuleContext(SQLParser.ChannelContext,0)


        def EXTENDED_SYMBOL(self):
            return self.getToken(SQLParser.EXTENDED_SYMBOL, 0)

        def whereClause(self):
            return self.getTypedRuleContext(SQLParser.WhereClauseContext,0)


        def STORAGE_SYMBOL(self):
            return self.getToken(SQLParser.STORAGE_SYMBOL, 0)

        def profileType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ProfileTypeContext)
            else:
                return self.getTypedRuleContext(SQLParser.ProfileTypeContext,i)


        def QUERY_SYMBOL(self):
            return self.getToken(SQLParser.QUERY_SYMBOL, 0)

        def INT_NUMBER(self):
            return self.getToken(SQLParser.INT_NUMBER, 0)

        def optionType(self):
            return self.getTypedRuleContext(SQLParser.OptionTypeContext,0)


        def DATABASE_SYMBOL(self):
            return self.getToken(SQLParser.DATABASE_SYMBOL, 0)

        def EVENT_SYMBOL(self):
            return self.getToken(SQLParser.EVENT_SYMBOL, 0)

        def TRIGGER_SYMBOL(self):
            return self.getToken(SQLParser.TRIGGER_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(SQLParser.VIEW_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(SQLParser.USER_SYMBOL, 0)

        def ifNotExists(self):
            return self.getTypedRuleContext(SQLParser.IfNotExistsContext,0)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_showStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowStatement" ):
                listener.enterShowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowStatement" ):
                listener.exitShowStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowStatement" ):
                return visitor.visitShowStatement(self)
            else:
                return visitor.visitChildren(self)




    def showStatement(self):

        localctx = SQLParser.ShowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_showStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4943
            self.match(SQLParser.SHOW_SYMBOL)
            self.state = 5163
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,640,self._ctx)
            if la_ == 1:
                self.state = 4944
                if not self.serverVersion < 50700:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 50700")
                self.state = 4945
                localctx.value = self.match(SQLParser.AUTHORS_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 4946
                localctx.value = self.match(SQLParser.DATABASES_SYMBOL)
                self.state = 4948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.LIKE_SYMBOL or _la==SQLParser.WHERE_SYMBOL:
                    self.state = 4947
                    self.likeOrWhere()


                pass

            elif la_ == 3:
                self.state = 4951
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,598,self._ctx)
                if la_ == 1:
                    self.state = 4950
                    self.showCommandType()


                self.state = 4953
                localctx.value = self.match(SQLParser.TABLES_SYMBOL)
                self.state = 4955
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.FROM_SYMBOL or _la==SQLParser.IN_SYMBOL:
                    self.state = 4954
                    self.inDb()


                self.state = 4958
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.LIKE_SYMBOL or _la==SQLParser.WHERE_SYMBOL:
                    self.state = 4957
                    self.likeOrWhere()


                pass

            elif la_ == 4:
                self.state = 4961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.FULL_SYMBOL:
                    self.state = 4960
                    self.match(SQLParser.FULL_SYMBOL)


                self.state = 4963
                localctx.value = self.match(SQLParser.TRIGGERS_SYMBOL)
                self.state = 4965
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.FROM_SYMBOL or _la==SQLParser.IN_SYMBOL:
                    self.state = 4964
                    self.inDb()


                self.state = 4968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.LIKE_SYMBOL or _la==SQLParser.WHERE_SYMBOL:
                    self.state = 4967
                    self.likeOrWhere()


                pass

            elif la_ == 5:
                self.state = 4970
                localctx.value = self.match(SQLParser.EVENTS_SYMBOL)
                self.state = 4972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.FROM_SYMBOL or _la==SQLParser.IN_SYMBOL:
                    self.state = 4971
                    self.inDb()


                self.state = 4975
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.LIKE_SYMBOL or _la==SQLParser.WHERE_SYMBOL:
                    self.state = 4974
                    self.likeOrWhere()


                pass

            elif la_ == 6:
                self.state = 4977
                localctx.value = self.match(SQLParser.TABLE_SYMBOL)
                self.state = 4978
                self.match(SQLParser.STATUS_SYMBOL)
                self.state = 4980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.FROM_SYMBOL or _la==SQLParser.IN_SYMBOL:
                    self.state = 4979
                    self.inDb()


                self.state = 4983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.LIKE_SYMBOL or _la==SQLParser.WHERE_SYMBOL:
                    self.state = 4982
                    self.likeOrWhere()


                pass

            elif la_ == 7:
                self.state = 4985
                localctx.value = self.match(SQLParser.OPEN_SYMBOL)
                self.state = 4986
                self.match(SQLParser.TABLES_SYMBOL)
                self.state = 4988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.FROM_SYMBOL or _la==SQLParser.IN_SYMBOL:
                    self.state = 4987
                    self.inDb()


                self.state = 4991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.LIKE_SYMBOL or _la==SQLParser.WHERE_SYMBOL:
                    self.state = 4990
                    self.likeOrWhere()


                pass

            elif la_ == 8:
                self.state = 4993
                localctx.value = self.match(SQLParser.PLUGINS_SYMBOL)
                pass

            elif la_ == 9:
                self.state = 4994
                localctx.value = self.match(SQLParser.ENGINE_SYMBOL)
                self.state = 4997
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,610,self._ctx)
                if la_ == 1:
                    self.state = 4995
                    self.engineRef()
                    pass

                elif la_ == 2:
                    self.state = 4996
                    self.match(SQLParser.ALL_SYMBOL)
                    pass


                self.state = 4999
                _la = self._input.LA(1)
                if not(_la==SQLParser.LOGS_SYMBOL or _la==SQLParser.MUTEX_SYMBOL or _la==SQLParser.STATUS_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 10:
                self.state = 5001
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,611,self._ctx)
                if la_ == 1:
                    self.state = 5000
                    self.showCommandType()


                self.state = 5003
                localctx.value = self.match(SQLParser.COLUMNS_SYMBOL)
                self.state = 5004
                _la = self._input.LA(1)
                if not(_la==SQLParser.FROM_SYMBOL or _la==SQLParser.IN_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5005
                self.tableRef()
                self.state = 5007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.FROM_SYMBOL or _la==SQLParser.IN_SYMBOL:
                    self.state = 5006
                    self.inDb()


                self.state = 5010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.LIKE_SYMBOL or _la==SQLParser.WHERE_SYMBOL:
                    self.state = 5009
                    self.likeOrWhere()


                pass

            elif la_ == 11:
                self.state = 5012
                _la = self._input.LA(1)
                if not(_la==SQLParser.BINARY_SYMBOL or _la==SQLParser.MASTER_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5013
                localctx.value = self.match(SQLParser.LOGS_SYMBOL)
                pass

            elif la_ == 12:
                self.state = 5014
                localctx.value = self.match(SQLParser.SLAVE_SYMBOL)
                self.state = 5021
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLParser.HOSTS_SYMBOL]:
                    self.state = 5015
                    self.match(SQLParser.HOSTS_SYMBOL)
                    pass
                elif token in [SQLParser.STATUS_SYMBOL]:
                    self.state = 5016
                    self.match(SQLParser.STATUS_SYMBOL)
                    self.state = 5017
                    self.nonBlocking()
                    self.state = 5019
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,614,self._ctx)
                    if la_ == 1:
                        self.state = 5018
                        self.channel()


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 13:
                self.state = 5023
                localctx.value = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLParser.BINLOG_SYMBOL or _la==SQLParser.RELAYLOG_SYMBOL):
                    localctx.value = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5024
                self.match(SQLParser.EVENTS_SYMBOL)
                self.state = 5027
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,616,self._ctx)
                if la_ == 1:
                    self.state = 5025
                    self.match(SQLParser.IN_SYMBOL)
                    self.state = 5026
                    self.textString()


                self.state = 5031
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,617,self._ctx)
                if la_ == 1:
                    self.state = 5029
                    self.match(SQLParser.FROM_SYMBOL)
                    self.state = 5030
                    self.ulonglong_number()


                self.state = 5034
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,618,self._ctx)
                if la_ == 1:
                    self.state = 5033
                    self.limitClause()


                self.state = 5037
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,619,self._ctx)
                if la_ == 1:
                    self.state = 5036
                    self.channel()


                pass

            elif la_ == 14:
                self.state = 5041
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,620,self._ctx)
                if la_ == 1:
                    self.state = 5039
                    if not self.serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80000")
                    self.state = 5040
                    self.match(SQLParser.EXTENDED_SYMBOL)


                self.state = 5043
                localctx.value = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 235)) & ~0x3f) == 0 and ((1 << (_la - 235)) & ((1 << (SQLParser.INDEXES_SYMBOL - 235)) | (1 << (SQLParser.INDEX_SYMBOL - 235)) | (1 << (SQLParser.KEYS_SYMBOL - 235)))) != 0)):
                    localctx.value = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5044
                self.fromOrIn()
                self.state = 5045
                self.tableRef()
                self.state = 5047
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.FROM_SYMBOL or _la==SQLParser.IN_SYMBOL:
                    self.state = 5046
                    self.inDb()


                self.state = 5050
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.WHERE_SYMBOL:
                    self.state = 5049
                    self.whereClause()


                pass

            elif la_ == 15:
                self.state = 5053
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.STORAGE_SYMBOL:
                    self.state = 5052
                    self.match(SQLParser.STORAGE_SYMBOL)


                self.state = 5055
                localctx.value = self.match(SQLParser.ENGINES_SYMBOL)
                pass

            elif la_ == 16:
                self.state = 5056
                self.match(SQLParser.COUNT_SYMBOL)
                self.state = 5057
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 5058
                self.match(SQLParser.MULT_OPERATOR)
                self.state = 5059
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5060
                localctx.value = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLParser.ERRORS_SYMBOL or _la==SQLParser.WARNINGS_SYMBOL):
                    localctx.value = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 17:
                self.state = 5061
                localctx.value = self.match(SQLParser.WARNINGS_SYMBOL)
                self.state = 5063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.LIMIT_SYMBOL:
                    self.state = 5062
                    self.limitClause()


                pass

            elif la_ == 18:
                self.state = 5065
                localctx.value = self.match(SQLParser.ERRORS_SYMBOL)
                self.state = 5067
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.LIMIT_SYMBOL:
                    self.state = 5066
                    self.limitClause()


                pass

            elif la_ == 19:
                self.state = 5069
                localctx.value = self.match(SQLParser.PROFILES_SYMBOL)
                pass

            elif la_ == 20:
                self.state = 5070
                localctx.value = self.match(SQLParser.PROFILE_SYMBOL)
                self.state = 5079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.ALL_SYMBOL or _la==SQLParser.BLOCK_SYMBOL or _la==SQLParser.CONTEXT_SYMBOL or _la==SQLParser.CPU_SYMBOL or _la==SQLParser.IPC_SYMBOL or _la==SQLParser.MEMORY_SYMBOL or _la==SQLParser.PAGE_SYMBOL or _la==SQLParser.SOURCE_SYMBOL or _la==SQLParser.SWAPS_SYMBOL:
                    self.state = 5071
                    self.profileType()
                    self.state = 5076
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLParser.COMMA_SYMBOL:
                        self.state = 5072
                        self.match(SQLParser.COMMA_SYMBOL)
                        self.state = 5073
                        self.profileType()
                        self.state = 5078
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 5084
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.FOR_SYMBOL:
                    self.state = 5081
                    self.match(SQLParser.FOR_SYMBOL)
                    self.state = 5082
                    self.match(SQLParser.QUERY_SYMBOL)
                    self.state = 5083
                    self.match(SQLParser.INT_NUMBER)


                self.state = 5087
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.LIMIT_SYMBOL:
                    self.state = 5086
                    self.limitClause()


                pass

            elif la_ == 21:
                self.state = 5090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.GLOBAL_SYMBOL or _la==SQLParser.LOCAL_SYMBOL or _la==SQLParser.SESSION_SYMBOL or _la==SQLParser.PERSIST_SYMBOL or _la==SQLParser.PERSIST_ONLY_SYMBOL:
                    self.state = 5089
                    self.optionType()


                self.state = 5092
                localctx.value = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLParser.STATUS_SYMBOL or _la==SQLParser.VARIABLES_SYMBOL):
                    localctx.value = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5094
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.LIKE_SYMBOL or _la==SQLParser.WHERE_SYMBOL:
                    self.state = 5093
                    self.likeOrWhere()


                pass

            elif la_ == 22:
                self.state = 5097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.FULL_SYMBOL:
                    self.state = 5096
                    self.match(SQLParser.FULL_SYMBOL)


                self.state = 5099
                localctx.value = self.match(SQLParser.PROCESSLIST_SYMBOL)
                pass

            elif la_ == 23:
                self.state = 5100
                self.charset()
                self.state = 5102
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.LIKE_SYMBOL or _la==SQLParser.WHERE_SYMBOL:
                    self.state = 5101
                    self.likeOrWhere()


                pass

            elif la_ == 24:
                self.state = 5104
                localctx.value = self.match(SQLParser.COLLATION_SYMBOL)
                self.state = 5106
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.LIKE_SYMBOL or _la==SQLParser.WHERE_SYMBOL:
                    self.state = 5105
                    self.likeOrWhere()


                pass

            elif la_ == 25:
                self.state = 5108
                if not self.serverVersion < 50700:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 50700")
                self.state = 5109
                localctx.value = self.match(SQLParser.CONTRIBUTORS_SYMBOL)
                pass

            elif la_ == 26:
                self.state = 5110
                localctx.value = self.match(SQLParser.PRIVILEGES_SYMBOL)
                pass

            elif la_ == 27:
                self.state = 5111
                localctx.value = self.match(SQLParser.GRANTS_SYMBOL)
                self.state = 5114
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.FOR_SYMBOL:
                    self.state = 5112
                    self.match(SQLParser.FOR_SYMBOL)
                    self.state = 5113
                    self.user()


                pass

            elif la_ == 28:
                self.state = 5116
                localctx.value = self.match(SQLParser.GRANTS_SYMBOL)
                self.state = 5117
                self.match(SQLParser.FOR_SYMBOL)
                self.state = 5118
                self.user()
                self.state = 5119
                self.match(SQLParser.USING_SYMBOL)
                self.state = 5120
                self.userList()
                pass

            elif la_ == 29:
                self.state = 5122
                localctx.value = self.match(SQLParser.MASTER_SYMBOL)
                self.state = 5123
                self.match(SQLParser.STATUS_SYMBOL)
                pass

            elif la_ == 30:
                self.state = 5124
                localctx.value = self.match(SQLParser.CREATE_SYMBOL)
                self.state = 5145
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,637,self._ctx)
                if la_ == 1:
                    self.state = 5125
                    localctx.object = self.match(SQLParser.DATABASE_SYMBOL)
                    self.state = 5127
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,636,self._ctx)
                    if la_ == 1:
                        self.state = 5126
                        self.ifNotExists()


                    self.state = 5129
                    self.schemaRef()
                    pass

                elif la_ == 2:
                    self.state = 5130
                    localctx.object = self.match(SQLParser.EVENT_SYMBOL)
                    self.state = 5131
                    self.eventRef()
                    pass

                elif la_ == 3:
                    self.state = 5132
                    localctx.object = self.match(SQLParser.FUNCTION_SYMBOL)
                    self.state = 5133
                    self.functionRef()
                    pass

                elif la_ == 4:
                    self.state = 5134
                    localctx.object = self.match(SQLParser.PROCEDURE_SYMBOL)
                    self.state = 5135
                    self.procedureRef()
                    pass

                elif la_ == 5:
                    self.state = 5136
                    localctx.object = self.match(SQLParser.TABLE_SYMBOL)
                    self.state = 5137
                    self.tableRef()
                    pass

                elif la_ == 6:
                    self.state = 5138
                    localctx.object = self.match(SQLParser.TRIGGER_SYMBOL)
                    self.state = 5139
                    self.triggerRef()
                    pass

                elif la_ == 7:
                    self.state = 5140
                    localctx.object = self.match(SQLParser.VIEW_SYMBOL)
                    self.state = 5141
                    self.viewRef()
                    pass

                elif la_ == 8:
                    self.state = 5142
                    if not self.serverVersion >= 50704:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 50704")
                    self.state = 5143
                    localctx.object = self.match(SQLParser.USER_SYMBOL)
                    self.state = 5144
                    self.user()
                    pass


                pass

            elif la_ == 31:
                self.state = 5147
                localctx.value = self.match(SQLParser.PROCEDURE_SYMBOL)
                self.state = 5148
                self.match(SQLParser.STATUS_SYMBOL)
                self.state = 5150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.LIKE_SYMBOL or _la==SQLParser.WHERE_SYMBOL:
                    self.state = 5149
                    self.likeOrWhere()


                pass

            elif la_ == 32:
                self.state = 5152
                localctx.value = self.match(SQLParser.FUNCTION_SYMBOL)
                self.state = 5153
                self.match(SQLParser.STATUS_SYMBOL)
                self.state = 5155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.LIKE_SYMBOL or _la==SQLParser.WHERE_SYMBOL:
                    self.state = 5154
                    self.likeOrWhere()


                pass

            elif la_ == 33:
                self.state = 5157
                localctx.value = self.match(SQLParser.PROCEDURE_SYMBOL)
                self.state = 5158
                self.match(SQLParser.CODE_SYMBOL)
                self.state = 5159
                self.procedureRef()
                pass

            elif la_ == 34:
                self.state = 5160
                localctx.value = self.match(SQLParser.FUNCTION_SYMBOL)
                self.state = 5161
                self.match(SQLParser.CODE_SYMBOL)
                self.state = 5162
                self.functionRef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCommandTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FULL_SYMBOL(self):
            return self.getToken(SQLParser.FULL_SYMBOL, 0)

        def EXTENDED_SYMBOL(self):
            return self.getToken(SQLParser.EXTENDED_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_showCommandType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCommandType" ):
                listener.enterShowCommandType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCommandType" ):
                listener.exitShowCommandType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCommandType" ):
                return visitor.visitShowCommandType(self)
            else:
                return visitor.visitChildren(self)




    def showCommandType(self):

        localctx = SQLParser.ShowCommandTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_showCommandType)
        self._la = 0 # Token type
        try:
            self.state = 5171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,642,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5165
                self.match(SQLParser.FULL_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5166
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 5167
                self.match(SQLParser.EXTENDED_SYMBOL)
                self.state = 5169
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.FULL_SYMBOL:
                    self.state = 5168
                    self.match(SQLParser.FULL_SYMBOL)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonBlockingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONBLOCKING_SYMBOL(self):
            return self.getToken(SQLParser.NONBLOCKING_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_nonBlocking

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonBlocking" ):
                listener.enterNonBlocking(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonBlocking" ):
                listener.exitNonBlocking(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonBlocking" ):
                return visitor.visitNonBlocking(self)
            else:
                return visitor.visitChildren(self)




    def nonBlocking(self):

        localctx = SQLParser.NonBlockingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_nonBlocking)
        try:
            self.state = 5178
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,644,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5173
                if not self.serverVersion >= 50700 and self.serverVersion < 50706:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50700 and self.serverVersion < 50706")
                self.state = 5175
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,643,self._ctx)
                if la_ == 1:
                    self.state = 5174
                    self.match(SQLParser.NONBLOCKING_SYMBOL)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromOrInContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM_SYMBOL(self):
            return self.getToken(SQLParser.FROM_SYMBOL, 0)

        def IN_SYMBOL(self):
            return self.getToken(SQLParser.IN_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_fromOrIn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromOrIn" ):
                listener.enterFromOrIn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromOrIn" ):
                listener.exitFromOrIn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromOrIn" ):
                return visitor.visitFromOrIn(self)
            else:
                return visitor.visitChildren(self)




    def fromOrIn(self):

        localctx = SQLParser.FromOrInContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_fromOrIn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5180
            _la = self._input.LA(1)
            if not(_la==SQLParser.FROM_SYMBOL or _la==SQLParser.IN_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InDbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fromOrIn(self):
            return self.getTypedRuleContext(SQLParser.FromOrInContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_inDb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInDb" ):
                listener.enterInDb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInDb" ):
                listener.exitInDb(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInDb" ):
                return visitor.visitInDb(self)
            else:
                return visitor.visitChildren(self)




    def inDb(self):

        localctx = SQLParser.InDbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_inDb)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5182
            self.fromOrIn()
            self.state = 5183
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProfileTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK_SYMBOL(self):
            return self.getToken(SQLParser.BLOCK_SYMBOL, 0)

        def IO_SYMBOL(self):
            return self.getToken(SQLParser.IO_SYMBOL, 0)

        def CONTEXT_SYMBOL(self):
            return self.getToken(SQLParser.CONTEXT_SYMBOL, 0)

        def SWITCHES_SYMBOL(self):
            return self.getToken(SQLParser.SWITCHES_SYMBOL, 0)

        def PAGE_SYMBOL(self):
            return self.getToken(SQLParser.PAGE_SYMBOL, 0)

        def FAULTS_SYMBOL(self):
            return self.getToken(SQLParser.FAULTS_SYMBOL, 0)

        def ALL_SYMBOL(self):
            return self.getToken(SQLParser.ALL_SYMBOL, 0)

        def CPU_SYMBOL(self):
            return self.getToken(SQLParser.CPU_SYMBOL, 0)

        def IPC_SYMBOL(self):
            return self.getToken(SQLParser.IPC_SYMBOL, 0)

        def MEMORY_SYMBOL(self):
            return self.getToken(SQLParser.MEMORY_SYMBOL, 0)

        def SOURCE_SYMBOL(self):
            return self.getToken(SQLParser.SOURCE_SYMBOL, 0)

        def SWAPS_SYMBOL(self):
            return self.getToken(SQLParser.SWAPS_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_profileType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProfileType" ):
                listener.enterProfileType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProfileType" ):
                listener.exitProfileType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProfileType" ):
                return visitor.visitProfileType(self)
            else:
                return visitor.visitChildren(self)




    def profileType(self):

        localctx = SQLParser.ProfileTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_profileType)
        self._la = 0 # Token type
        try:
            self.state = 5192
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.BLOCK_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5185
                self.match(SQLParser.BLOCK_SYMBOL)
                self.state = 5186
                self.match(SQLParser.IO_SYMBOL)
                pass
            elif token in [SQLParser.CONTEXT_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5187
                self.match(SQLParser.CONTEXT_SYMBOL)
                self.state = 5188
                self.match(SQLParser.SWITCHES_SYMBOL)
                pass
            elif token in [SQLParser.PAGE_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5189
                self.match(SQLParser.PAGE_SYMBOL)
                self.state = 5190
                self.match(SQLParser.FAULTS_SYMBOL)
                pass
            elif token in [SQLParser.ALL_SYMBOL, SQLParser.CPU_SYMBOL, SQLParser.IPC_SYMBOL, SQLParser.MEMORY_SYMBOL, SQLParser.SOURCE_SYMBOL, SQLParser.SWAPS_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5191
                _la = self._input.LA(1)
                if not(_la==SQLParser.ALL_SYMBOL or _la==SQLParser.CPU_SYMBOL or _la==SQLParser.IPC_SYMBOL or _la==SQLParser.MEMORY_SYMBOL or _la==SQLParser.SOURCE_SYMBOL or _la==SQLParser.SWAPS_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OtherAdministrativeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None # Token

        def textLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextLiteralContext,0)


        def BINLOG_SYMBOL(self):
            return self.getToken(SQLParser.BINLOG_SYMBOL, 0)

        def INDEX_SYMBOL(self):
            return self.getToken(SQLParser.INDEX_SYMBOL, 0)

        def keyCacheListOrParts(self):
            return self.getTypedRuleContext(SQLParser.KeyCacheListOrPartsContext,0)


        def IN_SYMBOL(self):
            return self.getToken(SQLParser.IN_SYMBOL, 0)

        def CACHE_SYMBOL(self):
            return self.getToken(SQLParser.CACHE_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(SQLParser.DEFAULT_SYMBOL, 0)

        def FLUSH_SYMBOL(self):
            return self.getToken(SQLParser.FLUSH_SYMBOL, 0)

        def flushTables(self):
            return self.getTypedRuleContext(SQLParser.FlushTablesContext,0)


        def flushOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.FlushOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.FlushOptionContext,i)


        def noWriteToBinLog(self):
            return self.getTypedRuleContext(SQLParser.NoWriteToBinLogContext,0)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def KILL_SYMBOL(self):
            return self.getToken(SQLParser.KILL_SYMBOL, 0)

        def CONNECTION_SYMBOL(self):
            return self.getToken(SQLParser.CONNECTION_SYMBOL, 0)

        def QUERY_SYMBOL(self):
            return self.getToken(SQLParser.QUERY_SYMBOL, 0)

        def INTO_SYMBOL(self):
            return self.getToken(SQLParser.INTO_SYMBOL, 0)

        def preloadTail(self):
            return self.getTypedRuleContext(SQLParser.PreloadTailContext,0)


        def LOAD_SYMBOL(self):
            return self.getToken(SQLParser.LOAD_SYMBOL, 0)

        def SHUTDOWN_SYMBOL(self):
            return self.getToken(SQLParser.SHUTDOWN_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_otherAdministrativeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOtherAdministrativeStatement" ):
                listener.enterOtherAdministrativeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOtherAdministrativeStatement" ):
                listener.exitOtherAdministrativeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOtherAdministrativeStatement" ):
                return visitor.visitOtherAdministrativeStatement(self)
            else:
                return visitor.visitChildren(self)




    def otherAdministrativeStatement(self):

        localctx = SQLParser.OtherAdministrativeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_otherAdministrativeStatement)
        self._la = 0 # Token type
        try:
            self.state = 5231
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,651,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5194
                localctx.type = self.match(SQLParser.BINLOG_SYMBOL)
                self.state = 5195
                self.textLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5196
                localctx.type = self.match(SQLParser.CACHE_SYMBOL)
                self.state = 5197
                self.match(SQLParser.INDEX_SYMBOL)
                self.state = 5198
                self.keyCacheListOrParts()
                self.state = 5199
                self.match(SQLParser.IN_SYMBOL)
                self.state = 5202
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,646,self._ctx)
                if la_ == 1:
                    self.state = 5200
                    self.identifier()
                    pass

                elif la_ == 2:
                    self.state = 5201
                    self.match(SQLParser.DEFAULT_SYMBOL)
                    pass


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5204
                localctx.type = self.match(SQLParser.FLUSH_SYMBOL)
                self.state = 5206
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,647,self._ctx)
                if la_ == 1:
                    self.state = 5205
                    self.noWriteToBinLog()


                self.state = 5217
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,649,self._ctx)
                if la_ == 1:
                    self.state = 5208
                    self.flushTables()
                    pass

                elif la_ == 2:
                    self.state = 5209
                    self.flushOption()
                    self.state = 5214
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLParser.COMMA_SYMBOL:
                        self.state = 5210
                        self.match(SQLParser.COMMA_SYMBOL)
                        self.state = 5211
                        self.flushOption()
                        self.state = 5216
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5219
                localctx.type = self.match(SQLParser.KILL_SYMBOL)
                self.state = 5221
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,650,self._ctx)
                if la_ == 1:
                    self.state = 5220
                    _la = self._input.LA(1)
                    if not(_la==SQLParser.CONNECTION_SYMBOL or _la==SQLParser.QUERY_SYMBOL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5223
                self.expr(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5224
                localctx.type = self.match(SQLParser.LOAD_SYMBOL)
                self.state = 5225
                self.match(SQLParser.INDEX_SYMBOL)
                self.state = 5226
                self.match(SQLParser.INTO_SYMBOL)
                self.state = 5227
                self.match(SQLParser.CACHE_SYMBOL)
                self.state = 5228
                self.preloadTail()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5229
                if not self.serverVersion >= 50709:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50709")
                self.state = 5230
                localctx.type = self.match(SQLParser.SHUTDOWN_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyCacheListOrPartsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyCacheList(self):
            return self.getTypedRuleContext(SQLParser.KeyCacheListContext,0)


        def assignToKeycachePartition(self):
            return self.getTypedRuleContext(SQLParser.AssignToKeycachePartitionContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_keyCacheListOrParts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyCacheListOrParts" ):
                listener.enterKeyCacheListOrParts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyCacheListOrParts" ):
                listener.exitKeyCacheListOrParts(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyCacheListOrParts" ):
                return visitor.visitKeyCacheListOrParts(self)
            else:
                return visitor.visitChildren(self)




    def keyCacheListOrParts(self):

        localctx = SQLParser.KeyCacheListOrPartsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_keyCacheListOrParts)
        try:
            self.state = 5235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,652,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5233
                self.keyCacheList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5234
                self.assignToKeycachePartition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyCacheListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignToKeycache(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.AssignToKeycacheContext)
            else:
                return self.getTypedRuleContext(SQLParser.AssignToKeycacheContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_keyCacheList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyCacheList" ):
                listener.enterKeyCacheList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyCacheList" ):
                listener.exitKeyCacheList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyCacheList" ):
                return visitor.visitKeyCacheList(self)
            else:
                return visitor.visitChildren(self)




    def keyCacheList(self):

        localctx = SQLParser.KeyCacheListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_keyCacheList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5237
            self.assignToKeycache()
            self.state = 5242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 5238
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 5239
                self.assignToKeycache()
                self.state = 5244
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignToKeycacheContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRef(self):
            return self.getTypedRuleContext(SQLParser.TableRefContext,0)


        def cacheKeyList(self):
            return self.getTypedRuleContext(SQLParser.CacheKeyListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_assignToKeycache

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignToKeycache" ):
                listener.enterAssignToKeycache(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignToKeycache" ):
                listener.exitAssignToKeycache(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignToKeycache" ):
                return visitor.visitAssignToKeycache(self)
            else:
                return visitor.visitChildren(self)




    def assignToKeycache(self):

        localctx = SQLParser.AssignToKeycacheContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_assignToKeycache)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5245
            self.tableRef()
            self.state = 5247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.INDEX_SYMBOL or _la==SQLParser.KEY_SYMBOL:
                self.state = 5246
                self.cacheKeyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignToKeycachePartitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRef(self):
            return self.getTypedRuleContext(SQLParser.TableRefContext,0)


        def PARTITION_SYMBOL(self):
            return self.getToken(SQLParser.PARTITION_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def allOrPartitionNameList(self):
            return self.getTypedRuleContext(SQLParser.AllOrPartitionNameListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def cacheKeyList(self):
            return self.getTypedRuleContext(SQLParser.CacheKeyListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_assignToKeycachePartition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignToKeycachePartition" ):
                listener.enterAssignToKeycachePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignToKeycachePartition" ):
                listener.exitAssignToKeycachePartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignToKeycachePartition" ):
                return visitor.visitAssignToKeycachePartition(self)
            else:
                return visitor.visitChildren(self)




    def assignToKeycachePartition(self):

        localctx = SQLParser.AssignToKeycachePartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_assignToKeycachePartition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5249
            self.tableRef()
            self.state = 5250
            self.match(SQLParser.PARTITION_SYMBOL)
            self.state = 5251
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 5252
            self.allOrPartitionNameList()
            self.state = 5253
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
            self.state = 5255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.INDEX_SYMBOL or _la==SQLParser.KEY_SYMBOL:
                self.state = 5254
                self.cacheKeyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CacheKeyListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyOrIndex(self):
            return self.getTypedRuleContext(SQLParser.KeyOrIndexContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def keyUsageList(self):
            return self.getTypedRuleContext(SQLParser.KeyUsageListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_cacheKeyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCacheKeyList" ):
                listener.enterCacheKeyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCacheKeyList" ):
                listener.exitCacheKeyList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCacheKeyList" ):
                return visitor.visitCacheKeyList(self)
            else:
                return visitor.visitChildren(self)




    def cacheKeyList(self):

        localctx = SQLParser.CacheKeyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_cacheKeyList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5257
            self.keyOrIndex()
            self.state = 5258
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 5260
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,656,self._ctx)
            if la_ == 1:
                self.state = 5259
                self.keyUsageList()


            self.state = 5262
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyUsageElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def PRIMARY_SYMBOL(self):
            return self.getToken(SQLParser.PRIMARY_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_keyUsageElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyUsageElement" ):
                listener.enterKeyUsageElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyUsageElement" ):
                listener.exitKeyUsageElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyUsageElement" ):
                return visitor.visitKeyUsageElement(self)
            else:
                return visitor.visitChildren(self)




    def keyUsageElement(self):

        localctx = SQLParser.KeyUsageElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_keyUsageElement)
        try:
            self.state = 5266
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,657,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5264
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5265
                self.match(SQLParser.PRIMARY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyUsageListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyUsageElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.KeyUsageElementContext)
            else:
                return self.getTypedRuleContext(SQLParser.KeyUsageElementContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_keyUsageList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyUsageList" ):
                listener.enterKeyUsageList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyUsageList" ):
                listener.exitKeyUsageList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyUsageList" ):
                return visitor.visitKeyUsageList(self)
            else:
                return visitor.visitChildren(self)




    def keyUsageList(self):

        localctx = SQLParser.KeyUsageListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_keyUsageList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5268
            self.keyUsageElement()
            self.state = 5273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 5269
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 5270
                self.keyUsageElement()
                self.state = 5275
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlushOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.option = None # Token

        def DES_KEY_FILE_SYMBOL(self):
            return self.getToken(SQLParser.DES_KEY_FILE_SYMBOL, 0)

        def HOSTS_SYMBOL(self):
            return self.getToken(SQLParser.HOSTS_SYMBOL, 0)

        def PRIVILEGES_SYMBOL(self):
            return self.getToken(SQLParser.PRIVILEGES_SYMBOL, 0)

        def STATUS_SYMBOL(self):
            return self.getToken(SQLParser.STATUS_SYMBOL, 0)

        def USER_RESOURCES_SYMBOL(self):
            return self.getToken(SQLParser.USER_RESOURCES_SYMBOL, 0)

        def LOGS_SYMBOL(self):
            return self.getToken(SQLParser.LOGS_SYMBOL, 0)

        def logType(self):
            return self.getTypedRuleContext(SQLParser.LogTypeContext,0)


        def RELAY_SYMBOL(self):
            return self.getToken(SQLParser.RELAY_SYMBOL, 0)

        def channel(self):
            return self.getTypedRuleContext(SQLParser.ChannelContext,0)


        def CACHE_SYMBOL(self):
            return self.getToken(SQLParser.CACHE_SYMBOL, 0)

        def QUERY_SYMBOL(self):
            return self.getToken(SQLParser.QUERY_SYMBOL, 0)

        def OPTIMIZER_COSTS_SYMBOL(self):
            return self.getToken(SQLParser.OPTIMIZER_COSTS_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_flushOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlushOption" ):
                listener.enterFlushOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlushOption" ):
                listener.exitFlushOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlushOption" ):
                return visitor.visitFlushOption(self)
            else:
                return visitor.visitChildren(self)




    def flushOption(self):

        localctx = SQLParser.FlushOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_flushOption)
        self._la = 0 # Token type
        try:
            self.state = 5291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,661,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5276
                localctx.option = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLParser.DES_KEY_FILE_SYMBOL or _la==SQLParser.HOSTS_SYMBOL or _la==SQLParser.PRIVILEGES_SYMBOL or _la==SQLParser.STATUS_SYMBOL or _la==SQLParser.USER_RESOURCES_SYMBOL):
                    localctx.option = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.BINARY_SYMBOL or ((((_la - 163)) & ~0x3f) == 0 and ((1 << (_la - 163)) & ((1 << (SQLParser.ENGINE_SYMBOL - 163)) | (1 << (SQLParser.ERROR_SYMBOL - 163)) | (1 << (SQLParser.GENERAL_SYMBOL - 163)))) != 0) or _la==SQLParser.SLOW_SYMBOL:
                    self.state = 5277
                    self.logType()


                self.state = 5280
                localctx.option = self.match(SQLParser.LOGS_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5281
                localctx.option = self.match(SQLParser.RELAY_SYMBOL)
                self.state = 5282
                self.match(SQLParser.LOGS_SYMBOL)
                self.state = 5284
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,660,self._ctx)
                if la_ == 1:
                    self.state = 5283
                    self.channel()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5286
                if not self.serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 80000")
                self.state = 5287
                localctx.option = self.match(SQLParser.QUERY_SYMBOL)
                self.state = 5288
                self.match(SQLParser.CACHE_SYMBOL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5289
                if not self.serverVersion >= 50706:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50706")
                self.state = 5290
                localctx.option = self.match(SQLParser.OPTIMIZER_COSTS_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY_SYMBOL(self):
            return self.getToken(SQLParser.BINARY_SYMBOL, 0)

        def ENGINE_SYMBOL(self):
            return self.getToken(SQLParser.ENGINE_SYMBOL, 0)

        def ERROR_SYMBOL(self):
            return self.getToken(SQLParser.ERROR_SYMBOL, 0)

        def GENERAL_SYMBOL(self):
            return self.getToken(SQLParser.GENERAL_SYMBOL, 0)

        def SLOW_SYMBOL(self):
            return self.getToken(SQLParser.SLOW_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_logType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogType" ):
                listener.enterLogType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogType" ):
                listener.exitLogType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogType" ):
                return visitor.visitLogType(self)
            else:
                return visitor.visitChildren(self)




    def logType(self):

        localctx = SQLParser.LogTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_logType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5293
            _la = self._input.LA(1)
            if not(_la==SQLParser.BINARY_SYMBOL or ((((_la - 163)) & ~0x3f) == 0 and ((1 << (_la - 163)) & ((1 << (SQLParser.ENGINE_SYMBOL - 163)) | (1 << (SQLParser.ERROR_SYMBOL - 163)) | (1 << (SQLParser.GENERAL_SYMBOL - 163)))) != 0) or _la==SQLParser.SLOW_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlushTablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLES_SYMBOL(self):
            return self.getToken(SQLParser.TABLES_SYMBOL, 0)

        def TABLE_SYMBOL(self):
            return self.getToken(SQLParser.TABLE_SYMBOL, 0)

        def WITH_SYMBOL(self):
            return self.getToken(SQLParser.WITH_SYMBOL, 0)

        def READ_SYMBOL(self):
            return self.getToken(SQLParser.READ_SYMBOL, 0)

        def LOCK_SYMBOL(self):
            return self.getToken(SQLParser.LOCK_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SQLParser.IdentifierListContext,0)


        def flushTablesOptions(self):
            return self.getTypedRuleContext(SQLParser.FlushTablesOptionsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_flushTables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlushTables" ):
                listener.enterFlushTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlushTables" ):
                listener.exitFlushTables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlushTables" ):
                return visitor.visitFlushTables(self)
            else:
                return visitor.visitChildren(self)




    def flushTables(self):

        localctx = SQLParser.FlushTablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_flushTables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5295
            _la = self._input.LA(1)
            if not(_la==SQLParser.TABLES_SYMBOL or _la==SQLParser.TABLE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5303
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,663,self._ctx)
            if la_ == 1:
                self.state = 5296
                self.match(SQLParser.WITH_SYMBOL)
                self.state = 5297
                self.match(SQLParser.READ_SYMBOL)
                self.state = 5298
                self.match(SQLParser.LOCK_SYMBOL)

            elif la_ == 2:
                self.state = 5299
                self.identifierList()
                self.state = 5301
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,662,self._ctx)
                if la_ == 1:
                    self.state = 5300
                    self.flushTablesOptions()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlushTablesOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR_SYMBOL(self):
            return self.getToken(SQLParser.FOR_SYMBOL, 0)

        def EXPORT_SYMBOL(self):
            return self.getToken(SQLParser.EXPORT_SYMBOL, 0)

        def WITH_SYMBOL(self):
            return self.getToken(SQLParser.WITH_SYMBOL, 0)

        def READ_SYMBOL(self):
            return self.getToken(SQLParser.READ_SYMBOL, 0)

        def LOCK_SYMBOL(self):
            return self.getToken(SQLParser.LOCK_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_flushTablesOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlushTablesOptions" ):
                listener.enterFlushTablesOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlushTablesOptions" ):
                listener.exitFlushTablesOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlushTablesOptions" ):
                return visitor.visitFlushTablesOptions(self)
            else:
                return visitor.visitChildren(self)




    def flushTablesOptions(self):

        localctx = SQLParser.FlushTablesOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_flushTablesOptions)
        try:
            self.state = 5311
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,664,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5305
                if not self.serverVersion >= 50606:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50606")
                self.state = 5306
                self.match(SQLParser.FOR_SYMBOL)
                self.state = 5307
                self.match(SQLParser.EXPORT_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5308
                self.match(SQLParser.WITH_SYMBOL)
                self.state = 5309
                self.match(SQLParser.READ_SYMBOL)
                self.state = 5310
                self.match(SQLParser.LOCK_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreloadTailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRef(self):
            return self.getTypedRuleContext(SQLParser.TableRefContext,0)


        def adminPartition(self):
            return self.getTypedRuleContext(SQLParser.AdminPartitionContext,0)


        def cacheKeyList(self):
            return self.getTypedRuleContext(SQLParser.CacheKeyListContext,0)


        def IGNORE_SYMBOL(self):
            return self.getToken(SQLParser.IGNORE_SYMBOL, 0)

        def LEAVES_SYMBOL(self):
            return self.getToken(SQLParser.LEAVES_SYMBOL, 0)

        def preloadList(self):
            return self.getTypedRuleContext(SQLParser.PreloadListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_preloadTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreloadTail" ):
                listener.enterPreloadTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreloadTail" ):
                listener.exitPreloadTail(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPreloadTail" ):
                return visitor.visitPreloadTail(self)
            else:
                return visitor.visitChildren(self)




    def preloadTail(self):

        localctx = SQLParser.PreloadTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_preloadTail)
        self._la = 0 # Token type
        try:
            self.state = 5323
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,667,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5313
                self.tableRef()
                self.state = 5314
                self.adminPartition()
                self.state = 5316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.INDEX_SYMBOL or _la==SQLParser.KEY_SYMBOL:
                    self.state = 5315
                    self.cacheKeyList()


                self.state = 5320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.IGNORE_SYMBOL:
                    self.state = 5318
                    self.match(SQLParser.IGNORE_SYMBOL)
                    self.state = 5319
                    self.match(SQLParser.LEAVES_SYMBOL)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5322
                self.preloadList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreloadListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def preloadKeys(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.PreloadKeysContext)
            else:
                return self.getTypedRuleContext(SQLParser.PreloadKeysContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_preloadList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreloadList" ):
                listener.enterPreloadList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreloadList" ):
                listener.exitPreloadList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPreloadList" ):
                return visitor.visitPreloadList(self)
            else:
                return visitor.visitChildren(self)




    def preloadList(self):

        localctx = SQLParser.PreloadListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_preloadList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5325
            self.preloadKeys()
            self.state = 5330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 5326
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 5327
                self.preloadKeys()
                self.state = 5332
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreloadKeysContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRef(self):
            return self.getTypedRuleContext(SQLParser.TableRefContext,0)


        def cacheKeyList(self):
            return self.getTypedRuleContext(SQLParser.CacheKeyListContext,0)


        def IGNORE_SYMBOL(self):
            return self.getToken(SQLParser.IGNORE_SYMBOL, 0)

        def LEAVES_SYMBOL(self):
            return self.getToken(SQLParser.LEAVES_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_preloadKeys

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreloadKeys" ):
                listener.enterPreloadKeys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreloadKeys" ):
                listener.exitPreloadKeys(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPreloadKeys" ):
                return visitor.visitPreloadKeys(self)
            else:
                return visitor.visitChildren(self)




    def preloadKeys(self):

        localctx = SQLParser.PreloadKeysContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_preloadKeys)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5333
            self.tableRef()
            self.state = 5335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.INDEX_SYMBOL or _la==SQLParser.KEY_SYMBOL:
                self.state = 5334
                self.cacheKeyList()


            self.state = 5339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.IGNORE_SYMBOL:
                self.state = 5337
                self.match(SQLParser.IGNORE_SYMBOL)
                self.state = 5338
                self.match(SQLParser.LEAVES_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdminPartitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION_SYMBOL(self):
            return self.getToken(SQLParser.PARTITION_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def allOrPartitionNameList(self):
            return self.getTypedRuleContext(SQLParser.AllOrPartitionNameListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_adminPartition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdminPartition" ):
                listener.enterAdminPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdminPartition" ):
                listener.exitAdminPartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdminPartition" ):
                return visitor.visitAdminPartition(self)
            else:
                return visitor.visitChildren(self)




    def adminPartition(self):

        localctx = SQLParser.AdminPartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_adminPartition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5341
            self.match(SQLParser.PARTITION_SYMBOL)
            self.state = 5342
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 5343
            self.allOrPartitionNameList()
            self.state = 5344
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceGroupManagementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createResourceGroup(self):
            return self.getTypedRuleContext(SQLParser.CreateResourceGroupContext,0)


        def alterResourceGroup(self):
            return self.getTypedRuleContext(SQLParser.AlterResourceGroupContext,0)


        def setResourceGroup(self):
            return self.getTypedRuleContext(SQLParser.SetResourceGroupContext,0)


        def dropResourceGroup(self):
            return self.getTypedRuleContext(SQLParser.DropResourceGroupContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_resourceGroupManagement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceGroupManagement" ):
                listener.enterResourceGroupManagement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceGroupManagement" ):
                listener.exitResourceGroupManagement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResourceGroupManagement" ):
                return visitor.visitResourceGroupManagement(self)
            else:
                return visitor.visitChildren(self)




    def resourceGroupManagement(self):

        localctx = SQLParser.ResourceGroupManagementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_resourceGroupManagement)
        try:
            self.state = 5350
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.CREATE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5346
                self.createResourceGroup()
                pass
            elif token in [SQLParser.ALTER_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5347
                self.alterResourceGroup()
                pass
            elif token in [SQLParser.SET_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5348
                self.setResourceGroup()
                pass
            elif token in [SQLParser.DROP_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5349
                self.dropResourceGroup()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateResourceGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(SQLParser.CREATE_SYMBOL, 0)

        def RESOURCE_SYMBOL(self):
            return self.getToken(SQLParser.RESOURCE_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(SQLParser.GROUP_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def TYPE_SYMBOL(self):
            return self.getToken(SQLParser.TYPE_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(SQLParser.USER_SYMBOL, 0)

        def SYSTEM_SYMBOL(self):
            return self.getToken(SQLParser.SYSTEM_SYMBOL, 0)

        def equal(self):
            return self.getTypedRuleContext(SQLParser.EqualContext,0)


        def resourceGroupVcpuList(self):
            return self.getTypedRuleContext(SQLParser.ResourceGroupVcpuListContext,0)


        def resourceGroupPriority(self):
            return self.getTypedRuleContext(SQLParser.ResourceGroupPriorityContext,0)


        def resourceGroupEnableDisable(self):
            return self.getTypedRuleContext(SQLParser.ResourceGroupEnableDisableContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_createResourceGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateResourceGroup" ):
                listener.enterCreateResourceGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateResourceGroup" ):
                listener.exitCreateResourceGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateResourceGroup" ):
                return visitor.visitCreateResourceGroup(self)
            else:
                return visitor.visitChildren(self)




    def createResourceGroup(self):

        localctx = SQLParser.CreateResourceGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_createResourceGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5352
            self.match(SQLParser.CREATE_SYMBOL)
            self.state = 5353
            self.match(SQLParser.RESOURCE_SYMBOL)
            self.state = 5354
            self.match(SQLParser.GROUP_SYMBOL)
            self.state = 5355
            self.identifier()
            self.state = 5356
            self.match(SQLParser.TYPE_SYMBOL)
            self.state = 5358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.EQUAL_OPERATOR or _la==SQLParser.ASSIGN_OPERATOR:
                self.state = 5357
                self.equal()


            self.state = 5360
            _la = self._input.LA(1)
            if not(_la==SQLParser.USER_SYMBOL or _la==SQLParser.SYSTEM_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.VCPU_SYMBOL:
                self.state = 5361
                self.resourceGroupVcpuList()


            self.state = 5365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.THREAD_PRIORITY_SYMBOL:
                self.state = 5364
                self.resourceGroupPriority()


            self.state = 5368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.DISABLE_SYMBOL or _la==SQLParser.ENABLE_SYMBOL:
                self.state = 5367
                self.resourceGroupEnableDisable()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceGroupVcpuListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VCPU_SYMBOL(self):
            return self.getToken(SQLParser.VCPU_SYMBOL, 0)

        def vcpuNumOrRange(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.VcpuNumOrRangeContext)
            else:
                return self.getTypedRuleContext(SQLParser.VcpuNumOrRangeContext,i)


        def equal(self):
            return self.getTypedRuleContext(SQLParser.EqualContext,0)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_resourceGroupVcpuList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceGroupVcpuList" ):
                listener.enterResourceGroupVcpuList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceGroupVcpuList" ):
                listener.exitResourceGroupVcpuList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResourceGroupVcpuList" ):
                return visitor.visitResourceGroupVcpuList(self)
            else:
                return visitor.visitChildren(self)




    def resourceGroupVcpuList(self):

        localctx = SQLParser.ResourceGroupVcpuListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_resourceGroupVcpuList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5370
            self.match(SQLParser.VCPU_SYMBOL)
            self.state = 5372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.EQUAL_OPERATOR or _la==SQLParser.ASSIGN_OPERATOR:
                self.state = 5371
                self.equal()


            self.state = 5374
            self.vcpuNumOrRange()
            self.state = 5381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.INT_NUMBER or _la==SQLParser.COMMA_SYMBOL:
                self.state = 5376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.COMMA_SYMBOL:
                    self.state = 5375
                    self.match(SQLParser.COMMA_SYMBOL)


                self.state = 5378
                self.vcpuNumOrRange()
                self.state = 5383
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VcpuNumOrRangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.INT_NUMBER)
            else:
                return self.getToken(SQLParser.INT_NUMBER, i)

        def MINUS_OPERATOR(self):
            return self.getToken(SQLParser.MINUS_OPERATOR, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_vcpuNumOrRange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVcpuNumOrRange" ):
                listener.enterVcpuNumOrRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVcpuNumOrRange" ):
                listener.exitVcpuNumOrRange(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVcpuNumOrRange" ):
                return visitor.visitVcpuNumOrRange(self)
            else:
                return visitor.visitChildren(self)




    def vcpuNumOrRange(self):

        localctx = SQLParser.VcpuNumOrRangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_vcpuNumOrRange)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5384
            self.match(SQLParser.INT_NUMBER)
            self.state = 5387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.MINUS_OPERATOR:
                self.state = 5385
                self.match(SQLParser.MINUS_OPERATOR)
                self.state = 5386
                self.match(SQLParser.INT_NUMBER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceGroupPriorityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THREAD_PRIORITY_SYMBOL(self):
            return self.getToken(SQLParser.THREAD_PRIORITY_SYMBOL, 0)

        def INT_NUMBER(self):
            return self.getToken(SQLParser.INT_NUMBER, 0)

        def equal(self):
            return self.getTypedRuleContext(SQLParser.EqualContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_resourceGroupPriority

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceGroupPriority" ):
                listener.enterResourceGroupPriority(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceGroupPriority" ):
                listener.exitResourceGroupPriority(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResourceGroupPriority" ):
                return visitor.visitResourceGroupPriority(self)
            else:
                return visitor.visitChildren(self)




    def resourceGroupPriority(self):

        localctx = SQLParser.ResourceGroupPriorityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_resourceGroupPriority)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5389
            self.match(SQLParser.THREAD_PRIORITY_SYMBOL)
            self.state = 5391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.EQUAL_OPERATOR or _la==SQLParser.ASSIGN_OPERATOR:
                self.state = 5390
                self.equal()


            self.state = 5393
            self.match(SQLParser.INT_NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceGroupEnableDisableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE_SYMBOL(self):
            return self.getToken(SQLParser.ENABLE_SYMBOL, 0)

        def DISABLE_SYMBOL(self):
            return self.getToken(SQLParser.DISABLE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_resourceGroupEnableDisable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceGroupEnableDisable" ):
                listener.enterResourceGroupEnableDisable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceGroupEnableDisable" ):
                listener.exitResourceGroupEnableDisable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResourceGroupEnableDisable" ):
                return visitor.visitResourceGroupEnableDisable(self)
            else:
                return visitor.visitChildren(self)




    def resourceGroupEnableDisable(self):

        localctx = SQLParser.ResourceGroupEnableDisableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_resourceGroupEnableDisable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5395
            _la = self._input.LA(1)
            if not(_la==SQLParser.DISABLE_SYMBOL or _la==SQLParser.ENABLE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterResourceGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(SQLParser.ALTER_SYMBOL, 0)

        def RESOURCE_SYMBOL(self):
            return self.getToken(SQLParser.RESOURCE_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(SQLParser.GROUP_SYMBOL, 0)

        def resourceGroupRef(self):
            return self.getTypedRuleContext(SQLParser.ResourceGroupRefContext,0)


        def resourceGroupVcpuList(self):
            return self.getTypedRuleContext(SQLParser.ResourceGroupVcpuListContext,0)


        def resourceGroupPriority(self):
            return self.getTypedRuleContext(SQLParser.ResourceGroupPriorityContext,0)


        def resourceGroupEnableDisable(self):
            return self.getTypedRuleContext(SQLParser.ResourceGroupEnableDisableContext,0)


        def FORCE_SYMBOL(self):
            return self.getToken(SQLParser.FORCE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_alterResourceGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterResourceGroup" ):
                listener.enterAlterResourceGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterResourceGroup" ):
                listener.exitAlterResourceGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterResourceGroup" ):
                return visitor.visitAlterResourceGroup(self)
            else:
                return visitor.visitChildren(self)




    def alterResourceGroup(self):

        localctx = SQLParser.AlterResourceGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_alterResourceGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5397
            self.match(SQLParser.ALTER_SYMBOL)
            self.state = 5398
            self.match(SQLParser.RESOURCE_SYMBOL)
            self.state = 5399
            self.match(SQLParser.GROUP_SYMBOL)
            self.state = 5400
            self.resourceGroupRef()
            self.state = 5402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.VCPU_SYMBOL:
                self.state = 5401
                self.resourceGroupVcpuList()


            self.state = 5405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.THREAD_PRIORITY_SYMBOL:
                self.state = 5404
                self.resourceGroupPriority()


            self.state = 5408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.DISABLE_SYMBOL or _la==SQLParser.ENABLE_SYMBOL:
                self.state = 5407
                self.resourceGroupEnableDisable()


            self.state = 5411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.FORCE_SYMBOL:
                self.state = 5410
                self.match(SQLParser.FORCE_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetResourceGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET_SYMBOL(self):
            return self.getToken(SQLParser.SET_SYMBOL, 0)

        def RESOURCE_SYMBOL(self):
            return self.getToken(SQLParser.RESOURCE_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(SQLParser.GROUP_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def FOR_SYMBOL(self):
            return self.getToken(SQLParser.FOR_SYMBOL, 0)

        def threadIdList(self):
            return self.getTypedRuleContext(SQLParser.ThreadIdListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_setResourceGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetResourceGroup" ):
                listener.enterSetResourceGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetResourceGroup" ):
                listener.exitSetResourceGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetResourceGroup" ):
                return visitor.visitSetResourceGroup(self)
            else:
                return visitor.visitChildren(self)




    def setResourceGroup(self):

        localctx = SQLParser.SetResourceGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_setResourceGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5413
            self.match(SQLParser.SET_SYMBOL)
            self.state = 5414
            self.match(SQLParser.RESOURCE_SYMBOL)
            self.state = 5415
            self.match(SQLParser.GROUP_SYMBOL)
            self.state = 5416
            self.identifier()
            self.state = 5419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.FOR_SYMBOL:
                self.state = 5417
                self.match(SQLParser.FOR_SYMBOL)
                self.state = 5418
                self.threadIdList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThreadIdListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def real_ulong_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.Real_ulong_numberContext)
            else:
                return self.getTypedRuleContext(SQLParser.Real_ulong_numberContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_threadIdList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThreadIdList" ):
                listener.enterThreadIdList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThreadIdList" ):
                listener.exitThreadIdList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThreadIdList" ):
                return visitor.visitThreadIdList(self)
            else:
                return visitor.visitChildren(self)




    def threadIdList(self):

        localctx = SQLParser.ThreadIdListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_threadIdList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5421
            self.real_ulong_number()
            self.state = 5428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 747)) & ~0x3f) == 0 and ((1 << (_la - 747)) & ((1 << (SQLParser.INT_NUMBER - 747)) | (1 << (SQLParser.LONG_NUMBER - 747)) | (1 << (SQLParser.ULONGLONG_NUMBER - 747)) | (1 << (SQLParser.COMMA_SYMBOL - 747)) | (1 << (SQLParser.HEX_NUMBER - 747)))) != 0):
                self.state = 5423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.COMMA_SYMBOL:
                    self.state = 5422
                    self.match(SQLParser.COMMA_SYMBOL)


                self.state = 5425
                self.real_ulong_number()
                self.state = 5430
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropResourceGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(SQLParser.DROP_SYMBOL, 0)

        def RESOURCE_SYMBOL(self):
            return self.getToken(SQLParser.RESOURCE_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(SQLParser.GROUP_SYMBOL, 0)

        def resourceGroupRef(self):
            return self.getTypedRuleContext(SQLParser.ResourceGroupRefContext,0)


        def FORCE_SYMBOL(self):
            return self.getToken(SQLParser.FORCE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_dropResourceGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropResourceGroup" ):
                listener.enterDropResourceGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropResourceGroup" ):
                listener.exitDropResourceGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropResourceGroup" ):
                return visitor.visitDropResourceGroup(self)
            else:
                return visitor.visitChildren(self)




    def dropResourceGroup(self):

        localctx = SQLParser.DropResourceGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_dropResourceGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5431
            self.match(SQLParser.DROP_SYMBOL)
            self.state = 5432
            self.match(SQLParser.RESOURCE_SYMBOL)
            self.state = 5433
            self.match(SQLParser.GROUP_SYMBOL)
            self.state = 5434
            self.resourceGroupRef()
            self.state = 5436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.FORCE_SYMBOL:
                self.state = 5435
                self.match(SQLParser.FORCE_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UtilityStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describeStatement(self):
            return self.getTypedRuleContext(SQLParser.DescribeStatementContext,0)


        def explainStatement(self):
            return self.getTypedRuleContext(SQLParser.ExplainStatementContext,0)


        def helpCommand(self):
            return self.getTypedRuleContext(SQLParser.HelpCommandContext,0)


        def useCommand(self):
            return self.getTypedRuleContext(SQLParser.UseCommandContext,0)


        def restartServer(self):
            return self.getTypedRuleContext(SQLParser.RestartServerContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_utilityStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUtilityStatement" ):
                listener.enterUtilityStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUtilityStatement" ):
                listener.exitUtilityStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUtilityStatement" ):
                return visitor.visitUtilityStatement(self)
            else:
                return visitor.visitChildren(self)




    def utilityStatement(self):

        localctx = SQLParser.UtilityStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_utilityStatement)
        try:
            self.state = 5444
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,689,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5438
                self.describeStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5439
                self.explainStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5440
                self.helpCommand()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5441
                self.useCommand()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5442
                if not self.serverVersion >= 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80011")
                self.state = 5443
                self.restartServer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRef(self):
            return self.getTypedRuleContext(SQLParser.TableRefContext,0)


        def EXPLAIN_SYMBOL(self):
            return self.getToken(SQLParser.EXPLAIN_SYMBOL, 0)

        def DESCRIBE_SYMBOL(self):
            return self.getToken(SQLParser.DESCRIBE_SYMBOL, 0)

        def DESC_SYMBOL(self):
            return self.getToken(SQLParser.DESC_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(SQLParser.TextStringContext,0)


        def columnRef(self):
            return self.getTypedRuleContext(SQLParser.ColumnRefContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_describeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeStatement" ):
                listener.enterDescribeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeStatement" ):
                listener.exitDescribeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeStatement" ):
                return visitor.visitDescribeStatement(self)
            else:
                return visitor.visitChildren(self)




    def describeStatement(self):

        localctx = SQLParser.DescribeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_describeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5446
            _la = self._input.LA(1)
            if not(((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (SQLParser.DESC_SYMBOL - 134)) | (1 << (SQLParser.DESCRIBE_SYMBOL - 134)) | (1 << (SQLParser.EXPLAIN_SYMBOL - 134)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5447
            self.tableRef()
            self.state = 5450
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,690,self._ctx)
            if la_ == 1:
                self.state = 5448
                self.textString()

            elif la_ == 2:
                self.state = 5449
                self.columnRef()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def explainableStatement(self):
            return self.getTypedRuleContext(SQLParser.ExplainableStatementContext,0)


        def EXPLAIN_SYMBOL(self):
            return self.getToken(SQLParser.EXPLAIN_SYMBOL, 0)

        def DESCRIBE_SYMBOL(self):
            return self.getToken(SQLParser.DESCRIBE_SYMBOL, 0)

        def DESC_SYMBOL(self):
            return self.getToken(SQLParser.DESC_SYMBOL, 0)

        def EXTENDED_SYMBOL(self):
            return self.getToken(SQLParser.EXTENDED_SYMBOL, 0)

        def PARTITIONS_SYMBOL(self):
            return self.getToken(SQLParser.PARTITIONS_SYMBOL, 0)

        def FORMAT_SYMBOL(self):
            return self.getToken(SQLParser.FORMAT_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(SQLParser.TextOrIdentifierContext,0)


        def ANALYZE_SYMBOL(self):
            return self.getToken(SQLParser.ANALYZE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_explainStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainStatement" ):
                listener.enterExplainStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainStatement" ):
                listener.exitExplainStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplainStatement" ):
                return visitor.visitExplainStatement(self)
            else:
                return visitor.visitChildren(self)




    def explainStatement(self):

        localctx = SQLParser.ExplainStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_explainStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5452
            _la = self._input.LA(1)
            if not(((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (SQLParser.DESC_SYMBOL - 134)) | (1 << (SQLParser.DESCRIBE_SYMBOL - 134)) | (1 << (SQLParser.EXPLAIN_SYMBOL - 134)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5468
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,691,self._ctx)
            if la_ == 1:
                self.state = 5453
                if not self.serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 80000")
                self.state = 5454
                self.match(SQLParser.EXTENDED_SYMBOL)

            elif la_ == 2:
                self.state = 5455
                if not self.serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 80000")
                self.state = 5456
                self.match(SQLParser.PARTITIONS_SYMBOL)

            elif la_ == 3:
                self.state = 5457
                if not self.serverVersion >= 50605:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50605")
                self.state = 5458
                self.match(SQLParser.FORMAT_SYMBOL)
                self.state = 5459
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 5460
                self.textOrIdentifier()

            elif la_ == 4:
                self.state = 5461
                if not self.serverVersion >= 80018:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80018")
                self.state = 5462
                self.match(SQLParser.ANALYZE_SYMBOL)

            elif la_ == 5:
                self.state = 5463
                if not self.serverVersion >= 80019:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80019")
                self.state = 5464
                self.match(SQLParser.ANALYZE_SYMBOL)
                self.state = 5465
                self.match(SQLParser.FORMAT_SYMBOL)
                self.state = 5466
                self.match(SQLParser.EQUAL_OPERATOR)
                self.state = 5467
                self.textOrIdentifier()


            self.state = 5470
            self.explainableStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStatement(self):
            return self.getTypedRuleContext(SQLParser.SelectStatementContext,0)


        def deleteStatement(self):
            return self.getTypedRuleContext(SQLParser.DeleteStatementContext,0)


        def insertStatement(self):
            return self.getTypedRuleContext(SQLParser.InsertStatementContext,0)


        def replaceStatement(self):
            return self.getTypedRuleContext(SQLParser.ReplaceStatementContext,0)


        def updateStatement(self):
            return self.getTypedRuleContext(SQLParser.UpdateStatementContext,0)


        def FOR_SYMBOL(self):
            return self.getToken(SQLParser.FOR_SYMBOL, 0)

        def CONNECTION_SYMBOL(self):
            return self.getToken(SQLParser.CONNECTION_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(SQLParser.Real_ulong_numberContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_explainableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainableStatement" ):
                listener.enterExplainableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainableStatement" ):
                listener.exitExplainableStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplainableStatement" ):
                return visitor.visitExplainableStatement(self)
            else:
                return visitor.visitChildren(self)




    def explainableStatement(self):

        localctx = SQLParser.ExplainableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_explainableStatement)
        try:
            self.state = 5484
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,693,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5472
                self.selectStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5473
                if not self.serverVersion >= 50603:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50603")
                self.state = 5478
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,692,self._ctx)
                if la_ == 1:
                    self.state = 5474
                    self.deleteStatement()
                    pass

                elif la_ == 2:
                    self.state = 5475
                    self.insertStatement()
                    pass

                elif la_ == 3:
                    self.state = 5476
                    self.replaceStatement()
                    pass

                elif la_ == 4:
                    self.state = 5477
                    self.updateStatement()
                    pass


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5480
                if not self.serverVersion >= 50700:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50700")
                self.state = 5481
                self.match(SQLParser.FOR_SYMBOL)
                self.state = 5482
                self.match(SQLParser.CONNECTION_SYMBOL)
                self.state = 5483
                self.real_ulong_number()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HelpCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HELP_SYMBOL(self):
            return self.getToken(SQLParser.HELP_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(SQLParser.TextOrIdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_helpCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpCommand" ):
                listener.enterHelpCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpCommand" ):
                listener.exitHelpCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHelpCommand" ):
                return visitor.visitHelpCommand(self)
            else:
                return visitor.visitChildren(self)




    def helpCommand(self):

        localctx = SQLParser.HelpCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_helpCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5486
            self.match(SQLParser.HELP_SYMBOL)
            self.state = 5487
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE_SYMBOL(self):
            return self.getToken(SQLParser.USE_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_useCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseCommand" ):
                listener.enterUseCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseCommand" ):
                listener.exitUseCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUseCommand" ):
                return visitor.visitUseCommand(self)
            else:
                return visitor.visitChildren(self)




    def useCommand(self):

        localctx = SQLParser.UseCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_useCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5489
            self.match(SQLParser.USE_SYMBOL)
            self.state = 5490
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestartServerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESTART_SYMBOL(self):
            return self.getToken(SQLParser.RESTART_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_restartServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestartServer" ):
                listener.enterRestartServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestartServer" ):
                listener.exitRestartServer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRestartServer" ):
                return visitor.visitRestartServer(self)
            else:
                return visitor.visitChildren(self)




    def restartServer(self):

        localctx = SQLParser.RestartServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_restartServer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5492
            self.match(SQLParser.RESTART_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLParser.RULE_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ExprOrContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.ExprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLParser.ExprContext,i)

        def OR_SYMBOL(self):
            return self.getToken(SQLParser.OR_SYMBOL, 0)
        def LOGICAL_OR_OPERATOR(self):
            return self.getToken(SQLParser.LOGICAL_OR_OPERATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprOr" ):
                listener.enterExprOr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprOr" ):
                listener.exitExprOr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprOr" ):
                return visitor.visitExprOr(self)
            else:
                return visitor.visitChildren(self)


    class ExprNotContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT_SYMBOL(self):
            return self.getToken(SQLParser.NOT_SYMBOL, 0)
        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprNot" ):
                listener.enterExprNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprNot" ):
                listener.exitExprNot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprNot" ):
                return visitor.visitExprNot(self)
            else:
                return visitor.visitChildren(self)


    class ExprIsContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.ExprContext
            super().__init__(parser)
            self.type = None # Token
            self.copyFrom(ctx)

        def boolPri(self):
            return self.getTypedRuleContext(SQLParser.BoolPriContext,0)

        def IS_SYMBOL(self):
            return self.getToken(SQLParser.IS_SYMBOL, 0)
        def TRUE_SYMBOL(self):
            return self.getToken(SQLParser.TRUE_SYMBOL, 0)
        def FALSE_SYMBOL(self):
            return self.getToken(SQLParser.FALSE_SYMBOL, 0)
        def UNKNOWN_SYMBOL(self):
            return self.getToken(SQLParser.UNKNOWN_SYMBOL, 0)
        def notRule(self):
            return self.getTypedRuleContext(SQLParser.NotRuleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprIs" ):
                listener.enterExprIs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprIs" ):
                listener.exitExprIs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprIs" ):
                return visitor.visitExprIs(self)
            else:
                return visitor.visitChildren(self)


    class ExprAndContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.ExprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLParser.ExprContext,i)

        def AND_SYMBOL(self):
            return self.getToken(SQLParser.AND_SYMBOL, 0)
        def LOGICAL_AND_OPERATOR(self):
            return self.getToken(SQLParser.LOGICAL_AND_OPERATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprAnd" ):
                listener.enterExprAnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprAnd" ):
                listener.exitExprAnd(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprAnd" ):
                return visitor.visitExprAnd(self)
            else:
                return visitor.visitChildren(self)


    class ExprXorContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLParser.ExprContext,i)

        def XOR_SYMBOL(self):
            return self.getToken(SQLParser.XOR_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprXor" ):
                listener.enterExprXor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprXor" ):
                listener.exitExprXor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprXor" ):
                return visitor.visitExprXor(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 678
        self.enterRecursionRule(localctx, 678, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5505
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,696,self._ctx)
            if la_ == 1:
                localctx = SQLParser.ExprIsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 5495
                self.boolPri(0)
                self.state = 5501
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,695,self._ctx)
                if la_ == 1:
                    self.state = 5496
                    self.match(SQLParser.IS_SYMBOL)
                    self.state = 5498
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.NOT_SYMBOL or _la==SQLParser.NOT2_SYMBOL:
                        self.state = 5497
                        self.notRule()


                    self.state = 5500
                    localctx.type = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SQLParser.FALSE_SYMBOL or _la==SQLParser.TRUE_SYMBOL or _la==SQLParser.UNKNOWN_SYMBOL):
                        localctx.type = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 2:
                localctx = SQLParser.ExprNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5503
                self.match(SQLParser.NOT_SYMBOL)
                self.state = 5504
                self.expr(4)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 5518
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,698,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 5516
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,697,self._ctx)
                    if la_ == 1:
                        localctx = SQLParser.ExprAndContext(self, SQLParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 5507
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 5508
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SQLParser.AND_SYMBOL or _la==SQLParser.LOGICAL_AND_OPERATOR):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5509
                        self.expr(4)
                        pass

                    elif la_ == 2:
                        localctx = SQLParser.ExprXorContext(self, SQLParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 5510
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 5511
                        self.match(SQLParser.XOR_SYMBOL)
                        self.state = 5512
                        self.expr(3)
                        pass

                    elif la_ == 3:
                        localctx = SQLParser.ExprOrContext(self, SQLParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 5513
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 5514
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SQLParser.OR_SYMBOL or _la==SQLParser.LOGICAL_OR_OPERATOR):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5515
                        self.expr(2)
                        pass

             
                self.state = 5520
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,698,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BoolPriContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLParser.RULE_boolPri

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PrimaryExprPredicateContext(BoolPriContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.BoolPriContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(SQLParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExprPredicate" ):
                listener.enterPrimaryExprPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExprPredicate" ):
                listener.exitPrimaryExprPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExprPredicate" ):
                return visitor.visitPrimaryExprPredicate(self)
            else:
                return visitor.visitChildren(self)


    class PrimaryExprCompareContext(BoolPriContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.BoolPriContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def boolPri(self):
            return self.getTypedRuleContext(SQLParser.BoolPriContext,0)

        def compOp(self):
            return self.getTypedRuleContext(SQLParser.CompOpContext,0)

        def predicate(self):
            return self.getTypedRuleContext(SQLParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExprCompare" ):
                listener.enterPrimaryExprCompare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExprCompare" ):
                listener.exitPrimaryExprCompare(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExprCompare" ):
                return visitor.visitPrimaryExprCompare(self)
            else:
                return visitor.visitChildren(self)


    class PrimaryExprAllAnyContext(BoolPriContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.BoolPriContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def boolPri(self):
            return self.getTypedRuleContext(SQLParser.BoolPriContext,0)

        def compOp(self):
            return self.getTypedRuleContext(SQLParser.CompOpContext,0)

        def subquery(self):
            return self.getTypedRuleContext(SQLParser.SubqueryContext,0)

        def ALL_SYMBOL(self):
            return self.getToken(SQLParser.ALL_SYMBOL, 0)
        def ANY_SYMBOL(self):
            return self.getToken(SQLParser.ANY_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExprAllAny" ):
                listener.enterPrimaryExprAllAny(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExprAllAny" ):
                listener.exitPrimaryExprAllAny(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExprAllAny" ):
                return visitor.visitPrimaryExprAllAny(self)
            else:
                return visitor.visitChildren(self)


    class PrimaryExprIsNullContext(BoolPriContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.BoolPriContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def boolPri(self):
            return self.getTypedRuleContext(SQLParser.BoolPriContext,0)

        def IS_SYMBOL(self):
            return self.getToken(SQLParser.IS_SYMBOL, 0)
        def NULL_SYMBOL(self):
            return self.getToken(SQLParser.NULL_SYMBOL, 0)
        def notRule(self):
            return self.getTypedRuleContext(SQLParser.NotRuleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExprIsNull" ):
                listener.enterPrimaryExprIsNull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExprIsNull" ):
                listener.exitPrimaryExprIsNull(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExprIsNull" ):
                return visitor.visitPrimaryExprIsNull(self)
            else:
                return visitor.visitChildren(self)



    def boolPri(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.BoolPriContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 680
        self.enterRecursionRule(localctx, 680, self.RULE_boolPri, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SQLParser.PrimaryExprPredicateContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 5522
            self.predicate()
            self._ctx.stop = self._input.LT(-1)
            self.state = 5541
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,701,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 5539
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,700,self._ctx)
                    if la_ == 1:
                        localctx = SQLParser.PrimaryExprIsNullContext(self, SQLParser.BoolPriContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_boolPri)
                        self.state = 5524
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 5525
                        self.match(SQLParser.IS_SYMBOL)
                        self.state = 5527
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SQLParser.NOT_SYMBOL or _la==SQLParser.NOT2_SYMBOL:
                            self.state = 5526
                            self.notRule()


                        self.state = 5529
                        self.match(SQLParser.NULL_SYMBOL)
                        pass

                    elif la_ == 2:
                        localctx = SQLParser.PrimaryExprCompareContext(self, SQLParser.BoolPriContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_boolPri)
                        self.state = 5530
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 5531
                        self.compOp()
                        self.state = 5532
                        self.predicate()
                        pass

                    elif la_ == 3:
                        localctx = SQLParser.PrimaryExprAllAnyContext(self, SQLParser.BoolPriContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_boolPri)
                        self.state = 5534
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 5535
                        self.compOp()
                        self.state = 5536
                        _la = self._input.LA(1)
                        if not(_la==SQLParser.ALL_SYMBOL or _la==SQLParser.ANY_SYMBOL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5537
                        self.subquery()
                        pass

             
                self.state = 5543
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,701,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class CompOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def NULL_SAFE_EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.NULL_SAFE_EQUAL_OPERATOR, 0)

        def GREATER_OR_EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.GREATER_OR_EQUAL_OPERATOR, 0)

        def GREATER_THAN_OPERATOR(self):
            return self.getToken(SQLParser.GREATER_THAN_OPERATOR, 0)

        def LESS_OR_EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.LESS_OR_EQUAL_OPERATOR, 0)

        def LESS_THAN_OPERATOR(self):
            return self.getToken(SQLParser.LESS_THAN_OPERATOR, 0)

        def NOT_EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.NOT_EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_compOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompOp" ):
                listener.enterCompOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompOp" ):
                listener.exitCompOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompOp" ):
                return visitor.visitCompOp(self)
            else:
                return visitor.visitChildren(self)




    def compOp(self):

        localctx = SQLParser.CompOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_compOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5544
            _la = self._input.LA(1)
            if not(((((_la - 750)) & ~0x3f) == 0 and ((1 << (_la - 750)) & ((1 << (SQLParser.EQUAL_OPERATOR - 750)) | (1 << (SQLParser.NULL_SAFE_EQUAL_OPERATOR - 750)) | (1 << (SQLParser.GREATER_OR_EQUAL_OPERATOR - 750)) | (1 << (SQLParser.GREATER_THAN_OPERATOR - 750)) | (1 << (SQLParser.LESS_OR_EQUAL_OPERATOR - 750)) | (1 << (SQLParser.LESS_THAN_OPERATOR - 750)) | (1 << (SQLParser.NOT_EQUAL_OPERATOR - 750)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.BitExprContext)
            else:
                return self.getTypedRuleContext(SQLParser.BitExprContext,i)


        def predicateOperations(self):
            return self.getTypedRuleContext(SQLParser.PredicateOperationsContext,0)


        def MEMBER_SYMBOL(self):
            return self.getToken(SQLParser.MEMBER_SYMBOL, 0)

        def simpleExprWithParentheses(self):
            return self.getTypedRuleContext(SQLParser.SimpleExprWithParenthesesContext,0)


        def SOUNDS_SYMBOL(self):
            return self.getToken(SQLParser.SOUNDS_SYMBOL, 0)

        def LIKE_SYMBOL(self):
            return self.getToken(SQLParser.LIKE_SYMBOL, 0)

        def notRule(self):
            return self.getTypedRuleContext(SQLParser.NotRuleContext,0)


        def OF_SYMBOL(self):
            return self.getToken(SQLParser.OF_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicate" ):
                return visitor.visitPredicate(self)
            else:
                return visitor.visitChildren(self)




    def predicate(self):

        localctx = SQLParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5546
            self.bitExpr(0)
            self.state = 5560
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,704,self._ctx)
            if la_ == 1:
                self.state = 5548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.NOT_SYMBOL or _la==SQLParser.NOT2_SYMBOL:
                    self.state = 5547
                    self.notRule()


                self.state = 5550
                self.predicateOperations()

            elif la_ == 2:
                self.state = 5551
                if not self.serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80017")
                self.state = 5552
                self.match(SQLParser.MEMBER_SYMBOL)
                self.state = 5554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.OF_SYMBOL:
                    self.state = 5553
                    self.match(SQLParser.OF_SYMBOL)


                self.state = 5556
                self.simpleExprWithParentheses()

            elif la_ == 3:
                self.state = 5557
                self.match(SQLParser.SOUNDS_SYMBOL)
                self.state = 5558
                self.match(SQLParser.LIKE_SYMBOL)
                self.state = 5559
                self.bitExpr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateOperationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLParser.RULE_predicateOperations

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PredicateExprRegexContext(PredicateOperationsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.PredicateOperationsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REGEXP_SYMBOL(self):
            return self.getToken(SQLParser.REGEXP_SYMBOL, 0)
        def bitExpr(self):
            return self.getTypedRuleContext(SQLParser.BitExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateExprRegex" ):
                listener.enterPredicateExprRegex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateExprRegex" ):
                listener.exitPredicateExprRegex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicateExprRegex" ):
                return visitor.visitPredicateExprRegex(self)
            else:
                return visitor.visitChildren(self)


    class PredicateExprBetweenContext(PredicateOperationsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.PredicateOperationsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BETWEEN_SYMBOL(self):
            return self.getToken(SQLParser.BETWEEN_SYMBOL, 0)
        def bitExpr(self):
            return self.getTypedRuleContext(SQLParser.BitExprContext,0)

        def AND_SYMBOL(self):
            return self.getToken(SQLParser.AND_SYMBOL, 0)
        def predicate(self):
            return self.getTypedRuleContext(SQLParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateExprBetween" ):
                listener.enterPredicateExprBetween(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateExprBetween" ):
                listener.exitPredicateExprBetween(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicateExprBetween" ):
                return visitor.visitPredicateExprBetween(self)
            else:
                return visitor.visitChildren(self)


    class PredicateExprInContext(PredicateOperationsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.PredicateOperationsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IN_SYMBOL(self):
            return self.getToken(SQLParser.IN_SYMBOL, 0)
        def subquery(self):
            return self.getTypedRuleContext(SQLParser.SubqueryContext,0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)
        def exprList(self):
            return self.getTypedRuleContext(SQLParser.ExprListContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateExprIn" ):
                listener.enterPredicateExprIn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateExprIn" ):
                listener.exitPredicateExprIn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicateExprIn" ):
                return visitor.visitPredicateExprIn(self)
            else:
                return visitor.visitChildren(self)


    class PredicateExprLikeContext(PredicateOperationsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.PredicateOperationsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LIKE_SYMBOL(self):
            return self.getToken(SQLParser.LIKE_SYMBOL, 0)
        def simpleExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.SimpleExprContext)
            else:
                return self.getTypedRuleContext(SQLParser.SimpleExprContext,i)

        def ESCAPE_SYMBOL(self):
            return self.getToken(SQLParser.ESCAPE_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateExprLike" ):
                listener.enterPredicateExprLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateExprLike" ):
                listener.exitPredicateExprLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicateExprLike" ):
                return visitor.visitPredicateExprLike(self)
            else:
                return visitor.visitChildren(self)



    def predicateOperations(self):

        localctx = SQLParser.PredicateOperationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_predicateOperations)
        try:
            self.state = 5583
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.IN_SYMBOL]:
                localctx = SQLParser.PredicateExprInContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5562
                self.match(SQLParser.IN_SYMBOL)
                self.state = 5568
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,705,self._ctx)
                if la_ == 1:
                    self.state = 5563
                    self.subquery()
                    pass

                elif la_ == 2:
                    self.state = 5564
                    self.match(SQLParser.OPEN_PAR_SYMBOL)
                    self.state = 5565
                    self.exprList()
                    self.state = 5566
                    self.match(SQLParser.CLOSE_PAR_SYMBOL)
                    pass


                pass
            elif token in [SQLParser.BETWEEN_SYMBOL]:
                localctx = SQLParser.PredicateExprBetweenContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5570
                self.match(SQLParser.BETWEEN_SYMBOL)
                self.state = 5571
                self.bitExpr(0)
                self.state = 5572
                self.match(SQLParser.AND_SYMBOL)
                self.state = 5573
                self.predicate()
                pass
            elif token in [SQLParser.LIKE_SYMBOL]:
                localctx = SQLParser.PredicateExprLikeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5575
                self.match(SQLParser.LIKE_SYMBOL)
                self.state = 5576
                self.simpleExpr(0)
                self.state = 5579
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,706,self._ctx)
                if la_ == 1:
                    self.state = 5577
                    self.match(SQLParser.ESCAPE_SYMBOL)
                    self.state = 5578
                    self.simpleExpr(0)


                pass
            elif token in [SQLParser.REGEXP_SYMBOL]:
                localctx = SQLParser.PredicateExprRegexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5581
                self.match(SQLParser.REGEXP_SYMBOL)
                self.state = 5582
                self.bitExpr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def simpleExpr(self):
            return self.getTypedRuleContext(SQLParser.SimpleExprContext,0)


        def bitExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.BitExprContext)
            else:
                return self.getTypedRuleContext(SQLParser.BitExprContext,i)


        def BITWISE_XOR_OPERATOR(self):
            return self.getToken(SQLParser.BITWISE_XOR_OPERATOR, 0)

        def MULT_OPERATOR(self):
            return self.getToken(SQLParser.MULT_OPERATOR, 0)

        def DIV_OPERATOR(self):
            return self.getToken(SQLParser.DIV_OPERATOR, 0)

        def MOD_OPERATOR(self):
            return self.getToken(SQLParser.MOD_OPERATOR, 0)

        def DIV_SYMBOL(self):
            return self.getToken(SQLParser.DIV_SYMBOL, 0)

        def MOD_SYMBOL(self):
            return self.getToken(SQLParser.MOD_SYMBOL, 0)

        def PLUS_OPERATOR(self):
            return self.getToken(SQLParser.PLUS_OPERATOR, 0)

        def MINUS_OPERATOR(self):
            return self.getToken(SQLParser.MINUS_OPERATOR, 0)

        def SHIFT_LEFT_OPERATOR(self):
            return self.getToken(SQLParser.SHIFT_LEFT_OPERATOR, 0)

        def SHIFT_RIGHT_OPERATOR(self):
            return self.getToken(SQLParser.SHIFT_RIGHT_OPERATOR, 0)

        def BITWISE_AND_OPERATOR(self):
            return self.getToken(SQLParser.BITWISE_AND_OPERATOR, 0)

        def BITWISE_OR_OPERATOR(self):
            return self.getToken(SQLParser.BITWISE_OR_OPERATOR, 0)

        def INTERVAL_SYMBOL(self):
            return self.getToken(SQLParser.INTERVAL_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def interval(self):
            return self.getTypedRuleContext(SQLParser.IntervalContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_bitExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitExpr" ):
                listener.enterBitExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitExpr" ):
                listener.exitBitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitExpr" ):
                return visitor.visitBitExpr(self)
            else:
                return visitor.visitChildren(self)



    def bitExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.BitExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 688
        self.enterRecursionRule(localctx, 688, self.RULE_bitExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5586
            self.simpleExpr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 5614
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,709,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 5612
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,708,self._ctx)
                    if la_ == 1:
                        localctx = SQLParser.BitExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_bitExpr)
                        self.state = 5588
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 5589
                        localctx.op = self.match(SQLParser.BITWISE_XOR_OPERATOR)
                        self.state = 5590
                        self.bitExpr(8)
                        pass

                    elif la_ == 2:
                        localctx = SQLParser.BitExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_bitExpr)
                        self.state = 5591
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 5592
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SQLParser.DIV_SYMBOL or _la==SQLParser.MOD_SYMBOL or ((((_la - 760)) & ~0x3f) == 0 and ((1 << (_la - 760)) & ((1 << (SQLParser.MULT_OPERATOR - 760)) | (1 << (SQLParser.DIV_OPERATOR - 760)) | (1 << (SQLParser.MOD_OPERATOR - 760)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5593
                        self.bitExpr(7)
                        pass

                    elif la_ == 3:
                        localctx = SQLParser.BitExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_bitExpr)
                        self.state = 5594
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 5595
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SQLParser.PLUS_OPERATOR or _la==SQLParser.MINUS_OPERATOR):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5596
                        self.bitExpr(6)
                        pass

                    elif la_ == 4:
                        localctx = SQLParser.BitExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_bitExpr)
                        self.state = 5597
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 5598
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SQLParser.SHIFT_LEFT_OPERATOR or _la==SQLParser.SHIFT_RIGHT_OPERATOR):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5599
                        self.bitExpr(4)
                        pass

                    elif la_ == 5:
                        localctx = SQLParser.BitExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_bitExpr)
                        self.state = 5600
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 5601
                        localctx.op = self.match(SQLParser.BITWISE_AND_OPERATOR)
                        self.state = 5602
                        self.bitExpr(3)
                        pass

                    elif la_ == 6:
                        localctx = SQLParser.BitExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_bitExpr)
                        self.state = 5603
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 5604
                        localctx.op = self.match(SQLParser.BITWISE_OR_OPERATOR)
                        self.state = 5605
                        self.bitExpr(2)
                        pass

                    elif la_ == 7:
                        localctx = SQLParser.BitExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_bitExpr)
                        self.state = 5606
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 5607
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SQLParser.PLUS_OPERATOR or _la==SQLParser.MINUS_OPERATOR):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5608
                        self.match(SQLParser.INTERVAL_SYMBOL)
                        self.state = 5609
                        self.expr(0)
                        self.state = 5610
                        self.interval()
                        pass

             
                self.state = 5616
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,709,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SimpleExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLParser.RULE_simpleExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class SimpleExprConvertContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONVERT_SYMBOL(self):
            return self.getToken(SQLParser.CONVERT_SYMBOL, 0)
        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)
        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)

        def COMMA_SYMBOL(self):
            return self.getToken(SQLParser.COMMA_SYMBOL, 0)
        def castType(self):
            return self.getTypedRuleContext(SQLParser.CastTypeContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprConvert" ):
                listener.enterSimpleExprConvert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprConvert" ):
                listener.exitSimpleExprConvert(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleExprConvert" ):
                return visitor.visitSimpleExprConvert(self)
            else:
                return visitor.visitChildren(self)


    class SimpleExprVariableContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variable(self):
            return self.getTypedRuleContext(SQLParser.VariableContext,0)

        def equal(self):
            return self.getTypedRuleContext(SQLParser.EqualContext,0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprVariable" ):
                listener.enterSimpleExprVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprVariable" ):
                listener.exitSimpleExprVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleExprVariable" ):
                return visitor.visitSimpleExprVariable(self)
            else:
                return visitor.visitChildren(self)


    class SimpleExprCastContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST_SYMBOL(self):
            return self.getToken(SQLParser.CAST_SYMBOL, 0)
        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)
        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)

        def AS_SYMBOL(self):
            return self.getToken(SQLParser.AS_SYMBOL, 0)
        def castType(self):
            return self.getTypedRuleContext(SQLParser.CastTypeContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)
        def arrayCast(self):
            return self.getTypedRuleContext(SQLParser.ArrayCastContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprCast" ):
                listener.enterSimpleExprCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprCast" ):
                listener.exitSimpleExprCast(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleExprCast" ):
                return visitor.visitSimpleExprCast(self)
            else:
                return visitor.visitChildren(self)


    class SimpleExprUnaryContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.SimpleExprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def simpleExpr(self):
            return self.getTypedRuleContext(SQLParser.SimpleExprContext,0)

        def PLUS_OPERATOR(self):
            return self.getToken(SQLParser.PLUS_OPERATOR, 0)
        def MINUS_OPERATOR(self):
            return self.getToken(SQLParser.MINUS_OPERATOR, 0)
        def BITWISE_NOT_OPERATOR(self):
            return self.getToken(SQLParser.BITWISE_NOT_OPERATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprUnary" ):
                listener.enterSimpleExprUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprUnary" ):
                listener.exitSimpleExprUnary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleExprUnary" ):
                return visitor.visitSimpleExprUnary(self)
            else:
                return visitor.visitChildren(self)


    class SimpleExprOdbcContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_CURLY_SYMBOL, 0)
        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)

        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_CURLY_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprOdbc" ):
                listener.enterSimpleExprOdbc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprOdbc" ):
                listener.exitSimpleExprOdbc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleExprOdbc" ):
                return visitor.visitSimpleExprOdbc(self)
            else:
                return visitor.visitChildren(self)


    class SimpleExprRuntimeFunctionContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def runtimeFunctionCall(self):
            return self.getTypedRuleContext(SQLParser.RuntimeFunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprRuntimeFunction" ):
                listener.enterSimpleExprRuntimeFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprRuntimeFunction" ):
                listener.exitSimpleExprRuntimeFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleExprRuntimeFunction" ):
                return visitor.visitSimpleExprRuntimeFunction(self)
            else:
                return visitor.visitChildren(self)


    class SimpleExprFunctionContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(SQLParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprFunction" ):
                listener.enterSimpleExprFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprFunction" ):
                listener.exitSimpleExprFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleExprFunction" ):
                return visitor.visitSimpleExprFunction(self)
            else:
                return visitor.visitChildren(self)


    class SimpleExprCollateContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simpleExpr(self):
            return self.getTypedRuleContext(SQLParser.SimpleExprContext,0)

        def COLLATE_SYMBOL(self):
            return self.getToken(SQLParser.COLLATE_SYMBOL, 0)
        def textOrIdentifier(self):
            return self.getTypedRuleContext(SQLParser.TextOrIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprCollate" ):
                listener.enterSimpleExprCollate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprCollate" ):
                listener.exitSimpleExprCollate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleExprCollate" ):
                return visitor.visitSimpleExprCollate(self)
            else:
                return visitor.visitChildren(self)


    class SimpleExprMatchContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MATCH_SYMBOL(self):
            return self.getToken(SQLParser.MATCH_SYMBOL, 0)
        def identListArg(self):
            return self.getTypedRuleContext(SQLParser.IdentListArgContext,0)

        def AGAINST_SYMBOL(self):
            return self.getToken(SQLParser.AGAINST_SYMBOL, 0)
        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)
        def bitExpr(self):
            return self.getTypedRuleContext(SQLParser.BitExprContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)
        def fulltextOptions(self):
            return self.getTypedRuleContext(SQLParser.FulltextOptionsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprMatch" ):
                listener.enterSimpleExprMatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprMatch" ):
                listener.exitSimpleExprMatch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleExprMatch" ):
                return visitor.visitSimpleExprMatch(self)
            else:
                return visitor.visitChildren(self)


    class SimpleExprWindowingFunctionContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def windowFunctionCall(self):
            return self.getTypedRuleContext(SQLParser.WindowFunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprWindowingFunction" ):
                listener.enterSimpleExprWindowingFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprWindowingFunction" ):
                listener.exitSimpleExprWindowingFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleExprWindowingFunction" ):
                return visitor.visitSimpleExprWindowingFunction(self)
            else:
                return visitor.visitChildren(self)


    class SimpleExprBinaryContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BINARY_SYMBOL(self):
            return self.getToken(SQLParser.BINARY_SYMBOL, 0)
        def simpleExpr(self):
            return self.getTypedRuleContext(SQLParser.SimpleExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprBinary" ):
                listener.enterSimpleExprBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprBinary" ):
                listener.exitSimpleExprBinary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleExprBinary" ):
                return visitor.visitSimpleExprBinary(self)
            else:
                return visitor.visitChildren(self)


    class SimpleExprColumnRefContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnRef(self):
            return self.getTypedRuleContext(SQLParser.ColumnRefContext,0)

        def jsonOperator(self):
            return self.getTypedRuleContext(SQLParser.JsonOperatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprColumnRef" ):
                listener.enterSimpleExprColumnRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprColumnRef" ):
                listener.exitSimpleExprColumnRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleExprColumnRef" ):
                return visitor.visitSimpleExprColumnRef(self)
            else:
                return visitor.visitChildren(self)


    class SimpleExprParamMarkerContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PARAM_MARKER(self):
            return self.getToken(SQLParser.PARAM_MARKER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprParamMarker" ):
                listener.enterSimpleExprParamMarker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprParamMarker" ):
                listener.exitSimpleExprParamMarker(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleExprParamMarker" ):
                return visitor.visitSimpleExprParamMarker(self)
            else:
                return visitor.visitChildren(self)


    class SimpleExprSumContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def sumExpr(self):
            return self.getTypedRuleContext(SQLParser.SumExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprSum" ):
                listener.enterSimpleExprSum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprSum" ):
                listener.exitSimpleExprSum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleExprSum" ):
                return visitor.visitSimpleExprSum(self)
            else:
                return visitor.visitChildren(self)


    class SimpleExprConvertUsingContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONVERT_SYMBOL(self):
            return self.getToken(SQLParser.CONVERT_SYMBOL, 0)
        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)
        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)

        def USING_SYMBOL(self):
            return self.getToken(SQLParser.USING_SYMBOL, 0)
        def charsetName(self):
            return self.getTypedRuleContext(SQLParser.CharsetNameContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprConvertUsing" ):
                listener.enterSimpleExprConvertUsing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprConvertUsing" ):
                listener.exitSimpleExprConvertUsing(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleExprConvertUsing" ):
                return visitor.visitSimpleExprConvertUsing(self)
            else:
                return visitor.visitChildren(self)


    class SimpleExprSubQueryContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def subquery(self):
            return self.getTypedRuleContext(SQLParser.SubqueryContext,0)

        def EXISTS_SYMBOL(self):
            return self.getToken(SQLParser.EXISTS_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprSubQuery" ):
                listener.enterSimpleExprSubQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprSubQuery" ):
                listener.exitSimpleExprSubQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleExprSubQuery" ):
                return visitor.visitSimpleExprSubQuery(self)
            else:
                return visitor.visitChildren(self)


    class SimpleExprGroupingOperationContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def groupingOperation(self):
            return self.getTypedRuleContext(SQLParser.GroupingOperationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprGroupingOperation" ):
                listener.enterSimpleExprGroupingOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprGroupingOperation" ):
                listener.exitSimpleExprGroupingOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleExprGroupingOperation" ):
                return visitor.visitSimpleExprGroupingOperation(self)
            else:
                return visitor.visitChildren(self)


    class SimpleExprNotContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def not2Rule(self):
            return self.getTypedRuleContext(SQLParser.Not2RuleContext,0)

        def simpleExpr(self):
            return self.getTypedRuleContext(SQLParser.SimpleExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprNot" ):
                listener.enterSimpleExprNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprNot" ):
                listener.exitSimpleExprNot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleExprNot" ):
                return visitor.visitSimpleExprNot(self)
            else:
                return visitor.visitChildren(self)


    class SimpleExprValuesContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VALUES_SYMBOL(self):
            return self.getToken(SQLParser.VALUES_SYMBOL, 0)
        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)
        def simpleIdentifier(self):
            return self.getTypedRuleContext(SQLParser.SimpleIdentifierContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprValues" ):
                listener.enterSimpleExprValues(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprValues" ):
                listener.exitSimpleExprValues(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleExprValues" ):
                return visitor.visitSimpleExprValues(self)
            else:
                return visitor.visitChildren(self)


    class SimpleExprDefaultContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT_SYMBOL(self):
            return self.getToken(SQLParser.DEFAULT_SYMBOL, 0)
        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)
        def simpleIdentifier(self):
            return self.getTypedRuleContext(SQLParser.SimpleIdentifierContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprDefault" ):
                listener.enterSimpleExprDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprDefault" ):
                listener.exitSimpleExprDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleExprDefault" ):
                return visitor.visitSimpleExprDefault(self)
            else:
                return visitor.visitChildren(self)


    class SimpleExprListContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)
        def exprList(self):
            return self.getTypedRuleContext(SQLParser.ExprListContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)
        def ROW_SYMBOL(self):
            return self.getToken(SQLParser.ROW_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprList" ):
                listener.enterSimpleExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprList" ):
                listener.exitSimpleExprList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleExprList" ):
                return visitor.visitSimpleExprList(self)
            else:
                return visitor.visitChildren(self)


    class SimpleExprIntervalContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTERVAL_SYMBOL(self):
            return self.getToken(SQLParser.INTERVAL_SYMBOL, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLParser.ExprContext,i)

        def interval(self):
            return self.getTypedRuleContext(SQLParser.IntervalContext,0)

        def PLUS_OPERATOR(self):
            return self.getToken(SQLParser.PLUS_OPERATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprInterval" ):
                listener.enterSimpleExprInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprInterval" ):
                listener.exitSimpleExprInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleExprInterval" ):
                return visitor.visitSimpleExprInterval(self)
            else:
                return visitor.visitChildren(self)


    class SimpleExprCaseContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CASE_SYMBOL(self):
            return self.getToken(SQLParser.CASE_SYMBOL, 0)
        def END_SYMBOL(self):
            return self.getToken(SQLParser.END_SYMBOL, 0)
        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)

        def whenExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.WhenExpressionContext)
            else:
                return self.getTypedRuleContext(SQLParser.WhenExpressionContext,i)

        def thenExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ThenExpressionContext)
            else:
                return self.getTypedRuleContext(SQLParser.ThenExpressionContext,i)

        def elseExpression(self):
            return self.getTypedRuleContext(SQLParser.ElseExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprCase" ):
                listener.enterSimpleExprCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprCase" ):
                listener.exitSimpleExprCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleExprCase" ):
                return visitor.visitSimpleExprCase(self)
            else:
                return visitor.visitChildren(self)


    class SimpleExprConcatContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simpleExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.SimpleExprContext)
            else:
                return self.getTypedRuleContext(SQLParser.SimpleExprContext,i)

        def CONCAT_PIPES_SYMBOL(self):
            return self.getToken(SQLParser.CONCAT_PIPES_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprConcat" ):
                listener.enterSimpleExprConcat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprConcat" ):
                listener.exitSimpleExprConcat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleExprConcat" ):
                return visitor.visitSimpleExprConcat(self)
            else:
                return visitor.visitChildren(self)


    class SimpleExprLiteralContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(SQLParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprLiteral" ):
                listener.enterSimpleExprLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprLiteral" ):
                listener.exitSimpleExprLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleExprLiteral" ):
                return visitor.visitSimpleExprLiteral(self)
            else:
                return visitor.visitChildren(self)



    def simpleExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.SimpleExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 690
        self.enterRecursionRule(localctx, 690, self.RULE_simpleExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,719,self._ctx)
            if la_ == 1:
                localctx = SQLParser.SimpleExprVariableContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 5618
                self.variable()
                self.state = 5622
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,710,self._ctx)
                if la_ == 1:
                    self.state = 5619
                    self.equal()
                    self.state = 5620
                    self.expr(0)


                pass

            elif la_ == 2:
                localctx = SQLParser.SimpleExprColumnRefContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5624
                self.columnRef()
                self.state = 5626
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,711,self._ctx)
                if la_ == 1:
                    self.state = 5625
                    self.jsonOperator()


                pass

            elif la_ == 3:
                localctx = SQLParser.SimpleExprRuntimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5628
                self.runtimeFunctionCall()
                pass

            elif la_ == 4:
                localctx = SQLParser.SimpleExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5629
                self.functionCall()
                pass

            elif la_ == 5:
                localctx = SQLParser.SimpleExprLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5630
                self.literal()
                pass

            elif la_ == 6:
                localctx = SQLParser.SimpleExprParamMarkerContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5631
                self.match(SQLParser.PARAM_MARKER)
                pass

            elif la_ == 7:
                localctx = SQLParser.SimpleExprSumContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5632
                self.sumExpr()
                pass

            elif la_ == 8:
                localctx = SQLParser.SimpleExprGroupingOperationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5633
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 5634
                self.groupingOperation()
                pass

            elif la_ == 9:
                localctx = SQLParser.SimpleExprWindowingFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5635
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 5636
                self.windowFunctionCall()
                pass

            elif la_ == 10:
                localctx = SQLParser.SimpleExprUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5637
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 758)) & ~0x3f) == 0 and ((1 << (_la - 758)) & ((1 << (SQLParser.PLUS_OPERATOR - 758)) | (1 << (SQLParser.MINUS_OPERATOR - 758)) | (1 << (SQLParser.BITWISE_NOT_OPERATOR - 758)))) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5638
                self.simpleExpr(14)
                pass

            elif la_ == 11:
                localctx = SQLParser.SimpleExprNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5639
                self.not2Rule()
                self.state = 5640
                self.simpleExpr(13)
                pass

            elif la_ == 12:
                localctx = SQLParser.SimpleExprListContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.ROW_SYMBOL:
                    self.state = 5642
                    self.match(SQLParser.ROW_SYMBOL)


                self.state = 5645
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 5646
                self.exprList()
                self.state = 5647
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 13:
                localctx = SQLParser.SimpleExprSubQueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.EXISTS_SYMBOL:
                    self.state = 5649
                    self.match(SQLParser.EXISTS_SYMBOL)


                self.state = 5652
                self.subquery()
                pass

            elif la_ == 14:
                localctx = SQLParser.SimpleExprOdbcContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5653
                self.match(SQLParser.OPEN_CURLY_SYMBOL)
                self.state = 5654
                self.identifier()
                self.state = 5655
                self.expr(0)
                self.state = 5656
                self.match(SQLParser.CLOSE_CURLY_SYMBOL)
                pass

            elif la_ == 15:
                localctx = SQLParser.SimpleExprMatchContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5658
                self.match(SQLParser.MATCH_SYMBOL)
                self.state = 5659
                self.identListArg()
                self.state = 5660
                self.match(SQLParser.AGAINST_SYMBOL)
                self.state = 5661
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 5662
                self.bitExpr(0)
                self.state = 5664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.IN_SYMBOL or _la==SQLParser.WITH_SYMBOL:
                    self.state = 5663
                    self.fulltextOptions()


                self.state = 5666
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 16:
                localctx = SQLParser.SimpleExprBinaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5668
                self.match(SQLParser.BINARY_SYMBOL)
                self.state = 5669
                self.simpleExpr(8)
                pass

            elif la_ == 17:
                localctx = SQLParser.SimpleExprCastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5670
                self.match(SQLParser.CAST_SYMBOL)
                self.state = 5671
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 5672
                self.expr(0)
                self.state = 5673
                self.match(SQLParser.AS_SYMBOL)
                self.state = 5674
                self.castType()
                self.state = 5676
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,715,self._ctx)
                if la_ == 1:
                    self.state = 5675
                    self.arrayCast()


                self.state = 5678
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 18:
                localctx = SQLParser.SimpleExprCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5680
                self.match(SQLParser.CASE_SYMBOL)
                self.state = 5682
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,716,self._ctx)
                if la_ == 1:
                    self.state = 5681
                    self.expr(0)


                self.state = 5687 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5684
                    self.whenExpression()
                    self.state = 5685
                    self.thenExpression()
                    self.state = 5689 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SQLParser.WHEN_SYMBOL):
                        break

                self.state = 5692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.ELSE_SYMBOL:
                    self.state = 5691
                    self.elseExpression()


                self.state = 5694
                self.match(SQLParser.END_SYMBOL)
                pass

            elif la_ == 19:
                localctx = SQLParser.SimpleExprConvertContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5696
                self.match(SQLParser.CONVERT_SYMBOL)
                self.state = 5697
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 5698
                self.expr(0)
                self.state = 5699
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 5700
                self.castType()
                self.state = 5701
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 20:
                localctx = SQLParser.SimpleExprConvertUsingContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5703
                self.match(SQLParser.CONVERT_SYMBOL)
                self.state = 5704
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 5705
                self.expr(0)
                self.state = 5706
                self.match(SQLParser.USING_SYMBOL)
                self.state = 5707
                self.charsetName()
                self.state = 5708
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 21:
                localctx = SQLParser.SimpleExprDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5710
                self.match(SQLParser.DEFAULT_SYMBOL)
                self.state = 5711
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 5712
                self.simpleIdentifier()
                self.state = 5713
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 22:
                localctx = SQLParser.SimpleExprValuesContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5715
                self.match(SQLParser.VALUES_SYMBOL)
                self.state = 5716
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 5717
                self.simpleIdentifier()
                self.state = 5718
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 23:
                localctx = SQLParser.SimpleExprIntervalContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5720
                self.match(SQLParser.INTERVAL_SYMBOL)
                self.state = 5721
                self.expr(0)
                self.state = 5722
                self.interval()
                self.state = 5723
                self.match(SQLParser.PLUS_OPERATOR)
                self.state = 5724
                self.expr(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 5736
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,721,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 5734
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,720,self._ctx)
                    if la_ == 1:
                        localctx = SQLParser.SimpleExprConcatContext(self, SQLParser.SimpleExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_simpleExpr)
                        self.state = 5728
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 5729
                        self.match(SQLParser.CONCAT_PIPES_SYMBOL)
                        self.state = 5730
                        self.simpleExpr(16)
                        pass

                    elif la_ == 2:
                        localctx = SQLParser.SimpleExprCollateContext(self, SQLParser.SimpleExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_simpleExpr)
                        self.state = 5731
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 5732
                        self.match(SQLParser.COLLATE_SYMBOL)
                        self.state = 5733
                        self.textOrIdentifier()
                        pass

             
                self.state = 5738
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,721,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ArrayCastContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY_SYMBOL(self):
            return self.getToken(SQLParser.ARRAY_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_arrayCast

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCast" ):
                listener.enterArrayCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCast" ):
                listener.exitArrayCast(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayCast" ):
                return visitor.visitArrayCast(self)
            else:
                return visitor.visitChildren(self)




    def arrayCast(self):

        localctx = SQLParser.ArrayCastContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_arrayCast)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5739
            if not self.serverVersion >= 80017:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.serverVersion >= 80017")
            self.state = 5740
            self.match(SQLParser.ARRAY_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_SEPARATOR_SYMBOL(self):
            return self.getToken(SQLParser.JSON_SEPARATOR_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextStringLiteralContext,0)


        def JSON_UNQUOTED_SEPARATOR_SYMBOL(self):
            return self.getToken(SQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_jsonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonOperator" ):
                listener.enterJsonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonOperator" ):
                listener.exitJsonOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonOperator" ):
                return visitor.visitJsonOperator(self)
            else:
                return visitor.visitChildren(self)




    def jsonOperator(self):

        localctx = SQLParser.JsonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_jsonOperator)
        try:
            self.state = 5748
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,722,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5742
                if not self.serverVersion >= 50708:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50708")
                self.state = 5743
                self.match(SQLParser.JSON_SEPARATOR_SYMBOL)
                self.state = 5744
                self.textStringLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5745
                if not self.serverVersion >= 50713:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50713")
                self.state = 5746
                self.match(SQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL)
                self.state = 5747
                self.textStringLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SumExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def inSumExpr(self):
            return self.getTypedRuleContext(SQLParser.InSumExprContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def AVG_SYMBOL(self):
            return self.getToken(SQLParser.AVG_SYMBOL, 0)

        def DISTINCT_SYMBOL(self):
            return self.getToken(SQLParser.DISTINCT_SYMBOL, 0)

        def windowingClause(self):
            return self.getTypedRuleContext(SQLParser.WindowingClauseContext,0)


        def BIT_AND_SYMBOL(self):
            return self.getToken(SQLParser.BIT_AND_SYMBOL, 0)

        def BIT_OR_SYMBOL(self):
            return self.getToken(SQLParser.BIT_OR_SYMBOL, 0)

        def BIT_XOR_SYMBOL(self):
            return self.getToken(SQLParser.BIT_XOR_SYMBOL, 0)

        def jsonFunction(self):
            return self.getTypedRuleContext(SQLParser.JsonFunctionContext,0)


        def MULT_OPERATOR(self):
            return self.getToken(SQLParser.MULT_OPERATOR, 0)

        def COUNT_SYMBOL(self):
            return self.getToken(SQLParser.COUNT_SYMBOL, 0)

        def ALL_SYMBOL(self):
            return self.getToken(SQLParser.ALL_SYMBOL, 0)

        def exprList(self):
            return self.getTypedRuleContext(SQLParser.ExprListContext,0)


        def MIN_SYMBOL(self):
            return self.getToken(SQLParser.MIN_SYMBOL, 0)

        def MAX_SYMBOL(self):
            return self.getToken(SQLParser.MAX_SYMBOL, 0)

        def STD_SYMBOL(self):
            return self.getToken(SQLParser.STD_SYMBOL, 0)

        def VARIANCE_SYMBOL(self):
            return self.getToken(SQLParser.VARIANCE_SYMBOL, 0)

        def STDDEV_SAMP_SYMBOL(self):
            return self.getToken(SQLParser.STDDEV_SAMP_SYMBOL, 0)

        def VAR_SAMP_SYMBOL(self):
            return self.getToken(SQLParser.VAR_SAMP_SYMBOL, 0)

        def SUM_SYMBOL(self):
            return self.getToken(SQLParser.SUM_SYMBOL, 0)

        def GROUP_CONCAT_SYMBOL(self):
            return self.getToken(SQLParser.GROUP_CONCAT_SYMBOL, 0)

        def orderClause(self):
            return self.getTypedRuleContext(SQLParser.OrderClauseContext,0)


        def SEPARATOR_SYMBOL(self):
            return self.getToken(SQLParser.SEPARATOR_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(SQLParser.TextStringContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_sumExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSumExpr" ):
                listener.enterSumExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSumExpr" ):
                listener.exitSumExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSumExpr" ):
                return visitor.visitSumExpr(self)
            else:
                return visitor.visitChildren(self)




    def sumExpr(self):

        localctx = SQLParser.SumExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_sumExpr)
        self._la = 0 # Token type
        try:
            self.state = 5881
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,745,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5750
                localctx.name = self.match(SQLParser.AVG_SYMBOL)
                self.state = 5751
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 5753
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,723,self._ctx)
                if la_ == 1:
                    self.state = 5752
                    self.match(SQLParser.DISTINCT_SYMBOL)


                self.state = 5755
                self.inSumExpr()
                self.state = 5756
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5759
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,724,self._ctx)
                if la_ == 1:
                    self.state = 5757
                    if not self.serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80000")
                    self.state = 5758
                    self.windowingClause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5761
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLParser.BIT_AND_SYMBOL) | (1 << SQLParser.BIT_OR_SYMBOL) | (1 << SQLParser.BIT_XOR_SYMBOL))) != 0)):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5762
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 5763
                self.inSumExpr()
                self.state = 5764
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5767
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,725,self._ctx)
                if la_ == 1:
                    self.state = 5765
                    if not self.serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80000")
                    self.state = 5766
                    self.windowingClause()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5769
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 5770
                self.jsonFunction()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5771
                localctx.name = self.match(SQLParser.COUNT_SYMBOL)
                self.state = 5772
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 5774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.ALL_SYMBOL:
                    self.state = 5773
                    self.match(SQLParser.ALL_SYMBOL)


                self.state = 5776
                self.match(SQLParser.MULT_OPERATOR)
                self.state = 5777
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5780
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,727,self._ctx)
                if la_ == 1:
                    self.state = 5778
                    if not self.serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80000")
                    self.state = 5779
                    self.windowingClause()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5782
                localctx.name = self.match(SQLParser.COUNT_SYMBOL)
                self.state = 5783
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 5791
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,729,self._ctx)
                if la_ == 1:
                    self.state = 5785
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.ALL_SYMBOL:
                        self.state = 5784
                        self.match(SQLParser.ALL_SYMBOL)


                    self.state = 5787
                    self.match(SQLParser.MULT_OPERATOR)
                    pass

                elif la_ == 2:
                    self.state = 5788
                    self.inSumExpr()
                    pass

                elif la_ == 3:
                    self.state = 5789
                    self.match(SQLParser.DISTINCT_SYMBOL)
                    self.state = 5790
                    self.exprList()
                    pass


                self.state = 5793
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5796
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,730,self._ctx)
                if la_ == 1:
                    self.state = 5794
                    if not self.serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80000")
                    self.state = 5795
                    self.windowingClause()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5798
                localctx.name = self.match(SQLParser.MIN_SYMBOL)
                self.state = 5799
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 5801
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,731,self._ctx)
                if la_ == 1:
                    self.state = 5800
                    self.match(SQLParser.DISTINCT_SYMBOL)


                self.state = 5803
                self.inSumExpr()
                self.state = 5804
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5807
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,732,self._ctx)
                if la_ == 1:
                    self.state = 5805
                    if not self.serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80000")
                    self.state = 5806
                    self.windowingClause()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5809
                localctx.name = self.match(SQLParser.MAX_SYMBOL)
                self.state = 5810
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 5812
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,733,self._ctx)
                if la_ == 1:
                    self.state = 5811
                    self.match(SQLParser.DISTINCT_SYMBOL)


                self.state = 5814
                self.inSumExpr()
                self.state = 5815
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5818
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,734,self._ctx)
                if la_ == 1:
                    self.state = 5816
                    if not self.serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80000")
                    self.state = 5817
                    self.windowingClause()


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5820
                localctx.name = self.match(SQLParser.STD_SYMBOL)
                self.state = 5821
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 5822
                self.inSumExpr()
                self.state = 5823
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5826
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,735,self._ctx)
                if la_ == 1:
                    self.state = 5824
                    if not self.serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80000")
                    self.state = 5825
                    self.windowingClause()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5828
                localctx.name = self.match(SQLParser.VARIANCE_SYMBOL)
                self.state = 5829
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 5830
                self.inSumExpr()
                self.state = 5831
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5834
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,736,self._ctx)
                if la_ == 1:
                    self.state = 5832
                    if not self.serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80000")
                    self.state = 5833
                    self.windowingClause()


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5836
                localctx.name = self.match(SQLParser.STDDEV_SAMP_SYMBOL)
                self.state = 5837
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 5838
                self.inSumExpr()
                self.state = 5839
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5842
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,737,self._ctx)
                if la_ == 1:
                    self.state = 5840
                    if not self.serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80000")
                    self.state = 5841
                    self.windowingClause()


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5844
                localctx.name = self.match(SQLParser.VAR_SAMP_SYMBOL)
                self.state = 5845
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 5846
                self.inSumExpr()
                self.state = 5847
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5850
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,738,self._ctx)
                if la_ == 1:
                    self.state = 5848
                    if not self.serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80000")
                    self.state = 5849
                    self.windowingClause()


                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5852
                localctx.name = self.match(SQLParser.SUM_SYMBOL)
                self.state = 5853
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 5855
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,739,self._ctx)
                if la_ == 1:
                    self.state = 5854
                    self.match(SQLParser.DISTINCT_SYMBOL)


                self.state = 5857
                self.inSumExpr()
                self.state = 5858
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5861
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,740,self._ctx)
                if la_ == 1:
                    self.state = 5859
                    if not self.serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80000")
                    self.state = 5860
                    self.windowingClause()


                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5863
                localctx.name = self.match(SQLParser.GROUP_CONCAT_SYMBOL)
                self.state = 5864
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 5866
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,741,self._ctx)
                if la_ == 1:
                    self.state = 5865
                    self.match(SQLParser.DISTINCT_SYMBOL)


                self.state = 5868
                self.exprList()
                self.state = 5870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.ORDER_SYMBOL:
                    self.state = 5869
                    self.orderClause()


                self.state = 5874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.SEPARATOR_SYMBOL:
                    self.state = 5872
                    self.match(SQLParser.SEPARATOR_SYMBOL)
                    self.state = 5873
                    self.textString()


                self.state = 5876
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5879
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,744,self._ctx)
                if la_ == 1:
                    self.state = 5877
                    if not self.serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80000")
                    self.state = 5878
                    self.windowingClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUPING_SYMBOL(self):
            return self.getToken(SQLParser.GROUPING_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def exprList(self):
            return self.getTypedRuleContext(SQLParser.ExprListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_groupingOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingOperation" ):
                listener.enterGroupingOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingOperation" ):
                listener.exitGroupingOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupingOperation" ):
                return visitor.visitGroupingOperation(self)
            else:
                return visitor.visitChildren(self)




    def groupingOperation(self):

        localctx = SQLParser.GroupingOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_groupingOperation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5883
            self.match(SQLParser.GROUPING_SYMBOL)
            self.state = 5884
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 5885
            self.exprList()
            self.state = 5886
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parentheses(self):
            return self.getTypedRuleContext(SQLParser.ParenthesesContext,0)


        def windowingClause(self):
            return self.getTypedRuleContext(SQLParser.WindowingClauseContext,0)


        def ROW_NUMBER_SYMBOL(self):
            return self.getToken(SQLParser.ROW_NUMBER_SYMBOL, 0)

        def RANK_SYMBOL(self):
            return self.getToken(SQLParser.RANK_SYMBOL, 0)

        def DENSE_RANK_SYMBOL(self):
            return self.getToken(SQLParser.DENSE_RANK_SYMBOL, 0)

        def CUME_DIST_SYMBOL(self):
            return self.getToken(SQLParser.CUME_DIST_SYMBOL, 0)

        def PERCENT_RANK_SYMBOL(self):
            return self.getToken(SQLParser.PERCENT_RANK_SYMBOL, 0)

        def NTILE_SYMBOL(self):
            return self.getToken(SQLParser.NTILE_SYMBOL, 0)

        def simpleExprWithParentheses(self):
            return self.getTypedRuleContext(SQLParser.SimpleExprWithParenthesesContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def LEAD_SYMBOL(self):
            return self.getToken(SQLParser.LEAD_SYMBOL, 0)

        def LAG_SYMBOL(self):
            return self.getToken(SQLParser.LAG_SYMBOL, 0)

        def leadLagInfo(self):
            return self.getTypedRuleContext(SQLParser.LeadLagInfoContext,0)


        def nullTreatment(self):
            return self.getTypedRuleContext(SQLParser.NullTreatmentContext,0)


        def exprWithParentheses(self):
            return self.getTypedRuleContext(SQLParser.ExprWithParenthesesContext,0)


        def FIRST_VALUE_SYMBOL(self):
            return self.getToken(SQLParser.FIRST_VALUE_SYMBOL, 0)

        def LAST_VALUE_SYMBOL(self):
            return self.getToken(SQLParser.LAST_VALUE_SYMBOL, 0)

        def NTH_VALUE_SYMBOL(self):
            return self.getToken(SQLParser.NTH_VALUE_SYMBOL, 0)

        def COMMA_SYMBOL(self):
            return self.getToken(SQLParser.COMMA_SYMBOL, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(SQLParser.SimpleExprContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(SQLParser.FROM_SYMBOL, 0)

        def FIRST_SYMBOL(self):
            return self.getToken(SQLParser.FIRST_SYMBOL, 0)

        def LAST_SYMBOL(self):
            return self.getToken(SQLParser.LAST_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_windowFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFunctionCall" ):
                listener.enterWindowFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFunctionCall" ):
                listener.exitWindowFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowFunctionCall" ):
                return visitor.visitWindowFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def windowFunctionCall(self):

        localctx = SQLParser.WindowFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_windowFunctionCall)
        self._la = 0 # Token type
        try:
            self.state = 5930
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.CUME_DIST_SYMBOL, SQLParser.DENSE_RANK_SYMBOL, SQLParser.PERCENT_RANK_SYMBOL, SQLParser.RANK_SYMBOL, SQLParser.ROW_NUMBER_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5888
                _la = self._input.LA(1)
                if not(((((_la - 678)) & ~0x3f) == 0 and ((1 << (_la - 678)) & ((1 << (SQLParser.CUME_DIST_SYMBOL - 678)) | (1 << (SQLParser.DENSE_RANK_SYMBOL - 678)) | (1 << (SQLParser.PERCENT_RANK_SYMBOL - 678)) | (1 << (SQLParser.RANK_SYMBOL - 678)) | (1 << (SQLParser.ROW_NUMBER_SYMBOL - 678)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5889
                self.parentheses()
                self.state = 5890
                self.windowingClause()
                pass
            elif token in [SQLParser.NTILE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5892
                self.match(SQLParser.NTILE_SYMBOL)
                self.state = 5893
                self.simpleExprWithParentheses()
                self.state = 5894
                self.windowingClause()
                pass
            elif token in [SQLParser.LAG_SYMBOL, SQLParser.LEAD_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5896
                _la = self._input.LA(1)
                if not(_la==SQLParser.LAG_SYMBOL or _la==SQLParser.LEAD_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5897
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 5898
                self.expr(0)
                self.state = 5900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.COMMA_SYMBOL:
                    self.state = 5899
                    self.leadLagInfo()


                self.state = 5902
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.IGNORE_SYMBOL or _la==SQLParser.RESPECT_SYMBOL:
                    self.state = 5903
                    self.nullTreatment()


                self.state = 5906
                self.windowingClause()
                pass
            elif token in [SQLParser.FIRST_VALUE_SYMBOL, SQLParser.LAST_VALUE_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5908
                _la = self._input.LA(1)
                if not(_la==SQLParser.FIRST_VALUE_SYMBOL or _la==SQLParser.LAST_VALUE_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5909
                self.exprWithParentheses()
                self.state = 5911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.IGNORE_SYMBOL or _la==SQLParser.RESPECT_SYMBOL:
                    self.state = 5910
                    self.nullTreatment()


                self.state = 5913
                self.windowingClause()
                pass
            elif token in [SQLParser.NTH_VALUE_SYMBOL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5915
                self.match(SQLParser.NTH_VALUE_SYMBOL)
                self.state = 5916
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 5917
                self.expr(0)
                self.state = 5918
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 5919
                self.simpleExpr(0)
                self.state = 5920
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.FROM_SYMBOL:
                    self.state = 5921
                    self.match(SQLParser.FROM_SYMBOL)
                    self.state = 5922
                    _la = self._input.LA(1)
                    if not(_la==SQLParser.FIRST_SYMBOL or _la==SQLParser.LAST_SYMBOL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.IGNORE_SYMBOL or _la==SQLParser.RESPECT_SYMBOL:
                    self.state = 5925
                    self.nullTreatment()


                self.state = 5928
                self.windowingClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER_SYMBOL(self):
            return self.getToken(SQLParser.OVER_SYMBOL, 0)

        def windowName(self):
            return self.getTypedRuleContext(SQLParser.WindowNameContext,0)


        def windowSpec(self):
            return self.getTypedRuleContext(SQLParser.WindowSpecContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_windowingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowingClause" ):
                listener.enterWindowingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowingClause" ):
                listener.exitWindowingClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowingClause" ):
                return visitor.visitWindowingClause(self)
            else:
                return visitor.visitChildren(self)




    def windowingClause(self):

        localctx = SQLParser.WindowingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_windowingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5932
            self.match(SQLParser.OVER_SYMBOL)
            self.state = 5935
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,752,self._ctx)
            if la_ == 1:
                self.state = 5933
                self.windowName()
                pass

            elif la_ == 2:
                self.state = 5934
                self.windowSpec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LeadLagInfoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def ulonglong_number(self):
            return self.getTypedRuleContext(SQLParser.Ulonglong_numberContext,0)


        def PARAM_MARKER(self):
            return self.getToken(SQLParser.PARAM_MARKER, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_leadLagInfo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLeadLagInfo" ):
                listener.enterLeadLagInfo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLeadLagInfo" ):
                listener.exitLeadLagInfo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLeadLagInfo" ):
                return visitor.visitLeadLagInfo(self)
            else:
                return visitor.visitChildren(self)




    def leadLagInfo(self):

        localctx = SQLParser.LeadLagInfoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_leadLagInfo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5937
            self.match(SQLParser.COMMA_SYMBOL)
            self.state = 5940
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.INT_NUMBER, SQLParser.LONG_NUMBER, SQLParser.ULONGLONG_NUMBER, SQLParser.DECIMAL_NUMBER, SQLParser.FLOAT_NUMBER]:
                self.state = 5938
                self.ulonglong_number()
                pass
            elif token in [SQLParser.PARAM_MARKER]:
                self.state = 5939
                self.match(SQLParser.PARAM_MARKER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.COMMA_SYMBOL:
                self.state = 5942
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 5943
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullTreatmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLS_SYMBOL(self):
            return self.getToken(SQLParser.NULLS_SYMBOL, 0)

        def RESPECT_SYMBOL(self):
            return self.getToken(SQLParser.RESPECT_SYMBOL, 0)

        def IGNORE_SYMBOL(self):
            return self.getToken(SQLParser.IGNORE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_nullTreatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullTreatment" ):
                listener.enterNullTreatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullTreatment" ):
                listener.exitNullTreatment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullTreatment" ):
                return visitor.visitNullTreatment(self)
            else:
                return visitor.visitChildren(self)




    def nullTreatment(self):

        localctx = SQLParser.NullTreatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_nullTreatment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5946
            _la = self._input.LA(1)
            if not(_la==SQLParser.IGNORE_SYMBOL or _la==SQLParser.RESPECT_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5947
            self.match(SQLParser.NULLS_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_ARRAYAGG_SYMBOL(self):
            return self.getToken(SQLParser.JSON_ARRAYAGG_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def inSumExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.InSumExprContext)
            else:
                return self.getTypedRuleContext(SQLParser.InSumExprContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def windowingClause(self):
            return self.getTypedRuleContext(SQLParser.WindowingClauseContext,0)


        def JSON_OBJECTAGG_SYMBOL(self):
            return self.getToken(SQLParser.JSON_OBJECTAGG_SYMBOL, 0)

        def COMMA_SYMBOL(self):
            return self.getToken(SQLParser.COMMA_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_jsonFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonFunction" ):
                listener.enterJsonFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonFunction" ):
                listener.exitJsonFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonFunction" ):
                return visitor.visitJsonFunction(self)
            else:
                return visitor.visitChildren(self)




    def jsonFunction(self):

        localctx = SQLParser.JsonFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_jsonFunction)
        try:
            self.state = 5965
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.JSON_ARRAYAGG_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5949
                self.match(SQLParser.JSON_ARRAYAGG_SYMBOL)
                self.state = 5950
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 5951
                self.inSumExpr()
                self.state = 5952
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5954
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,755,self._ctx)
                if la_ == 1:
                    self.state = 5953
                    self.windowingClause()


                pass
            elif token in [SQLParser.JSON_OBJECTAGG_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5956
                self.match(SQLParser.JSON_OBJECTAGG_SYMBOL)
                self.state = 5957
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 5958
                self.inSumExpr()
                self.state = 5959
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 5960
                self.inSumExpr()
                self.state = 5961
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5963
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,756,self._ctx)
                if la_ == 1:
                    self.state = 5962
                    self.windowingClause()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InSumExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def ALL_SYMBOL(self):
            return self.getToken(SQLParser.ALL_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_inSumExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInSumExpr" ):
                listener.enterInSumExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInSumExpr" ):
                listener.exitInSumExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInSumExpr" ):
                return visitor.visitInSumExpr(self)
            else:
                return visitor.visitChildren(self)




    def inSumExpr(self):

        localctx = SQLParser.InSumExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_inSumExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5968
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,758,self._ctx)
            if la_ == 1:
                self.state = 5967
                self.match(SQLParser.ALL_SYMBOL)


            self.state = 5970
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentListArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identList(self):
            return self.getTypedRuleContext(SQLParser.IdentListContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_identListArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentListArg" ):
                listener.enterIdentListArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentListArg" ):
                listener.exitIdentListArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentListArg" ):
                return visitor.visitIdentListArg(self)
            else:
                return visitor.visitChildren(self)




    def identListArg(self):

        localctx = SQLParser.IdentListArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_identListArg)
        try:
            self.state = 5977
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,759,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5972
                self.identList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5973
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 5974
                self.identList()
                self.state = 5975
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.SimpleIdentifierContext)
            else:
                return self.getTypedRuleContext(SQLParser.SimpleIdentifierContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_identList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentList" ):
                listener.enterIdentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentList" ):
                listener.exitIdentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentList" ):
                return visitor.visitIdentList(self)
            else:
                return visitor.visitChildren(self)




    def identList(self):

        localctx = SQLParser.IdentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_identList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5979
            self.simpleIdentifier()
            self.state = 5984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 5980
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 5981
                self.simpleIdentifier()
                self.state = 5986
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FulltextOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN_SYMBOL(self):
            return self.getToken(SQLParser.IN_SYMBOL, 0)

        def BOOLEAN_SYMBOL(self):
            return self.getToken(SQLParser.BOOLEAN_SYMBOL, 0)

        def MODE_SYMBOL(self):
            return self.getToken(SQLParser.MODE_SYMBOL, 0)

        def NATURAL_SYMBOL(self):
            return self.getToken(SQLParser.NATURAL_SYMBOL, 0)

        def LANGUAGE_SYMBOL(self):
            return self.getToken(SQLParser.LANGUAGE_SYMBOL, 0)

        def WITH_SYMBOL(self):
            return self.getToken(SQLParser.WITH_SYMBOL, 0)

        def QUERY_SYMBOL(self):
            return self.getToken(SQLParser.QUERY_SYMBOL, 0)

        def EXPANSION_SYMBOL(self):
            return self.getToken(SQLParser.EXPANSION_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_fulltextOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFulltextOptions" ):
                listener.enterFulltextOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFulltextOptions" ):
                listener.exitFulltextOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFulltextOptions" ):
                return visitor.visitFulltextOptions(self)
            else:
                return visitor.visitChildren(self)




    def fulltextOptions(self):

        localctx = SQLParser.FulltextOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_fulltextOptions)
        self._la = 0 # Token type
        try:
            self.state = 6002
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,762,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5987
                self.match(SQLParser.IN_SYMBOL)
                self.state = 5988
                self.match(SQLParser.BOOLEAN_SYMBOL)
                self.state = 5989
                self.match(SQLParser.MODE_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5990
                self.match(SQLParser.IN_SYMBOL)
                self.state = 5991
                self.match(SQLParser.NATURAL_SYMBOL)
                self.state = 5992
                self.match(SQLParser.LANGUAGE_SYMBOL)
                self.state = 5993
                self.match(SQLParser.MODE_SYMBOL)
                self.state = 5997
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.WITH_SYMBOL:
                    self.state = 5994
                    self.match(SQLParser.WITH_SYMBOL)
                    self.state = 5995
                    self.match(SQLParser.QUERY_SYMBOL)
                    self.state = 5996
                    self.match(SQLParser.EXPANSION_SYMBOL)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5999
                self.match(SQLParser.WITH_SYMBOL)
                self.state = 6000
                self.match(SQLParser.QUERY_SYMBOL)
                self.state = 6001
                self.match(SQLParser.EXPANSION_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuntimeFunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def exprList(self):
            return self.getTypedRuleContext(SQLParser.ExprListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def CHAR_SYMBOL(self):
            return self.getToken(SQLParser.CHAR_SYMBOL, 0)

        def USING_SYMBOL(self):
            return self.getToken(SQLParser.USING_SYMBOL, 0)

        def charsetName(self):
            return self.getTypedRuleContext(SQLParser.CharsetNameContext,0)


        def CURRENT_USER_SYMBOL(self):
            return self.getToken(SQLParser.CURRENT_USER_SYMBOL, 0)

        def parentheses(self):
            return self.getTypedRuleContext(SQLParser.ParenthesesContext,0)


        def exprWithParentheses(self):
            return self.getTypedRuleContext(SQLParser.ExprWithParenthesesContext,0)


        def DATE_SYMBOL(self):
            return self.getToken(SQLParser.DATE_SYMBOL, 0)

        def DAY_SYMBOL(self):
            return self.getToken(SQLParser.DAY_SYMBOL, 0)

        def HOUR_SYMBOL(self):
            return self.getToken(SQLParser.HOUR_SYMBOL, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLParser.ExprContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def INSERT_SYMBOL(self):
            return self.getToken(SQLParser.INSERT_SYMBOL, 0)

        def INTERVAL_SYMBOL(self):
            return self.getToken(SQLParser.INTERVAL_SYMBOL, 0)

        def LEFT_SYMBOL(self):
            return self.getToken(SQLParser.LEFT_SYMBOL, 0)

        def MINUTE_SYMBOL(self):
            return self.getToken(SQLParser.MINUTE_SYMBOL, 0)

        def MONTH_SYMBOL(self):
            return self.getToken(SQLParser.MONTH_SYMBOL, 0)

        def RIGHT_SYMBOL(self):
            return self.getToken(SQLParser.RIGHT_SYMBOL, 0)

        def SECOND_SYMBOL(self):
            return self.getToken(SQLParser.SECOND_SYMBOL, 0)

        def TIME_SYMBOL(self):
            return self.getToken(SQLParser.TIME_SYMBOL, 0)

        def TIMESTAMP_SYMBOL(self):
            return self.getToken(SQLParser.TIMESTAMP_SYMBOL, 0)

        def trimFunction(self):
            return self.getTypedRuleContext(SQLParser.TrimFunctionContext,0)


        def USER_SYMBOL(self):
            return self.getToken(SQLParser.USER_SYMBOL, 0)

        def VALUES_SYMBOL(self):
            return self.getToken(SQLParser.VALUES_SYMBOL, 0)

        def YEAR_SYMBOL(self):
            return self.getToken(SQLParser.YEAR_SYMBOL, 0)

        def ADDDATE_SYMBOL(self):
            return self.getToken(SQLParser.ADDDATE_SYMBOL, 0)

        def SUBDATE_SYMBOL(self):
            return self.getToken(SQLParser.SUBDATE_SYMBOL, 0)

        def interval(self):
            return self.getTypedRuleContext(SQLParser.IntervalContext,0)


        def CURDATE_SYMBOL(self):
            return self.getToken(SQLParser.CURDATE_SYMBOL, 0)

        def CURTIME_SYMBOL(self):
            return self.getToken(SQLParser.CURTIME_SYMBOL, 0)

        def timeFunctionParameters(self):
            return self.getTypedRuleContext(SQLParser.TimeFunctionParametersContext,0)


        def DATE_ADD_SYMBOL(self):
            return self.getToken(SQLParser.DATE_ADD_SYMBOL, 0)

        def DATE_SUB_SYMBOL(self):
            return self.getToken(SQLParser.DATE_SUB_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(SQLParser.FROM_SYMBOL, 0)

        def EXTRACT_SYMBOL(self):
            return self.getToken(SQLParser.EXTRACT_SYMBOL, 0)

        def dateTimeTtype(self):
            return self.getTypedRuleContext(SQLParser.DateTimeTtypeContext,0)


        def GET_FORMAT_SYMBOL(self):
            return self.getToken(SQLParser.GET_FORMAT_SYMBOL, 0)

        def NOW_SYMBOL(self):
            return self.getToken(SQLParser.NOW_SYMBOL, 0)

        def bitExpr(self):
            return self.getTypedRuleContext(SQLParser.BitExprContext,0)


        def IN_SYMBOL(self):
            return self.getToken(SQLParser.IN_SYMBOL, 0)

        def POSITION_SYMBOL(self):
            return self.getToken(SQLParser.POSITION_SYMBOL, 0)

        def substringFunction(self):
            return self.getTypedRuleContext(SQLParser.SubstringFunctionContext,0)


        def SYSDATE_SYMBOL(self):
            return self.getToken(SQLParser.SYSDATE_SYMBOL, 0)

        def intervalTimeStamp(self):
            return self.getTypedRuleContext(SQLParser.IntervalTimeStampContext,0)


        def TIMESTAMP_ADD_SYMBOL(self):
            return self.getToken(SQLParser.TIMESTAMP_ADD_SYMBOL, 0)

        def TIMESTAMP_DIFF_SYMBOL(self):
            return self.getToken(SQLParser.TIMESTAMP_DIFF_SYMBOL, 0)

        def UTC_DATE_SYMBOL(self):
            return self.getToken(SQLParser.UTC_DATE_SYMBOL, 0)

        def UTC_TIME_SYMBOL(self):
            return self.getToken(SQLParser.UTC_TIME_SYMBOL, 0)

        def UTC_TIMESTAMP_SYMBOL(self):
            return self.getToken(SQLParser.UTC_TIMESTAMP_SYMBOL, 0)

        def ASCII_SYMBOL(self):
            return self.getToken(SQLParser.ASCII_SYMBOL, 0)

        def CHARSET_SYMBOL(self):
            return self.getToken(SQLParser.CHARSET_SYMBOL, 0)

        def exprListWithParentheses(self):
            return self.getTypedRuleContext(SQLParser.ExprListWithParenthesesContext,0)


        def COALESCE_SYMBOL(self):
            return self.getToken(SQLParser.COALESCE_SYMBOL, 0)

        def COLLATION_SYMBOL(self):
            return self.getToken(SQLParser.COLLATION_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(SQLParser.DATABASE_SYMBOL, 0)

        def IF_SYMBOL(self):
            return self.getToken(SQLParser.IF_SYMBOL, 0)

        def FORMAT_SYMBOL(self):
            return self.getToken(SQLParser.FORMAT_SYMBOL, 0)

        def MICROSECOND_SYMBOL(self):
            return self.getToken(SQLParser.MICROSECOND_SYMBOL, 0)

        def MOD_SYMBOL(self):
            return self.getToken(SQLParser.MOD_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextLiteralContext,0)


        def OLD_PASSWORD_SYMBOL(self):
            return self.getToken(SQLParser.OLD_PASSWORD_SYMBOL, 0)

        def PASSWORD_SYMBOL(self):
            return self.getToken(SQLParser.PASSWORD_SYMBOL, 0)

        def QUARTER_SYMBOL(self):
            return self.getToken(SQLParser.QUARTER_SYMBOL, 0)

        def REPEAT_SYMBOL(self):
            return self.getToken(SQLParser.REPEAT_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(SQLParser.REPLACE_SYMBOL, 0)

        def REVERSE_SYMBOL(self):
            return self.getToken(SQLParser.REVERSE_SYMBOL, 0)

        def ROW_COUNT_SYMBOL(self):
            return self.getToken(SQLParser.ROW_COUNT_SYMBOL, 0)

        def TRUNCATE_SYMBOL(self):
            return self.getToken(SQLParser.TRUNCATE_SYMBOL, 0)

        def WEEK_SYMBOL(self):
            return self.getToken(SQLParser.WEEK_SYMBOL, 0)

        def WEIGHT_STRING_SYMBOL(self):
            return self.getToken(SQLParser.WEIGHT_STRING_SYMBOL, 0)

        def AS_SYMBOL(self):
            return self.getToken(SQLParser.AS_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(SQLParser.BINARY_SYMBOL, 0)

        def wsNumCodepoints(self):
            return self.getTypedRuleContext(SQLParser.WsNumCodepointsContext,0)


        def ulong_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.Ulong_numberContext)
            else:
                return self.getTypedRuleContext(SQLParser.Ulong_numberContext,i)


        def weightStringLevels(self):
            return self.getTypedRuleContext(SQLParser.WeightStringLevelsContext,0)


        def geometryFunction(self):
            return self.getTypedRuleContext(SQLParser.GeometryFunctionContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_runtimeFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuntimeFunctionCall" ):
                listener.enterRuntimeFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuntimeFunctionCall" ):
                listener.exitRuntimeFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRuntimeFunctionCall" ):
                return visitor.visitRuntimeFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def runtimeFunctionCall(self):

        localctx = SQLParser.RuntimeFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_runtimeFunctionCall)
        self._la = 0 # Token type
        try:
            self.state = 6277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,780,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6004
                localctx.name = self.match(SQLParser.CHAR_SYMBOL)
                self.state = 6005
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 6006
                self.exprList()
                self.state = 6009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.USING_SYMBOL:
                    self.state = 6007
                    self.match(SQLParser.USING_SYMBOL)
                    self.state = 6008
                    self.charsetName()


                self.state = 6011
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6013
                localctx.name = self.match(SQLParser.CURRENT_USER_SYMBOL)
                self.state = 6015
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,764,self._ctx)
                if la_ == 1:
                    self.state = 6014
                    self.parentheses()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6017
                localctx.name = self.match(SQLParser.DATE_SYMBOL)
                self.state = 6018
                self.exprWithParentheses()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6019
                localctx.name = self.match(SQLParser.DAY_SYMBOL)
                self.state = 6020
                self.exprWithParentheses()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6021
                localctx.name = self.match(SQLParser.HOUR_SYMBOL)
                self.state = 6022
                self.exprWithParentheses()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6023
                localctx.name = self.match(SQLParser.INSERT_SYMBOL)
                self.state = 6024
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 6025
                self.expr(0)
                self.state = 6026
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 6027
                self.expr(0)
                self.state = 6028
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 6029
                self.expr(0)
                self.state = 6030
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 6031
                self.expr(0)
                self.state = 6032
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6034
                localctx.name = self.match(SQLParser.INTERVAL_SYMBOL)
                self.state = 6035
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 6036
                self.expr(0)
                self.state = 6039 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 6037
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 6038
                    self.expr(0)
                    self.state = 6041 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SQLParser.COMMA_SYMBOL):
                        break

                self.state = 6043
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6045
                localctx.name = self.match(SQLParser.LEFT_SYMBOL)
                self.state = 6046
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 6047
                self.expr(0)
                self.state = 6048
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 6049
                self.expr(0)
                self.state = 6050
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6052
                localctx.name = self.match(SQLParser.MINUTE_SYMBOL)
                self.state = 6053
                self.exprWithParentheses()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 6054
                localctx.name = self.match(SQLParser.MONTH_SYMBOL)
                self.state = 6055
                self.exprWithParentheses()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 6056
                localctx.name = self.match(SQLParser.RIGHT_SYMBOL)
                self.state = 6057
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 6058
                self.expr(0)
                self.state = 6059
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 6060
                self.expr(0)
                self.state = 6061
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 6063
                localctx.name = self.match(SQLParser.SECOND_SYMBOL)
                self.state = 6064
                self.exprWithParentheses()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 6065
                localctx.name = self.match(SQLParser.TIME_SYMBOL)
                self.state = 6066
                self.exprWithParentheses()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 6067
                localctx.name = self.match(SQLParser.TIMESTAMP_SYMBOL)
                self.state = 6068
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 6069
                self.expr(0)
                self.state = 6072
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.COMMA_SYMBOL:
                    self.state = 6070
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 6071
                    self.expr(0)


                self.state = 6074
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 6076
                self.trimFunction()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 6077
                localctx.name = self.match(SQLParser.USER_SYMBOL)
                self.state = 6078
                self.parentheses()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 6079
                localctx.name = self.match(SQLParser.VALUES_SYMBOL)
                self.state = 6080
                self.exprWithParentheses()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 6081
                localctx.name = self.match(SQLParser.YEAR_SYMBOL)
                self.state = 6082
                self.exprWithParentheses()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 6083
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLParser.ADDDATE_SYMBOL or _la==SQLParser.SUBDATE_SYMBOL):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6084
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 6085
                self.expr(0)
                self.state = 6086
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 6092
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,767,self._ctx)
                if la_ == 1:
                    self.state = 6087
                    self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 6088
                    self.match(SQLParser.INTERVAL_SYMBOL)
                    self.state = 6089
                    self.expr(0)
                    self.state = 6090
                    self.interval()
                    pass


                self.state = 6094
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 6096
                localctx.name = self.match(SQLParser.CURDATE_SYMBOL)
                self.state = 6098
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,768,self._ctx)
                if la_ == 1:
                    self.state = 6097
                    self.parentheses()


                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 6100
                localctx.name = self.match(SQLParser.CURTIME_SYMBOL)
                self.state = 6102
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,769,self._ctx)
                if la_ == 1:
                    self.state = 6101
                    self.timeFunctionParameters()


                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 6104
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLParser.DATE_ADD_SYMBOL or _la==SQLParser.DATE_SUB_SYMBOL):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6105
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 6106
                self.expr(0)
                self.state = 6107
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 6108
                self.match(SQLParser.INTERVAL_SYMBOL)
                self.state = 6109
                self.expr(0)
                self.state = 6110
                self.interval()
                self.state = 6111
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 6113
                localctx.name = self.match(SQLParser.EXTRACT_SYMBOL)
                self.state = 6114
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 6115
                self.interval()
                self.state = 6116
                self.match(SQLParser.FROM_SYMBOL)
                self.state = 6117
                self.expr(0)
                self.state = 6118
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 6120
                localctx.name = self.match(SQLParser.GET_FORMAT_SYMBOL)
                self.state = 6121
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 6122
                self.dateTimeTtype()
                self.state = 6123
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 6124
                self.expr(0)
                self.state = 6125
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 6127
                localctx.name = self.match(SQLParser.NOW_SYMBOL)
                self.state = 6129
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,770,self._ctx)
                if la_ == 1:
                    self.state = 6128
                    self.timeFunctionParameters()


                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 6131
                localctx.name = self.match(SQLParser.POSITION_SYMBOL)
                self.state = 6132
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 6133
                self.bitExpr(0)
                self.state = 6134
                self.match(SQLParser.IN_SYMBOL)
                self.state = 6135
                self.expr(0)
                self.state = 6136
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 6138
                self.substringFunction()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 6139
                localctx.name = self.match(SQLParser.SYSDATE_SYMBOL)
                self.state = 6141
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,771,self._ctx)
                if la_ == 1:
                    self.state = 6140
                    self.timeFunctionParameters()


                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 6143
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLParser.TIMESTAMP_ADD_SYMBOL or _la==SQLParser.TIMESTAMP_DIFF_SYMBOL):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6144
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 6145
                self.intervalTimeStamp()
                self.state = 6146
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 6147
                self.expr(0)
                self.state = 6148
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 6149
                self.expr(0)
                self.state = 6150
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 6152
                localctx.name = self.match(SQLParser.UTC_DATE_SYMBOL)
                self.state = 6154
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,772,self._ctx)
                if la_ == 1:
                    self.state = 6153
                    self.parentheses()


                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 6156
                localctx.name = self.match(SQLParser.UTC_TIME_SYMBOL)
                self.state = 6158
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,773,self._ctx)
                if la_ == 1:
                    self.state = 6157
                    self.timeFunctionParameters()


                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 6160
                localctx.name = self.match(SQLParser.UTC_TIMESTAMP_SYMBOL)
                self.state = 6162
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,774,self._ctx)
                if la_ == 1:
                    self.state = 6161
                    self.timeFunctionParameters()


                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 6164
                localctx.name = self.match(SQLParser.ASCII_SYMBOL)
                self.state = 6165
                self.exprWithParentheses()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 6166
                localctx.name = self.match(SQLParser.CHARSET_SYMBOL)
                self.state = 6167
                self.exprWithParentheses()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 6168
                localctx.name = self.match(SQLParser.COALESCE_SYMBOL)
                self.state = 6169
                self.exprListWithParentheses()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 6170
                localctx.name = self.match(SQLParser.COLLATION_SYMBOL)
                self.state = 6171
                self.exprWithParentheses()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 6172
                localctx.name = self.match(SQLParser.DATABASE_SYMBOL)
                self.state = 6173
                self.parentheses()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 6174
                localctx.name = self.match(SQLParser.IF_SYMBOL)
                self.state = 6175
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 6176
                self.expr(0)
                self.state = 6177
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 6178
                self.expr(0)
                self.state = 6179
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 6180
                self.expr(0)
                self.state = 6181
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 6183
                localctx.name = self.match(SQLParser.FORMAT_SYMBOL)
                self.state = 6184
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 6185
                self.expr(0)
                self.state = 6186
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 6187
                self.expr(0)
                self.state = 6190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.COMMA_SYMBOL:
                    self.state = 6188
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 6189
                    self.expr(0)


                self.state = 6192
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 6194
                localctx.name = self.match(SQLParser.MICROSECOND_SYMBOL)
                self.state = 6195
                self.exprWithParentheses()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 6196
                localctx.name = self.match(SQLParser.MOD_SYMBOL)
                self.state = 6197
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 6198
                self.expr(0)
                self.state = 6199
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 6200
                self.expr(0)
                self.state = 6201
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 6203
                if not self.serverVersion < 50607:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 50607")
                self.state = 6204
                localctx.name = self.match(SQLParser.OLD_PASSWORD_SYMBOL)
                self.state = 6205
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 6206
                self.textLiteral()
                self.state = 6207
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 6209
                if not self.serverVersion < 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 80011")
                self.state = 6210
                localctx.name = self.match(SQLParser.PASSWORD_SYMBOL)
                self.state = 6211
                self.exprWithParentheses()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 6212
                localctx.name = self.match(SQLParser.QUARTER_SYMBOL)
                self.state = 6213
                self.exprWithParentheses()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 6214
                localctx.name = self.match(SQLParser.REPEAT_SYMBOL)
                self.state = 6215
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 6216
                self.expr(0)
                self.state = 6217
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 6218
                self.expr(0)
                self.state = 6219
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 6221
                localctx.name = self.match(SQLParser.REPLACE_SYMBOL)
                self.state = 6222
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 6223
                self.expr(0)
                self.state = 6224
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 6225
                self.expr(0)
                self.state = 6226
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 6227
                self.expr(0)
                self.state = 6228
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 6230
                localctx.name = self.match(SQLParser.REVERSE_SYMBOL)
                self.state = 6231
                self.exprWithParentheses()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 6232
                localctx.name = self.match(SQLParser.ROW_COUNT_SYMBOL)
                self.state = 6233
                self.parentheses()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 6234
                localctx.name = self.match(SQLParser.TRUNCATE_SYMBOL)
                self.state = 6235
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 6236
                self.expr(0)
                self.state = 6237
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 6238
                self.expr(0)
                self.state = 6239
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 6241
                localctx.name = self.match(SQLParser.WEEK_SYMBOL)
                self.state = 6242
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 6243
                self.expr(0)
                self.state = 6246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.COMMA_SYMBOL:
                    self.state = 6244
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 6245
                    self.expr(0)


                self.state = 6248
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 6250
                localctx.name = self.match(SQLParser.WEIGHT_STRING_SYMBOL)
                self.state = 6251
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 6252
                self.expr(0)
                self.state = 6272
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,779,self._ctx)
                if la_ == 1:
                    self.state = 6256
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,777,self._ctx)
                    if la_ == 1:
                        self.state = 6253
                        self.match(SQLParser.AS_SYMBOL)
                        self.state = 6254
                        self.match(SQLParser.CHAR_SYMBOL)
                        self.state = 6255
                        self.wsNumCodepoints()


                    self.state = 6260
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,778,self._ctx)
                    if la_ == 1:
                        self.state = 6258
                        if not self.serverVersion < 80000:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.serverVersion < 80000")
                        self.state = 6259
                        self.weightStringLevels()


                    pass

                elif la_ == 2:
                    self.state = 6262
                    self.match(SQLParser.AS_SYMBOL)
                    self.state = 6263
                    self.match(SQLParser.BINARY_SYMBOL)
                    self.state = 6264
                    self.wsNumCodepoints()
                    pass

                elif la_ == 3:
                    self.state = 6265
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 6266
                    self.ulong_number()
                    self.state = 6267
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 6268
                    self.ulong_number()
                    self.state = 6269
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 6270
                    self.ulong_number()
                    pass


                self.state = 6274
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 6276
                self.geometryFunction()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GeometryFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLParser.ExprContext,i)


        def COMMA_SYMBOL(self):
            return self.getToken(SQLParser.COMMA_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def CONTAINS_SYMBOL(self):
            return self.getToken(SQLParser.CONTAINS_SYMBOL, 0)

        def GEOMETRYCOLLECTION_SYMBOL(self):
            return self.getToken(SQLParser.GEOMETRYCOLLECTION_SYMBOL, 0)

        def exprList(self):
            return self.getTypedRuleContext(SQLParser.ExprListContext,0)


        def exprListWithParentheses(self):
            return self.getTypedRuleContext(SQLParser.ExprListWithParenthesesContext,0)


        def LINESTRING_SYMBOL(self):
            return self.getToken(SQLParser.LINESTRING_SYMBOL, 0)

        def MULTILINESTRING_SYMBOL(self):
            return self.getToken(SQLParser.MULTILINESTRING_SYMBOL, 0)

        def MULTIPOINT_SYMBOL(self):
            return self.getToken(SQLParser.MULTIPOINT_SYMBOL, 0)

        def MULTIPOLYGON_SYMBOL(self):
            return self.getToken(SQLParser.MULTIPOLYGON_SYMBOL, 0)

        def POINT_SYMBOL(self):
            return self.getToken(SQLParser.POINT_SYMBOL, 0)

        def POLYGON_SYMBOL(self):
            return self.getToken(SQLParser.POLYGON_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_geometryFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeometryFunction" ):
                listener.enterGeometryFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeometryFunction" ):
                listener.exitGeometryFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeometryFunction" ):
                return visitor.visitGeometryFunction(self)
            else:
                return visitor.visitChildren(self)




    def geometryFunction(self):

        localctx = SQLParser.GeometryFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_geometryFunction)
        try:
            self.state = 6310
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,782,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6279
                if not self.serverVersion < 50706:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 50706")
                self.state = 6280
                localctx.name = self.match(SQLParser.CONTAINS_SYMBOL)
                self.state = 6281
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 6282
                self.expr(0)
                self.state = 6283
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 6284
                self.expr(0)
                self.state = 6285
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6287
                localctx.name = self.match(SQLParser.GEOMETRYCOLLECTION_SYMBOL)
                self.state = 6288
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 6290
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,781,self._ctx)
                if la_ == 1:
                    self.state = 6289
                    self.exprList()


                self.state = 6292
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6293
                localctx.name = self.match(SQLParser.LINESTRING_SYMBOL)
                self.state = 6294
                self.exprListWithParentheses()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6295
                localctx.name = self.match(SQLParser.MULTILINESTRING_SYMBOL)
                self.state = 6296
                self.exprListWithParentheses()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6297
                localctx.name = self.match(SQLParser.MULTIPOINT_SYMBOL)
                self.state = 6298
                self.exprListWithParentheses()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6299
                localctx.name = self.match(SQLParser.MULTIPOLYGON_SYMBOL)
                self.state = 6300
                self.exprListWithParentheses()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6301
                localctx.name = self.match(SQLParser.POINT_SYMBOL)
                self.state = 6302
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 6303
                self.expr(0)
                self.state = 6304
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 6305
                self.expr(0)
                self.state = 6306
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6308
                localctx.name = self.match(SQLParser.POLYGON_SYMBOL)
                self.state = 6309
                self.exprListWithParentheses()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeFunctionParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def fractionalPrecision(self):
            return self.getTypedRuleContext(SQLParser.FractionalPrecisionContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_timeFunctionParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeFunctionParameters" ):
                listener.enterTimeFunctionParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeFunctionParameters" ):
                listener.exitTimeFunctionParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimeFunctionParameters" ):
                return visitor.visitTimeFunctionParameters(self)
            else:
                return visitor.visitChildren(self)




    def timeFunctionParameters(self):

        localctx = SQLParser.TimeFunctionParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_timeFunctionParameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6312
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 6314
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,783,self._ctx)
            if la_ == 1:
                self.state = 6313
                self.fractionalPrecision()


            self.state = 6316
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FractionalPrecisionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(SQLParser.INT_NUMBER, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_fractionalPrecision

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFractionalPrecision" ):
                listener.enterFractionalPrecision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFractionalPrecision" ):
                listener.exitFractionalPrecision(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFractionalPrecision" ):
                return visitor.visitFractionalPrecision(self)
            else:
                return visitor.visitChildren(self)




    def fractionalPrecision(self):

        localctx = SQLParser.FractionalPrecisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_fractionalPrecision)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6318
            if not self.serverVersion >= 50604:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.serverVersion >= 50604")
            self.state = 6319
            self.match(SQLParser.INT_NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WeightStringLevelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEVEL_SYMBOL(self):
            return self.getToken(SQLParser.LEVEL_SYMBOL, 0)

        def real_ulong_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.Real_ulong_numberContext)
            else:
                return self.getTypedRuleContext(SQLParser.Real_ulong_numberContext,i)


        def MINUS_OPERATOR(self):
            return self.getToken(SQLParser.MINUS_OPERATOR, 0)

        def weightStringLevelListItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.WeightStringLevelListItemContext)
            else:
                return self.getTypedRuleContext(SQLParser.WeightStringLevelListItemContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_weightStringLevels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeightStringLevels" ):
                listener.enterWeightStringLevels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeightStringLevels" ):
                listener.exitWeightStringLevels(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWeightStringLevels" ):
                return visitor.visitWeightStringLevels(self)
            else:
                return visitor.visitChildren(self)




    def weightStringLevels(self):

        localctx = SQLParser.WeightStringLevelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_weightStringLevels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6321
            self.match(SQLParser.LEVEL_SYMBOL)
            self.state = 6334
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,785,self._ctx)
            if la_ == 1:
                self.state = 6322
                self.real_ulong_number()
                self.state = 6323
                self.match(SQLParser.MINUS_OPERATOR)
                self.state = 6324
                self.real_ulong_number()
                pass

            elif la_ == 2:
                self.state = 6326
                self.weightStringLevelListItem()
                self.state = 6331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLParser.COMMA_SYMBOL:
                    self.state = 6327
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 6328
                    self.weightStringLevelListItem()
                    self.state = 6333
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WeightStringLevelListItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def real_ulong_number(self):
            return self.getTypedRuleContext(SQLParser.Real_ulong_numberContext,0)


        def REVERSE_SYMBOL(self):
            return self.getToken(SQLParser.REVERSE_SYMBOL, 0)

        def ASC_SYMBOL(self):
            return self.getToken(SQLParser.ASC_SYMBOL, 0)

        def DESC_SYMBOL(self):
            return self.getToken(SQLParser.DESC_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_weightStringLevelListItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeightStringLevelListItem" ):
                listener.enterWeightStringLevelListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeightStringLevelListItem" ):
                listener.exitWeightStringLevelListItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWeightStringLevelListItem" ):
                return visitor.visitWeightStringLevelListItem(self)
            else:
                return visitor.visitChildren(self)




    def weightStringLevelListItem(self):

        localctx = SQLParser.WeightStringLevelListItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_weightStringLevelListItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6336
            self.real_ulong_number()
            self.state = 6342
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.ASC_SYMBOL, SQLParser.DESC_SYMBOL]:
                self.state = 6337
                _la = self._input.LA(1)
                if not(_la==SQLParser.ASC_SYMBOL or _la==SQLParser.DESC_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.REVERSE_SYMBOL:
                    self.state = 6338
                    self.match(SQLParser.REVERSE_SYMBOL)


                pass
            elif token in [SQLParser.REVERSE_SYMBOL]:
                self.state = 6341
                self.match(SQLParser.REVERSE_SYMBOL)
                pass
            elif token in [SQLParser.COMMA_SYMBOL, SQLParser.CLOSE_PAR_SYMBOL]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateTimeTtypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_SYMBOL(self):
            return self.getToken(SQLParser.DATE_SYMBOL, 0)

        def TIME_SYMBOL(self):
            return self.getToken(SQLParser.TIME_SYMBOL, 0)

        def DATETIME_SYMBOL(self):
            return self.getToken(SQLParser.DATETIME_SYMBOL, 0)

        def TIMESTAMP_SYMBOL(self):
            return self.getToken(SQLParser.TIMESTAMP_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_dateTimeTtype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimeTtype" ):
                listener.enterDateTimeTtype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimeTtype" ):
                listener.exitDateTimeTtype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDateTimeTtype" ):
                return visitor.visitDateTimeTtype(self)
            else:
                return visitor.visitChildren(self)




    def dateTimeTtype(self):

        localctx = SQLParser.DateTimeTtypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_dateTimeTtype)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6344
            _la = self._input.LA(1)
            if not(_la==SQLParser.DATETIME_SYMBOL or _la==SQLParser.DATE_SYMBOL or _la==SQLParser.TIMESTAMP_SYMBOL or _la==SQLParser.TIME_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrimFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRIM_SYMBOL(self):
            return self.getToken(SQLParser.TRIM_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLParser.ExprContext,i)


        def LEADING_SYMBOL(self):
            return self.getToken(SQLParser.LEADING_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(SQLParser.FROM_SYMBOL, 0)

        def TRAILING_SYMBOL(self):
            return self.getToken(SQLParser.TRAILING_SYMBOL, 0)

        def BOTH_SYMBOL(self):
            return self.getToken(SQLParser.BOTH_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_trimFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrimFunction" ):
                listener.enterTrimFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrimFunction" ):
                listener.exitTrimFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrimFunction" ):
                return visitor.visitTrimFunction(self)
            else:
                return visitor.visitChildren(self)




    def trimFunction(self):

        localctx = SQLParser.TrimFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_trimFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6346
            self.match(SQLParser.TRIM_SYMBOL)
            self.state = 6347
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 6371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,792,self._ctx)
            if la_ == 1:
                self.state = 6348
                self.expr(0)
                self.state = 6351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.FROM_SYMBOL:
                    self.state = 6349
                    self.match(SQLParser.FROM_SYMBOL)
                    self.state = 6350
                    self.expr(0)


                pass

            elif la_ == 2:
                self.state = 6353
                self.match(SQLParser.LEADING_SYMBOL)
                self.state = 6355
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,789,self._ctx)
                if la_ == 1:
                    self.state = 6354
                    self.expr(0)


                self.state = 6357
                self.match(SQLParser.FROM_SYMBOL)
                self.state = 6358
                self.expr(0)
                pass

            elif la_ == 3:
                self.state = 6359
                self.match(SQLParser.TRAILING_SYMBOL)
                self.state = 6361
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,790,self._ctx)
                if la_ == 1:
                    self.state = 6360
                    self.expr(0)


                self.state = 6363
                self.match(SQLParser.FROM_SYMBOL)
                self.state = 6364
                self.expr(0)
                pass

            elif la_ == 4:
                self.state = 6365
                self.match(SQLParser.BOTH_SYMBOL)
                self.state = 6367
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,791,self._ctx)
                if la_ == 1:
                    self.state = 6366
                    self.expr(0)


                self.state = 6369
                self.match(SQLParser.FROM_SYMBOL)
                self.state = 6370
                self.expr(0)
                pass


            self.state = 6373
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubstringFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBSTRING_SYMBOL(self):
            return self.getToken(SQLParser.SUBSTRING_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLParser.ExprContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def FROM_SYMBOL(self):
            return self.getToken(SQLParser.FROM_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(SQLParser.FOR_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_substringFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstringFunction" ):
                listener.enterSubstringFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstringFunction" ):
                listener.exitSubstringFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubstringFunction" ):
                return visitor.visitSubstringFunction(self)
            else:
                return visitor.visitChildren(self)




    def substringFunction(self):

        localctx = SQLParser.SubstringFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_substringFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6375
            self.match(SQLParser.SUBSTRING_SYMBOL)
            self.state = 6376
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 6377
            self.expr(0)
            self.state = 6390
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.COMMA_SYMBOL]:
                self.state = 6378
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 6379
                self.expr(0)
                self.state = 6382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.COMMA_SYMBOL:
                    self.state = 6380
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 6381
                    self.expr(0)


                pass
            elif token in [SQLParser.FROM_SYMBOL]:
                self.state = 6384
                self.match(SQLParser.FROM_SYMBOL)
                self.state = 6385
                self.expr(0)
                self.state = 6388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.FOR_SYMBOL:
                    self.state = 6386
                    self.match(SQLParser.FOR_SYMBOL)
                    self.state = 6387
                    self.expr(0)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 6392
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pureIdentifier(self):
            return self.getTypedRuleContext(SQLParser.PureIdentifierContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def udfExprList(self):
            return self.getTypedRuleContext(SQLParser.UdfExprListContext,0)


        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(SQLParser.QualifiedIdentifierContext,0)


        def exprList(self):
            return self.getTypedRuleContext(SQLParser.ExprListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def functionCall(self):

        localctx = SQLParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_functionCall)
        try:
            self.state = 6408
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,798,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6394
                self.pureIdentifier()
                self.state = 6395
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 6397
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,796,self._ctx)
                if la_ == 1:
                    self.state = 6396
                    self.udfExprList()


                self.state = 6399
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6401
                self.qualifiedIdentifier()
                self.state = 6402
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 6404
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,797,self._ctx)
                if la_ == 1:
                    self.state = 6403
                    self.exprList()


                self.state = 6406
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdfExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def udfExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.UdfExprContext)
            else:
                return self.getTypedRuleContext(SQLParser.UdfExprContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_udfExprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfExprList" ):
                listener.enterUdfExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfExprList" ):
                listener.exitUdfExprList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdfExprList" ):
                return visitor.visitUdfExprList(self)
            else:
                return visitor.visitChildren(self)




    def udfExprList(self):

        localctx = SQLParser.UdfExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_udfExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6410
            self.udfExpr()
            self.state = 6415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 6411
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 6412
                self.udfExpr()
                self.state = 6417
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdfExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def selectAlias(self):
            return self.getTypedRuleContext(SQLParser.SelectAliasContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_udfExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfExpr" ):
                listener.enterUdfExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfExpr" ):
                listener.exitUdfExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdfExpr" ):
                return visitor.visitUdfExpr(self)
            else:
                return visitor.visitChildren(self)




    def udfExpr(self):

        localctx = SQLParser.UdfExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_udfExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6418
            self.expr(0)
            self.state = 6420
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,800,self._ctx)
            if la_ == 1:
                self.state = 6419
                self.selectAlias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userVariable(self):
            return self.getTypedRuleContext(SQLParser.UserVariableContext,0)


        def systemVariable(self):
            return self.getTypedRuleContext(SQLParser.SystemVariableContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable" ):
                return visitor.visitVariable(self)
            else:
                return visitor.visitChildren(self)




    def variable(self):

        localctx = SQLParser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 742, self.RULE_variable)
        try:
            self.state = 6424
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.AT_SIGN_SYMBOL, SQLParser.AT_TEXT_SUFFIX]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6422
                self.userVariable()
                pass
            elif token in [SQLParser.AT_AT_SIGN_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6423
                self.systemVariable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_SIGN_SYMBOL(self):
            return self.getToken(SQLParser.AT_SIGN_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(SQLParser.TextOrIdentifierContext,0)


        def AT_TEXT_SUFFIX(self):
            return self.getToken(SQLParser.AT_TEXT_SUFFIX, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_userVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserVariable" ):
                listener.enterUserVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserVariable" ):
                listener.exitUserVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserVariable" ):
                return visitor.visitUserVariable(self)
            else:
                return visitor.visitChildren(self)




    def userVariable(self):

        localctx = SQLParser.UserVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 744, self.RULE_userVariable)
        try:
            self.state = 6429
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.AT_SIGN_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6426
                self.match(SQLParser.AT_SIGN_SYMBOL)
                self.state = 6427
                self.textOrIdentifier()
                pass
            elif token in [SQLParser.AT_TEXT_SUFFIX]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6428
                self.match(SQLParser.AT_TEXT_SUFFIX)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SystemVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_AT_SIGN_SYMBOL(self):
            return self.getToken(SQLParser.AT_AT_SIGN_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(SQLParser.TextOrIdentifierContext,0)


        def varIdentType(self):
            return self.getTypedRuleContext(SQLParser.VarIdentTypeContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(SQLParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_systemVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSystemVariable" ):
                listener.enterSystemVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSystemVariable" ):
                listener.exitSystemVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSystemVariable" ):
                return visitor.visitSystemVariable(self)
            else:
                return visitor.visitChildren(self)




    def systemVariable(self):

        localctx = SQLParser.SystemVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 746, self.RULE_systemVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6431
            self.match(SQLParser.AT_AT_SIGN_SYMBOL)
            self.state = 6433
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,803,self._ctx)
            if la_ == 1:
                self.state = 6432
                self.varIdentType()


            self.state = 6435
            self.textOrIdentifier()
            self.state = 6437
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,804,self._ctx)
            if la_ == 1:
                self.state = 6436
                self.dotIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InternalVariableNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def lValueIdentifier(self):
            return self.getTypedRuleContext(SQLParser.LValueIdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(SQLParser.DotIdentifierContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(SQLParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_internalVariableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInternalVariableName" ):
                listener.enterInternalVariableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInternalVariableName" ):
                listener.exitInternalVariableName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInternalVariableName" ):
                return visitor.visitInternalVariableName(self)
            else:
                return visitor.visitChildren(self)




    def internalVariableName(self):

        localctx = SQLParser.InternalVariableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 748, self.RULE_internalVariableName)
        self._la = 0 # Token type
        try:
            self.state = 6453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,808,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6449
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,807,self._ctx)
                if la_ == 1:
                    self.state = 6439
                    if not self.serverVersion < 80017:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion < 80017")
                    self.state = 6440
                    self.identifier()
                    self.state = 6442
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.DOT_SYMBOL:
                        self.state = 6441
                        self.dotIdentifier()


                    pass

                elif la_ == 2:
                    self.state = 6444
                    if not self.serverVersion >= 80017:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80017")
                    self.state = 6445
                    self.lValueIdentifier()
                    self.state = 6447
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.DOT_SYMBOL:
                        self.state = 6446
                        self.dotIdentifier()


                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6451
                self.match(SQLParser.DEFAULT_SYMBOL)
                self.state = 6452
                self.dotIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN_SYMBOL(self):
            return self.getToken(SQLParser.WHEN_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_whenExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenExpression" ):
                listener.enterWhenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenExpression" ):
                listener.exitWhenExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenExpression" ):
                return visitor.visitWhenExpression(self)
            else:
                return visitor.visitChildren(self)




    def whenExpression(self):

        localctx = SQLParser.WhenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 750, self.RULE_whenExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6455
            self.match(SQLParser.WHEN_SYMBOL)
            self.state = 6456
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThenExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THEN_SYMBOL(self):
            return self.getToken(SQLParser.THEN_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_thenExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThenExpression" ):
                listener.enterThenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThenExpression" ):
                listener.exitThenExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThenExpression" ):
                return visitor.visitThenExpression(self)
            else:
                return visitor.visitChildren(self)




    def thenExpression(self):

        localctx = SQLParser.ThenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_thenExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6458
            self.match(SQLParser.THEN_SYMBOL)
            self.state = 6459
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE_SYMBOL(self):
            return self.getToken(SQLParser.ELSE_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_elseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseExpression" ):
                listener.enterElseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseExpression" ):
                listener.exitElseExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseExpression" ):
                return visitor.visitElseExpression(self)
            else:
                return visitor.visitChildren(self)




    def elseExpression(self):

        localctx = SQLParser.ElseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 754, self.RULE_elseExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6461
            self.match(SQLParser.ELSE_SYMBOL)
            self.state = 6462
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY_SYMBOL(self):
            return self.getToken(SQLParser.BINARY_SYMBOL, 0)

        def fieldLength(self):
            return self.getTypedRuleContext(SQLParser.FieldLengthContext,0)


        def CHAR_SYMBOL(self):
            return self.getToken(SQLParser.CHAR_SYMBOL, 0)

        def charsetWithOptBinary(self):
            return self.getTypedRuleContext(SQLParser.CharsetWithOptBinaryContext,0)


        def nchar(self):
            return self.getTypedRuleContext(SQLParser.NcharContext,0)


        def SIGNED_SYMBOL(self):
            return self.getToken(SQLParser.SIGNED_SYMBOL, 0)

        def INT_SYMBOL(self):
            return self.getToken(SQLParser.INT_SYMBOL, 0)

        def UNSIGNED_SYMBOL(self):
            return self.getToken(SQLParser.UNSIGNED_SYMBOL, 0)

        def DATE_SYMBOL(self):
            return self.getToken(SQLParser.DATE_SYMBOL, 0)

        def TIME_SYMBOL(self):
            return self.getToken(SQLParser.TIME_SYMBOL, 0)

        def typeDatetimePrecision(self):
            return self.getTypedRuleContext(SQLParser.TypeDatetimePrecisionContext,0)


        def DATETIME_SYMBOL(self):
            return self.getToken(SQLParser.DATETIME_SYMBOL, 0)

        def DECIMAL_SYMBOL(self):
            return self.getToken(SQLParser.DECIMAL_SYMBOL, 0)

        def floatOptions(self):
            return self.getTypedRuleContext(SQLParser.FloatOptionsContext,0)


        def JSON_SYMBOL(self):
            return self.getToken(SQLParser.JSON_SYMBOL, 0)

        def realType(self):
            return self.getTypedRuleContext(SQLParser.RealTypeContext,0)


        def FLOAT_SYMBOL(self):
            return self.getToken(SQLParser.FLOAT_SYMBOL, 0)

        def standardFloatOptions(self):
            return self.getTypedRuleContext(SQLParser.StandardFloatOptionsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_castType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastType" ):
                listener.enterCastType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastType" ):
                listener.exitCastType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastType" ):
                return visitor.visitCastType(self)
            else:
                return visitor.visitChildren(self)




    def castType(self):

        localctx = SQLParser.CastTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 756, self.RULE_castType)
        try:
            self.state = 6509
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,819,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6464
                self.match(SQLParser.BINARY_SYMBOL)
                self.state = 6466
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,809,self._ctx)
                if la_ == 1:
                    self.state = 6465
                    self.fieldLength()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6468
                self.match(SQLParser.CHAR_SYMBOL)
                self.state = 6470
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,810,self._ctx)
                if la_ == 1:
                    self.state = 6469
                    self.fieldLength()


                self.state = 6473
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,811,self._ctx)
                if la_ == 1:
                    self.state = 6472
                    self.charsetWithOptBinary()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6475
                self.nchar()
                self.state = 6477
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,812,self._ctx)
                if la_ == 1:
                    self.state = 6476
                    self.fieldLength()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6479
                self.match(SQLParser.SIGNED_SYMBOL)
                self.state = 6481
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,813,self._ctx)
                if la_ == 1:
                    self.state = 6480
                    self.match(SQLParser.INT_SYMBOL)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6483
                self.match(SQLParser.UNSIGNED_SYMBOL)
                self.state = 6485
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,814,self._ctx)
                if la_ == 1:
                    self.state = 6484
                    self.match(SQLParser.INT_SYMBOL)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6487
                self.match(SQLParser.DATE_SYMBOL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6488
                self.match(SQLParser.TIME_SYMBOL)
                self.state = 6490
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,815,self._ctx)
                if la_ == 1:
                    self.state = 6489
                    self.typeDatetimePrecision()


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6492
                self.match(SQLParser.DATETIME_SYMBOL)
                self.state = 6494
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,816,self._ctx)
                if la_ == 1:
                    self.state = 6493
                    self.typeDatetimePrecision()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6496
                self.match(SQLParser.DECIMAL_SYMBOL)
                self.state = 6498
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,817,self._ctx)
                if la_ == 1:
                    self.state = 6497
                    self.floatOptions()


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 6500
                if not self.serverVersion >= 50708:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50708")
                self.state = 6501
                self.match(SQLParser.JSON_SYMBOL)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 6502
                if not self.serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80017")
                self.state = 6503
                self.realType()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 6504
                if not self.serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80017")
                self.state = 6505
                self.match(SQLParser.FLOAT_SYMBOL)
                self.state = 6507
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,818,self._ctx)
                if la_ == 1:
                    self.state = 6506
                    self.standardFloatOptions()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLParser.ExprContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_exprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprList" ):
                listener.enterExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprList" ):
                listener.exitExprList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprList" ):
                return visitor.visitExprList(self)
            else:
                return visitor.visitChildren(self)




    def exprList(self):

        localctx = SQLParser.ExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 758, self.RULE_exprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6511
            self.expr(0)
            self.state = 6516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 6512
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 6513
                self.expr(0)
                self.state = 6518
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharsetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_SYMBOL(self):
            return self.getToken(SQLParser.CHAR_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(SQLParser.SET_SYMBOL, 0)

        def CHARSET_SYMBOL(self):
            return self.getToken(SQLParser.CHARSET_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_charset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharset" ):
                listener.enterCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharset" ):
                listener.exitCharset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharset" ):
                return visitor.visitCharset(self)
            else:
                return visitor.visitChildren(self)




    def charset(self):

        localctx = SQLParser.CharsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 760, self.RULE_charset)
        try:
            self.state = 6522
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.CHAR_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6519
                self.match(SQLParser.CHAR_SYMBOL)
                self.state = 6520
                self.match(SQLParser.SET_SYMBOL)
                pass
            elif token in [SQLParser.CHARSET_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6521
                self.match(SQLParser.CHARSET_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotRuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT_SYMBOL(self):
            return self.getToken(SQLParser.NOT_SYMBOL, 0)

        def NOT2_SYMBOL(self):
            return self.getToken(SQLParser.NOT2_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_notRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotRule" ):
                listener.enterNotRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotRule" ):
                listener.exitNotRule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotRule" ):
                return visitor.visitNotRule(self)
            else:
                return visitor.visitChildren(self)




    def notRule(self):

        localctx = SQLParser.NotRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 762, self.RULE_notRule)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6524
            _la = self._input.LA(1)
            if not(_la==SQLParser.NOT_SYMBOL or _la==SQLParser.NOT2_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not2RuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOGICAL_NOT_OPERATOR(self):
            return self.getToken(SQLParser.LOGICAL_NOT_OPERATOR, 0)

        def NOT2_SYMBOL(self):
            return self.getToken(SQLParser.NOT2_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_not2Rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot2Rule" ):
                listener.enterNot2Rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot2Rule" ):
                listener.exitNot2Rule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot2Rule" ):
                return visitor.visitNot2Rule(self)
            else:
                return visitor.visitChildren(self)




    def not2Rule(self):

        localctx = SQLParser.Not2RuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 764, self.RULE_not2Rule)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6526
            _la = self._input.LA(1)
            if not(_la==SQLParser.NOT2_SYMBOL or _la==SQLParser.LOGICAL_NOT_OPERATOR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intervalTimeStamp(self):
            return self.getTypedRuleContext(SQLParser.IntervalTimeStampContext,0)


        def SECOND_MICROSECOND_SYMBOL(self):
            return self.getToken(SQLParser.SECOND_MICROSECOND_SYMBOL, 0)

        def MINUTE_MICROSECOND_SYMBOL(self):
            return self.getToken(SQLParser.MINUTE_MICROSECOND_SYMBOL, 0)

        def MINUTE_SECOND_SYMBOL(self):
            return self.getToken(SQLParser.MINUTE_SECOND_SYMBOL, 0)

        def HOUR_MICROSECOND_SYMBOL(self):
            return self.getToken(SQLParser.HOUR_MICROSECOND_SYMBOL, 0)

        def HOUR_SECOND_SYMBOL(self):
            return self.getToken(SQLParser.HOUR_SECOND_SYMBOL, 0)

        def HOUR_MINUTE_SYMBOL(self):
            return self.getToken(SQLParser.HOUR_MINUTE_SYMBOL, 0)

        def DAY_MICROSECOND_SYMBOL(self):
            return self.getToken(SQLParser.DAY_MICROSECOND_SYMBOL, 0)

        def DAY_SECOND_SYMBOL(self):
            return self.getToken(SQLParser.DAY_SECOND_SYMBOL, 0)

        def DAY_MINUTE_SYMBOL(self):
            return self.getToken(SQLParser.DAY_MINUTE_SYMBOL, 0)

        def DAY_HOUR_SYMBOL(self):
            return self.getToken(SQLParser.DAY_HOUR_SYMBOL, 0)

        def YEAR_MONTH_SYMBOL(self):
            return self.getToken(SQLParser.YEAR_MONTH_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval" ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = SQLParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 766, self.RULE_interval)
        self._la = 0 # Token type
        try:
            self.state = 6530
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.DAY_SYMBOL, SQLParser.HOUR_SYMBOL, SQLParser.MICROSECOND_SYMBOL, SQLParser.MINUTE_SYMBOL, SQLParser.MONTH_SYMBOL, SQLParser.QUARTER_SYMBOL, SQLParser.SECOND_SYMBOL, SQLParser.WEEK_SYMBOL, SQLParser.YEAR_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6528
                self.intervalTimeStamp()
                pass
            elif token in [SQLParser.DAY_HOUR_SYMBOL, SQLParser.DAY_MICROSECOND_SYMBOL, SQLParser.DAY_MINUTE_SYMBOL, SQLParser.DAY_SECOND_SYMBOL, SQLParser.HOUR_MICROSECOND_SYMBOL, SQLParser.HOUR_MINUTE_SYMBOL, SQLParser.HOUR_SECOND_SYMBOL, SQLParser.MINUTE_MICROSECOND_SYMBOL, SQLParser.MINUTE_SECOND_SYMBOL, SQLParser.SECOND_MICROSECOND_SYMBOL, SQLParser.YEAR_MONTH_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6529
                _la = self._input.LA(1)
                if not(((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & ((1 << (SQLParser.DAY_HOUR_SYMBOL - 118)) | (1 << (SQLParser.DAY_MICROSECOND_SYMBOL - 118)) | (1 << (SQLParser.DAY_MINUTE_SYMBOL - 118)) | (1 << (SQLParser.DAY_SECOND_SYMBOL - 118)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (SQLParser.HOUR_MICROSECOND_SYMBOL - 226)) | (1 << (SQLParser.HOUR_MINUTE_SYMBOL - 226)) | (1 << (SQLParser.HOUR_SECOND_SYMBOL - 226)))) != 0) or _la==SQLParser.MINUTE_MICROSECOND_SYMBOL or _la==SQLParser.MINUTE_SECOND_SYMBOL or _la==SQLParser.SECOND_MICROSECOND_SYMBOL or _la==SQLParser.YEAR_MONTH_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalTimeStampContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MICROSECOND_SYMBOL(self):
            return self.getToken(SQLParser.MICROSECOND_SYMBOL, 0)

        def SECOND_SYMBOL(self):
            return self.getToken(SQLParser.SECOND_SYMBOL, 0)

        def MINUTE_SYMBOL(self):
            return self.getToken(SQLParser.MINUTE_SYMBOL, 0)

        def HOUR_SYMBOL(self):
            return self.getToken(SQLParser.HOUR_SYMBOL, 0)

        def DAY_SYMBOL(self):
            return self.getToken(SQLParser.DAY_SYMBOL, 0)

        def WEEK_SYMBOL(self):
            return self.getToken(SQLParser.WEEK_SYMBOL, 0)

        def MONTH_SYMBOL(self):
            return self.getToken(SQLParser.MONTH_SYMBOL, 0)

        def QUARTER_SYMBOL(self):
            return self.getToken(SQLParser.QUARTER_SYMBOL, 0)

        def YEAR_SYMBOL(self):
            return self.getToken(SQLParser.YEAR_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_intervalTimeStamp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalTimeStamp" ):
                listener.enterIntervalTimeStamp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalTimeStamp" ):
                listener.exitIntervalTimeStamp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalTimeStamp" ):
                return visitor.visitIntervalTimeStamp(self)
            else:
                return visitor.visitChildren(self)




    def intervalTimeStamp(self):

        localctx = SQLParser.IntervalTimeStampContext(self, self._ctx, self.state)
        self.enterRule(localctx, 768, self.RULE_intervalTimeStamp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6532
            _la = self._input.LA(1)
            if not(_la==SQLParser.DAY_SYMBOL or _la==SQLParser.HOUR_SYMBOL or ((((_la - 337)) & ~0x3f) == 0 and ((1 << (_la - 337)) & ((1 << (SQLParser.MICROSECOND_SYMBOL - 337)) | (1 << (SQLParser.MINUTE_SYMBOL - 337)) | (1 << (SQLParser.MONTH_SYMBOL - 337)))) != 0) or _la==SQLParser.QUARTER_SYMBOL or _la==SQLParser.SECOND_SYMBOL or _la==SQLParser.WEEK_SYMBOL or _la==SQLParser.YEAR_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprListWithParenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def exprList(self):
            return self.getTypedRuleContext(SQLParser.ExprListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_exprListWithParentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprListWithParentheses" ):
                listener.enterExprListWithParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprListWithParentheses" ):
                listener.exitExprListWithParentheses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprListWithParentheses" ):
                return visitor.visitExprListWithParentheses(self)
            else:
                return visitor.visitChildren(self)




    def exprListWithParentheses(self):

        localctx = SQLParser.ExprListWithParenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 770, self.RULE_exprListWithParentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6534
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 6535
            self.exprList()
            self.state = 6536
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprWithParenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_exprWithParentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprWithParentheses" ):
                listener.enterExprWithParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprWithParentheses" ):
                listener.exitExprWithParentheses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprWithParentheses" ):
                return visitor.visitExprWithParentheses(self)
            else:
                return visitor.visitChildren(self)




    def exprWithParentheses(self):

        localctx = SQLParser.ExprWithParenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 772, self.RULE_exprWithParentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6538
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 6539
            self.expr(0)
            self.state = 6540
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleExprWithParenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(SQLParser.SimpleExprContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_simpleExprWithParentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprWithParentheses" ):
                listener.enterSimpleExprWithParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprWithParentheses" ):
                listener.exitSimpleExprWithParentheses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleExprWithParentheses" ):
                return visitor.visitSimpleExprWithParentheses(self)
            else:
                return visitor.visitChildren(self)




    def simpleExprWithParentheses(self):

        localctx = SQLParser.SimpleExprWithParenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 774, self.RULE_simpleExprWithParentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6542
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 6543
            self.simpleExpr(0)
            self.state = 6544
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.OrderExpressionContext)
            else:
                return self.getTypedRuleContext(SQLParser.OrderExpressionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_orderList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderList" ):
                listener.enterOrderList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderList" ):
                listener.exitOrderList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderList" ):
                return visitor.visitOrderList(self)
            else:
                return visitor.visitChildren(self)




    def orderList(self):

        localctx = SQLParser.OrderListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 776, self.RULE_orderList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6546
            self.orderExpression()
            self.state = 6551
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,823,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6547
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 6548
                    self.orderExpression() 
                self.state = 6553
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,823,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def direction(self):
            return self.getTypedRuleContext(SQLParser.DirectionContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_orderExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderExpression" ):
                listener.enterOrderExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderExpression" ):
                listener.exitOrderExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderExpression" ):
                return visitor.visitOrderExpression(self)
            else:
                return visitor.visitChildren(self)




    def orderExpression(self):

        localctx = SQLParser.OrderExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 778, self.RULE_orderExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6554
            self.expr(0)
            self.state = 6556
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,824,self._ctx)
            if la_ == 1:
                self.state = 6555
                self.direction()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupingExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.GroupingExpressionContext)
            else:
                return self.getTypedRuleContext(SQLParser.GroupingExpressionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_groupList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupList" ):
                listener.enterGroupList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupList" ):
                listener.exitGroupList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupList" ):
                return visitor.visitGroupList(self)
            else:
                return visitor.visitChildren(self)




    def groupList(self):

        localctx = SQLParser.GroupListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 780, self.RULE_groupList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6558
            self.groupingExpression()
            self.state = 6563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 6559
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 6560
                self.groupingExpression()
                self.state = 6565
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_groupingExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingExpression" ):
                listener.enterGroupingExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingExpression" ):
                listener.exitGroupingExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupingExpression" ):
                return visitor.visitGroupingExpression(self)
            else:
                return visitor.visitChildren(self)




    def groupingExpression(self):

        localctx = SQLParser.GroupingExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 782, self.RULE_groupingExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6566
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChannelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR_SYMBOL(self):
            return self.getToken(SQLParser.FOR_SYMBOL, 0)

        def CHANNEL_SYMBOL(self):
            return self.getToken(SQLParser.CHANNEL_SYMBOL, 0)

        def textStringNoLinebreak(self):
            return self.getTypedRuleContext(SQLParser.TextStringNoLinebreakContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_channel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChannel" ):
                listener.enterChannel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChannel" ):
                listener.exitChannel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChannel" ):
                return visitor.visitChannel(self)
            else:
                return visitor.visitChildren(self)




    def channel(self):

        localctx = SQLParser.ChannelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 784, self.RULE_channel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6568
            if not self.serverVersion >= 50706:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.serverVersion >= 50706")
            self.state = 6569
            self.match(SQLParser.FOR_SYMBOL)
            self.state = 6570
            self.match(SQLParser.CHANNEL_SYMBOL)
            self.state = 6571
            self.textStringNoLinebreak()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleStatement(self):
            return self.getTypedRuleContext(SQLParser.SimpleStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(SQLParser.ReturnStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(SQLParser.IfStatementContext,0)


        def caseStatement(self):
            return self.getTypedRuleContext(SQLParser.CaseStatementContext,0)


        def labeledBlock(self):
            return self.getTypedRuleContext(SQLParser.LabeledBlockContext,0)


        def unlabeledBlock(self):
            return self.getTypedRuleContext(SQLParser.UnlabeledBlockContext,0)


        def labeledControl(self):
            return self.getTypedRuleContext(SQLParser.LabeledControlContext,0)


        def unlabeledControl(self):
            return self.getTypedRuleContext(SQLParser.UnlabeledControlContext,0)


        def leaveStatement(self):
            return self.getTypedRuleContext(SQLParser.LeaveStatementContext,0)


        def iterateStatement(self):
            return self.getTypedRuleContext(SQLParser.IterateStatementContext,0)


        def cursorOpen(self):
            return self.getTypedRuleContext(SQLParser.CursorOpenContext,0)


        def cursorFetch(self):
            return self.getTypedRuleContext(SQLParser.CursorFetchContext,0)


        def cursorClose(self):
            return self.getTypedRuleContext(SQLParser.CursorCloseContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundStatement" ):
                return visitor.visitCompoundStatement(self)
            else:
                return visitor.visitChildren(self)




    def compoundStatement(self):

        localctx = SQLParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 786, self.RULE_compoundStatement)
        try:
            self.state = 6586
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,826,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6573
                self.simpleStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6574
                self.returnStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6575
                self.ifStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6576
                self.caseStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6577
                self.labeledBlock()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6578
                self.unlabeledBlock()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6579
                self.labeledControl()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6580
                self.unlabeledControl()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6581
                self.leaveStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 6582
                self.iterateStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 6583
                self.cursorOpen()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 6584
                self.cursorFetch()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 6585
                self.cursorClose()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN_SYMBOL(self):
            return self.getToken(SQLParser.RETURN_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = SQLParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 788, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6588
            self.match(SQLParser.RETURN_SYMBOL)
            self.state = 6589
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.IF_SYMBOL)
            else:
                return self.getToken(SQLParser.IF_SYMBOL, i)

        def ifBody(self):
            return self.getTypedRuleContext(SQLParser.IfBodyContext,0)


        def END_SYMBOL(self):
            return self.getToken(SQLParser.END_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = SQLParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 790, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6591
            self.match(SQLParser.IF_SYMBOL)
            self.state = 6592
            self.ifBody()
            self.state = 6593
            self.match(SQLParser.END_SYMBOL)
            self.state = 6594
            self.match(SQLParser.IF_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def thenStatement(self):
            return self.getTypedRuleContext(SQLParser.ThenStatementContext,0)


        def ELSEIF_SYMBOL(self):
            return self.getToken(SQLParser.ELSEIF_SYMBOL, 0)

        def ifBody(self):
            return self.getTypedRuleContext(SQLParser.IfBodyContext,0)


        def ELSE_SYMBOL(self):
            return self.getToken(SQLParser.ELSE_SYMBOL, 0)

        def compoundStatementList(self):
            return self.getTypedRuleContext(SQLParser.CompoundStatementListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_ifBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfBody" ):
                listener.enterIfBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfBody" ):
                listener.exitIfBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfBody" ):
                return visitor.visitIfBody(self)
            else:
                return visitor.visitChildren(self)




    def ifBody(self):

        localctx = SQLParser.IfBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 792, self.RULE_ifBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6596
            self.expr(0)
            self.state = 6597
            self.thenStatement()
            self.state = 6602
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.ELSEIF_SYMBOL]:
                self.state = 6598
                self.match(SQLParser.ELSEIF_SYMBOL)
                self.state = 6599
                self.ifBody()
                pass
            elif token in [SQLParser.ELSE_SYMBOL]:
                self.state = 6600
                self.match(SQLParser.ELSE_SYMBOL)
                self.state = 6601
                self.compoundStatementList()
                pass
            elif token in [SQLParser.END_SYMBOL]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThenStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THEN_SYMBOL(self):
            return self.getToken(SQLParser.THEN_SYMBOL, 0)

        def compoundStatementList(self):
            return self.getTypedRuleContext(SQLParser.CompoundStatementListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_thenStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThenStatement" ):
                listener.enterThenStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThenStatement" ):
                listener.exitThenStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThenStatement" ):
                return visitor.visitThenStatement(self)
            else:
                return visitor.visitChildren(self)




    def thenStatement(self):

        localctx = SQLParser.ThenStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 794, self.RULE_thenStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6604
            self.match(SQLParser.THEN_SYMBOL)
            self.state = 6605
            self.compoundStatementList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.CompoundStatementContext)
            else:
                return self.getTypedRuleContext(SQLParser.CompoundStatementContext,i)


        def SEMICOLON_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.SEMICOLON_SYMBOL)
            else:
                return self.getToken(SQLParser.SEMICOLON_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_compoundStatementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatementList" ):
                listener.enterCompoundStatementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatementList" ):
                listener.exitCompoundStatementList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundStatementList" ):
                return visitor.visitCompoundStatementList(self)
            else:
                return visitor.visitChildren(self)




    def compoundStatementList(self):

        localctx = SQLParser.CompoundStatementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 796, self.RULE_compoundStatementList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6610 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 6607
                    self.compoundStatement()
                    self.state = 6608
                    self.match(SQLParser.SEMICOLON_SYMBOL)

                else:
                    raise NoViableAltException(self)
                self.state = 6612 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,828,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.CASE_SYMBOL)
            else:
                return self.getToken(SQLParser.CASE_SYMBOL, i)

        def END_SYMBOL(self):
            return self.getToken(SQLParser.END_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def whenExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.WhenExpressionContext)
            else:
                return self.getTypedRuleContext(SQLParser.WhenExpressionContext,i)


        def thenStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ThenStatementContext)
            else:
                return self.getTypedRuleContext(SQLParser.ThenStatementContext,i)


        def elseStatement(self):
            return self.getTypedRuleContext(SQLParser.ElseStatementContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_caseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStatement" ):
                listener.enterCaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStatement" ):
                listener.exitCaseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseStatement" ):
                return visitor.visitCaseStatement(self)
            else:
                return visitor.visitChildren(self)




    def caseStatement(self):

        localctx = SQLParser.CaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 798, self.RULE_caseStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6614
            self.match(SQLParser.CASE_SYMBOL)
            self.state = 6616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,829,self._ctx)
            if la_ == 1:
                self.state = 6615
                self.expr(0)


            self.state = 6621 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6618
                self.whenExpression()
                self.state = 6619
                self.thenStatement()
                self.state = 6623 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SQLParser.WHEN_SYMBOL):
                    break

            self.state = 6626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.ELSE_SYMBOL:
                self.state = 6625
                self.elseStatement()


            self.state = 6628
            self.match(SQLParser.END_SYMBOL)
            self.state = 6629
            self.match(SQLParser.CASE_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE_SYMBOL(self):
            return self.getToken(SQLParser.ELSE_SYMBOL, 0)

        def compoundStatementList(self):
            return self.getTypedRuleContext(SQLParser.CompoundStatementListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_elseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseStatement" ):
                listener.enterElseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseStatement" ):
                listener.exitElseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseStatement" ):
                return visitor.visitElseStatement(self)
            else:
                return visitor.visitChildren(self)




    def elseStatement(self):

        localctx = SQLParser.ElseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 800, self.RULE_elseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6631
            self.match(SQLParser.ELSE_SYMBOL)
            self.state = 6632
            self.compoundStatementList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def label(self):
            return self.getTypedRuleContext(SQLParser.LabelContext,0)


        def beginEndBlock(self):
            return self.getTypedRuleContext(SQLParser.BeginEndBlockContext,0)


        def labelRef(self):
            return self.getTypedRuleContext(SQLParser.LabelRefContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_labeledBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledBlock" ):
                listener.enterLabeledBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledBlock" ):
                listener.exitLabeledBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeledBlock" ):
                return visitor.visitLabeledBlock(self)
            else:
                return visitor.visitChildren(self)




    def labeledBlock(self):

        localctx = SQLParser.LabeledBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 802, self.RULE_labeledBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6634
            self.label()
            self.state = 6635
            self.beginEndBlock()
            self.state = 6637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,832,self._ctx)
            if la_ == 1:
                self.state = 6636
                self.labelRef()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnlabeledBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def beginEndBlock(self):
            return self.getTypedRuleContext(SQLParser.BeginEndBlockContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_unlabeledBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnlabeledBlock" ):
                listener.enterUnlabeledBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnlabeledBlock" ):
                listener.exitUnlabeledBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnlabeledBlock" ):
                return visitor.visitUnlabeledBlock(self)
            else:
                return visitor.visitChildren(self)




    def unlabeledBlock(self):

        localctx = SQLParser.UnlabeledBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 804, self.RULE_unlabeledBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6639
            self.beginEndBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelIdentifier(self):
            return self.getTypedRuleContext(SQLParser.LabelIdentifierContext,0)


        def COLON_SYMBOL(self):
            return self.getToken(SQLParser.COLON_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel" ):
                listener.enterLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel" ):
                listener.exitLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel" ):
                return visitor.visitLabel(self)
            else:
                return visitor.visitChildren(self)




    def label(self):

        localctx = SQLParser.LabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 806, self.RULE_label)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6641
            self.labelIdentifier()
            self.state = 6642
            self.match(SQLParser.COLON_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeginEndBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN_SYMBOL(self):
            return self.getToken(SQLParser.BEGIN_SYMBOL, 0)

        def END_SYMBOL(self):
            return self.getToken(SQLParser.END_SYMBOL, 0)

        def spDeclarations(self):
            return self.getTypedRuleContext(SQLParser.SpDeclarationsContext,0)


        def compoundStatementList(self):
            return self.getTypedRuleContext(SQLParser.CompoundStatementListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_beginEndBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeginEndBlock" ):
                listener.enterBeginEndBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeginEndBlock" ):
                listener.exitBeginEndBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeginEndBlock" ):
                return visitor.visitBeginEndBlock(self)
            else:
                return visitor.visitChildren(self)




    def beginEndBlock(self):

        localctx = SQLParser.BeginEndBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 808, self.RULE_beginEndBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6644
            self.match(SQLParser.BEGIN_SYMBOL)
            self.state = 6646
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,833,self._ctx)
            if la_ == 1:
                self.state = 6645
                self.spDeclarations()


            self.state = 6649
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,834,self._ctx)
            if la_ == 1:
                self.state = 6648
                self.compoundStatementList()


            self.state = 6651
            self.match(SQLParser.END_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def label(self):
            return self.getTypedRuleContext(SQLParser.LabelContext,0)


        def unlabeledControl(self):
            return self.getTypedRuleContext(SQLParser.UnlabeledControlContext,0)


        def labelRef(self):
            return self.getTypedRuleContext(SQLParser.LabelRefContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_labeledControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledControl" ):
                listener.enterLabeledControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledControl" ):
                listener.exitLabeledControl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeledControl" ):
                return visitor.visitLabeledControl(self)
            else:
                return visitor.visitChildren(self)




    def labeledControl(self):

        localctx = SQLParser.LabeledControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 810, self.RULE_labeledControl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6653
            self.label()
            self.state = 6654
            self.unlabeledControl()
            self.state = 6656
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,835,self._ctx)
            if la_ == 1:
                self.state = 6655
                self.labelRef()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnlabeledControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def loopBlock(self):
            return self.getTypedRuleContext(SQLParser.LoopBlockContext,0)


        def whileDoBlock(self):
            return self.getTypedRuleContext(SQLParser.WhileDoBlockContext,0)


        def repeatUntilBlock(self):
            return self.getTypedRuleContext(SQLParser.RepeatUntilBlockContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_unlabeledControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnlabeledControl" ):
                listener.enterUnlabeledControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnlabeledControl" ):
                listener.exitUnlabeledControl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnlabeledControl" ):
                return visitor.visitUnlabeledControl(self)
            else:
                return visitor.visitChildren(self)




    def unlabeledControl(self):

        localctx = SQLParser.UnlabeledControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 812, self.RULE_unlabeledControl)
        try:
            self.state = 6661
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.LOOP_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6658
                self.loopBlock()
                pass
            elif token in [SQLParser.WHILE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6659
                self.whileDoBlock()
                pass
            elif token in [SQLParser.REPEAT_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6660
                self.repeatUntilBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOOP_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.LOOP_SYMBOL)
            else:
                return self.getToken(SQLParser.LOOP_SYMBOL, i)

        def compoundStatementList(self):
            return self.getTypedRuleContext(SQLParser.CompoundStatementListContext,0)


        def END_SYMBOL(self):
            return self.getToken(SQLParser.END_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_loopBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopBlock" ):
                listener.enterLoopBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopBlock" ):
                listener.exitLoopBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopBlock" ):
                return visitor.visitLoopBlock(self)
            else:
                return visitor.visitChildren(self)




    def loopBlock(self):

        localctx = SQLParser.LoopBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 814, self.RULE_loopBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6663
            self.match(SQLParser.LOOP_SYMBOL)
            self.state = 6664
            self.compoundStatementList()
            self.state = 6665
            self.match(SQLParser.END_SYMBOL)
            self.state = 6666
            self.match(SQLParser.LOOP_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileDoBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.WHILE_SYMBOL)
            else:
                return self.getToken(SQLParser.WHILE_SYMBOL, i)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def DO_SYMBOL(self):
            return self.getToken(SQLParser.DO_SYMBOL, 0)

        def compoundStatementList(self):
            return self.getTypedRuleContext(SQLParser.CompoundStatementListContext,0)


        def END_SYMBOL(self):
            return self.getToken(SQLParser.END_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_whileDoBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileDoBlock" ):
                listener.enterWhileDoBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileDoBlock" ):
                listener.exitWhileDoBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileDoBlock" ):
                return visitor.visitWhileDoBlock(self)
            else:
                return visitor.visitChildren(self)




    def whileDoBlock(self):

        localctx = SQLParser.WhileDoBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 816, self.RULE_whileDoBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6668
            self.match(SQLParser.WHILE_SYMBOL)
            self.state = 6669
            self.expr(0)
            self.state = 6670
            self.match(SQLParser.DO_SYMBOL)
            self.state = 6671
            self.compoundStatementList()
            self.state = 6672
            self.match(SQLParser.END_SYMBOL)
            self.state = 6673
            self.match(SQLParser.WHILE_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RepeatUntilBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEAT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.REPEAT_SYMBOL)
            else:
                return self.getToken(SQLParser.REPEAT_SYMBOL, i)

        def compoundStatementList(self):
            return self.getTypedRuleContext(SQLParser.CompoundStatementListContext,0)


        def UNTIL_SYMBOL(self):
            return self.getToken(SQLParser.UNTIL_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def END_SYMBOL(self):
            return self.getToken(SQLParser.END_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_repeatUntilBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeatUntilBlock" ):
                listener.enterRepeatUntilBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeatUntilBlock" ):
                listener.exitRepeatUntilBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRepeatUntilBlock" ):
                return visitor.visitRepeatUntilBlock(self)
            else:
                return visitor.visitChildren(self)




    def repeatUntilBlock(self):

        localctx = SQLParser.RepeatUntilBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 818, self.RULE_repeatUntilBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6675
            self.match(SQLParser.REPEAT_SYMBOL)
            self.state = 6676
            self.compoundStatementList()
            self.state = 6677
            self.match(SQLParser.UNTIL_SYMBOL)
            self.state = 6678
            self.expr(0)
            self.state = 6679
            self.match(SQLParser.END_SYMBOL)
            self.state = 6680
            self.match(SQLParser.REPEAT_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpDeclarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def spDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.SpDeclarationContext)
            else:
                return self.getTypedRuleContext(SQLParser.SpDeclarationContext,i)


        def SEMICOLON_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.SEMICOLON_SYMBOL)
            else:
                return self.getToken(SQLParser.SEMICOLON_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_spDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpDeclarations" ):
                listener.enterSpDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpDeclarations" ):
                listener.exitSpDeclarations(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpDeclarations" ):
                return visitor.visitSpDeclarations(self)
            else:
                return visitor.visitChildren(self)




    def spDeclarations(self):

        localctx = SQLParser.SpDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 820, self.RULE_spDeclarations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6685 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 6682
                    self.spDeclaration()
                    self.state = 6683
                    self.match(SQLParser.SEMICOLON_SYMBOL)

                else:
                    raise NoViableAltException(self)
                self.state = 6687 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,837,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self):
            return self.getTypedRuleContext(SQLParser.VariableDeclarationContext,0)


        def conditionDeclaration(self):
            return self.getTypedRuleContext(SQLParser.ConditionDeclarationContext,0)


        def handlerDeclaration(self):
            return self.getTypedRuleContext(SQLParser.HandlerDeclarationContext,0)


        def cursorDeclaration(self):
            return self.getTypedRuleContext(SQLParser.CursorDeclarationContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_spDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpDeclaration" ):
                listener.enterSpDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpDeclaration" ):
                listener.exitSpDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpDeclaration" ):
                return visitor.visitSpDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def spDeclaration(self):

        localctx = SQLParser.SpDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 822, self.RULE_spDeclaration)
        try:
            self.state = 6693
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,838,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6689
                self.variableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6690
                self.conditionDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6691
                self.handlerDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6692
                self.cursorDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE_SYMBOL(self):
            return self.getToken(SQLParser.DECLARE_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SQLParser.IdentifierListContext,0)


        def dataType(self):
            return self.getTypedRuleContext(SQLParser.DataTypeContext,0)


        def collate(self):
            return self.getTypedRuleContext(SQLParser.CollateContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(SQLParser.DEFAULT_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclaration" ):
                return visitor.visitVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclaration(self):

        localctx = SQLParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 824, self.RULE_variableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6695
            self.match(SQLParser.DECLARE_SYMBOL)
            self.state = 6696
            self.identifierList()
            self.state = 6697
            self.dataType()
            self.state = 6699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.COLLATE_SYMBOL:
                self.state = 6698
                self.collate()


            self.state = 6703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.DEFAULT_SYMBOL:
                self.state = 6701
                self.match(SQLParser.DEFAULT_SYMBOL)
                self.state = 6702
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE_SYMBOL(self):
            return self.getToken(SQLParser.DECLARE_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def CONDITION_SYMBOL(self):
            return self.getToken(SQLParser.CONDITION_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(SQLParser.FOR_SYMBOL, 0)

        def spCondition(self):
            return self.getTypedRuleContext(SQLParser.SpConditionContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_conditionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionDeclaration" ):
                listener.enterConditionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionDeclaration" ):
                listener.exitConditionDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionDeclaration" ):
                return visitor.visitConditionDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def conditionDeclaration(self):

        localctx = SQLParser.ConditionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 826, self.RULE_conditionDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6705
            self.match(SQLParser.DECLARE_SYMBOL)
            self.state = 6706
            self.identifier()
            self.state = 6707
            self.match(SQLParser.CONDITION_SYMBOL)
            self.state = 6708
            self.match(SQLParser.FOR_SYMBOL)
            self.state = 6709
            self.spCondition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ulong_number(self):
            return self.getTypedRuleContext(SQLParser.Ulong_numberContext,0)


        def sqlstate(self):
            return self.getTypedRuleContext(SQLParser.SqlstateContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_spCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpCondition" ):
                listener.enterSpCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpCondition" ):
                listener.exitSpCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpCondition" ):
                return visitor.visitSpCondition(self)
            else:
                return visitor.visitChildren(self)




    def spCondition(self):

        localctx = SQLParser.SpConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 828, self.RULE_spCondition)
        try:
            self.state = 6713
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.INT_NUMBER, SQLParser.LONG_NUMBER, SQLParser.ULONGLONG_NUMBER, SQLParser.HEX_NUMBER, SQLParser.DECIMAL_NUMBER, SQLParser.FLOAT_NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6711
                self.ulong_number()
                pass
            elif token in [SQLParser.SQLSTATE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6712
                self.sqlstate()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlstateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQLSTATE_SYMBOL(self):
            return self.getToken(SQLParser.SQLSTATE_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextLiteralContext,0)


        def VALUE_SYMBOL(self):
            return self.getToken(SQLParser.VALUE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_sqlstate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlstate" ):
                listener.enterSqlstate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlstate" ):
                listener.exitSqlstate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlstate" ):
                return visitor.visitSqlstate(self)
            else:
                return visitor.visitChildren(self)




    def sqlstate(self):

        localctx = SQLParser.SqlstateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 830, self.RULE_sqlstate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6715
            self.match(SQLParser.SQLSTATE_SYMBOL)
            self.state = 6717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,842,self._ctx)
            if la_ == 1:
                self.state = 6716
                self.match(SQLParser.VALUE_SYMBOL)


            self.state = 6719
            self.textLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE_SYMBOL(self):
            return self.getToken(SQLParser.DECLARE_SYMBOL, 0)

        def HANDLER_SYMBOL(self):
            return self.getToken(SQLParser.HANDLER_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(SQLParser.FOR_SYMBOL, 0)

        def handlerCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.HandlerConditionContext)
            else:
                return self.getTypedRuleContext(SQLParser.HandlerConditionContext,i)


        def compoundStatement(self):
            return self.getTypedRuleContext(SQLParser.CompoundStatementContext,0)


        def CONTINUE_SYMBOL(self):
            return self.getToken(SQLParser.CONTINUE_SYMBOL, 0)

        def EXIT_SYMBOL(self):
            return self.getToken(SQLParser.EXIT_SYMBOL, 0)

        def UNDO_SYMBOL(self):
            return self.getToken(SQLParser.UNDO_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_handlerDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerDeclaration" ):
                listener.enterHandlerDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerDeclaration" ):
                listener.exitHandlerDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandlerDeclaration" ):
                return visitor.visitHandlerDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def handlerDeclaration(self):

        localctx = SQLParser.HandlerDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 832, self.RULE_handlerDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6721
            self.match(SQLParser.DECLARE_SYMBOL)
            self.state = 6722
            _la = self._input.LA(1)
            if not(_la==SQLParser.CONTINUE_SYMBOL or _la==SQLParser.EXIT_SYMBOL or _la==SQLParser.UNDO_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6723
            self.match(SQLParser.HANDLER_SYMBOL)
            self.state = 6724
            self.match(SQLParser.FOR_SYMBOL)
            self.state = 6725
            self.handlerCondition()
            self.state = 6730
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,843,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6726
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 6727
                    self.handlerCondition() 
                self.state = 6732
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,843,self._ctx)

            self.state = 6733
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def spCondition(self):
            return self.getTypedRuleContext(SQLParser.SpConditionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def SQLWARNING_SYMBOL(self):
            return self.getToken(SQLParser.SQLWARNING_SYMBOL, 0)

        def notRule(self):
            return self.getTypedRuleContext(SQLParser.NotRuleContext,0)


        def FOUND_SYMBOL(self):
            return self.getToken(SQLParser.FOUND_SYMBOL, 0)

        def SQLEXCEPTION_SYMBOL(self):
            return self.getToken(SQLParser.SQLEXCEPTION_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_handlerCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerCondition" ):
                listener.enterHandlerCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerCondition" ):
                listener.exitHandlerCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandlerCondition" ):
                return visitor.visitHandlerCondition(self)
            else:
                return visitor.visitChildren(self)




    def handlerCondition(self):

        localctx = SQLParser.HandlerConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 834, self.RULE_handlerCondition)
        try:
            self.state = 6742
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,844,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6735
                self.spCondition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6736
                self.identifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6737
                self.match(SQLParser.SQLWARNING_SYMBOL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6738
                self.notRule()
                self.state = 6739
                self.match(SQLParser.FOUND_SYMBOL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6741
                self.match(SQLParser.SQLEXCEPTION_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CursorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE_SYMBOL(self):
            return self.getToken(SQLParser.DECLARE_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def CURSOR_SYMBOL(self):
            return self.getToken(SQLParser.CURSOR_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(SQLParser.FOR_SYMBOL, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(SQLParser.SelectStatementContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_cursorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursorDeclaration" ):
                listener.enterCursorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursorDeclaration" ):
                listener.exitCursorDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursorDeclaration" ):
                return visitor.visitCursorDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def cursorDeclaration(self):

        localctx = SQLParser.CursorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 836, self.RULE_cursorDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6744
            self.match(SQLParser.DECLARE_SYMBOL)
            self.state = 6745
            self.identifier()
            self.state = 6746
            self.match(SQLParser.CURSOR_SYMBOL)
            self.state = 6747
            self.match(SQLParser.FOR_SYMBOL)
            self.state = 6748
            self.selectStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITERATE_SYMBOL(self):
            return self.getToken(SQLParser.ITERATE_SYMBOL, 0)

        def labelRef(self):
            return self.getTypedRuleContext(SQLParser.LabelRefContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_iterateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterateStatement" ):
                listener.enterIterateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterateStatement" ):
                listener.exitIterateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterateStatement" ):
                return visitor.visitIterateStatement(self)
            else:
                return visitor.visitChildren(self)




    def iterateStatement(self):

        localctx = SQLParser.IterateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 838, self.RULE_iterateStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6750
            self.match(SQLParser.ITERATE_SYMBOL)
            self.state = 6751
            self.labelRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LeaveStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEAVE_SYMBOL(self):
            return self.getToken(SQLParser.LEAVE_SYMBOL, 0)

        def labelRef(self):
            return self.getTypedRuleContext(SQLParser.LabelRefContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_leaveStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLeaveStatement" ):
                listener.enterLeaveStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLeaveStatement" ):
                listener.exitLeaveStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLeaveStatement" ):
                return visitor.visitLeaveStatement(self)
            else:
                return visitor.visitChildren(self)




    def leaveStatement(self):

        localctx = SQLParser.LeaveStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 840, self.RULE_leaveStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6753
            self.match(SQLParser.LEAVE_SYMBOL)
            self.state = 6754
            self.labelRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetDiagnosticsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET_SYMBOL(self):
            return self.getToken(SQLParser.GET_SYMBOL, 0)

        def DIAGNOSTICS_SYMBOL(self):
            return self.getToken(SQLParser.DIAGNOSTICS_SYMBOL, 0)

        def statementInformationItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.StatementInformationItemContext)
            else:
                return self.getTypedRuleContext(SQLParser.StatementInformationItemContext,i)


        def CONDITION_SYMBOL(self):
            return self.getToken(SQLParser.CONDITION_SYMBOL, 0)

        def signalAllowedExpr(self):
            return self.getTypedRuleContext(SQLParser.SignalAllowedExprContext,0)


        def conditionInformationItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ConditionInformationItemContext)
            else:
                return self.getTypedRuleContext(SQLParser.ConditionInformationItemContext,i)


        def CURRENT_SYMBOL(self):
            return self.getToken(SQLParser.CURRENT_SYMBOL, 0)

        def STACKED_SYMBOL(self):
            return self.getToken(SQLParser.STACKED_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_getDiagnostics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetDiagnostics" ):
                listener.enterGetDiagnostics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetDiagnostics" ):
                listener.exitGetDiagnostics(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetDiagnostics" ):
                return visitor.visitGetDiagnostics(self)
            else:
                return visitor.visitChildren(self)




    def getDiagnostics(self):

        localctx = SQLParser.GetDiagnosticsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 842, self.RULE_getDiagnostics)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6756
            self.match(SQLParser.GET_SYMBOL)
            self.state = 6760
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,845,self._ctx)
            if la_ == 1:
                self.state = 6757
                self.match(SQLParser.CURRENT_SYMBOL)

            elif la_ == 2:
                self.state = 6758
                if not self.serverVersion >= 50700:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50700")
                self.state = 6759
                self.match(SQLParser.STACKED_SYMBOL)


            self.state = 6762
            self.match(SQLParser.DIAGNOSTICS_SYMBOL)
            self.state = 6781
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,848,self._ctx)
            if la_ == 1:
                self.state = 6763
                self.statementInformationItem()
                self.state = 6768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLParser.COMMA_SYMBOL:
                    self.state = 6764
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 6765
                    self.statementInformationItem()
                    self.state = 6770
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 6771
                self.match(SQLParser.CONDITION_SYMBOL)
                self.state = 6772
                self.signalAllowedExpr()
                self.state = 6773
                self.conditionInformationItem()
                self.state = 6778
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLParser.COMMA_SYMBOL:
                    self.state = 6774
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 6775
                    self.conditionInformationItem()
                    self.state = 6780
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignalAllowedExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(SQLParser.LiteralContext,0)


        def variable(self):
            return self.getTypedRuleContext(SQLParser.VariableContext,0)


        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(SQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_signalAllowedExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignalAllowedExpr" ):
                listener.enterSignalAllowedExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignalAllowedExpr" ):
                listener.exitSignalAllowedExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSignalAllowedExpr" ):
                return visitor.visitSignalAllowedExpr(self)
            else:
                return visitor.visitChildren(self)




    def signalAllowedExpr(self):

        localctx = SQLParser.SignalAllowedExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 844, self.RULE_signalAllowedExpr)
        try:
            self.state = 6786
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,849,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6783
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6784
                self.variable()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6785
                self.qualifiedIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementInformationItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def NUMBER_SYMBOL(self):
            return self.getToken(SQLParser.NUMBER_SYMBOL, 0)

        def ROW_COUNT_SYMBOL(self):
            return self.getToken(SQLParser.ROW_COUNT_SYMBOL, 0)

        def variable(self):
            return self.getTypedRuleContext(SQLParser.VariableContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_statementInformationItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementInformationItem" ):
                listener.enterStatementInformationItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementInformationItem" ):
                listener.exitStatementInformationItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementInformationItem" ):
                return visitor.visitStatementInformationItem(self)
            else:
                return visitor.visitChildren(self)




    def statementInformationItem(self):

        localctx = SQLParser.StatementInformationItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 846, self.RULE_statementInformationItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6790
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,850,self._ctx)
            if la_ == 1:
                self.state = 6788
                self.variable()
                pass

            elif la_ == 2:
                self.state = 6789
                self.identifier()
                pass


            self.state = 6792
            self.match(SQLParser.EQUAL_OPERATOR)
            self.state = 6793
            _la = self._input.LA(1)
            if not(_la==SQLParser.NUMBER_SYMBOL or _la==SQLParser.ROW_COUNT_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionInformationItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def variable(self):
            return self.getTypedRuleContext(SQLParser.VariableContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def signalInformationItemName(self):
            return self.getTypedRuleContext(SQLParser.SignalInformationItemNameContext,0)


        def RETURNED_SQLSTATE_SYMBOL(self):
            return self.getToken(SQLParser.RETURNED_SQLSTATE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_conditionInformationItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionInformationItem" ):
                listener.enterConditionInformationItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionInformationItem" ):
                listener.exitConditionInformationItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionInformationItem" ):
                return visitor.visitConditionInformationItem(self)
            else:
                return visitor.visitChildren(self)




    def conditionInformationItem(self):

        localctx = SQLParser.ConditionInformationItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 848, self.RULE_conditionInformationItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6797
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,851,self._ctx)
            if la_ == 1:
                self.state = 6795
                self.variable()
                pass

            elif la_ == 2:
                self.state = 6796
                self.identifier()
                pass


            self.state = 6799
            self.match(SQLParser.EQUAL_OPERATOR)
            self.state = 6802
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.CATALOG_NAME_SYMBOL, SQLParser.CLASS_ORIGIN_SYMBOL, SQLParser.COLUMN_NAME_SYMBOL, SQLParser.CONSTRAINT_CATALOG_SYMBOL, SQLParser.CONSTRAINT_NAME_SYMBOL, SQLParser.CONSTRAINT_SCHEMA_SYMBOL, SQLParser.CURSOR_NAME_SYMBOL, SQLParser.MESSAGE_TEXT_SYMBOL, SQLParser.MYSQL_ERRNO_SYMBOL, SQLParser.SCHEMA_NAME_SYMBOL, SQLParser.SUBCLASS_ORIGIN_SYMBOL, SQLParser.TABLE_NAME_SYMBOL]:
                self.state = 6800
                self.signalInformationItemName()
                pass
            elif token in [SQLParser.RETURNED_SQLSTATE_SYMBOL]:
                self.state = 6801
                self.match(SQLParser.RETURNED_SQLSTATE_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignalInformationItemNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS_ORIGIN_SYMBOL(self):
            return self.getToken(SQLParser.CLASS_ORIGIN_SYMBOL, 0)

        def SUBCLASS_ORIGIN_SYMBOL(self):
            return self.getToken(SQLParser.SUBCLASS_ORIGIN_SYMBOL, 0)

        def CONSTRAINT_CATALOG_SYMBOL(self):
            return self.getToken(SQLParser.CONSTRAINT_CATALOG_SYMBOL, 0)

        def CONSTRAINT_SCHEMA_SYMBOL(self):
            return self.getToken(SQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0)

        def CONSTRAINT_NAME_SYMBOL(self):
            return self.getToken(SQLParser.CONSTRAINT_NAME_SYMBOL, 0)

        def CATALOG_NAME_SYMBOL(self):
            return self.getToken(SQLParser.CATALOG_NAME_SYMBOL, 0)

        def SCHEMA_NAME_SYMBOL(self):
            return self.getToken(SQLParser.SCHEMA_NAME_SYMBOL, 0)

        def TABLE_NAME_SYMBOL(self):
            return self.getToken(SQLParser.TABLE_NAME_SYMBOL, 0)

        def COLUMN_NAME_SYMBOL(self):
            return self.getToken(SQLParser.COLUMN_NAME_SYMBOL, 0)

        def CURSOR_NAME_SYMBOL(self):
            return self.getToken(SQLParser.CURSOR_NAME_SYMBOL, 0)

        def MESSAGE_TEXT_SYMBOL(self):
            return self.getToken(SQLParser.MESSAGE_TEXT_SYMBOL, 0)

        def MYSQL_ERRNO_SYMBOL(self):
            return self.getToken(SQLParser.MYSQL_ERRNO_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_signalInformationItemName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignalInformationItemName" ):
                listener.enterSignalInformationItemName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignalInformationItemName" ):
                listener.exitSignalInformationItemName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSignalInformationItemName" ):
                return visitor.visitSignalInformationItemName(self)
            else:
                return visitor.visitChildren(self)




    def signalInformationItemName(self):

        localctx = SQLParser.SignalInformationItemNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 850, self.RULE_signalInformationItemName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6804
            _la = self._input.LA(1)
            if not(((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & ((1 << (SQLParser.CATALOG_NAME_SYMBOL - 53)) | (1 << (SQLParser.CLASS_ORIGIN_SYMBOL - 53)) | (1 << (SQLParser.COLUMN_NAME_SYMBOL - 53)) | (1 << (SQLParser.CONSTRAINT_CATALOG_SYMBOL - 53)) | (1 << (SQLParser.CONSTRAINT_NAME_SYMBOL - 53)) | (1 << (SQLParser.CONSTRAINT_SCHEMA_SYMBOL - 53)) | (1 << (SQLParser.CURSOR_NAME_SYMBOL - 53)))) != 0) or _la==SQLParser.MESSAGE_TEXT_SYMBOL or _la==SQLParser.MYSQL_ERRNO_SYMBOL or _la==SQLParser.SCHEMA_NAME_SYMBOL or _la==SQLParser.SUBCLASS_ORIGIN_SYMBOL or _la==SQLParser.TABLE_NAME_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignalStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIGNAL_SYMBOL(self):
            return self.getToken(SQLParser.SIGNAL_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def sqlstate(self):
            return self.getTypedRuleContext(SQLParser.SqlstateContext,0)


        def SET_SYMBOL(self):
            return self.getToken(SQLParser.SET_SYMBOL, 0)

        def signalInformationItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.SignalInformationItemContext)
            else:
                return self.getTypedRuleContext(SQLParser.SignalInformationItemContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_signalStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignalStatement" ):
                listener.enterSignalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignalStatement" ):
                listener.exitSignalStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSignalStatement" ):
                return visitor.visitSignalStatement(self)
            else:
                return visitor.visitChildren(self)




    def signalStatement(self):

        localctx = SQLParser.SignalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 852, self.RULE_signalStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6806
            self.match(SQLParser.SIGNAL_SYMBOL)
            self.state = 6809
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,853,self._ctx)
            if la_ == 1:
                self.state = 6807
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 6808
                self.sqlstate()
                pass


            self.state = 6820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.SET_SYMBOL:
                self.state = 6811
                self.match(SQLParser.SET_SYMBOL)
                self.state = 6812
                self.signalInformationItem()
                self.state = 6817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLParser.COMMA_SYMBOL:
                    self.state = 6813
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 6814
                    self.signalInformationItem()
                    self.state = 6819
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResignalStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESIGNAL_SYMBOL(self):
            return self.getToken(SQLParser.RESIGNAL_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def sqlstate(self):
            return self.getTypedRuleContext(SQLParser.SqlstateContext,0)


        def SET_SYMBOL(self):
            return self.getToken(SQLParser.SET_SYMBOL, 0)

        def signalInformationItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.SignalInformationItemContext)
            else:
                return self.getTypedRuleContext(SQLParser.SignalInformationItemContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_resignalStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResignalStatement" ):
                listener.enterResignalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResignalStatement" ):
                listener.exitResignalStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResignalStatement" ):
                return visitor.visitResignalStatement(self)
            else:
                return visitor.visitChildren(self)




    def resignalStatement(self):

        localctx = SQLParser.ResignalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 854, self.RULE_resignalStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6822
            self.match(SQLParser.RESIGNAL_SYMBOL)
            self.state = 6825
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,856,self._ctx)
            if la_ == 1:
                self.state = 6823
                self.identifier()

            elif la_ == 2:
                self.state = 6824
                self.sqlstate()


            self.state = 6836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.SET_SYMBOL:
                self.state = 6827
                self.match(SQLParser.SET_SYMBOL)
                self.state = 6828
                self.signalInformationItem()
                self.state = 6833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLParser.COMMA_SYMBOL:
                    self.state = 6829
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 6830
                    self.signalInformationItem()
                    self.state = 6835
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignalInformationItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signalInformationItemName(self):
            return self.getTypedRuleContext(SQLParser.SignalInformationItemNameContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def signalAllowedExpr(self):
            return self.getTypedRuleContext(SQLParser.SignalAllowedExprContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_signalInformationItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignalInformationItem" ):
                listener.enterSignalInformationItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignalInformationItem" ):
                listener.exitSignalInformationItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSignalInformationItem" ):
                return visitor.visitSignalInformationItem(self)
            else:
                return visitor.visitChildren(self)




    def signalInformationItem(self):

        localctx = SQLParser.SignalInformationItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 856, self.RULE_signalInformationItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6838
            self.signalInformationItemName()
            self.state = 6839
            self.match(SQLParser.EQUAL_OPERATOR)
            self.state = 6840
            self.signalAllowedExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CursorOpenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_cursorOpen

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursorOpen" ):
                listener.enterCursorOpen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursorOpen" ):
                listener.exitCursorOpen(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursorOpen" ):
                return visitor.visitCursorOpen(self)
            else:
                return visitor.visitChildren(self)




    def cursorOpen(self):

        localctx = SQLParser.CursorOpenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 858, self.RULE_cursorOpen)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6842
            self.match(SQLParser.OPEN_SYMBOL)
            self.state = 6843
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CursorCloseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_cursorClose

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursorClose" ):
                listener.enterCursorClose(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursorClose" ):
                listener.exitCursorClose(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursorClose" ):
                return visitor.visitCursorClose(self)
            else:
                return visitor.visitChildren(self)




    def cursorClose(self):

        localctx = SQLParser.CursorCloseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 860, self.RULE_cursorClose)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6845
            self.match(SQLParser.CLOSE_SYMBOL)
            self.state = 6846
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CursorFetchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FETCH_SYMBOL(self):
            return self.getToken(SQLParser.FETCH_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def INTO_SYMBOL(self):
            return self.getToken(SQLParser.INTO_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SQLParser.IdentifierListContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(SQLParser.FROM_SYMBOL, 0)

        def NEXT_SYMBOL(self):
            return self.getToken(SQLParser.NEXT_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_cursorFetch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursorFetch" ):
                listener.enterCursorFetch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursorFetch" ):
                listener.exitCursorFetch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursorFetch" ):
                return visitor.visitCursorFetch(self)
            else:
                return visitor.visitChildren(self)




    def cursorFetch(self):

        localctx = SQLParser.CursorFetchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 862, self.RULE_cursorFetch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6848
            self.match(SQLParser.FETCH_SYMBOL)
            self.state = 6853
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,860,self._ctx)
            if la_ == 1:
                self.state = 6850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.NEXT_SYMBOL:
                    self.state = 6849
                    self.match(SQLParser.NEXT_SYMBOL)


                self.state = 6852
                self.match(SQLParser.FROM_SYMBOL)


            self.state = 6855
            self.identifier()
            self.state = 6856
            self.match(SQLParser.INTO_SYMBOL)
            self.state = 6857
            self.identifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScheduleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_SYMBOL(self):
            return self.getToken(SQLParser.AT_SYMBOL, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLParser.ExprContext,i)


        def EVERY_SYMBOL(self):
            return self.getToken(SQLParser.EVERY_SYMBOL, 0)

        def interval(self):
            return self.getTypedRuleContext(SQLParser.IntervalContext,0)


        def STARTS_SYMBOL(self):
            return self.getToken(SQLParser.STARTS_SYMBOL, 0)

        def ENDS_SYMBOL(self):
            return self.getToken(SQLParser.ENDS_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_schedule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchedule" ):
                listener.enterSchedule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchedule" ):
                listener.exitSchedule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSchedule" ):
                return visitor.visitSchedule(self)
            else:
                return visitor.visitChildren(self)




    def schedule(self):

        localctx = SQLParser.ScheduleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 864, self.RULE_schedule)
        self._la = 0 # Token type
        try:
            self.state = 6872
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.AT_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6859
                self.match(SQLParser.AT_SYMBOL)
                self.state = 6860
                self.expr(0)
                pass
            elif token in [SQLParser.EVERY_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6861
                self.match(SQLParser.EVERY_SYMBOL)
                self.state = 6862
                self.expr(0)
                self.state = 6863
                self.interval()
                self.state = 6866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.STARTS_SYMBOL:
                    self.state = 6864
                    self.match(SQLParser.STARTS_SYMBOL)
                    self.state = 6865
                    self.expr(0)


                self.state = 6870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.ENDS_SYMBOL:
                    self.state = 6868
                    self.match(SQLParser.ENDS_SYMBOL)
                    self.state = 6869
                    self.expr(0)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnName(self):
            return self.getTypedRuleContext(SQLParser.ColumnNameContext,0)


        def fieldDefinition(self):
            return self.getTypedRuleContext(SQLParser.FieldDefinitionContext,0)


        def checkOrReferences(self):
            return self.getTypedRuleContext(SQLParser.CheckOrReferencesContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_columnDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDefinition" ):
                listener.enterColumnDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDefinition" ):
                listener.exitColumnDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnDefinition" ):
                return visitor.visitColumnDefinition(self)
            else:
                return visitor.visitChildren(self)




    def columnDefinition(self):

        localctx = SQLParser.ColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 866, self.RULE_columnDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6874
            self.columnName()
            self.state = 6875
            self.fieldDefinition()
            self.state = 6877
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,864,self._ctx)
            if la_ == 1:
                self.state = 6876
                self.checkOrReferences()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckOrReferencesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def checkConstraint(self):
            return self.getTypedRuleContext(SQLParser.CheckConstraintContext,0)


        def references(self):
            return self.getTypedRuleContext(SQLParser.ReferencesContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_checkOrReferences

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckOrReferences" ):
                listener.enterCheckOrReferences(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckOrReferences" ):
                listener.exitCheckOrReferences(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCheckOrReferences" ):
                return visitor.visitCheckOrReferences(self)
            else:
                return visitor.visitChildren(self)




    def checkOrReferences(self):

        localctx = SQLParser.CheckOrReferencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 868, self.RULE_checkOrReferences)
        try:
            self.state = 6882
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,865,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6879
                if not self.serverVersion < 80016:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 80016")
                self.state = 6880
                self.checkConstraint()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6881
                self.references()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK_SYMBOL(self):
            return self.getToken(SQLParser.CHECK_SYMBOL, 0)

        def exprWithParentheses(self):
            return self.getTypedRuleContext(SQLParser.ExprWithParenthesesContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_checkConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckConstraint" ):
                listener.enterCheckConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckConstraint" ):
                listener.exitCheckConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCheckConstraint" ):
                return visitor.visitCheckConstraint(self)
            else:
                return visitor.visitChildren(self)




    def checkConstraint(self):

        localctx = SQLParser.CheckConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 870, self.RULE_checkConstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6884
            self.match(SQLParser.CHECK_SYMBOL)
            self.state = 6885
            self.exprWithParentheses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintEnforcementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENFORCED_SYMBOL(self):
            return self.getToken(SQLParser.ENFORCED_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(SQLParser.NOT_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_constraintEnforcement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintEnforcement" ):
                listener.enterConstraintEnforcement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintEnforcement" ):
                listener.exitConstraintEnforcement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstraintEnforcement" ):
                return visitor.visitConstraintEnforcement(self)
            else:
                return visitor.visitChildren(self)




    def constraintEnforcement(self):

        localctx = SQLParser.ConstraintEnforcementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 872, self.RULE_constraintEnforcement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.NOT_SYMBOL:
                self.state = 6887
                self.match(SQLParser.NOT_SYMBOL)


            self.state = 6890
            self.match(SQLParser.ENFORCED_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableConstraintDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None # Token

        def keyListVariants(self):
            return self.getTypedRuleContext(SQLParser.KeyListVariantsContext,0)


        def KEY_SYMBOL(self):
            return self.getToken(SQLParser.KEY_SYMBOL, 0)

        def INDEX_SYMBOL(self):
            return self.getToken(SQLParser.INDEX_SYMBOL, 0)

        def indexNameAndType(self):
            return self.getTypedRuleContext(SQLParser.IndexNameAndTypeContext,0)


        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.IndexOptionContext,i)


        def FULLTEXT_SYMBOL(self):
            return self.getToken(SQLParser.FULLTEXT_SYMBOL, 0)

        def keyOrIndex(self):
            return self.getTypedRuleContext(SQLParser.KeyOrIndexContext,0)


        def indexName(self):
            return self.getTypedRuleContext(SQLParser.IndexNameContext,0)


        def fulltextIndexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.FulltextIndexOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.FulltextIndexOptionContext,i)


        def SPATIAL_SYMBOL(self):
            return self.getToken(SQLParser.SPATIAL_SYMBOL, 0)

        def spatialIndexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.SpatialIndexOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.SpatialIndexOptionContext,i)


        def keyList(self):
            return self.getTypedRuleContext(SQLParser.KeyListContext,0)


        def references(self):
            return self.getTypedRuleContext(SQLParser.ReferencesContext,0)


        def checkConstraint(self):
            return self.getTypedRuleContext(SQLParser.CheckConstraintContext,0)


        def constraintName(self):
            return self.getTypedRuleContext(SQLParser.ConstraintNameContext,0)


        def FOREIGN_SYMBOL(self):
            return self.getToken(SQLParser.FOREIGN_SYMBOL, 0)

        def PRIMARY_SYMBOL(self):
            return self.getToken(SQLParser.PRIMARY_SYMBOL, 0)

        def UNIQUE_SYMBOL(self):
            return self.getToken(SQLParser.UNIQUE_SYMBOL, 0)

        def constraintEnforcement(self):
            return self.getTypedRuleContext(SQLParser.ConstraintEnforcementContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_tableConstraintDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableConstraintDef" ):
                listener.enterTableConstraintDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableConstraintDef" ):
                listener.exitTableConstraintDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableConstraintDef" ):
                return visitor.visitTableConstraintDef(self)
            else:
                return visitor.visitChildren(self)




    def tableConstraintDef(self):

        localctx = SQLParser.TableConstraintDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 874, self.RULE_tableConstraintDef)
        self._la = 0 # Token type
        try:
            self.state = 6967
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.INDEX_SYMBOL, SQLParser.KEY_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6892
                localctx.type = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLParser.INDEX_SYMBOL or _la==SQLParser.KEY_SYMBOL):
                    localctx.type = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6894
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,867,self._ctx)
                if la_ == 1:
                    self.state = 6893
                    self.indexNameAndType()


                self.state = 6896
                self.keyListVariants()
                self.state = 6900
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,868,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6897
                        self.indexOption() 
                    self.state = 6902
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,868,self._ctx)

                pass
            elif token in [SQLParser.FULLTEXT_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6903
                localctx.type = self.match(SQLParser.FULLTEXT_SYMBOL)
                self.state = 6905
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,869,self._ctx)
                if la_ == 1:
                    self.state = 6904
                    self.keyOrIndex()


                self.state = 6908
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,870,self._ctx)
                if la_ == 1:
                    self.state = 6907
                    self.indexName()


                self.state = 6910
                self.keyListVariants()
                self.state = 6914
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,871,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6911
                        self.fulltextIndexOption() 
                    self.state = 6916
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,871,self._ctx)

                pass
            elif token in [SQLParser.SPATIAL_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6917
                localctx.type = self.match(SQLParser.SPATIAL_SYMBOL)
                self.state = 6919
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,872,self._ctx)
                if la_ == 1:
                    self.state = 6918
                    self.keyOrIndex()


                self.state = 6922
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,873,self._ctx)
                if la_ == 1:
                    self.state = 6921
                    self.indexName()


                self.state = 6924
                self.keyListVariants()
                self.state = 6928
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,874,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6925
                        self.spatialIndexOption() 
                    self.state = 6930
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,874,self._ctx)

                pass
            elif token in [SQLParser.CHECK_SYMBOL, SQLParser.CONSTRAINT_SYMBOL, SQLParser.FOREIGN_SYMBOL, SQLParser.PRIMARY_SYMBOL, SQLParser.UNIQUE_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.CONSTRAINT_SYMBOL:
                    self.state = 6931
                    self.constraintName()


                self.state = 6965
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLParser.PRIMARY_SYMBOL, SQLParser.UNIQUE_SYMBOL]:
                    self.state = 6940
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SQLParser.PRIMARY_SYMBOL]:
                        self.state = 6934
                        localctx.type = self.match(SQLParser.PRIMARY_SYMBOL)
                        self.state = 6935
                        self.match(SQLParser.KEY_SYMBOL)
                        pass
                    elif token in [SQLParser.UNIQUE_SYMBOL]:
                        self.state = 6936
                        localctx.type = self.match(SQLParser.UNIQUE_SYMBOL)
                        self.state = 6938
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,876,self._ctx)
                        if la_ == 1:
                            self.state = 6937
                            self.keyOrIndex()


                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 6943
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,878,self._ctx)
                    if la_ == 1:
                        self.state = 6942
                        self.indexNameAndType()


                    self.state = 6945
                    self.keyListVariants()
                    self.state = 6949
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,879,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 6946
                            self.indexOption() 
                        self.state = 6951
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,879,self._ctx)

                    pass
                elif token in [SQLParser.FOREIGN_SYMBOL]:
                    self.state = 6952
                    localctx.type = self.match(SQLParser.FOREIGN_SYMBOL)
                    self.state = 6953
                    self.match(SQLParser.KEY_SYMBOL)
                    self.state = 6955
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,880,self._ctx)
                    if la_ == 1:
                        self.state = 6954
                        self.indexName()


                    self.state = 6957
                    self.keyList()
                    self.state = 6958
                    self.references()
                    pass
                elif token in [SQLParser.CHECK_SYMBOL]:
                    self.state = 6960
                    self.checkConstraint()
                    self.state = 6963
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,881,self._ctx)
                    if la_ == 1:
                        self.state = 6961
                        if not self.serverVersion >= 80017:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.serverVersion >= 80017")
                        self.state = 6962
                        self.constraintEnforcement()


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRAINT_SYMBOL(self):
            return self.getToken(SQLParser.CONSTRAINT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_constraintName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintName" ):
                listener.enterConstraintName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintName" ):
                listener.exitConstraintName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstraintName" ):
                return visitor.visitConstraintName(self)
            else:
                return visitor.visitChildren(self)




    def constraintName(self):

        localctx = SQLParser.ConstraintNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 876, self.RULE_constraintName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6969
            self.match(SQLParser.CONSTRAINT_SYMBOL)
            self.state = 6971
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,884,self._ctx)
            if la_ == 1:
                self.state = 6970
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(SQLParser.DataTypeContext,0)


        def AS_SYMBOL(self):
            return self.getToken(SQLParser.AS_SYMBOL, 0)

        def exprWithParentheses(self):
            return self.getTypedRuleContext(SQLParser.ExprWithParenthesesContext,0)


        def columnAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ColumnAttributeContext)
            else:
                return self.getTypedRuleContext(SQLParser.ColumnAttributeContext,i)


        def collate(self):
            return self.getTypedRuleContext(SQLParser.CollateContext,0)


        def GENERATED_SYMBOL(self):
            return self.getToken(SQLParser.GENERATED_SYMBOL, 0)

        def ALWAYS_SYMBOL(self):
            return self.getToken(SQLParser.ALWAYS_SYMBOL, 0)

        def VIRTUAL_SYMBOL(self):
            return self.getToken(SQLParser.VIRTUAL_SYMBOL, 0)

        def STORED_SYMBOL(self):
            return self.getToken(SQLParser.STORED_SYMBOL, 0)

        def gcolAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.GcolAttributeContext)
            else:
                return self.getTypedRuleContext(SQLParser.GcolAttributeContext,i)


        def getRuleIndex(self):
            return SQLParser.RULE_fieldDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDefinition" ):
                listener.enterFieldDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDefinition" ):
                listener.exitFieldDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldDefinition" ):
                return visitor.visitFieldDefinition(self)
            else:
                return visitor.visitChildren(self)




    def fieldDefinition(self):

        localctx = SQLParser.FieldDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 878, self.RULE_fieldDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6973
            self.dataType()
            self.state = 7009
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,892,self._ctx)
            if la_ == 1:
                self.state = 6977
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,885,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6974
                        self.columnAttribute() 
                    self.state = 6979
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,885,self._ctx)

                pass

            elif la_ == 2:
                self.state = 6980
                if not self.serverVersion >= 50707:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50707")
                self.state = 6982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.COLLATE_SYMBOL:
                    self.state = 6981
                    self.collate()


                self.state = 6986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.GENERATED_SYMBOL:
                    self.state = 6984
                    self.match(SQLParser.GENERATED_SYMBOL)
                    self.state = 6985
                    self.match(SQLParser.ALWAYS_SYMBOL)


                self.state = 6988
                self.match(SQLParser.AS_SYMBOL)
                self.state = 6989
                self.exprWithParentheses()
                self.state = 6991
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,888,self._ctx)
                if la_ == 1:
                    self.state = 6990
                    _la = self._input.LA(1)
                    if not(_la==SQLParser.STORED_SYMBOL or _la==SQLParser.VIRTUAL_SYMBOL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 7007
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,891,self._ctx)
                if la_ == 1:
                    self.state = 6993
                    if not self.serverVersion < 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion < 80000")
                    self.state = 6997
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,889,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 6994
                            self.gcolAttribute() 
                        self.state = 6999
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,889,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 7000
                    if not self.serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80000")
                    self.state = 7004
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,890,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 7001
                            self.columnAttribute() 
                        self.state = 7006
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,890,self._ctx)

                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # Token

        def nullLiteral(self):
            return self.getTypedRuleContext(SQLParser.NullLiteralContext,0)


        def NOT_SYMBOL(self):
            return self.getToken(SQLParser.NOT_SYMBOL, 0)

        def SECONDARY_SYMBOL(self):
            return self.getToken(SQLParser.SECONDARY_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(SQLParser.DEFAULT_SYMBOL, 0)

        def signedLiteral(self):
            return self.getTypedRuleContext(SQLParser.SignedLiteralContext,0)


        def NOW_SYMBOL(self):
            return self.getToken(SQLParser.NOW_SYMBOL, 0)

        def exprWithParentheses(self):
            return self.getTypedRuleContext(SQLParser.ExprWithParenthesesContext,0)


        def timeFunctionParameters(self):
            return self.getTypedRuleContext(SQLParser.TimeFunctionParametersContext,0)


        def UPDATE_SYMBOL(self):
            return self.getToken(SQLParser.UPDATE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(SQLParser.ON_SYMBOL, 0)

        def AUTO_INCREMENT_SYMBOL(self):
            return self.getToken(SQLParser.AUTO_INCREMENT_SYMBOL, 0)

        def VALUE_SYMBOL(self):
            return self.getToken(SQLParser.VALUE_SYMBOL, 0)

        def SERIAL_SYMBOL(self):
            return self.getToken(SQLParser.SERIAL_SYMBOL, 0)

        def KEY_SYMBOL(self):
            return self.getToken(SQLParser.KEY_SYMBOL, 0)

        def PRIMARY_SYMBOL(self):
            return self.getToken(SQLParser.PRIMARY_SYMBOL, 0)

        def UNIQUE_SYMBOL(self):
            return self.getToken(SQLParser.UNIQUE_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextLiteralContext,0)


        def COMMENT_SYMBOL(self):
            return self.getToken(SQLParser.COMMENT_SYMBOL, 0)

        def collate(self):
            return self.getTypedRuleContext(SQLParser.CollateContext,0)


        def columnFormat(self):
            return self.getTypedRuleContext(SQLParser.ColumnFormatContext,0)


        def COLUMN_FORMAT_SYMBOL(self):
            return self.getToken(SQLParser.COLUMN_FORMAT_SYMBOL, 0)

        def storageMedia(self):
            return self.getTypedRuleContext(SQLParser.StorageMediaContext,0)


        def STORAGE_SYMBOL(self):
            return self.getToken(SQLParser.STORAGE_SYMBOL, 0)

        def real_ulonglong_number(self):
            return self.getTypedRuleContext(SQLParser.Real_ulonglong_numberContext,0)


        def SRID_SYMBOL(self):
            return self.getToken(SQLParser.SRID_SYMBOL, 0)

        def checkConstraint(self):
            return self.getTypedRuleContext(SQLParser.CheckConstraintContext,0)


        def constraintName(self):
            return self.getTypedRuleContext(SQLParser.ConstraintNameContext,0)


        def constraintEnforcement(self):
            return self.getTypedRuleContext(SQLParser.ConstraintEnforcementContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_columnAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnAttribute" ):
                listener.enterColumnAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnAttribute" ):
                listener.exitColumnAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnAttribute" ):
                return visitor.visitColumnAttribute(self)
            else:
                return visitor.visitChildren(self)




    def columnAttribute(self):

        localctx = SQLParser.ColumnAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 880, self.RULE_columnAttribute)
        self._la = 0 # Token type
        try:
            self.state = 7063
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,900,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.NOT_SYMBOL:
                    self.state = 7011
                    self.match(SQLParser.NOT_SYMBOL)


                self.state = 7014
                self.nullLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7015
                if not self.serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80014")
                self.state = 7016
                self.match(SQLParser.NOT_SYMBOL)
                self.state = 7017
                self.match(SQLParser.SECONDARY_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7018
                localctx.value = self.match(SQLParser.DEFAULT_SYMBOL)
                self.state = 7026
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,895,self._ctx)
                if la_ == 1:
                    self.state = 7019
                    self.signedLiteral()
                    pass

                elif la_ == 2:
                    self.state = 7020
                    self.match(SQLParser.NOW_SYMBOL)
                    self.state = 7022
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,894,self._ctx)
                    if la_ == 1:
                        self.state = 7021
                        self.timeFunctionParameters()


                    pass

                elif la_ == 3:
                    self.state = 7024
                    if not self.serverVersion >= 80013:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80013")
                    self.state = 7025
                    self.exprWithParentheses()
                    pass


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7028
                localctx.value = self.match(SQLParser.ON_SYMBOL)
                self.state = 7029
                self.match(SQLParser.UPDATE_SYMBOL)
                self.state = 7030
                self.match(SQLParser.NOW_SYMBOL)
                self.state = 7032
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,896,self._ctx)
                if la_ == 1:
                    self.state = 7031
                    self.timeFunctionParameters()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7034
                localctx.value = self.match(SQLParser.AUTO_INCREMENT_SYMBOL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7035
                localctx.value = self.match(SQLParser.SERIAL_SYMBOL)
                self.state = 7036
                self.match(SQLParser.DEFAULT_SYMBOL)
                self.state = 7037
                self.match(SQLParser.VALUE_SYMBOL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7039
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.PRIMARY_SYMBOL:
                    self.state = 7038
                    self.match(SQLParser.PRIMARY_SYMBOL)


                self.state = 7041
                localctx.value = self.match(SQLParser.KEY_SYMBOL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 7042
                localctx.value = self.match(SQLParser.UNIQUE_SYMBOL)
                self.state = 7044
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,898,self._ctx)
                if la_ == 1:
                    self.state = 7043
                    self.match(SQLParser.KEY_SYMBOL)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 7046
                localctx.value = self.match(SQLParser.COMMENT_SYMBOL)
                self.state = 7047
                self.textLiteral()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 7048
                self.collate()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 7049
                localctx.value = self.match(SQLParser.COLUMN_FORMAT_SYMBOL)
                self.state = 7050
                self.columnFormat()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 7051
                localctx.value = self.match(SQLParser.STORAGE_SYMBOL)
                self.state = 7052
                self.storageMedia()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 7053
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 7054
                localctx.value = self.match(SQLParser.SRID_SYMBOL)
                self.state = 7055
                self.real_ulonglong_number()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 7056
                if not self.serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80017")
                self.state = 7058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.CONSTRAINT_SYMBOL:
                    self.state = 7057
                    self.constraintName()


                self.state = 7060
                self.checkConstraint()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 7061
                if not self.serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80017")
                self.state = 7062
                self.constraintEnforcement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIXED_SYMBOL(self):
            return self.getToken(SQLParser.FIXED_SYMBOL, 0)

        def DYNAMIC_SYMBOL(self):
            return self.getToken(SQLParser.DYNAMIC_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(SQLParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_columnFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnFormat" ):
                listener.enterColumnFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnFormat" ):
                listener.exitColumnFormat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnFormat" ):
                return visitor.visitColumnFormat(self)
            else:
                return visitor.visitChildren(self)




    def columnFormat(self):

        localctx = SQLParser.ColumnFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 882, self.RULE_columnFormat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7065
            _la = self._input.LA(1)
            if not(_la==SQLParser.DEFAULT_SYMBOL or _la==SQLParser.DYNAMIC_SYMBOL or _la==SQLParser.FIXED_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageMediaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISK_SYMBOL(self):
            return self.getToken(SQLParser.DISK_SYMBOL, 0)

        def MEMORY_SYMBOL(self):
            return self.getToken(SQLParser.MEMORY_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(SQLParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_storageMedia

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageMedia" ):
                listener.enterStorageMedia(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageMedia" ):
                listener.exitStorageMedia(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageMedia" ):
                return visitor.visitStorageMedia(self)
            else:
                return visitor.visitChildren(self)




    def storageMedia(self):

        localctx = SQLParser.StorageMediaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 884, self.RULE_storageMedia)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7067
            _la = self._input.LA(1)
            if not(_la==SQLParser.DEFAULT_SYMBOL or _la==SQLParser.DISK_SYMBOL or _la==SQLParser.MEMORY_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GcolAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNIQUE_SYMBOL(self):
            return self.getToken(SQLParser.UNIQUE_SYMBOL, 0)

        def KEY_SYMBOL(self):
            return self.getToken(SQLParser.KEY_SYMBOL, 0)

        def COMMENT_SYMBOL(self):
            return self.getToken(SQLParser.COMMENT_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(SQLParser.TextStringContext,0)


        def NULL_SYMBOL(self):
            return self.getToken(SQLParser.NULL_SYMBOL, 0)

        def notRule(self):
            return self.getTypedRuleContext(SQLParser.NotRuleContext,0)


        def PRIMARY_SYMBOL(self):
            return self.getToken(SQLParser.PRIMARY_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_gcolAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGcolAttribute" ):
                listener.enterGcolAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGcolAttribute" ):
                listener.exitGcolAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGcolAttribute" ):
                return visitor.visitGcolAttribute(self)
            else:
                return visitor.visitChildren(self)




    def gcolAttribute(self):

        localctx = SQLParser.GcolAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 886, self.RULE_gcolAttribute)
        self._la = 0 # Token type
        try:
            self.state = 7083
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.UNIQUE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7069
                self.match(SQLParser.UNIQUE_SYMBOL)
                self.state = 7071
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,901,self._ctx)
                if la_ == 1:
                    self.state = 7070
                    self.match(SQLParser.KEY_SYMBOL)


                pass
            elif token in [SQLParser.COMMENT_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7073
                self.match(SQLParser.COMMENT_SYMBOL)
                self.state = 7074
                self.textString()
                pass
            elif token in [SQLParser.NOT_SYMBOL, SQLParser.NULL_SYMBOL, SQLParser.NOT2_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7076
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.NOT_SYMBOL or _la==SQLParser.NOT2_SYMBOL:
                    self.state = 7075
                    self.notRule()


                self.state = 7078
                self.match(SQLParser.NULL_SYMBOL)
                pass
            elif token in [SQLParser.KEY_SYMBOL, SQLParser.PRIMARY_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.PRIMARY_SYMBOL:
                    self.state = 7079
                    self.match(SQLParser.PRIMARY_SYMBOL)


                self.state = 7082
                self.match(SQLParser.KEY_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferencesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.match = None # Token
            self.option = None # Token

        def REFERENCES_SYMBOL(self):
            return self.getToken(SQLParser.REFERENCES_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(SQLParser.TableRefContext,0)


        def identifierListWithParentheses(self):
            return self.getTypedRuleContext(SQLParser.IdentifierListWithParenthesesContext,0)


        def MATCH_SYMBOL(self):
            return self.getToken(SQLParser.MATCH_SYMBOL, 0)

        def ON_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.ON_SYMBOL)
            else:
                return self.getToken(SQLParser.ON_SYMBOL, i)

        def deleteOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.DeleteOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.DeleteOptionContext,i)


        def UPDATE_SYMBOL(self):
            return self.getToken(SQLParser.UPDATE_SYMBOL, 0)

        def DELETE_SYMBOL(self):
            return self.getToken(SQLParser.DELETE_SYMBOL, 0)

        def FULL_SYMBOL(self):
            return self.getToken(SQLParser.FULL_SYMBOL, 0)

        def PARTIAL_SYMBOL(self):
            return self.getToken(SQLParser.PARTIAL_SYMBOL, 0)

        def SIMPLE_SYMBOL(self):
            return self.getToken(SQLParser.SIMPLE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_references

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferences" ):
                listener.enterReferences(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferences" ):
                listener.exitReferences(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferences" ):
                return visitor.visitReferences(self)
            else:
                return visitor.visitChildren(self)




    def references(self):

        localctx = SQLParser.ReferencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 888, self.RULE_references)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7085
            self.match(SQLParser.REFERENCES_SYMBOL)
            self.state = 7086
            self.tableRef()
            self.state = 7088
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.OPEN_PAR_SYMBOL:
                self.state = 7087
                self.identifierListWithParentheses()


            self.state = 7092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.MATCH_SYMBOL:
                self.state = 7090
                self.match(SQLParser.MATCH_SYMBOL)
                self.state = 7091
                localctx.match = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLParser.FULL_SYMBOL or _la==SQLParser.PARTIAL_SYMBOL or _la==SQLParser.SIMPLE_SYMBOL):
                    localctx.match = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 7110
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,909,self._ctx)
            if la_ == 1:
                self.state = 7094
                self.match(SQLParser.ON_SYMBOL)
                self.state = 7095
                localctx.option = self.match(SQLParser.UPDATE_SYMBOL)
                self.state = 7096
                self.deleteOption()
                self.state = 7100
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.ON_SYMBOL:
                    self.state = 7097
                    self.match(SQLParser.ON_SYMBOL)
                    self.state = 7098
                    self.match(SQLParser.DELETE_SYMBOL)
                    self.state = 7099
                    self.deleteOption()



            elif la_ == 2:
                self.state = 7102
                self.match(SQLParser.ON_SYMBOL)
                self.state = 7103
                localctx.option = self.match(SQLParser.DELETE_SYMBOL)
                self.state = 7104
                self.deleteOption()
                self.state = 7108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.ON_SYMBOL:
                    self.state = 7105
                    self.match(SQLParser.ON_SYMBOL)
                    self.state = 7106
                    self.match(SQLParser.UPDATE_SYMBOL)
                    self.state = 7107
                    self.deleteOption()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESTRICT_SYMBOL(self):
            return self.getToken(SQLParser.RESTRICT_SYMBOL, 0)

        def CASCADE_SYMBOL(self):
            return self.getToken(SQLParser.CASCADE_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(SQLParser.SET_SYMBOL, 0)

        def nullLiteral(self):
            return self.getTypedRuleContext(SQLParser.NullLiteralContext,0)


        def NO_SYMBOL(self):
            return self.getToken(SQLParser.NO_SYMBOL, 0)

        def ACTION_SYMBOL(self):
            return self.getToken(SQLParser.ACTION_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_deleteOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteOption" ):
                listener.enterDeleteOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteOption" ):
                listener.exitDeleteOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteOption" ):
                return visitor.visitDeleteOption(self)
            else:
                return visitor.visitChildren(self)




    def deleteOption(self):

        localctx = SQLParser.DeleteOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 890, self.RULE_deleteOption)
        self._la = 0 # Token type
        try:
            self.state = 7117
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.CASCADE_SYMBOL, SQLParser.RESTRICT_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7112
                _la = self._input.LA(1)
                if not(_la==SQLParser.CASCADE_SYMBOL or _la==SQLParser.RESTRICT_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [SQLParser.SET_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7113
                self.match(SQLParser.SET_SYMBOL)
                self.state = 7114
                self.nullLiteral()
                pass
            elif token in [SQLParser.NO_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7115
                self.match(SQLParser.NO_SYMBOL)
                self.state = 7116
                self.match(SQLParser.ACTION_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def keyPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.KeyPartContext)
            else:
                return self.getTypedRuleContext(SQLParser.KeyPartContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_keyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyList" ):
                listener.enterKeyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyList" ):
                listener.exitKeyList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyList" ):
                return visitor.visitKeyList(self)
            else:
                return visitor.visitChildren(self)




    def keyList(self):

        localctx = SQLParser.KeyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 892, self.RULE_keyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7119
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 7120
            self.keyPart()
            self.state = 7125
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 7121
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 7122
                self.keyPart()
                self.state = 7127
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7128
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def fieldLength(self):
            return self.getTypedRuleContext(SQLParser.FieldLengthContext,0)


        def direction(self):
            return self.getTypedRuleContext(SQLParser.DirectionContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_keyPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyPart" ):
                listener.enterKeyPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyPart" ):
                listener.exitKeyPart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyPart" ):
                return visitor.visitKeyPart(self)
            else:
                return visitor.visitChildren(self)




    def keyPart(self):

        localctx = SQLParser.KeyPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 894, self.RULE_keyPart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7130
            self.identifier()
            self.state = 7132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.OPEN_PAR_SYMBOL:
                self.state = 7131
                self.fieldLength()


            self.state = 7135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.ASC_SYMBOL or _la==SQLParser.DESC_SYMBOL:
                self.state = 7134
                self.direction()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyListWithExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def keyPartOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.KeyPartOrExpressionContext)
            else:
                return self.getTypedRuleContext(SQLParser.KeyPartOrExpressionContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_keyListWithExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyListWithExpression" ):
                listener.enterKeyListWithExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyListWithExpression" ):
                listener.exitKeyListWithExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyListWithExpression" ):
                return visitor.visitKeyListWithExpression(self)
            else:
                return visitor.visitChildren(self)




    def keyListWithExpression(self):

        localctx = SQLParser.KeyListWithExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 896, self.RULE_keyListWithExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7137
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 7138
            self.keyPartOrExpression()
            self.state = 7143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 7139
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 7140
                self.keyPartOrExpression()
                self.state = 7145
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7146
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyPartOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyPart(self):
            return self.getTypedRuleContext(SQLParser.KeyPartContext,0)


        def exprWithParentheses(self):
            return self.getTypedRuleContext(SQLParser.ExprWithParenthesesContext,0)


        def direction(self):
            return self.getTypedRuleContext(SQLParser.DirectionContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_keyPartOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyPartOrExpression" ):
                listener.enterKeyPartOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyPartOrExpression" ):
                listener.exitKeyPartOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyPartOrExpression" ):
                return visitor.visitKeyPartOrExpression(self)
            else:
                return visitor.visitChildren(self)




    def keyPartOrExpression(self):

        localctx = SQLParser.KeyPartOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 898, self.RULE_keyPartOrExpression)
        self._la = 0 # Token type
        try:
            self.state = 7153
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,916,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7148
                self.keyPart()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7149
                self.exprWithParentheses()
                self.state = 7151
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.ASC_SYMBOL or _la==SQLParser.DESC_SYMBOL:
                    self.state = 7150
                    self.direction()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyListVariantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyListWithExpression(self):
            return self.getTypedRuleContext(SQLParser.KeyListWithExpressionContext,0)


        def keyList(self):
            return self.getTypedRuleContext(SQLParser.KeyListContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_keyListVariants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyListVariants" ):
                listener.enterKeyListVariants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyListVariants" ):
                listener.exitKeyListVariants(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyListVariants" ):
                return visitor.visitKeyListVariants(self)
            else:
                return visitor.visitChildren(self)




    def keyListVariants(self):

        localctx = SQLParser.KeyListVariantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 900, self.RULE_keyListVariants)
        try:
            self.state = 7159
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,917,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7155
                if not self.serverVersion >= 80013:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80013")
                self.state = 7156
                self.keyListWithExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7157
                if not self.serverVersion < 80013:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 80013")
                self.state = 7158
                self.keyList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.algorithm = None # Token

        def BTREE_SYMBOL(self):
            return self.getToken(SQLParser.BTREE_SYMBOL, 0)

        def RTREE_SYMBOL(self):
            return self.getToken(SQLParser.RTREE_SYMBOL, 0)

        def HASH_SYMBOL(self):
            return self.getToken(SQLParser.HASH_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_indexType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexType" ):
                listener.enterIndexType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexType" ):
                listener.exitIndexType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexType" ):
                return visitor.visitIndexType(self)
            else:
                return visitor.visitChildren(self)




    def indexType(self):

        localctx = SQLParser.IndexTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 902, self.RULE_indexType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7161
            localctx.algorithm = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==SQLParser.BTREE_SYMBOL or _la==SQLParser.HASH_SYMBOL or _la==SQLParser.RTREE_SYMBOL):
                localctx.algorithm = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commonIndexOption(self):
            return self.getTypedRuleContext(SQLParser.CommonIndexOptionContext,0)


        def indexTypeClause(self):
            return self.getTypedRuleContext(SQLParser.IndexTypeClauseContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_indexOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexOption" ):
                listener.enterIndexOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexOption" ):
                listener.exitIndexOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexOption" ):
                return visitor.visitIndexOption(self)
            else:
                return visitor.visitChildren(self)




    def indexOption(self):

        localctx = SQLParser.IndexOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 904, self.RULE_indexOption)
        try:
            self.state = 7165
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,918,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7163
                self.commonIndexOption()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7164
                self.indexTypeClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommonIndexOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEY_BLOCK_SIZE_SYMBOL(self):
            return self.getToken(SQLParser.KEY_BLOCK_SIZE_SYMBOL, 0)

        def ulong_number(self):
            return self.getTypedRuleContext(SQLParser.Ulong_numberContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def COMMENT_SYMBOL(self):
            return self.getToken(SQLParser.COMMENT_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextLiteralContext,0)


        def visibility(self):
            return self.getTypedRuleContext(SQLParser.VisibilityContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_commonIndexOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommonIndexOption" ):
                listener.enterCommonIndexOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommonIndexOption" ):
                listener.exitCommonIndexOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommonIndexOption" ):
                return visitor.visitCommonIndexOption(self)
            else:
                return visitor.visitChildren(self)




    def commonIndexOption(self):

        localctx = SQLParser.CommonIndexOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 906, self.RULE_commonIndexOption)
        self._la = 0 # Token type
        try:
            self.state = 7176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,920,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7167
                self.match(SQLParser.KEY_BLOCK_SIZE_SYMBOL)
                self.state = 7169
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.EQUAL_OPERATOR:
                    self.state = 7168
                    self.match(SQLParser.EQUAL_OPERATOR)


                self.state = 7171
                self.ulong_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7172
                self.match(SQLParser.COMMENT_SYMBOL)
                self.state = 7173
                self.textLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7174
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 7175
                self.visibility()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VISIBLE_SYMBOL(self):
            return self.getToken(SQLParser.VISIBLE_SYMBOL, 0)

        def INVISIBLE_SYMBOL(self):
            return self.getToken(SQLParser.INVISIBLE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibility" ):
                return visitor.visitVisibility(self)
            else:
                return visitor.visitChildren(self)




    def visibility(self):

        localctx = SQLParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 908, self.RULE_visibility)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7178
            _la = self._input.LA(1)
            if not(_la==SQLParser.INVISIBLE_SYMBOL or _la==SQLParser.VISIBLE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexTypeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexType(self):
            return self.getTypedRuleContext(SQLParser.IndexTypeContext,0)


        def USING_SYMBOL(self):
            return self.getToken(SQLParser.USING_SYMBOL, 0)

        def TYPE_SYMBOL(self):
            return self.getToken(SQLParser.TYPE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_indexTypeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexTypeClause" ):
                listener.enterIndexTypeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexTypeClause" ):
                listener.exitIndexTypeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexTypeClause" ):
                return visitor.visitIndexTypeClause(self)
            else:
                return visitor.visitChildren(self)




    def indexTypeClause(self):

        localctx = SQLParser.IndexTypeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 910, self.RULE_indexTypeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7180
            _la = self._input.LA(1)
            if not(_la==SQLParser.TYPE_SYMBOL or _la==SQLParser.USING_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7181
            self.indexType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FulltextIndexOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commonIndexOption(self):
            return self.getTypedRuleContext(SQLParser.CommonIndexOptionContext,0)


        def WITH_SYMBOL(self):
            return self.getToken(SQLParser.WITH_SYMBOL, 0)

        def PARSER_SYMBOL(self):
            return self.getToken(SQLParser.PARSER_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_fulltextIndexOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFulltextIndexOption" ):
                listener.enterFulltextIndexOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFulltextIndexOption" ):
                listener.exitFulltextIndexOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFulltextIndexOption" ):
                return visitor.visitFulltextIndexOption(self)
            else:
                return visitor.visitChildren(self)




    def fulltextIndexOption(self):

        localctx = SQLParser.FulltextIndexOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 912, self.RULE_fulltextIndexOption)
        try:
            self.state = 7187
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,921,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7183
                self.commonIndexOption()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7184
                self.match(SQLParser.WITH_SYMBOL)
                self.state = 7185
                self.match(SQLParser.PARSER_SYMBOL)
                self.state = 7186
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpatialIndexOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commonIndexOption(self):
            return self.getTypedRuleContext(SQLParser.CommonIndexOptionContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_spatialIndexOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpatialIndexOption" ):
                listener.enterSpatialIndexOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpatialIndexOption" ):
                listener.exitSpatialIndexOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpatialIndexOption" ):
                return visitor.visitSpatialIndexOption(self)
            else:
                return visitor.visitChildren(self)




    def spatialIndexOption(self):

        localctx = SQLParser.SpatialIndexOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 914, self.RULE_spatialIndexOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7189
            self.commonIndexOption()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(SQLParser.DataTypeContext,0)


        def EOF(self):
            return self.getToken(SQLParser.EOF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_dataTypeDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTypeDefinition" ):
                listener.enterDataTypeDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTypeDefinition" ):
                listener.exitDataTypeDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataTypeDefinition" ):
                return visitor.visitDataTypeDefinition(self)
            else:
                return visitor.visitChildren(self)




    def dataTypeDefinition(self):

        localctx = SQLParser.DataTypeDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 916, self.RULE_dataTypeDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7191
            self.dataType()
            self.state = 7192
            self.match(SQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None # Token

        def INT_SYMBOL(self):
            return self.getToken(SQLParser.INT_SYMBOL, 0)

        def TINYINT_SYMBOL(self):
            return self.getToken(SQLParser.TINYINT_SYMBOL, 0)

        def SMALLINT_SYMBOL(self):
            return self.getToken(SQLParser.SMALLINT_SYMBOL, 0)

        def MEDIUMINT_SYMBOL(self):
            return self.getToken(SQLParser.MEDIUMINT_SYMBOL, 0)

        def BIGINT_SYMBOL(self):
            return self.getToken(SQLParser.BIGINT_SYMBOL, 0)

        def fieldLength(self):
            return self.getTypedRuleContext(SQLParser.FieldLengthContext,0)


        def fieldOptions(self):
            return self.getTypedRuleContext(SQLParser.FieldOptionsContext,0)


        def REAL_SYMBOL(self):
            return self.getToken(SQLParser.REAL_SYMBOL, 0)

        def DOUBLE_SYMBOL(self):
            return self.getToken(SQLParser.DOUBLE_SYMBOL, 0)

        def precision(self):
            return self.getTypedRuleContext(SQLParser.PrecisionContext,0)


        def PRECISION_SYMBOL(self):
            return self.getToken(SQLParser.PRECISION_SYMBOL, 0)

        def FLOAT_SYMBOL(self):
            return self.getToken(SQLParser.FLOAT_SYMBOL, 0)

        def DECIMAL_SYMBOL(self):
            return self.getToken(SQLParser.DECIMAL_SYMBOL, 0)

        def NUMERIC_SYMBOL(self):
            return self.getToken(SQLParser.NUMERIC_SYMBOL, 0)

        def FIXED_SYMBOL(self):
            return self.getToken(SQLParser.FIXED_SYMBOL, 0)

        def floatOptions(self):
            return self.getTypedRuleContext(SQLParser.FloatOptionsContext,0)


        def BIT_SYMBOL(self):
            return self.getToken(SQLParser.BIT_SYMBOL, 0)

        def BOOL_SYMBOL(self):
            return self.getToken(SQLParser.BOOL_SYMBOL, 0)

        def BOOLEAN_SYMBOL(self):
            return self.getToken(SQLParser.BOOLEAN_SYMBOL, 0)

        def CHAR_SYMBOL(self):
            return self.getToken(SQLParser.CHAR_SYMBOL, 0)

        def charsetWithOptBinary(self):
            return self.getTypedRuleContext(SQLParser.CharsetWithOptBinaryContext,0)


        def nchar(self):
            return self.getTypedRuleContext(SQLParser.NcharContext,0)


        def BINARY_SYMBOL(self):
            return self.getToken(SQLParser.BINARY_SYMBOL, 0)

        def VARYING_SYMBOL(self):
            return self.getToken(SQLParser.VARYING_SYMBOL, 0)

        def VARCHAR_SYMBOL(self):
            return self.getToken(SQLParser.VARCHAR_SYMBOL, 0)

        def NATIONAL_SYMBOL(self):
            return self.getToken(SQLParser.NATIONAL_SYMBOL, 0)

        def NVARCHAR_SYMBOL(self):
            return self.getToken(SQLParser.NVARCHAR_SYMBOL, 0)

        def NCHAR_SYMBOL(self):
            return self.getToken(SQLParser.NCHAR_SYMBOL, 0)

        def VARBINARY_SYMBOL(self):
            return self.getToken(SQLParser.VARBINARY_SYMBOL, 0)

        def YEAR_SYMBOL(self):
            return self.getToken(SQLParser.YEAR_SYMBOL, 0)

        def DATE_SYMBOL(self):
            return self.getToken(SQLParser.DATE_SYMBOL, 0)

        def TIME_SYMBOL(self):
            return self.getToken(SQLParser.TIME_SYMBOL, 0)

        def typeDatetimePrecision(self):
            return self.getTypedRuleContext(SQLParser.TypeDatetimePrecisionContext,0)


        def TIMESTAMP_SYMBOL(self):
            return self.getToken(SQLParser.TIMESTAMP_SYMBOL, 0)

        def DATETIME_SYMBOL(self):
            return self.getToken(SQLParser.DATETIME_SYMBOL, 0)

        def TINYBLOB_SYMBOL(self):
            return self.getToken(SQLParser.TINYBLOB_SYMBOL, 0)

        def BLOB_SYMBOL(self):
            return self.getToken(SQLParser.BLOB_SYMBOL, 0)

        def MEDIUMBLOB_SYMBOL(self):
            return self.getToken(SQLParser.MEDIUMBLOB_SYMBOL, 0)

        def LONGBLOB_SYMBOL(self):
            return self.getToken(SQLParser.LONGBLOB_SYMBOL, 0)

        def LONG_SYMBOL(self):
            return self.getToken(SQLParser.LONG_SYMBOL, 0)

        def TINYTEXT_SYMBOL(self):
            return self.getToken(SQLParser.TINYTEXT_SYMBOL, 0)

        def TEXT_SYMBOL(self):
            return self.getToken(SQLParser.TEXT_SYMBOL, 0)

        def MEDIUMTEXT_SYMBOL(self):
            return self.getToken(SQLParser.MEDIUMTEXT_SYMBOL, 0)

        def LONGTEXT_SYMBOL(self):
            return self.getToken(SQLParser.LONGTEXT_SYMBOL, 0)

        def stringList(self):
            return self.getTypedRuleContext(SQLParser.StringListContext,0)


        def ENUM_SYMBOL(self):
            return self.getToken(SQLParser.ENUM_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(SQLParser.SET_SYMBOL, 0)

        def SERIAL_SYMBOL(self):
            return self.getToken(SQLParser.SERIAL_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(SQLParser.JSON_SYMBOL, 0)

        def GEOMETRY_SYMBOL(self):
            return self.getToken(SQLParser.GEOMETRY_SYMBOL, 0)

        def GEOMETRYCOLLECTION_SYMBOL(self):
            return self.getToken(SQLParser.GEOMETRYCOLLECTION_SYMBOL, 0)

        def POINT_SYMBOL(self):
            return self.getToken(SQLParser.POINT_SYMBOL, 0)

        def MULTIPOINT_SYMBOL(self):
            return self.getToken(SQLParser.MULTIPOINT_SYMBOL, 0)

        def LINESTRING_SYMBOL(self):
            return self.getToken(SQLParser.LINESTRING_SYMBOL, 0)

        def MULTILINESTRING_SYMBOL(self):
            return self.getToken(SQLParser.MULTILINESTRING_SYMBOL, 0)

        def POLYGON_SYMBOL(self):
            return self.getToken(SQLParser.POLYGON_SYMBOL, 0)

        def MULTIPOLYGON_SYMBOL(self):
            return self.getToken(SQLParser.MULTIPOLYGON_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_dataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataType" ):
                listener.enterDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataType" ):
                listener.exitDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataType" ):
                return visitor.visitDataType(self)
            else:
                return visitor.visitChildren(self)




    def dataType(self):

        localctx = SQLParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 918, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 7341
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,955,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7194
                localctx.type = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLParser.BIGINT_SYMBOL or _la==SQLParser.INT_SYMBOL or _la==SQLParser.MEDIUMINT_SYMBOL or _la==SQLParser.SMALLINT_SYMBOL or _la==SQLParser.TINYINT_SYMBOL):
                    localctx.type = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7196
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,922,self._ctx)
                if la_ == 1:
                    self.state = 7195
                    self.fieldLength()


                self.state = 7199
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,923,self._ctx)
                if la_ == 1:
                    self.state = 7198
                    self.fieldOptions()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7206
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLParser.REAL_SYMBOL]:
                    self.state = 7201
                    localctx.type = self.match(SQLParser.REAL_SYMBOL)
                    pass
                elif token in [SQLParser.DOUBLE_SYMBOL]:
                    self.state = 7202
                    localctx.type = self.match(SQLParser.DOUBLE_SYMBOL)
                    self.state = 7204
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,924,self._ctx)
                    if la_ == 1:
                        self.state = 7203
                        self.match(SQLParser.PRECISION_SYMBOL)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 7209
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,926,self._ctx)
                if la_ == 1:
                    self.state = 7208
                    self.precision()


                self.state = 7212
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,927,self._ctx)
                if la_ == 1:
                    self.state = 7211
                    self.fieldOptions()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7214
                localctx.type = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLParser.DECIMAL_SYMBOL or _la==SQLParser.FIXED_SYMBOL or _la==SQLParser.FLOAT_SYMBOL or _la==SQLParser.NUMERIC_SYMBOL):
                    localctx.type = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7216
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,928,self._ctx)
                if la_ == 1:
                    self.state = 7215
                    self.floatOptions()


                self.state = 7219
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,929,self._ctx)
                if la_ == 1:
                    self.state = 7218
                    self.fieldOptions()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7221
                localctx.type = self.match(SQLParser.BIT_SYMBOL)
                self.state = 7223
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,930,self._ctx)
                if la_ == 1:
                    self.state = 7222
                    self.fieldLength()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7225
                localctx.type = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLParser.BOOLEAN_SYMBOL or _la==SQLParser.BOOL_SYMBOL):
                    localctx.type = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7226
                localctx.type = self.match(SQLParser.CHAR_SYMBOL)
                self.state = 7228
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,931,self._ctx)
                if la_ == 1:
                    self.state = 7227
                    self.fieldLength()


                self.state = 7231
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,932,self._ctx)
                if la_ == 1:
                    self.state = 7230
                    self.charsetWithOptBinary()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7233
                self.nchar()
                self.state = 7235
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,933,self._ctx)
                if la_ == 1:
                    self.state = 7234
                    self.fieldLength()


                self.state = 7238
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,934,self._ctx)
                if la_ == 1:
                    self.state = 7237
                    self.match(SQLParser.BINARY_SYMBOL)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 7240
                localctx.type = self.match(SQLParser.BINARY_SYMBOL)
                self.state = 7242
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,935,self._ctx)
                if la_ == 1:
                    self.state = 7241
                    self.fieldLength()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 7247
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLParser.CHAR_SYMBOL]:
                    self.state = 7244
                    localctx.type = self.match(SQLParser.CHAR_SYMBOL)
                    self.state = 7245
                    self.match(SQLParser.VARYING_SYMBOL)
                    pass
                elif token in [SQLParser.VARCHAR_SYMBOL]:
                    self.state = 7246
                    localctx.type = self.match(SQLParser.VARCHAR_SYMBOL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 7249
                self.fieldLength()
                self.state = 7251
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,937,self._ctx)
                if la_ == 1:
                    self.state = 7250
                    self.charsetWithOptBinary()


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 7263
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,938,self._ctx)
                if la_ == 1:
                    self.state = 7253
                    localctx.type = self.match(SQLParser.NATIONAL_SYMBOL)
                    self.state = 7254
                    self.match(SQLParser.VARCHAR_SYMBOL)
                    pass

                elif la_ == 2:
                    self.state = 7255
                    localctx.type = self.match(SQLParser.NVARCHAR_SYMBOL)
                    pass

                elif la_ == 3:
                    self.state = 7256
                    localctx.type = self.match(SQLParser.NCHAR_SYMBOL)
                    self.state = 7257
                    self.match(SQLParser.VARCHAR_SYMBOL)
                    pass

                elif la_ == 4:
                    self.state = 7258
                    localctx.type = self.match(SQLParser.NATIONAL_SYMBOL)
                    self.state = 7259
                    self.match(SQLParser.CHAR_SYMBOL)
                    self.state = 7260
                    self.match(SQLParser.VARYING_SYMBOL)
                    pass

                elif la_ == 5:
                    self.state = 7261
                    localctx.type = self.match(SQLParser.NCHAR_SYMBOL)
                    self.state = 7262
                    self.match(SQLParser.VARYING_SYMBOL)
                    pass


                self.state = 7265
                self.fieldLength()
                self.state = 7267
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,939,self._ctx)
                if la_ == 1:
                    self.state = 7266
                    self.match(SQLParser.BINARY_SYMBOL)


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 7269
                localctx.type = self.match(SQLParser.VARBINARY_SYMBOL)
                self.state = 7270
                self.fieldLength()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 7271
                localctx.type = self.match(SQLParser.YEAR_SYMBOL)
                self.state = 7273
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,940,self._ctx)
                if la_ == 1:
                    self.state = 7272
                    self.fieldLength()


                self.state = 7276
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,941,self._ctx)
                if la_ == 1:
                    self.state = 7275
                    self.fieldOptions()


                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 7278
                localctx.type = self.match(SQLParser.DATE_SYMBOL)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 7279
                localctx.type = self.match(SQLParser.TIME_SYMBOL)
                self.state = 7281
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,942,self._ctx)
                if la_ == 1:
                    self.state = 7280
                    self.typeDatetimePrecision()


                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 7283
                localctx.type = self.match(SQLParser.TIMESTAMP_SYMBOL)
                self.state = 7285
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,943,self._ctx)
                if la_ == 1:
                    self.state = 7284
                    self.typeDatetimePrecision()


                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 7287
                localctx.type = self.match(SQLParser.DATETIME_SYMBOL)
                self.state = 7289
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,944,self._ctx)
                if la_ == 1:
                    self.state = 7288
                    self.typeDatetimePrecision()


                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 7291
                localctx.type = self.match(SQLParser.TINYBLOB_SYMBOL)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 7292
                localctx.type = self.match(SQLParser.BLOB_SYMBOL)
                self.state = 7294
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,945,self._ctx)
                if la_ == 1:
                    self.state = 7293
                    self.fieldLength()


                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 7296
                localctx.type = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLParser.LONGBLOB_SYMBOL or _la==SQLParser.MEDIUMBLOB_SYMBOL):
                    localctx.type = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 7297
                localctx.type = self.match(SQLParser.LONG_SYMBOL)
                self.state = 7298
                self.match(SQLParser.VARBINARY_SYMBOL)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 7299
                localctx.type = self.match(SQLParser.LONG_SYMBOL)
                self.state = 7303
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,946,self._ctx)
                if la_ == 1:
                    self.state = 7300
                    self.match(SQLParser.CHAR_SYMBOL)
                    self.state = 7301
                    self.match(SQLParser.VARYING_SYMBOL)

                elif la_ == 2:
                    self.state = 7302
                    self.match(SQLParser.VARCHAR_SYMBOL)


                self.state = 7306
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,947,self._ctx)
                if la_ == 1:
                    self.state = 7305
                    self.charsetWithOptBinary()


                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 7308
                localctx.type = self.match(SQLParser.TINYTEXT_SYMBOL)
                self.state = 7310
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,948,self._ctx)
                if la_ == 1:
                    self.state = 7309
                    self.charsetWithOptBinary()


                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 7312
                localctx.type = self.match(SQLParser.TEXT_SYMBOL)
                self.state = 7314
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,949,self._ctx)
                if la_ == 1:
                    self.state = 7313
                    self.fieldLength()


                self.state = 7317
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,950,self._ctx)
                if la_ == 1:
                    self.state = 7316
                    self.charsetWithOptBinary()


                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 7319
                localctx.type = self.match(SQLParser.MEDIUMTEXT_SYMBOL)
                self.state = 7321
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,951,self._ctx)
                if la_ == 1:
                    self.state = 7320
                    self.charsetWithOptBinary()


                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 7323
                localctx.type = self.match(SQLParser.LONGTEXT_SYMBOL)
                self.state = 7325
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,952,self._ctx)
                if la_ == 1:
                    self.state = 7324
                    self.charsetWithOptBinary()


                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 7327
                localctx.type = self.match(SQLParser.ENUM_SYMBOL)
                self.state = 7328
                self.stringList()
                self.state = 7330
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,953,self._ctx)
                if la_ == 1:
                    self.state = 7329
                    self.charsetWithOptBinary()


                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 7332
                localctx.type = self.match(SQLParser.SET_SYMBOL)
                self.state = 7333
                self.stringList()
                self.state = 7335
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,954,self._ctx)
                if la_ == 1:
                    self.state = 7334
                    self.charsetWithOptBinary()


                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 7337
                localctx.type = self.match(SQLParser.SERIAL_SYMBOL)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 7338
                if not self.serverVersion >= 50708:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50708")
                self.state = 7339
                localctx.type = self.match(SQLParser.JSON_SYMBOL)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 7340
                localctx.type = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLParser.GEOMETRYCOLLECTION_SYMBOL or _la==SQLParser.GEOMETRY_SYMBOL or _la==SQLParser.LINESTRING_SYMBOL or ((((_la - 351)) & ~0x3f) == 0 and ((1 << (_la - 351)) & ((1 << (SQLParser.MULTILINESTRING_SYMBOL - 351)) | (1 << (SQLParser.MULTIPOINT_SYMBOL - 351)) | (1 << (SQLParser.MULTIPOLYGON_SYMBOL - 351)) | (1 << (SQLParser.POINT_SYMBOL - 351)) | (1 << (SQLParser.POLYGON_SYMBOL - 351)))) != 0)):
                    localctx.type = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NcharContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None # Token

        def NCHAR_SYMBOL(self):
            return self.getToken(SQLParser.NCHAR_SYMBOL, 0)

        def CHAR_SYMBOL(self):
            return self.getToken(SQLParser.CHAR_SYMBOL, 0)

        def NATIONAL_SYMBOL(self):
            return self.getToken(SQLParser.NATIONAL_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_nchar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNchar" ):
                listener.enterNchar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNchar" ):
                listener.exitNchar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNchar" ):
                return visitor.visitNchar(self)
            else:
                return visitor.visitChildren(self)




    def nchar(self):

        localctx = SQLParser.NcharContext(self, self._ctx, self.state)
        self.enterRule(localctx, 920, self.RULE_nchar)
        try:
            self.state = 7346
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.NCHAR_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7343
                localctx.type = self.match(SQLParser.NCHAR_SYMBOL)
                pass
            elif token in [SQLParser.NATIONAL_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7344
                localctx.type = self.match(SQLParser.NATIONAL_SYMBOL)
                self.state = 7345
                self.match(SQLParser.CHAR_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RealTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None # Token

        def REAL_SYMBOL(self):
            return self.getToken(SQLParser.REAL_SYMBOL, 0)

        def DOUBLE_SYMBOL(self):
            return self.getToken(SQLParser.DOUBLE_SYMBOL, 0)

        def PRECISION_SYMBOL(self):
            return self.getToken(SQLParser.PRECISION_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_realType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRealType" ):
                listener.enterRealType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRealType" ):
                listener.exitRealType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRealType" ):
                return visitor.visitRealType(self)
            else:
                return visitor.visitChildren(self)




    def realType(self):

        localctx = SQLParser.RealTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 922, self.RULE_realType)
        try:
            self.state = 7353
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.REAL_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7348
                localctx.type = self.match(SQLParser.REAL_SYMBOL)
                pass
            elif token in [SQLParser.DOUBLE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7349
                localctx.type = self.match(SQLParser.DOUBLE_SYMBOL)
                self.state = 7351
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,957,self._ctx)
                if la_ == 1:
                    self.state = 7350
                    self.match(SQLParser.PRECISION_SYMBOL)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldLengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def real_ulonglong_number(self):
            return self.getTypedRuleContext(SQLParser.Real_ulonglong_numberContext,0)


        def DECIMAL_NUMBER(self):
            return self.getToken(SQLParser.DECIMAL_NUMBER, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_fieldLength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldLength" ):
                listener.enterFieldLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldLength" ):
                listener.exitFieldLength(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldLength" ):
                return visitor.visitFieldLength(self)
            else:
                return visitor.visitChildren(self)




    def fieldLength(self):

        localctx = SQLParser.FieldLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 924, self.RULE_fieldLength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7355
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 7358
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,959,self._ctx)
            if la_ == 1:
                self.state = 7356
                self.real_ulonglong_number()
                pass

            elif la_ == 2:
                self.state = 7357
                self.match(SQLParser.DECIMAL_NUMBER)
                pass


            self.state = 7360
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIGNED_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.SIGNED_SYMBOL)
            else:
                return self.getToken(SQLParser.SIGNED_SYMBOL, i)

        def UNSIGNED_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.UNSIGNED_SYMBOL)
            else:
                return self.getToken(SQLParser.UNSIGNED_SYMBOL, i)

        def ZEROFILL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.ZEROFILL_SYMBOL)
            else:
                return self.getToken(SQLParser.ZEROFILL_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_fieldOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldOptions" ):
                listener.enterFieldOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldOptions" ):
                listener.exitFieldOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldOptions" ):
                return visitor.visitFieldOptions(self)
            else:
                return visitor.visitChildren(self)




    def fieldOptions(self):

        localctx = SQLParser.FieldOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 926, self.RULE_fieldOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7363 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 7362
                    _la = self._input.LA(1)
                    if not(_la==SQLParser.SIGNED_SYMBOL or _la==SQLParser.UNSIGNED_SYMBOL or _la==SQLParser.ZEROFILL_SYMBOL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 7365 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,960,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharsetWithOptBinaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ascii(self):
            return self.getTypedRuleContext(SQLParser.AsciiContext,0)


        def unicode(self):
            return self.getTypedRuleContext(SQLParser.UnicodeContext,0)


        def BYTE_SYMBOL(self):
            return self.getToken(SQLParser.BYTE_SYMBOL, 0)

        def charset(self):
            return self.getTypedRuleContext(SQLParser.CharsetContext,0)


        def charsetName(self):
            return self.getTypedRuleContext(SQLParser.CharsetNameContext,0)


        def BINARY_SYMBOL(self):
            return self.getToken(SQLParser.BINARY_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_charsetWithOptBinary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharsetWithOptBinary" ):
                listener.enterCharsetWithOptBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharsetWithOptBinary" ):
                listener.exitCharsetWithOptBinary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharsetWithOptBinary" ):
                return visitor.visitCharsetWithOptBinary(self)
            else:
                return visitor.visitChildren(self)




    def charsetWithOptBinary(self):

        localctx = SQLParser.CharsetWithOptBinaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 928, self.RULE_charsetWithOptBinary)
        try:
            self.state = 7381
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,963,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7367
                self.ascii()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7368
                self.unicode()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7369
                self.match(SQLParser.BYTE_SYMBOL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7370
                self.charset()
                self.state = 7371
                self.charsetName()
                self.state = 7373
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,961,self._ctx)
                if la_ == 1:
                    self.state = 7372
                    self.match(SQLParser.BINARY_SYMBOL)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7375
                self.match(SQLParser.BINARY_SYMBOL)
                self.state = 7379
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,962,self._ctx)
                if la_ == 1:
                    self.state = 7376
                    self.charset()
                    self.state = 7377
                    self.charsetName()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsciiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASCII_SYMBOL(self):
            return self.getToken(SQLParser.ASCII_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(SQLParser.BINARY_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_ascii

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAscii" ):
                listener.enterAscii(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAscii" ):
                listener.exitAscii(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAscii" ):
                return visitor.visitAscii(self)
            else:
                return visitor.visitChildren(self)




    def ascii(self):

        localctx = SQLParser.AsciiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 930, self.RULE_ascii)
        try:
            self.state = 7389
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.ASCII_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7383
                self.match(SQLParser.ASCII_SYMBOL)
                self.state = 7385
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,964,self._ctx)
                if la_ == 1:
                    self.state = 7384
                    self.match(SQLParser.BINARY_SYMBOL)


                pass
            elif token in [SQLParser.BINARY_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7387
                self.match(SQLParser.BINARY_SYMBOL)
                self.state = 7388
                self.match(SQLParser.ASCII_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnicodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNICODE_SYMBOL(self):
            return self.getToken(SQLParser.UNICODE_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(SQLParser.BINARY_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_unicode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnicode" ):
                listener.enterUnicode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnicode" ):
                listener.exitUnicode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnicode" ):
                return visitor.visitUnicode(self)
            else:
                return visitor.visitChildren(self)




    def unicode(self):

        localctx = SQLParser.UnicodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 932, self.RULE_unicode)
        try:
            self.state = 7397
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.UNICODE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7391
                self.match(SQLParser.UNICODE_SYMBOL)
                self.state = 7393
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,966,self._ctx)
                if la_ == 1:
                    self.state = 7392
                    self.match(SQLParser.BINARY_SYMBOL)


                pass
            elif token in [SQLParser.BINARY_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7395
                self.match(SQLParser.BINARY_SYMBOL)
                self.state = 7396
                self.match(SQLParser.UNICODE_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WsNumCodepointsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(SQLParser.Real_ulong_numberContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_wsNumCodepoints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWsNumCodepoints" ):
                listener.enterWsNumCodepoints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWsNumCodepoints" ):
                listener.exitWsNumCodepoints(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWsNumCodepoints" ):
                return visitor.visitWsNumCodepoints(self)
            else:
                return visitor.visitChildren(self)




    def wsNumCodepoints(self):

        localctx = SQLParser.WsNumCodepointsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 934, self.RULE_wsNumCodepoints)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7399
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 7400
            self.real_ulong_number()
            self.state = 7401
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDatetimePrecisionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def INT_NUMBER(self):
            return self.getToken(SQLParser.INT_NUMBER, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_typeDatetimePrecision

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDatetimePrecision" ):
                listener.enterTypeDatetimePrecision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDatetimePrecision" ):
                listener.exitTypeDatetimePrecision(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeDatetimePrecision" ):
                return visitor.visitTypeDatetimePrecision(self)
            else:
                return visitor.visitChildren(self)




    def typeDatetimePrecision(self):

        localctx = SQLParser.TypeDatetimePrecisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 936, self.RULE_typeDatetimePrecision)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7403
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 7404
            self.match(SQLParser.INT_NUMBER)
            self.state = 7405
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharsetNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self):
            return self.getTypedRuleContext(SQLParser.TextOrIdentifierContext,0)


        def BINARY_SYMBOL(self):
            return self.getToken(SQLParser.BINARY_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(SQLParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_charsetName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharsetName" ):
                listener.enterCharsetName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharsetName" ):
                listener.exitCharsetName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharsetName" ):
                return visitor.visitCharsetName(self)
            else:
                return visitor.visitChildren(self)




    def charsetName(self):

        localctx = SQLParser.CharsetNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 938, self.RULE_charsetName)
        try:
            self.state = 7411
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,968,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7407
                self.textOrIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7408
                self.match(SQLParser.BINARY_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7409
                if not self.serverVersion < 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 80011")
                self.state = 7410
                self.match(SQLParser.DEFAULT_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollationNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self):
            return self.getTypedRuleContext(SQLParser.TextOrIdentifierContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(SQLParser.DEFAULT_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(SQLParser.BINARY_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_collationName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollationName" ):
                listener.enterCollationName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollationName" ):
                listener.exitCollationName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollationName" ):
                return visitor.visitCollationName(self)
            else:
                return visitor.visitChildren(self)




    def collationName(self):

        localctx = SQLParser.CollationNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 940, self.RULE_collationName)
        try:
            self.state = 7418
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,969,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7413
                self.textOrIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7414
                if not self.serverVersion < 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 80011")
                self.state = 7415
                self.match(SQLParser.DEFAULT_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7416
                if not self.serverVersion >= 80018:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80018")
                self.state = 7417
                self.match(SQLParser.BINARY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createTableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.CreateTableOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.CreateTableOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_createTableOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableOptions" ):
                listener.enterCreateTableOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableOptions" ):
                listener.exitCreateTableOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableOptions" ):
                return visitor.visitCreateTableOptions(self)
            else:
                return visitor.visitChildren(self)




    def createTableOptions(self):

        localctx = SQLParser.CreateTableOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 942, self.RULE_createTableOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7420
            self.createTableOption()
            self.state = 7427
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,971,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 7422
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,970,self._ctx)
                    if la_ == 1:
                        self.state = 7421
                        self.match(SQLParser.COMMA_SYMBOL)


                    self.state = 7424
                    self.createTableOption() 
                self.state = 7429
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,971,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableOptionsSpaceSeparatedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createTableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.CreateTableOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.CreateTableOptionContext,i)


        def getRuleIndex(self):
            return SQLParser.RULE_createTableOptionsSpaceSeparated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableOptionsSpaceSeparated" ):
                listener.enterCreateTableOptionsSpaceSeparated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableOptionsSpaceSeparated" ):
                listener.exitCreateTableOptionsSpaceSeparated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableOptionsSpaceSeparated" ):
                return visitor.visitCreateTableOptionsSpaceSeparated(self)
            else:
                return visitor.visitChildren(self)




    def createTableOptionsSpaceSeparated(self):

        localctx = SQLParser.CreateTableOptionsSpaceSeparatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 944, self.RULE_createTableOptionsSpaceSeparated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7431 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 7430
                    self.createTableOption()

                else:
                    raise NoViableAltException(self)
                self.state = 7433 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,972,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.option = None # Token
            self.format = None # Token
            self.method = None # Token

        def engineRef(self):
            return self.getTypedRuleContext(SQLParser.EngineRefContext,0)


        def ENGINE_SYMBOL(self):
            return self.getToken(SQLParser.ENGINE_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def SECONDARY_ENGINE_SYMBOL(self):
            return self.getToken(SQLParser.SECONDARY_ENGINE_SYMBOL, 0)

        def NULL_SYMBOL(self):
            return self.getToken(SQLParser.NULL_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(SQLParser.TextOrIdentifierContext,0)


        def equal(self):
            return self.getTypedRuleContext(SQLParser.EqualContext,0)


        def ulonglong_number(self):
            return self.getTypedRuleContext(SQLParser.Ulonglong_numberContext,0)


        def MAX_ROWS_SYMBOL(self):
            return self.getToken(SQLParser.MAX_ROWS_SYMBOL, 0)

        def MIN_ROWS_SYMBOL(self):
            return self.getToken(SQLParser.MIN_ROWS_SYMBOL, 0)

        def ulong_number(self):
            return self.getTypedRuleContext(SQLParser.Ulong_numberContext,0)


        def AVG_ROW_LENGTH_SYMBOL(self):
            return self.getToken(SQLParser.AVG_ROW_LENGTH_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextStringLiteralContext,0)


        def PASSWORD_SYMBOL(self):
            return self.getToken(SQLParser.PASSWORD_SYMBOL, 0)

        def COMMENT_SYMBOL(self):
            return self.getToken(SQLParser.COMMENT_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(SQLParser.TextStringContext,0)


        def COMPRESSION_SYMBOL(self):
            return self.getToken(SQLParser.COMPRESSION_SYMBOL, 0)

        def ENCRYPTION_SYMBOL(self):
            return self.getToken(SQLParser.ENCRYPTION_SYMBOL, 0)

        def AUTO_INCREMENT_SYMBOL(self):
            return self.getToken(SQLParser.AUTO_INCREMENT_SYMBOL, 0)

        def ternaryOption(self):
            return self.getTypedRuleContext(SQLParser.TernaryOptionContext,0)


        def PACK_KEYS_SYMBOL(self):
            return self.getToken(SQLParser.PACK_KEYS_SYMBOL, 0)

        def STATS_AUTO_RECALC_SYMBOL(self):
            return self.getToken(SQLParser.STATS_AUTO_RECALC_SYMBOL, 0)

        def STATS_PERSISTENT_SYMBOL(self):
            return self.getToken(SQLParser.STATS_PERSISTENT_SYMBOL, 0)

        def STATS_SAMPLE_PAGES_SYMBOL(self):
            return self.getToken(SQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0)

        def CHECKSUM_SYMBOL(self):
            return self.getToken(SQLParser.CHECKSUM_SYMBOL, 0)

        def TABLE_CHECKSUM_SYMBOL(self):
            return self.getToken(SQLParser.TABLE_CHECKSUM_SYMBOL, 0)

        def DELAY_KEY_WRITE_SYMBOL(self):
            return self.getToken(SQLParser.DELAY_KEY_WRITE_SYMBOL, 0)

        def ROW_FORMAT_SYMBOL(self):
            return self.getToken(SQLParser.ROW_FORMAT_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(SQLParser.DEFAULT_SYMBOL, 0)

        def DYNAMIC_SYMBOL(self):
            return self.getToken(SQLParser.DYNAMIC_SYMBOL, 0)

        def FIXED_SYMBOL(self):
            return self.getToken(SQLParser.FIXED_SYMBOL, 0)

        def COMPRESSED_SYMBOL(self):
            return self.getToken(SQLParser.COMPRESSED_SYMBOL, 0)

        def REDUNDANT_SYMBOL(self):
            return self.getToken(SQLParser.REDUNDANT_SYMBOL, 0)

        def COMPACT_SYMBOL(self):
            return self.getToken(SQLParser.COMPACT_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def tableRefList(self):
            return self.getTypedRuleContext(SQLParser.TableRefListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def UNION_SYMBOL(self):
            return self.getToken(SQLParser.UNION_SYMBOL, 0)

        def defaultCharset(self):
            return self.getTypedRuleContext(SQLParser.DefaultCharsetContext,0)


        def defaultCollation(self):
            return self.getTypedRuleContext(SQLParser.DefaultCollationContext,0)


        def INSERT_METHOD_SYMBOL(self):
            return self.getToken(SQLParser.INSERT_METHOD_SYMBOL, 0)

        def NO_SYMBOL(self):
            return self.getToken(SQLParser.NO_SYMBOL, 0)

        def FIRST_SYMBOL(self):
            return self.getToken(SQLParser.FIRST_SYMBOL, 0)

        def LAST_SYMBOL(self):
            return self.getToken(SQLParser.LAST_SYMBOL, 0)

        def DIRECTORY_SYMBOL(self):
            return self.getToken(SQLParser.DIRECTORY_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(SQLParser.DATA_SYMBOL, 0)

        def INDEX_SYMBOL(self):
            return self.getToken(SQLParser.INDEX_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def TABLESPACE_SYMBOL(self):
            return self.getToken(SQLParser.TABLESPACE_SYMBOL, 0)

        def STORAGE_SYMBOL(self):
            return self.getToken(SQLParser.STORAGE_SYMBOL, 0)

        def DISK_SYMBOL(self):
            return self.getToken(SQLParser.DISK_SYMBOL, 0)

        def MEMORY_SYMBOL(self):
            return self.getToken(SQLParser.MEMORY_SYMBOL, 0)

        def CONNECTION_SYMBOL(self):
            return self.getToken(SQLParser.CONNECTION_SYMBOL, 0)

        def KEY_BLOCK_SIZE_SYMBOL(self):
            return self.getToken(SQLParser.KEY_BLOCK_SIZE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_createTableOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableOption" ):
                listener.enterCreateTableOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableOption" ):
                listener.exitCreateTableOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableOption" ):
                return visitor.visitCreateTableOption(self)
            else:
                return visitor.visitChildren(self)




    def createTableOption(self):

        localctx = SQLParser.CreateTableOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 946, self.RULE_createTableOption)
        self._la = 0 # Token type
        try:
            self.state = 7564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,997,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7435
                localctx.option = self.match(SQLParser.ENGINE_SYMBOL)
                self.state = 7437
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,973,self._ctx)
                if la_ == 1:
                    self.state = 7436
                    self.match(SQLParser.EQUAL_OPERATOR)


                self.state = 7439
                self.engineRef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7440
                if not self.serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80014")
                self.state = 7441
                localctx.option = self.match(SQLParser.SECONDARY_ENGINE_SYMBOL)
                self.state = 7443
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,974,self._ctx)
                if la_ == 1:
                    self.state = 7442
                    self.equal()


                self.state = 7447
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,975,self._ctx)
                if la_ == 1:
                    self.state = 7445
                    self.match(SQLParser.NULL_SYMBOL)
                    pass

                elif la_ == 2:
                    self.state = 7446
                    self.textOrIdentifier()
                    pass


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7449
                localctx.option = self.match(SQLParser.MAX_ROWS_SYMBOL)
                self.state = 7451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.EQUAL_OPERATOR:
                    self.state = 7450
                    self.match(SQLParser.EQUAL_OPERATOR)


                self.state = 7453
                self.ulonglong_number()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7454
                localctx.option = self.match(SQLParser.MIN_ROWS_SYMBOL)
                self.state = 7456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.EQUAL_OPERATOR:
                    self.state = 7455
                    self.match(SQLParser.EQUAL_OPERATOR)


                self.state = 7458
                self.ulonglong_number()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7459
                localctx.option = self.match(SQLParser.AVG_ROW_LENGTH_SYMBOL)
                self.state = 7461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.EQUAL_OPERATOR:
                    self.state = 7460
                    self.match(SQLParser.EQUAL_OPERATOR)


                self.state = 7463
                self.ulong_number()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7464
                localctx.option = self.match(SQLParser.PASSWORD_SYMBOL)
                self.state = 7466
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,979,self._ctx)
                if la_ == 1:
                    self.state = 7465
                    self.match(SQLParser.EQUAL_OPERATOR)


                self.state = 7468
                self.textStringLiteral()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7469
                localctx.option = self.match(SQLParser.COMMENT_SYMBOL)
                self.state = 7471
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,980,self._ctx)
                if la_ == 1:
                    self.state = 7470
                    self.match(SQLParser.EQUAL_OPERATOR)


                self.state = 7473
                self.textStringLiteral()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 7474
                if not self.serverVersion >= 50708:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50708")
                self.state = 7475
                localctx.option = self.match(SQLParser.COMPRESSION_SYMBOL)
                self.state = 7477
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,981,self._ctx)
                if la_ == 1:
                    self.state = 7476
                    self.match(SQLParser.EQUAL_OPERATOR)


                self.state = 7479
                self.textString()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 7480
                if not self.serverVersion >= 50711:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50711")
                self.state = 7481
                localctx.option = self.match(SQLParser.ENCRYPTION_SYMBOL)
                self.state = 7483
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,982,self._ctx)
                if la_ == 1:
                    self.state = 7482
                    self.match(SQLParser.EQUAL_OPERATOR)


                self.state = 7485
                self.textString()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 7486
                localctx.option = self.match(SQLParser.AUTO_INCREMENT_SYMBOL)
                self.state = 7488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.EQUAL_OPERATOR:
                    self.state = 7487
                    self.match(SQLParser.EQUAL_OPERATOR)


                self.state = 7490
                self.ulonglong_number()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 7491
                localctx.option = self.match(SQLParser.PACK_KEYS_SYMBOL)
                self.state = 7493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.EQUAL_OPERATOR:
                    self.state = 7492
                    self.match(SQLParser.EQUAL_OPERATOR)


                self.state = 7495
                self.ternaryOption()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 7496
                localctx.option = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 544)) & ~0x3f) == 0 and ((1 << (_la - 544)) & ((1 << (SQLParser.STATS_AUTO_RECALC_SYMBOL - 544)) | (1 << (SQLParser.STATS_PERSISTENT_SYMBOL - 544)) | (1 << (SQLParser.STATS_SAMPLE_PAGES_SYMBOL - 544)))) != 0)):
                    localctx.option = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.EQUAL_OPERATOR:
                    self.state = 7497
                    self.match(SQLParser.EQUAL_OPERATOR)


                self.state = 7500
                self.ternaryOption()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 7501
                localctx.option = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLParser.CHECKSUM_SYMBOL or _la==SQLParser.TABLE_CHECKSUM_SYMBOL):
                    localctx.option = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.EQUAL_OPERATOR:
                    self.state = 7502
                    self.match(SQLParser.EQUAL_OPERATOR)


                self.state = 7505
                self.ulong_number()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 7506
                localctx.option = self.match(SQLParser.DELAY_KEY_WRITE_SYMBOL)
                self.state = 7508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.EQUAL_OPERATOR:
                    self.state = 7507
                    self.match(SQLParser.EQUAL_OPERATOR)


                self.state = 7510
                self.ulong_number()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 7511
                localctx.option = self.match(SQLParser.ROW_FORMAT_SYMBOL)
                self.state = 7513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.EQUAL_OPERATOR:
                    self.state = 7512
                    self.match(SQLParser.EQUAL_OPERATOR)


                self.state = 7515
                localctx.format = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (SQLParser.COMPACT_SYMBOL - 78)) | (1 << (SQLParser.COMPRESSED_SYMBOL - 78)) | (1 << (SQLParser.DEFAULT_SYMBOL - 78)))) != 0) or _la==SQLParser.DYNAMIC_SYMBOL or _la==SQLParser.FIXED_SYMBOL or _la==SQLParser.REDUNDANT_SYMBOL):
                    localctx.format = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 7516
                localctx.option = self.match(SQLParser.UNION_SYMBOL)
                self.state = 7518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.EQUAL_OPERATOR:
                    self.state = 7517
                    self.match(SQLParser.EQUAL_OPERATOR)


                self.state = 7520
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 7521
                self.tableRefList()
                self.state = 7522
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 7524
                self.defaultCharset()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 7525
                self.defaultCollation()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 7526
                localctx.option = self.match(SQLParser.INSERT_METHOD_SYMBOL)
                self.state = 7528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.EQUAL_OPERATOR:
                    self.state = 7527
                    self.match(SQLParser.EQUAL_OPERATOR)


                self.state = 7530
                localctx.method = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLParser.FIRST_SYMBOL or _la==SQLParser.LAST_SYMBOL or _la==SQLParser.NO_SYMBOL):
                    localctx.method = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 7531
                localctx.option = self.match(SQLParser.DATA_SYMBOL)
                self.state = 7532
                self.match(SQLParser.DIRECTORY_SYMBOL)
                self.state = 7534
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,991,self._ctx)
                if la_ == 1:
                    self.state = 7533
                    self.match(SQLParser.EQUAL_OPERATOR)


                self.state = 7536
                self.textString()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 7537
                localctx.option = self.match(SQLParser.INDEX_SYMBOL)
                self.state = 7538
                self.match(SQLParser.DIRECTORY_SYMBOL)
                self.state = 7540
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,992,self._ctx)
                if la_ == 1:
                    self.state = 7539
                    self.match(SQLParser.EQUAL_OPERATOR)


                self.state = 7542
                self.textString()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 7543
                localctx.option = self.match(SQLParser.TABLESPACE_SYMBOL)
                self.state = 7549
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,994,self._ctx)
                if la_ == 1:
                    self.state = 7544
                    if not self.serverVersion >= 50707:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 50707")
                    self.state = 7546
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,993,self._ctx)
                    if la_ == 1:
                        self.state = 7545
                        self.match(SQLParser.EQUAL_OPERATOR)


                    pass

                elif la_ == 2:
                    pass


                self.state = 7551
                self.identifier()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 7552
                localctx.option = self.match(SQLParser.STORAGE_SYMBOL)
                self.state = 7553
                _la = self._input.LA(1)
                if not(_la==SQLParser.DISK_SYMBOL or _la==SQLParser.MEMORY_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 7554
                localctx.option = self.match(SQLParser.CONNECTION_SYMBOL)
                self.state = 7556
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,995,self._ctx)
                if la_ == 1:
                    self.state = 7555
                    self.match(SQLParser.EQUAL_OPERATOR)


                self.state = 7558
                self.textString()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 7559
                localctx.option = self.match(SQLParser.KEY_BLOCK_SIZE_SYMBOL)
                self.state = 7561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.EQUAL_OPERATOR:
                    self.state = 7560
                    self.match(SQLParser.EQUAL_OPERATOR)


                self.state = 7563
                self.ulong_number()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TernaryOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ulong_number(self):
            return self.getTypedRuleContext(SQLParser.Ulong_numberContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(SQLParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_ternaryOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTernaryOption" ):
                listener.enterTernaryOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTernaryOption" ):
                listener.exitTernaryOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTernaryOption" ):
                return visitor.visitTernaryOption(self)
            else:
                return visitor.visitChildren(self)




    def ternaryOption(self):

        localctx = SQLParser.TernaryOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 948, self.RULE_ternaryOption)
        try:
            self.state = 7568
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.INT_NUMBER, SQLParser.LONG_NUMBER, SQLParser.ULONGLONG_NUMBER, SQLParser.HEX_NUMBER, SQLParser.DECIMAL_NUMBER, SQLParser.FLOAT_NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7566
                self.ulong_number()
                pass
            elif token in [SQLParser.DEFAULT_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7567
                self.match(SQLParser.DEFAULT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultCollationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLLATE_SYMBOL(self):
            return self.getToken(SQLParser.COLLATE_SYMBOL, 0)

        def collationName(self):
            return self.getTypedRuleContext(SQLParser.CollationNameContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(SQLParser.DEFAULT_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_defaultCollation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultCollation" ):
                listener.enterDefaultCollation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultCollation" ):
                listener.exitDefaultCollation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultCollation" ):
                return visitor.visitDefaultCollation(self)
            else:
                return visitor.visitChildren(self)




    def defaultCollation(self):

        localctx = SQLParser.DefaultCollationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 950, self.RULE_defaultCollation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7571
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.DEFAULT_SYMBOL:
                self.state = 7570
                self.match(SQLParser.DEFAULT_SYMBOL)


            self.state = 7573
            self.match(SQLParser.COLLATE_SYMBOL)
            self.state = 7575
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1000,self._ctx)
            if la_ == 1:
                self.state = 7574
                self.match(SQLParser.EQUAL_OPERATOR)


            self.state = 7577
            self.collationName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultEncryptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION_SYMBOL(self):
            return self.getToken(SQLParser.ENCRYPTION_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextStringLiteralContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(SQLParser.DEFAULT_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_defaultEncryption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultEncryption" ):
                listener.enterDefaultEncryption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultEncryption" ):
                listener.exitDefaultEncryption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultEncryption" ):
                return visitor.visitDefaultEncryption(self)
            else:
                return visitor.visitChildren(self)




    def defaultEncryption(self):

        localctx = SQLParser.DefaultEncryptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 952, self.RULE_defaultEncryption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.DEFAULT_SYMBOL:
                self.state = 7579
                self.match(SQLParser.DEFAULT_SYMBOL)


            self.state = 7582
            self.match(SQLParser.ENCRYPTION_SYMBOL)
            self.state = 7584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1002,self._ctx)
            if la_ == 1:
                self.state = 7583
                self.match(SQLParser.EQUAL_OPERATOR)


            self.state = 7586
            self.textStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultCharsetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def charset(self):
            return self.getTypedRuleContext(SQLParser.CharsetContext,0)


        def charsetName(self):
            return self.getTypedRuleContext(SQLParser.CharsetNameContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(SQLParser.DEFAULT_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_defaultCharset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultCharset" ):
                listener.enterDefaultCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultCharset" ):
                listener.exitDefaultCharset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultCharset" ):
                return visitor.visitDefaultCharset(self)
            else:
                return visitor.visitChildren(self)




    def defaultCharset(self):

        localctx = SQLParser.DefaultCharsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 954, self.RULE_defaultCharset)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.DEFAULT_SYMBOL:
                self.state = 7588
                self.match(SQLParser.DEFAULT_SYMBOL)


            self.state = 7591
            self.charset()
            self.state = 7593
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1004,self._ctx)
            if la_ == 1:
                self.state = 7592
                self.match(SQLParser.EQUAL_OPERATOR)


            self.state = 7595
            self.charsetName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION_SYMBOL(self):
            return self.getToken(SQLParser.PARTITION_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(SQLParser.BY_SYMBOL, 0)

        def partitionTypeDef(self):
            return self.getTypedRuleContext(SQLParser.PartitionTypeDefContext,0)


        def PARTITIONS_SYMBOL(self):
            return self.getToken(SQLParser.PARTITIONS_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(SQLParser.Real_ulong_numberContext,0)


        def subPartitions(self):
            return self.getTypedRuleContext(SQLParser.SubPartitionsContext,0)


        def partitionDefinitions(self):
            return self.getTypedRuleContext(SQLParser.PartitionDefinitionsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_partitionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionClause" ):
                listener.enterPartitionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionClause" ):
                listener.exitPartitionClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionClause" ):
                return visitor.visitPartitionClause(self)
            else:
                return visitor.visitChildren(self)




    def partitionClause(self):

        localctx = SQLParser.PartitionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 956, self.RULE_partitionClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7597
            self.match(SQLParser.PARTITION_SYMBOL)
            self.state = 7598
            self.match(SQLParser.BY_SYMBOL)
            self.state = 7599
            self.partitionTypeDef()
            self.state = 7602
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1005,self._ctx)
            if la_ == 1:
                self.state = 7600
                self.match(SQLParser.PARTITIONS_SYMBOL)
                self.state = 7601
                self.real_ulong_number()


            self.state = 7605
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1006,self._ctx)
            if la_ == 1:
                self.state = 7604
                self.subPartitions()


            self.state = 7608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1007,self._ctx)
            if la_ == 1:
                self.state = 7607
                self.partitionDefinitions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionTypeDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLParser.RULE_partitionTypeDef

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PartitionDefRangeListContext(PartitionTypeDefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.PartitionTypeDefContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RANGE_SYMBOL(self):
            return self.getToken(SQLParser.RANGE_SYMBOL, 0)
        def LIST_SYMBOL(self):
            return self.getToken(SQLParser.LIST_SYMBOL, 0)
        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)
        def bitExpr(self):
            return self.getTypedRuleContext(SQLParser.BitExprContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)
        def COLUMNS_SYMBOL(self):
            return self.getToken(SQLParser.COLUMNS_SYMBOL, 0)
        def identifierList(self):
            return self.getTypedRuleContext(SQLParser.IdentifierListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefRangeList" ):
                listener.enterPartitionDefRangeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefRangeList" ):
                listener.exitPartitionDefRangeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionDefRangeList" ):
                return visitor.visitPartitionDefRangeList(self)
            else:
                return visitor.visitChildren(self)


    class PartitionDefKeyContext(PartitionTypeDefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.PartitionTypeDefContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KEY_SYMBOL(self):
            return self.getToken(SQLParser.KEY_SYMBOL, 0)
        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)
        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)
        def LINEAR_SYMBOL(self):
            return self.getToken(SQLParser.LINEAR_SYMBOL, 0)
        def partitionKeyAlgorithm(self):
            return self.getTypedRuleContext(SQLParser.PartitionKeyAlgorithmContext,0)

        def identifierList(self):
            return self.getTypedRuleContext(SQLParser.IdentifierListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefKey" ):
                listener.enterPartitionDefKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefKey" ):
                listener.exitPartitionDefKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionDefKey" ):
                return visitor.visitPartitionDefKey(self)
            else:
                return visitor.visitChildren(self)


    class PartitionDefHashContext(PartitionTypeDefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLParser.PartitionTypeDefContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HASH_SYMBOL(self):
            return self.getToken(SQLParser.HASH_SYMBOL, 0)
        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)
        def bitExpr(self):
            return self.getTypedRuleContext(SQLParser.BitExprContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)
        def LINEAR_SYMBOL(self):
            return self.getToken(SQLParser.LINEAR_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefHash" ):
                listener.enterPartitionDefHash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefHash" ):
                listener.exitPartitionDefHash(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionDefHash" ):
                return visitor.visitPartitionDefHash(self)
            else:
                return visitor.visitChildren(self)



    def partitionTypeDef(self):

        localctx = SQLParser.PartitionTypeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 958, self.RULE_partitionTypeDef)
        self._la = 0 # Token type
        try:
            self.state = 7643
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1014,self._ctx)
            if la_ == 1:
                localctx = SQLParser.PartitionDefKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 7611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.LINEAR_SYMBOL:
                    self.state = 7610
                    self.match(SQLParser.LINEAR_SYMBOL)


                self.state = 7613
                self.match(SQLParser.KEY_SYMBOL)
                self.state = 7615
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1009,self._ctx)
                if la_ == 1:
                    self.state = 7614
                    self.partitionKeyAlgorithm()


                self.state = 7617
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 7619
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1010,self._ctx)
                if la_ == 1:
                    self.state = 7618
                    self.identifierList()


                self.state = 7621
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 2:
                localctx = SQLParser.PartitionDefHashContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 7623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.LINEAR_SYMBOL:
                    self.state = 7622
                    self.match(SQLParser.LINEAR_SYMBOL)


                self.state = 7625
                self.match(SQLParser.HASH_SYMBOL)
                self.state = 7626
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 7627
                self.bitExpr(0)
                self.state = 7628
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 3:
                localctx = SQLParser.PartitionDefRangeListContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 7630
                _la = self._input.LA(1)
                if not(_la==SQLParser.LIST_SYMBOL or _la==SQLParser.RANGE_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7641
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLParser.OPEN_PAR_SYMBOL]:
                    self.state = 7631
                    self.match(SQLParser.OPEN_PAR_SYMBOL)
                    self.state = 7632
                    self.bitExpr(0)
                    self.state = 7633
                    self.match(SQLParser.CLOSE_PAR_SYMBOL)
                    pass
                elif token in [SQLParser.COLUMNS_SYMBOL]:
                    self.state = 7635
                    self.match(SQLParser.COLUMNS_SYMBOL)
                    self.state = 7636
                    self.match(SQLParser.OPEN_PAR_SYMBOL)
                    self.state = 7638
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1012,self._ctx)
                    if la_ == 1:
                        self.state = 7637
                        self.identifierList()


                    self.state = 7640
                    self.match(SQLParser.CLOSE_PAR_SYMBOL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubPartitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITION_SYMBOL(self):
            return self.getToken(SQLParser.SUBPARTITION_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(SQLParser.BY_SYMBOL, 0)

        def HASH_SYMBOL(self):
            return self.getToken(SQLParser.HASH_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def bitExpr(self):
            return self.getTypedRuleContext(SQLParser.BitExprContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def KEY_SYMBOL(self):
            return self.getToken(SQLParser.KEY_SYMBOL, 0)

        def identifierListWithParentheses(self):
            return self.getTypedRuleContext(SQLParser.IdentifierListWithParenthesesContext,0)


        def LINEAR_SYMBOL(self):
            return self.getToken(SQLParser.LINEAR_SYMBOL, 0)

        def SUBPARTITIONS_SYMBOL(self):
            return self.getToken(SQLParser.SUBPARTITIONS_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(SQLParser.Real_ulong_numberContext,0)


        def partitionKeyAlgorithm(self):
            return self.getTypedRuleContext(SQLParser.PartitionKeyAlgorithmContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_subPartitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubPartitions" ):
                listener.enterSubPartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubPartitions" ):
                listener.exitSubPartitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubPartitions" ):
                return visitor.visitSubPartitions(self)
            else:
                return visitor.visitChildren(self)




    def subPartitions(self):

        localctx = SQLParser.SubPartitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 960, self.RULE_subPartitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7645
            self.match(SQLParser.SUBPARTITION_SYMBOL)
            self.state = 7646
            self.match(SQLParser.BY_SYMBOL)
            self.state = 7648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.LINEAR_SYMBOL:
                self.state = 7647
                self.match(SQLParser.LINEAR_SYMBOL)


            self.state = 7660
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.HASH_SYMBOL]:
                self.state = 7650
                self.match(SQLParser.HASH_SYMBOL)
                self.state = 7651
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 7652
                self.bitExpr(0)
                self.state = 7653
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [SQLParser.KEY_SYMBOL]:
                self.state = 7655
                self.match(SQLParser.KEY_SYMBOL)
                self.state = 7657
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1016,self._ctx)
                if la_ == 1:
                    self.state = 7656
                    self.partitionKeyAlgorithm()


                self.state = 7659
                self.identifierListWithParentheses()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 7664
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1018,self._ctx)
            if la_ == 1:
                self.state = 7662
                self.match(SQLParser.SUBPARTITIONS_SYMBOL)
                self.state = 7663
                self.real_ulong_number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionKeyAlgorithmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALGORITHM_SYMBOL(self):
            return self.getToken(SQLParser.ALGORITHM_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(SQLParser.Real_ulong_numberContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_partitionKeyAlgorithm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionKeyAlgorithm" ):
                listener.enterPartitionKeyAlgorithm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionKeyAlgorithm" ):
                listener.exitPartitionKeyAlgorithm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionKeyAlgorithm" ):
                return visitor.visitPartitionKeyAlgorithm(self)
            else:
                return visitor.visitChildren(self)




    def partitionKeyAlgorithm(self):

        localctx = SQLParser.PartitionKeyAlgorithmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 962, self.RULE_partitionKeyAlgorithm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7666
            if not self.serverVersion >= 50700:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.serverVersion >= 50700")
            self.state = 7667
            self.match(SQLParser.ALGORITHM_SYMBOL)
            self.state = 7668
            self.match(SQLParser.EQUAL_OPERATOR)
            self.state = 7669
            self.real_ulong_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def partitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.PartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(SQLParser.PartitionDefinitionContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_partitionDefinitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefinitions" ):
                listener.enterPartitionDefinitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefinitions" ):
                listener.exitPartitionDefinitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionDefinitions" ):
                return visitor.visitPartitionDefinitions(self)
            else:
                return visitor.visitChildren(self)




    def partitionDefinitions(self):

        localctx = SQLParser.PartitionDefinitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 964, self.RULE_partitionDefinitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7671
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 7672
            self.partitionDefinition()
            self.state = 7677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 7673
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 7674
                self.partitionDefinition()
                self.state = 7679
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7680
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION_SYMBOL(self):
            return self.getToken(SQLParser.PARTITION_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def VALUES_SYMBOL(self):
            return self.getToken(SQLParser.VALUES_SYMBOL, 0)

        def LESS_SYMBOL(self):
            return self.getToken(SQLParser.LESS_SYMBOL, 0)

        def THAN_SYMBOL(self):
            return self.getToken(SQLParser.THAN_SYMBOL, 0)

        def IN_SYMBOL(self):
            return self.getToken(SQLParser.IN_SYMBOL, 0)

        def partitionValuesIn(self):
            return self.getTypedRuleContext(SQLParser.PartitionValuesInContext,0)


        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.PartitionOptionContext,i)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def subpartitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(SQLParser.SubpartitionDefinitionContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def partitionValueItemListParen(self):
            return self.getTypedRuleContext(SQLParser.PartitionValueItemListParenContext,0)


        def MAXVALUE_SYMBOL(self):
            return self.getToken(SQLParser.MAXVALUE_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_partitionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefinition" ):
                listener.enterPartitionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefinition" ):
                listener.exitPartitionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionDefinition" ):
                return visitor.visitPartitionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def partitionDefinition(self):

        localctx = SQLParser.PartitionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 966, self.RULE_partitionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7682
            self.match(SQLParser.PARTITION_SYMBOL)
            self.state = 7683
            self.identifier()
            self.state = 7694
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1021,self._ctx)
            if la_ == 1:
                self.state = 7684
                self.match(SQLParser.VALUES_SYMBOL)
                self.state = 7685
                self.match(SQLParser.LESS_SYMBOL)
                self.state = 7686
                self.match(SQLParser.THAN_SYMBOL)
                self.state = 7689
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLParser.OPEN_PAR_SYMBOL]:
                    self.state = 7687
                    self.partitionValueItemListParen()
                    pass
                elif token in [SQLParser.MAXVALUE_SYMBOL]:
                    self.state = 7688
                    self.match(SQLParser.MAXVALUE_SYMBOL)
                    pass
                else:
                    raise NoViableAltException(self)


            elif la_ == 2:
                self.state = 7691
                self.match(SQLParser.VALUES_SYMBOL)
                self.state = 7692
                self.match(SQLParser.IN_SYMBOL)
                self.state = 7693
                self.partitionValuesIn()


            self.state = 7699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMENT_SYMBOL or _la==SQLParser.DATA_SYMBOL or _la==SQLParser.ENGINE_SYMBOL or _la==SQLParser.INDEX_SYMBOL or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (SQLParser.MAX_ROWS_SYMBOL - 323)) | (1 << (SQLParser.MIN_ROWS_SYMBOL - 323)) | (1 << (SQLParser.NODEGROUP_SYMBOL - 323)))) != 0) or _la==SQLParser.STORAGE_SYMBOL or _la==SQLParser.TABLESPACE_SYMBOL:
                self.state = 7696
                self.partitionOption()
                self.state = 7701
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLParser.OPEN_PAR_SYMBOL:
                self.state = 7702
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 7703
                self.subpartitionDefinition()
                self.state = 7708
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLParser.COMMA_SYMBOL:
                    self.state = 7704
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 7705
                    self.subpartitionDefinition()
                    self.state = 7710
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7711
                self.match(SQLParser.CLOSE_PAR_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionValuesInContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionValueItemListParen(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.PartitionValueItemListParenContext)
            else:
                return self.getTypedRuleContext(SQLParser.PartitionValueItemListParenContext,i)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_partitionValuesIn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionValuesIn" ):
                listener.enterPartitionValuesIn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionValuesIn" ):
                listener.exitPartitionValuesIn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionValuesIn" ):
                return visitor.visitPartitionValuesIn(self)
            else:
                return visitor.visitChildren(self)




    def partitionValuesIn(self):

        localctx = SQLParser.PartitionValuesInContext(self, self._ctx, self.state)
        self.enterRule(localctx, 968, self.RULE_partitionValuesIn)
        self._la = 0 # Token type
        try:
            self.state = 7727
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1026,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7715
                self.partitionValueItemListParen()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7716
                self.match(SQLParser.OPEN_PAR_SYMBOL)
                self.state = 7717
                self.partitionValueItemListParen()
                self.state = 7722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLParser.COMMA_SYMBOL:
                    self.state = 7718
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 7719
                    self.partitionValueItemListParen()
                    self.state = 7724
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7725
                self.match(SQLParser.CLOSE_PAR_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.option = None # Token

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def TABLESPACE_SYMBOL(self):
            return self.getToken(SQLParser.TABLESPACE_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def engineRef(self):
            return self.getTypedRuleContext(SQLParser.EngineRefContext,0)


        def ENGINE_SYMBOL(self):
            return self.getToken(SQLParser.ENGINE_SYMBOL, 0)

        def STORAGE_SYMBOL(self):
            return self.getToken(SQLParser.STORAGE_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(SQLParser.Real_ulong_numberContext,0)


        def NODEGROUP_SYMBOL(self):
            return self.getToken(SQLParser.NODEGROUP_SYMBOL, 0)

        def MAX_ROWS_SYMBOL(self):
            return self.getToken(SQLParser.MAX_ROWS_SYMBOL, 0)

        def MIN_ROWS_SYMBOL(self):
            return self.getToken(SQLParser.MIN_ROWS_SYMBOL, 0)

        def DIRECTORY_SYMBOL(self):
            return self.getToken(SQLParser.DIRECTORY_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextLiteralContext,0)


        def DATA_SYMBOL(self):
            return self.getToken(SQLParser.DATA_SYMBOL, 0)

        def INDEX_SYMBOL(self):
            return self.getToken(SQLParser.INDEX_SYMBOL, 0)

        def COMMENT_SYMBOL(self):
            return self.getToken(SQLParser.COMMENT_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_partitionOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOption" ):
                listener.enterPartitionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOption" ):
                listener.exitPartitionOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionOption" ):
                return visitor.visitPartitionOption(self)
            else:
                return visitor.visitChildren(self)




    def partitionOption(self):

        localctx = SQLParser.PartitionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 970, self.RULE_partitionOption)
        self._la = 0 # Token type
        try:
            self.state = 7763
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.TABLESPACE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7729
                localctx.option = self.match(SQLParser.TABLESPACE_SYMBOL)
                self.state = 7731
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1027,self._ctx)
                if la_ == 1:
                    self.state = 7730
                    self.match(SQLParser.EQUAL_OPERATOR)


                self.state = 7733
                self.identifier()
                pass
            elif token in [SQLParser.ENGINE_SYMBOL, SQLParser.STORAGE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.STORAGE_SYMBOL:
                    self.state = 7734
                    self.match(SQLParser.STORAGE_SYMBOL)


                self.state = 7737
                localctx.option = self.match(SQLParser.ENGINE_SYMBOL)
                self.state = 7739
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1029,self._ctx)
                if la_ == 1:
                    self.state = 7738
                    self.match(SQLParser.EQUAL_OPERATOR)


                self.state = 7741
                self.engineRef()
                pass
            elif token in [SQLParser.NODEGROUP_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7742
                localctx.option = self.match(SQLParser.NODEGROUP_SYMBOL)
                self.state = 7744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.EQUAL_OPERATOR:
                    self.state = 7743
                    self.match(SQLParser.EQUAL_OPERATOR)


                self.state = 7746
                self.real_ulong_number()
                pass
            elif token in [SQLParser.MAX_ROWS_SYMBOL, SQLParser.MIN_ROWS_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7747
                localctx.option = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLParser.MAX_ROWS_SYMBOL or _la==SQLParser.MIN_ROWS_SYMBOL):
                    localctx.option = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.EQUAL_OPERATOR:
                    self.state = 7748
                    self.match(SQLParser.EQUAL_OPERATOR)


                self.state = 7751
                self.real_ulong_number()
                pass
            elif token in [SQLParser.DATA_SYMBOL, SQLParser.INDEX_SYMBOL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 7752
                localctx.option = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLParser.DATA_SYMBOL or _la==SQLParser.INDEX_SYMBOL):
                    localctx.option = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7753
                self.match(SQLParser.DIRECTORY_SYMBOL)
                self.state = 7755
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1032,self._ctx)
                if la_ == 1:
                    self.state = 7754
                    self.match(SQLParser.EQUAL_OPERATOR)


                self.state = 7757
                self.textLiteral()
                pass
            elif token in [SQLParser.COMMENT_SYMBOL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 7758
                localctx.option = self.match(SQLParser.COMMENT_SYMBOL)
                self.state = 7760
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1033,self._ctx)
                if la_ == 1:
                    self.state = 7759
                    self.match(SQLParser.EQUAL_OPERATOR)


                self.state = 7762
                self.textLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubpartitionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITION_SYMBOL(self):
            return self.getToken(SQLParser.SUBPARTITION_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(SQLParser.TextOrIdentifierContext,0)


        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(SQLParser.PartitionOptionContext,i)


        def getRuleIndex(self):
            return SQLParser.RULE_subpartitionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubpartitionDefinition" ):
                listener.enterSubpartitionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubpartitionDefinition" ):
                listener.exitSubpartitionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubpartitionDefinition" ):
                return visitor.visitSubpartitionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def subpartitionDefinition(self):

        localctx = SQLParser.SubpartitionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 972, self.RULE_subpartitionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7765
            self.match(SQLParser.SUBPARTITION_SYMBOL)
            self.state = 7766
            self.textOrIdentifier()
            self.state = 7770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMENT_SYMBOL or _la==SQLParser.DATA_SYMBOL or _la==SQLParser.ENGINE_SYMBOL or _la==SQLParser.INDEX_SYMBOL or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (SQLParser.MAX_ROWS_SYMBOL - 323)) | (1 << (SQLParser.MIN_ROWS_SYMBOL - 323)) | (1 << (SQLParser.NODEGROUP_SYMBOL - 323)))) != 0) or _la==SQLParser.STORAGE_SYMBOL or _la==SQLParser.TABLESPACE_SYMBOL:
                self.state = 7767
                self.partitionOption()
                self.state = 7772
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionValueItemListParenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def partitionValueItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.PartitionValueItemContext)
            else:
                return self.getTypedRuleContext(SQLParser.PartitionValueItemContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_partitionValueItemListParen

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionValueItemListParen" ):
                listener.enterPartitionValueItemListParen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionValueItemListParen" ):
                listener.exitPartitionValueItemListParen(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionValueItemListParen" ):
                return visitor.visitPartitionValueItemListParen(self)
            else:
                return visitor.visitChildren(self)




    def partitionValueItemListParen(self):

        localctx = SQLParser.PartitionValueItemListParenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 974, self.RULE_partitionValueItemListParen)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7773
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 7774
            self.partitionValueItem()
            self.state = 7779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 7775
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 7776
                self.partitionValueItem()
                self.state = 7781
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7782
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionValueItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitExpr(self):
            return self.getTypedRuleContext(SQLParser.BitExprContext,0)


        def MAXVALUE_SYMBOL(self):
            return self.getToken(SQLParser.MAXVALUE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_partitionValueItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionValueItem" ):
                listener.enterPartitionValueItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionValueItem" ):
                listener.exitPartitionValueItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionValueItem" ):
                return visitor.visitPartitionValueItem(self)
            else:
                return visitor.visitChildren(self)




    def partitionValueItem(self):

        localctx = SQLParser.PartitionValueItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 976, self.RULE_partitionValueItem)
        try:
            self.state = 7786
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1037,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7784
                self.bitExpr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7785
                self.match(SQLParser.MAXVALUE_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefinerClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFINER_SYMBOL(self):
            return self.getToken(SQLParser.DEFINER_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def user(self):
            return self.getTypedRuleContext(SQLParser.UserContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_definerClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinerClause" ):
                listener.enterDefinerClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinerClause" ):
                listener.exitDefinerClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefinerClause" ):
                return visitor.visitDefinerClause(self)
            else:
                return visitor.visitChildren(self)




    def definerClause(self):

        localctx = SQLParser.DefinerClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 978, self.RULE_definerClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7788
            self.match(SQLParser.DEFINER_SYMBOL)
            self.state = 7789
            self.match(SQLParser.EQUAL_OPERATOR)
            self.state = 7790
            self.user()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExistsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF_SYMBOL(self):
            return self.getToken(SQLParser.IF_SYMBOL, 0)

        def EXISTS_SYMBOL(self):
            return self.getToken(SQLParser.EXISTS_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_ifExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExists" ):
                listener.enterIfExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExists" ):
                listener.exitIfExists(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfExists" ):
                return visitor.visitIfExists(self)
            else:
                return visitor.visitChildren(self)




    def ifExists(self):

        localctx = SQLParser.IfExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 980, self.RULE_ifExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7792
            self.match(SQLParser.IF_SYMBOL)
            self.state = 7793
            self.match(SQLParser.EXISTS_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfNotExistsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF_SYMBOL(self):
            return self.getToken(SQLParser.IF_SYMBOL, 0)

        def notRule(self):
            return self.getTypedRuleContext(SQLParser.NotRuleContext,0)


        def EXISTS_SYMBOL(self):
            return self.getToken(SQLParser.EXISTS_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_ifNotExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfNotExists" ):
                listener.enterIfNotExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfNotExists" ):
                listener.exitIfNotExists(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfNotExists" ):
                return visitor.visitIfNotExists(self)
            else:
                return visitor.visitChildren(self)




    def ifNotExists(self):

        localctx = SQLParser.IfNotExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 982, self.RULE_ifNotExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7795
            self.match(SQLParser.IF_SYMBOL)
            self.state = 7796
            self.notRule()
            self.state = 7797
            self.match(SQLParser.EXISTS_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None # Token

        def functionParameter(self):
            return self.getTypedRuleContext(SQLParser.FunctionParameterContext,0)


        def IN_SYMBOL(self):
            return self.getToken(SQLParser.IN_SYMBOL, 0)

        def OUT_SYMBOL(self):
            return self.getToken(SQLParser.OUT_SYMBOL, 0)

        def INOUT_SYMBOL(self):
            return self.getToken(SQLParser.INOUT_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_procedureParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureParameter" ):
                listener.enterProcedureParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureParameter" ):
                listener.exitProcedureParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureParameter" ):
                return visitor.visitProcedureParameter(self)
            else:
                return visitor.visitChildren(self)




    def procedureParameter(self):

        localctx = SQLParser.ProcedureParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 984, self.RULE_procedureParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7800
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1038,self._ctx)
            if la_ == 1:
                self.state = 7799
                localctx.type = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLParser.INOUT_SYMBOL or _la==SQLParser.IN_SYMBOL or _la==SQLParser.OUT_SYMBOL):
                    localctx.type = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 7802
            self.functionParameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterName(self):
            return self.getTypedRuleContext(SQLParser.ParameterNameContext,0)


        def typeWithOptCollate(self):
            return self.getTypedRuleContext(SQLParser.TypeWithOptCollateContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_functionParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionParameter" ):
                listener.enterFunctionParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionParameter" ):
                listener.exitFunctionParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionParameter" ):
                return visitor.visitFunctionParameter(self)
            else:
                return visitor.visitChildren(self)




    def functionParameter(self):

        localctx = SQLParser.FunctionParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 986, self.RULE_functionParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7804
            self.parameterName()
            self.state = 7805
            self.typeWithOptCollate()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLLATE_SYMBOL(self):
            return self.getToken(SQLParser.COLLATE_SYMBOL, 0)

        def collationName(self):
            return self.getTypedRuleContext(SQLParser.CollationNameContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_collate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollate" ):
                listener.enterCollate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollate" ):
                listener.exitCollate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollate" ):
                return visitor.visitCollate(self)
            else:
                return visitor.visitChildren(self)




    def collate(self):

        localctx = SQLParser.CollateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 988, self.RULE_collate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7807
            self.match(SQLParser.COLLATE_SYMBOL)
            self.state = 7808
            self.collationName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeWithOptCollateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(SQLParser.DataTypeContext,0)


        def collate(self):
            return self.getTypedRuleContext(SQLParser.CollateContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_typeWithOptCollate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeWithOptCollate" ):
                listener.enterTypeWithOptCollate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeWithOptCollate" ):
                listener.exitTypeWithOptCollate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeWithOptCollate" ):
                return visitor.visitTypeWithOptCollate(self)
            else:
                return visitor.visitChildren(self)




    def typeWithOptCollate(self):

        localctx = SQLParser.TypeWithOptCollateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 990, self.RULE_typeWithOptCollate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7810
            self.dataType()
            self.state = 7812
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1039,self._ctx)
            if la_ == 1:
                self.state = 7811
                self.collate()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaIdentifierPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def schemaRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.SchemaRefContext)
            else:
                return self.getTypedRuleContext(SQLParser.SchemaRefContext,i)


        def COMMA_SYMBOL(self):
            return self.getToken(SQLParser.COMMA_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_schemaIdentifierPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaIdentifierPair" ):
                listener.enterSchemaIdentifierPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaIdentifierPair" ):
                listener.exitSchemaIdentifierPair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSchemaIdentifierPair" ):
                return visitor.visitSchemaIdentifierPair(self)
            else:
                return visitor.visitChildren(self)




    def schemaIdentifierPair(self):

        localctx = SQLParser.SchemaIdentifierPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 992, self.RULE_schemaIdentifierPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7814
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 7815
            self.schemaRef()
            self.state = 7816
            self.match(SQLParser.COMMA_SYMBOL)
            self.state = 7817
            self.schemaRef()
            self.state = 7818
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewRefListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def viewRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ViewRefContext)
            else:
                return self.getTypedRuleContext(SQLParser.ViewRefContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_viewRefList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewRefList" ):
                listener.enterViewRefList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewRefList" ):
                listener.exitViewRefList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitViewRefList" ):
                return visitor.visitViewRefList(self)
            else:
                return visitor.visitChildren(self)




    def viewRefList(self):

        localctx = SQLParser.ViewRefListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 994, self.RULE_viewRefList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7820
            self.viewRef()
            self.state = 7825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 7821
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 7822
                self.viewRef()
                self.state = 7827
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def updateElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.UpdateElementContext)
            else:
                return self.getTypedRuleContext(SQLParser.UpdateElementContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_updateList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateList" ):
                listener.enterUpdateList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateList" ):
                listener.exitUpdateList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdateList" ):
                return visitor.visitUpdateList(self)
            else:
                return visitor.visitChildren(self)




    def updateList(self):

        localctx = SQLParser.UpdateListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 996, self.RULE_updateList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7828
            self.updateElement()
            self.state = 7833
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1041,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 7829
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 7830
                    self.updateElement() 
                self.state = 7835
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1041,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnRef(self):
            return self.getTypedRuleContext(SQLParser.ColumnRefContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(SQLParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_updateElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateElement" ):
                listener.enterUpdateElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateElement" ):
                listener.exitUpdateElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdateElement" ):
                return visitor.visitUpdateElement(self)
            else:
                return visitor.visitChildren(self)




    def updateElement(self):

        localctx = SQLParser.UpdateElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 998, self.RULE_updateElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7836
            self.columnRef()
            self.state = 7837
            self.match(SQLParser.EQUAL_OPERATOR)
            self.state = 7840
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1042,self._ctx)
            if la_ == 1:
                self.state = 7838
                self.expr(0)
                pass

            elif la_ == 2:
                self.state = 7839
                self.match(SQLParser.DEFAULT_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharsetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def charset(self):
            return self.getTypedRuleContext(SQLParser.CharsetContext,0)


        def charsetName(self):
            return self.getTypedRuleContext(SQLParser.CharsetNameContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_charsetClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharsetClause" ):
                listener.enterCharsetClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharsetClause" ):
                listener.exitCharsetClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharsetClause" ):
                return visitor.visitCharsetClause(self)
            else:
                return visitor.visitChildren(self)




    def charsetClause(self):

        localctx = SQLParser.CharsetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1000, self.RULE_charsetClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7842
            self.charset()
            self.state = 7843
            self.charsetName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLUMNS_SYMBOL(self):
            return self.getToken(SQLParser.COLUMNS_SYMBOL, 0)

        def fieldTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.FieldTermContext)
            else:
                return self.getTypedRuleContext(SQLParser.FieldTermContext,i)


        def getRuleIndex(self):
            return SQLParser.RULE_fieldsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldsClause" ):
                listener.enterFieldsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldsClause" ):
                listener.exitFieldsClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldsClause" ):
                return visitor.visitFieldsClause(self)
            else:
                return visitor.visitChildren(self)




    def fieldsClause(self):

        localctx = SQLParser.FieldsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1002, self.RULE_fieldsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7845
            self.match(SQLParser.COLUMNS_SYMBOL)
            self.state = 7847 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 7846
                    self.fieldTerm()

                else:
                    raise NoViableAltException(self)
                self.state = 7849 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1043,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TERMINATED_SYMBOL(self):
            return self.getToken(SQLParser.TERMINATED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(SQLParser.BY_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(SQLParser.TextStringContext,0)


        def ENCLOSED_SYMBOL(self):
            return self.getToken(SQLParser.ENCLOSED_SYMBOL, 0)

        def OPTIONALLY_SYMBOL(self):
            return self.getToken(SQLParser.OPTIONALLY_SYMBOL, 0)

        def ESCAPED_SYMBOL(self):
            return self.getToken(SQLParser.ESCAPED_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_fieldTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldTerm" ):
                listener.enterFieldTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldTerm" ):
                listener.exitFieldTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldTerm" ):
                return visitor.visitFieldTerm(self)
            else:
                return visitor.visitChildren(self)




    def fieldTerm(self):

        localctx = SQLParser.FieldTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1004, self.RULE_fieldTerm)
        self._la = 0 # Token type
        try:
            self.state = 7863
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.TERMINATED_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7851
                self.match(SQLParser.TERMINATED_SYMBOL)
                self.state = 7852
                self.match(SQLParser.BY_SYMBOL)
                self.state = 7853
                self.textString()
                pass
            elif token in [SQLParser.ENCLOSED_SYMBOL, SQLParser.OPTIONALLY_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7855
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.OPTIONALLY_SYMBOL:
                    self.state = 7854
                    self.match(SQLParser.OPTIONALLY_SYMBOL)


                self.state = 7857
                self.match(SQLParser.ENCLOSED_SYMBOL)
                self.state = 7858
                self.match(SQLParser.BY_SYMBOL)
                self.state = 7859
                self.textString()
                pass
            elif token in [SQLParser.ESCAPED_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7860
                self.match(SQLParser.ESCAPED_SYMBOL)
                self.state = 7861
                self.match(SQLParser.BY_SYMBOL)
                self.state = 7862
                self.textString()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinesClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINES_SYMBOL(self):
            return self.getToken(SQLParser.LINES_SYMBOL, 0)

        def lineTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.LineTermContext)
            else:
                return self.getTypedRuleContext(SQLParser.LineTermContext,i)


        def getRuleIndex(self):
            return SQLParser.RULE_linesClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinesClause" ):
                listener.enterLinesClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinesClause" ):
                listener.exitLinesClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLinesClause" ):
                return visitor.visitLinesClause(self)
            else:
                return visitor.visitChildren(self)




    def linesClause(self):

        localctx = SQLParser.LinesClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1006, self.RULE_linesClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7865
            self.match(SQLParser.LINES_SYMBOL)
            self.state = 7867 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 7866
                    self.lineTerm()

                else:
                    raise NoViableAltException(self)
                self.state = 7869 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1046,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BY_SYMBOL(self):
            return self.getToken(SQLParser.BY_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(SQLParser.TextStringContext,0)


        def TERMINATED_SYMBOL(self):
            return self.getToken(SQLParser.TERMINATED_SYMBOL, 0)

        def STARTING_SYMBOL(self):
            return self.getToken(SQLParser.STARTING_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_lineTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineTerm" ):
                listener.enterLineTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineTerm" ):
                listener.exitLineTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineTerm" ):
                return visitor.visitLineTerm(self)
            else:
                return visitor.visitChildren(self)




    def lineTerm(self):

        localctx = SQLParser.LineTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1008, self.RULE_lineTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7871
            _la = self._input.LA(1)
            if not(_la==SQLParser.STARTING_SYMBOL or _la==SQLParser.TERMINATED_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7872
            self.match(SQLParser.BY_SYMBOL)
            self.state = 7873
            self.textString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def user(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.UserContext)
            else:
                return self.getTypedRuleContext(SQLParser.UserContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_userList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserList" ):
                listener.enterUserList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserList" ):
                listener.exitUserList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserList" ):
                return visitor.visitUserList(self)
            else:
                return visitor.visitChildren(self)




    def userList(self):

        localctx = SQLParser.UserListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1010, self.RULE_userList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7875
            self.user()
            self.state = 7880
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1047,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 7876
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 7877
                    self.user() 
                self.state = 7882
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1047,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUserListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createUserEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.CreateUserEntryContext)
            else:
                return self.getTypedRuleContext(SQLParser.CreateUserEntryContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_createUserList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUserList" ):
                listener.enterCreateUserList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUserList" ):
                listener.exitCreateUserList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateUserList" ):
                return visitor.visitCreateUserList(self)
            else:
                return visitor.visitChildren(self)




    def createUserList(self):

        localctx = SQLParser.CreateUserListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1012, self.RULE_createUserList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7883
            self.createUserEntry()
            self.state = 7888
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1048,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 7884
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 7885
                    self.createUserEntry() 
                self.state = 7890
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1048,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterUserListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterUserEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.AlterUserEntryContext)
            else:
                return self.getTypedRuleContext(SQLParser.AlterUserEntryContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_alterUserList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUserList" ):
                listener.enterAlterUserList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUserList" ):
                listener.exitAlterUserList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterUserList" ):
                return visitor.visitAlterUserList(self)
            else:
                return visitor.visitChildren(self)




    def alterUserList(self):

        localctx = SQLParser.AlterUserListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1014, self.RULE_alterUserList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7891
            self.alterUserEntry()
            self.state = 7896
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1049,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 7892
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 7893
                    self.alterUserEntry() 
                self.state = 7898
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1049,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUserEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def user(self):
            return self.getTypedRuleContext(SQLParser.UserContext,0)


        def IDENTIFIED_SYMBOL(self):
            return self.getToken(SQLParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(SQLParser.BY_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(SQLParser.TextStringContext,0)


        def WITH_SYMBOL(self):
            return self.getToken(SQLParser.WITH_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(SQLParser.TextOrIdentifierContext,0)


        def RANDOM_SYMBOL(self):
            return self.getToken(SQLParser.RANDOM_SYMBOL, 0)

        def PASSWORD_SYMBOL(self):
            return self.getToken(SQLParser.PASSWORD_SYMBOL, 0)

        def AS_SYMBOL(self):
            return self.getToken(SQLParser.AS_SYMBOL, 0)

        def textStringHash(self):
            return self.getTypedRuleContext(SQLParser.TextStringHashContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_createUserEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUserEntry" ):
                listener.enterCreateUserEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUserEntry" ):
                listener.exitCreateUserEntry(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateUserEntry" ):
                return visitor.visitCreateUserEntry(self)
            else:
                return visitor.visitChildren(self)




    def createUserEntry(self):

        localctx = SQLParser.CreateUserEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1016, self.RULE_createUserEntry)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7899
            self.user()
            self.state = 7926
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1054,self._ctx)
            if la_ == 1:
                self.state = 7900
                self.match(SQLParser.IDENTIFIED_SYMBOL)
                self.state = 7924
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1053,self._ctx)
                if la_ == 1:
                    self.state = 7901
                    self.match(SQLParser.BY_SYMBOL)
                    self.state = 7904
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1050,self._ctx)
                    if la_ == 1:
                        self.state = 7902
                        if not self.serverVersion < 80011:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.serverVersion < 80011")
                        self.state = 7903
                        self.match(SQLParser.PASSWORD_SYMBOL)


                    self.state = 7906
                    self.textString()
                    pass

                elif la_ == 2:
                    self.state = 7907
                    self.match(SQLParser.WITH_SYMBOL)
                    self.state = 7908
                    self.textOrIdentifier()
                    self.state = 7914
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1051,self._ctx)
                    if la_ == 1:
                        self.state = 7909
                        self.match(SQLParser.AS_SYMBOL)
                        self.state = 7910
                        self.textStringHash()

                    elif la_ == 2:
                        self.state = 7911
                        if not self.serverVersion >= 50706:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.serverVersion >= 50706")
                        self.state = 7912
                        self.match(SQLParser.BY_SYMBOL)
                        self.state = 7913
                        self.textString()


                    pass

                elif la_ == 3:
                    self.state = 7916
                    if not self.serverVersion >= 80018:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80018")
                    self.state = 7919
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.WITH_SYMBOL:
                        self.state = 7917
                        self.match(SQLParser.WITH_SYMBOL)
                        self.state = 7918
                        self.textOrIdentifier()


                    self.state = 7921
                    self.match(SQLParser.BY_SYMBOL)
                    self.state = 7922
                    self.match(SQLParser.RANDOM_SYMBOL)
                    self.state = 7923
                    self.match(SQLParser.PASSWORD_SYMBOL)
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterUserEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def user(self):
            return self.getTypedRuleContext(SQLParser.UserContext,0)


        def IDENTIFIED_SYMBOL(self):
            return self.getToken(SQLParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(SQLParser.BY_SYMBOL, 0)

        def textString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.TextStringContext)
            else:
                return self.getTypedRuleContext(SQLParser.TextStringContext,i)


        def WITH_SYMBOL(self):
            return self.getToken(SQLParser.WITH_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(SQLParser.TextOrIdentifierContext,0)


        def discardOldPassword(self):
            return self.getTypedRuleContext(SQLParser.DiscardOldPasswordContext,0)


        def REPLACE_SYMBOL(self):
            return self.getToken(SQLParser.REPLACE_SYMBOL, 0)

        def retainCurrentPassword(self):
            return self.getTypedRuleContext(SQLParser.RetainCurrentPasswordContext,0)


        def AS_SYMBOL(self):
            return self.getToken(SQLParser.AS_SYMBOL, 0)

        def textStringHash(self):
            return self.getTypedRuleContext(SQLParser.TextStringHashContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_alterUserEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUserEntry" ):
                listener.enterAlterUserEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUserEntry" ):
                listener.exitAlterUserEntry(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterUserEntry" ):
                return visitor.visitAlterUserEntry(self)
            else:
                return visitor.visitChildren(self)




    def alterUserEntry(self):

        localctx = SQLParser.AlterUserEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1018, self.RULE_alterUserEntry)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7928
            self.user()
            self.state = 7957
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1062,self._ctx)
            if la_ == 1:
                self.state = 7929
                self.match(SQLParser.IDENTIFIED_SYMBOL)
                self.state = 7952
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1060,self._ctx)
                if la_ == 1:
                    self.state = 7932
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.WITH_SYMBOL:
                        self.state = 7930
                        self.match(SQLParser.WITH_SYMBOL)
                        self.state = 7931
                        self.textOrIdentifier()


                    self.state = 7934
                    self.match(SQLParser.BY_SYMBOL)
                    self.state = 7935
                    self.textString()
                    self.state = 7938
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1056,self._ctx)
                    if la_ == 1:
                        self.state = 7936
                        self.match(SQLParser.REPLACE_SYMBOL)
                        self.state = 7937
                        self.textString()


                    self.state = 7941
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1057,self._ctx)
                    if la_ == 1:
                        self.state = 7940
                        self.retainCurrentPassword()



                elif la_ == 2:
                    self.state = 7943
                    self.match(SQLParser.WITH_SYMBOL)
                    self.state = 7944
                    self.textOrIdentifier()
                    self.state = 7950
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1059,self._ctx)
                    if la_ == 1:
                        self.state = 7945
                        self.match(SQLParser.AS_SYMBOL)
                        self.state = 7946
                        self.textStringHash()
                        self.state = 7948
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1058,self._ctx)
                        if la_ == 1:
                            self.state = 7947
                            self.retainCurrentPassword()






                pass

            elif la_ == 2:
                self.state = 7955
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1061,self._ctx)
                if la_ == 1:
                    self.state = 7954
                    self.discardOldPassword()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RetainCurrentPasswordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETAIN_SYMBOL(self):
            return self.getToken(SQLParser.RETAIN_SYMBOL, 0)

        def CURRENT_SYMBOL(self):
            return self.getToken(SQLParser.CURRENT_SYMBOL, 0)

        def PASSWORD_SYMBOL(self):
            return self.getToken(SQLParser.PASSWORD_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_retainCurrentPassword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRetainCurrentPassword" ):
                listener.enterRetainCurrentPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRetainCurrentPassword" ):
                listener.exitRetainCurrentPassword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRetainCurrentPassword" ):
                return visitor.visitRetainCurrentPassword(self)
            else:
                return visitor.visitChildren(self)




    def retainCurrentPassword(self):

        localctx = SQLParser.RetainCurrentPasswordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1020, self.RULE_retainCurrentPassword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7959
            self.match(SQLParser.RETAIN_SYMBOL)
            self.state = 7960
            self.match(SQLParser.CURRENT_SYMBOL)
            self.state = 7961
            self.match(SQLParser.PASSWORD_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiscardOldPasswordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISCARD_SYMBOL(self):
            return self.getToken(SQLParser.DISCARD_SYMBOL, 0)

        def OLD_SYMBOL(self):
            return self.getToken(SQLParser.OLD_SYMBOL, 0)

        def PASSWORD_SYMBOL(self):
            return self.getToken(SQLParser.PASSWORD_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_discardOldPassword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscardOldPassword" ):
                listener.enterDiscardOldPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscardOldPassword" ):
                listener.exitDiscardOldPassword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiscardOldPassword" ):
                return visitor.visitDiscardOldPassword(self)
            else:
                return visitor.visitChildren(self)




    def discardOldPassword(self):

        localctx = SQLParser.DiscardOldPasswordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1022, self.RULE_discardOldPassword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7963
            self.match(SQLParser.DISCARD_SYMBOL)
            self.state = 7964
            self.match(SQLParser.OLD_SYMBOL)
            self.state = 7965
            self.match(SQLParser.PASSWORD_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplacePasswordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACE_SYMBOL(self):
            return self.getToken(SQLParser.REPLACE_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(SQLParser.TextStringContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_replacePassword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplacePassword" ):
                listener.enterReplacePassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplacePassword" ):
                listener.exitReplacePassword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplacePassword" ):
                return visitor.visitReplacePassword(self)
            else:
                return visitor.visitChildren(self)




    def replacePassword(self):

        localctx = SQLParser.ReplacePasswordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1024, self.RULE_replacePassword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7967
            self.match(SQLParser.REPLACE_SYMBOL)
            self.state = 7968
            self.textString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserIdentifierOrTextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.TextOrIdentifierContext)
            else:
                return self.getTypedRuleContext(SQLParser.TextOrIdentifierContext,i)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(SQLParser.AT_SIGN_SYMBOL, 0)

        def AT_TEXT_SUFFIX(self):
            return self.getToken(SQLParser.AT_TEXT_SUFFIX, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_userIdentifierOrText

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserIdentifierOrText" ):
                listener.enterUserIdentifierOrText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserIdentifierOrText" ):
                listener.exitUserIdentifierOrText(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserIdentifierOrText" ):
                return visitor.visitUserIdentifierOrText(self)
            else:
                return visitor.visitChildren(self)




    def userIdentifierOrText(self):

        localctx = SQLParser.UserIdentifierOrTextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1026, self.RULE_userIdentifierOrText)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7970
            self.textOrIdentifier()
            self.state = 7974
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1063,self._ctx)
            if la_ == 1:
                self.state = 7971
                self.match(SQLParser.AT_SIGN_SYMBOL)
                self.state = 7972
                self.textOrIdentifier()

            elif la_ == 2:
                self.state = 7973
                self.match(SQLParser.AT_TEXT_SUFFIX)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userIdentifierOrText(self):
            return self.getTypedRuleContext(SQLParser.UserIdentifierOrTextContext,0)


        def CURRENT_USER_SYMBOL(self):
            return self.getToken(SQLParser.CURRENT_USER_SYMBOL, 0)

        def parentheses(self):
            return self.getTypedRuleContext(SQLParser.ParenthesesContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_user

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUser" ):
                listener.enterUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUser" ):
                listener.exitUser(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUser" ):
                return visitor.visitUser(self)
            else:
                return visitor.visitChildren(self)




    def user(self):

        localctx = SQLParser.UserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1028, self.RULE_user)
        try:
            self.state = 7981
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1065,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7976
                self.userIdentifierOrText()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7977
                self.match(SQLParser.CURRENT_USER_SYMBOL)
                self.state = 7979
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1064,self._ctx)
                if la_ == 1:
                    self.state = 7978
                    self.parentheses()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LikeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIKE_SYMBOL(self):
            return self.getToken(SQLParser.LIKE_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_likeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLikeClause" ):
                listener.enterLikeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLikeClause" ):
                listener.exitLikeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLikeClause" ):
                return visitor.visitLikeClause(self)
            else:
                return visitor.visitChildren(self)




    def likeClause(self):

        localctx = SQLParser.LikeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1030, self.RULE_likeClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7983
            self.match(SQLParser.LIKE_SYMBOL)
            self.state = 7984
            self.textStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LikeOrWhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def likeClause(self):
            return self.getTypedRuleContext(SQLParser.LikeClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(SQLParser.WhereClauseContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_likeOrWhere

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLikeOrWhere" ):
                listener.enterLikeOrWhere(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLikeOrWhere" ):
                listener.exitLikeOrWhere(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLikeOrWhere" ):
                return visitor.visitLikeOrWhere(self)
            else:
                return visitor.visitChildren(self)




    def likeOrWhere(self):

        localctx = SQLParser.LikeOrWhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1032, self.RULE_likeOrWhere)
        try:
            self.state = 7988
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.LIKE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7986
                self.likeClause()
                pass
            elif token in [SQLParser.WHERE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7987
                self.whereClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnlineOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ONLINE_SYMBOL(self):
            return self.getToken(SQLParser.ONLINE_SYMBOL, 0)

        def OFFLINE_SYMBOL(self):
            return self.getToken(SQLParser.OFFLINE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_onlineOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnlineOption" ):
                listener.enterOnlineOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnlineOption" ):
                listener.exitOnlineOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOnlineOption" ):
                return visitor.visitOnlineOption(self)
            else:
                return visitor.visitChildren(self)




    def onlineOption(self):

        localctx = SQLParser.OnlineOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1034, self.RULE_onlineOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7990
            _la = self._input.LA(1)
            if not(_la==SQLParser.OFFLINE_SYMBOL or _la==SQLParser.ONLINE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoWriteToBinLogContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_SYMBOL(self):
            return self.getToken(SQLParser.LOCAL_SYMBOL, 0)

        def NO_WRITE_TO_BINLOG_SYMBOL(self):
            return self.getToken(SQLParser.NO_WRITE_TO_BINLOG_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_noWriteToBinLog

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoWriteToBinLog" ):
                listener.enterNoWriteToBinLog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoWriteToBinLog" ):
                listener.exitNoWriteToBinLog(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoWriteToBinLog" ):
                return visitor.visitNoWriteToBinLog(self)
            else:
                return visitor.visitChildren(self)




    def noWriteToBinLog(self):

        localctx = SQLParser.NoWriteToBinLogContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1036, self.RULE_noWriteToBinLog)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7992
            _la = self._input.LA(1)
            if not(_la==SQLParser.LOCAL_SYMBOL or _la==SQLParser.NO_WRITE_TO_BINLOG_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsePartitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION_SYMBOL(self):
            return self.getToken(SQLParser.PARTITION_SYMBOL, 0)

        def identifierListWithParentheses(self):
            return self.getTypedRuleContext(SQLParser.IdentifierListWithParenthesesContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_usePartition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsePartition" ):
                listener.enterUsePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsePartition" ):
                listener.exitUsePartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsePartition" ):
                return visitor.visitUsePartition(self)
            else:
                return visitor.visitChildren(self)




    def usePartition(self):

        localctx = SQLParser.UsePartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1038, self.RULE_usePartition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7994
            if not self.serverVersion >= 50602:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.serverVersion >= 50602")
            self.state = 7995
            self.match(SQLParser.PARTITION_SYMBOL)
            self.state = 7996
            self.identifierListWithParentheses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotIdentifier(self):
            return self.getTypedRuleContext(SQLParser.DotIdentifierContext,0)


        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(SQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_fieldIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldIdentifier" ):
                listener.enterFieldIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldIdentifier" ):
                listener.exitFieldIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldIdentifier" ):
                return visitor.visitFieldIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def fieldIdentifier(self):

        localctx = SQLParser.FieldIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1040, self.RULE_fieldIdentifier)
        try:
            self.state = 8003
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1068,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7998
                self.dotIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7999
                self.qualifiedIdentifier()
                self.state = 8001
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1067,self._ctx)
                if la_ == 1:
                    self.state = 8000
                    self.dotIdentifier()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def fieldIdentifier(self):
            return self.getTypedRuleContext(SQLParser.FieldIdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_columnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnName" ):
                listener.enterColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnName" ):
                listener.exitColumnName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnName" ):
                return visitor.visitColumnName(self)
            else:
                return visitor.visitChildren(self)




    def columnName(self):

        localctx = SQLParser.ColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1042, self.RULE_columnName)
        try:
            self.state = 8009
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1069,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8005
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 8006
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8007
                if not self.serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 80000")
                self.state = 8008
                self.fieldIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnInternalRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_columnInternalRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnInternalRef" ):
                listener.enterColumnInternalRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnInternalRef" ):
                listener.exitColumnInternalRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnInternalRef" ):
                return visitor.visitColumnInternalRef(self)
            else:
                return visitor.visitChildren(self)




    def columnInternalRef(self):

        localctx = SQLParser.ColumnInternalRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1044, self.RULE_columnInternalRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8011
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnInternalRefListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def columnInternalRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ColumnInternalRefContext)
            else:
                return self.getTypedRuleContext(SQLParser.ColumnInternalRefContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_columnInternalRefList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnInternalRefList" ):
                listener.enterColumnInternalRefList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnInternalRefList" ):
                listener.exitColumnInternalRefList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnInternalRefList" ):
                return visitor.visitColumnInternalRefList(self)
            else:
                return visitor.visitChildren(self)




    def columnInternalRefList(self):

        localctx = SQLParser.ColumnInternalRefListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1046, self.RULE_columnInternalRefList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8013
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 8014
            self.columnInternalRef()
            self.state = 8019
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 8015
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 8016
                self.columnInternalRef()
                self.state = 8021
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 8022
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldIdentifier(self):
            return self.getTypedRuleContext(SQLParser.FieldIdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_columnRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnRef" ):
                listener.enterColumnRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnRef" ):
                listener.exitColumnRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnRef" ):
                return visitor.visitColumnRef(self)
            else:
                return visitor.visitChildren(self)




    def columnRef(self):

        localctx = SQLParser.ColumnRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1048, self.RULE_columnRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8024
            self.fieldIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnRef(self):
            return self.getTypedRuleContext(SQLParser.ColumnRefContext,0)


        def tableWild(self):
            return self.getTypedRuleContext(SQLParser.TableWildContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_insertIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertIdentifier" ):
                listener.enterInsertIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertIdentifier" ):
                listener.exitInsertIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertIdentifier" ):
                return visitor.visitInsertIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def insertIdentifier(self):

        localctx = SQLParser.InsertIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1050, self.RULE_insertIdentifier)
        try:
            self.state = 8028
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1071,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8026
                self.columnRef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8027
                self.tableWild()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_indexName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexName" ):
                listener.enterIndexName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexName" ):
                listener.exitIndexName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexName" ):
                return visitor.visitIndexName(self)
            else:
                return visitor.visitChildren(self)




    def indexName(self):

        localctx = SQLParser.IndexNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1052, self.RULE_indexName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8030
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldIdentifier(self):
            return self.getTypedRuleContext(SQLParser.FieldIdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_indexRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexRef" ):
                listener.enterIndexRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexRef" ):
                listener.exitIndexRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexRef" ):
                return visitor.visitIndexRef(self)
            else:
                return visitor.visitChildren(self)




    def indexRef(self):

        localctx = SQLParser.IndexRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1054, self.RULE_indexRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8032
            self.fieldIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableWildContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SQLParser.IdentifierContext,i)


        def DOT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.DOT_SYMBOL)
            else:
                return self.getToken(SQLParser.DOT_SYMBOL, i)

        def MULT_OPERATOR(self):
            return self.getToken(SQLParser.MULT_OPERATOR, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_tableWild

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableWild" ):
                listener.enterTableWild(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableWild" ):
                listener.exitTableWild(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableWild" ):
                return visitor.visitTableWild(self)
            else:
                return visitor.visitChildren(self)




    def tableWild(self):

        localctx = SQLParser.TableWildContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1056, self.RULE_tableWild)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8034
            self.identifier()
            self.state = 8035
            self.match(SQLParser.DOT_SYMBOL)
            self.state = 8039
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1072,self._ctx)
            if la_ == 1:
                self.state = 8036
                self.identifier()
                self.state = 8037
                self.match(SQLParser.DOT_SYMBOL)


            self.state = 8041
            self.match(SQLParser.MULT_OPERATOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_schemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaName" ):
                listener.enterSchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaName" ):
                listener.exitSchemaName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSchemaName" ):
                return visitor.visitSchemaName(self)
            else:
                return visitor.visitChildren(self)




    def schemaName(self):

        localctx = SQLParser.SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1058, self.RULE_schemaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8043
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_schemaRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaRef" ):
                listener.enterSchemaRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaRef" ):
                listener.exitSchemaRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSchemaRef" ):
                return visitor.visitSchemaRef(self)
            else:
                return visitor.visitChildren(self)




    def schemaRef(self):

        localctx = SQLParser.SchemaRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1060, self.RULE_schemaRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8045
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(SQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_procedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureName" ):
                listener.enterProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureName" ):
                listener.exitProcedureName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureName" ):
                return visitor.visitProcedureName(self)
            else:
                return visitor.visitChildren(self)




    def procedureName(self):

        localctx = SQLParser.ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1062, self.RULE_procedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8047
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(SQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_procedureRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureRef" ):
                listener.enterProcedureRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureRef" ):
                listener.exitProcedureRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureRef" ):
                return visitor.visitProcedureRef(self)
            else:
                return visitor.visitChildren(self)




    def procedureRef(self):

        localctx = SQLParser.ProcedureRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1064, self.RULE_procedureRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8049
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(SQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_functionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionName" ):
                listener.enterFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionName" ):
                listener.exitFunctionName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionName" ):
                return visitor.visitFunctionName(self)
            else:
                return visitor.visitChildren(self)




    def functionName(self):

        localctx = SQLParser.FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1066, self.RULE_functionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8051
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(SQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_functionRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionRef" ):
                listener.enterFunctionRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionRef" ):
                listener.exitFunctionRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionRef" ):
                return visitor.visitFunctionRef(self)
            else:
                return visitor.visitChildren(self)




    def functionRef(self):

        localctx = SQLParser.FunctionRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1068, self.RULE_functionRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8053
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(SQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_triggerName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerName" ):
                listener.enterTriggerName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerName" ):
                listener.exitTriggerName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTriggerName" ):
                return visitor.visitTriggerName(self)
            else:
                return visitor.visitChildren(self)




    def triggerName(self):

        localctx = SQLParser.TriggerNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1070, self.RULE_triggerName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8055
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(SQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_triggerRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerRef" ):
                listener.enterTriggerRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerRef" ):
                listener.exitTriggerRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTriggerRef" ):
                return visitor.visitTriggerRef(self)
            else:
                return visitor.visitChildren(self)




    def triggerRef(self):

        localctx = SQLParser.TriggerRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1072, self.RULE_triggerRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8057
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(SQLParser.QualifiedIdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(SQLParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_viewName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewName" ):
                listener.enterViewName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewName" ):
                listener.exitViewName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitViewName" ):
                return visitor.visitViewName(self)
            else:
                return visitor.visitChildren(self)




    def viewName(self):

        localctx = SQLParser.ViewNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1074, self.RULE_viewName)
        try:
            self.state = 8061
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1073,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8059
                self.qualifiedIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8060
                self.dotIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(SQLParser.QualifiedIdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(SQLParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_viewRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewRef" ):
                listener.enterViewRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewRef" ):
                listener.exitViewRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitViewRef" ):
                return visitor.visitViewRef(self)
            else:
                return visitor.visitChildren(self)




    def viewRef(self):

        localctx = SQLParser.ViewRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1076, self.RULE_viewRef)
        try:
            self.state = 8065
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1074,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8063
                self.qualifiedIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8064
                self.dotIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablespaceNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_tablespaceName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablespaceName" ):
                listener.enterTablespaceName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablespaceName" ):
                listener.exitTablespaceName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablespaceName" ):
                return visitor.visitTablespaceName(self)
            else:
                return visitor.visitChildren(self)




    def tablespaceName(self):

        localctx = SQLParser.TablespaceNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1078, self.RULE_tablespaceName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8067
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablespaceRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_tablespaceRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablespaceRef" ):
                listener.enterTablespaceRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablespaceRef" ):
                listener.exitTablespaceRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablespaceRef" ):
                return visitor.visitTablespaceRef(self)
            else:
                return visitor.visitChildren(self)




    def tablespaceRef(self):

        localctx = SQLParser.TablespaceRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1080, self.RULE_tablespaceRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8069
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogfileGroupNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_logfileGroupName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogfileGroupName" ):
                listener.enterLogfileGroupName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogfileGroupName" ):
                listener.exitLogfileGroupName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogfileGroupName" ):
                return visitor.visitLogfileGroupName(self)
            else:
                return visitor.visitChildren(self)




    def logfileGroupName(self):

        localctx = SQLParser.LogfileGroupNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1082, self.RULE_logfileGroupName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8071
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogfileGroupRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_logfileGroupRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogfileGroupRef" ):
                listener.enterLogfileGroupRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogfileGroupRef" ):
                listener.exitLogfileGroupRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogfileGroupRef" ):
                return visitor.visitLogfileGroupRef(self)
            else:
                return visitor.visitChildren(self)




    def logfileGroupRef(self):

        localctx = SQLParser.LogfileGroupRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1084, self.RULE_logfileGroupRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8073
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(SQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_eventName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventName" ):
                listener.enterEventName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventName" ):
                listener.exitEventName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventName" ):
                return visitor.visitEventName(self)
            else:
                return visitor.visitChildren(self)




    def eventName(self):

        localctx = SQLParser.EventNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1086, self.RULE_eventName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8075
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(SQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_eventRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventRef" ):
                listener.enterEventRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventRef" ):
                listener.exitEventRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventRef" ):
                return visitor.visitEventRef(self)
            else:
                return visitor.visitChildren(self)




    def eventRef(self):

        localctx = SQLParser.EventRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1088, self.RULE_eventRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8077
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdfNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_udfName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfName" ):
                listener.enterUdfName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfName" ):
                listener.exitUdfName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdfName" ):
                return visitor.visitUdfName(self)
            else:
                return visitor.visitChildren(self)




    def udfName(self):

        localctx = SQLParser.UdfNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1090, self.RULE_udfName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8079
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServerNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self):
            return self.getTypedRuleContext(SQLParser.TextOrIdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_serverName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServerName" ):
                listener.enterServerName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServerName" ):
                listener.exitServerName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitServerName" ):
                return visitor.visitServerName(self)
            else:
                return visitor.visitChildren(self)




    def serverName(self):

        localctx = SQLParser.ServerNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1092, self.RULE_serverName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8081
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServerRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self):
            return self.getTypedRuleContext(SQLParser.TextOrIdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_serverRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServerRef" ):
                listener.enterServerRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServerRef" ):
                listener.exitServerRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitServerRef" ):
                return visitor.visitServerRef(self)
            else:
                return visitor.visitChildren(self)




    def serverRef(self):

        localctx = SQLParser.ServerRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1094, self.RULE_serverRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8083
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EngineRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self):
            return self.getTypedRuleContext(SQLParser.TextOrIdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_engineRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEngineRef" ):
                listener.enterEngineRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEngineRef" ):
                listener.exitEngineRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEngineRef" ):
                return visitor.visitEngineRef(self)
            else:
                return visitor.visitChildren(self)




    def engineRef(self):

        localctx = SQLParser.EngineRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1096, self.RULE_engineRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8085
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(SQLParser.QualifiedIdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(SQLParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_tableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableName" ):
                return visitor.visitTableName(self)
            else:
                return visitor.visitChildren(self)




    def tableName(self):

        localctx = SQLParser.TableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1098, self.RULE_tableName)
        try:
            self.state = 8089
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1075,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8087
                self.qualifiedIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8088
                self.dotIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilterTableRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def schemaRef(self):
            return self.getTypedRuleContext(SQLParser.SchemaRefContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(SQLParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_filterTableRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilterTableRef" ):
                listener.enterFilterTableRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilterTableRef" ):
                listener.exitFilterTableRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFilterTableRef" ):
                return visitor.visitFilterTableRef(self)
            else:
                return visitor.visitChildren(self)




    def filterTableRef(self):

        localctx = SQLParser.FilterTableRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1100, self.RULE_filterTableRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8091
            self.schemaRef()
            self.state = 8092
            self.dotIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableRefWithWildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def DOT_SYMBOL(self):
            return self.getToken(SQLParser.DOT_SYMBOL, 0)

        def MULT_OPERATOR(self):
            return self.getToken(SQLParser.MULT_OPERATOR, 0)

        def dotIdentifier(self):
            return self.getTypedRuleContext(SQLParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_tableRefWithWildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRefWithWildcard" ):
                listener.enterTableRefWithWildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRefWithWildcard" ):
                listener.exitTableRefWithWildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableRefWithWildcard" ):
                return visitor.visitTableRefWithWildcard(self)
            else:
                return visitor.visitChildren(self)




    def tableRefWithWildcard(self):

        localctx = SQLParser.TableRefWithWildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1102, self.RULE_tableRefWithWildcard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8094
            self.identifier()
            self.state = 8102
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1077,self._ctx)
            if la_ == 1:
                self.state = 8095
                self.match(SQLParser.DOT_SYMBOL)
                self.state = 8096
                self.match(SQLParser.MULT_OPERATOR)

            elif la_ == 2:
                self.state = 8097
                self.dotIdentifier()
                self.state = 8100
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1076,self._ctx)
                if la_ == 1:
                    self.state = 8098
                    self.match(SQLParser.DOT_SYMBOL)
                    self.state = 8099
                    self.match(SQLParser.MULT_OPERATOR)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(SQLParser.QualifiedIdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(SQLParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_tableRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRef" ):
                listener.enterTableRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRef" ):
                listener.exitTableRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableRef" ):
                return visitor.visitTableRef(self)
            else:
                return visitor.visitChildren(self)




    def tableRef(self):

        localctx = SQLParser.TableRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1104, self.RULE_tableRef)
        try:
            self.state = 8106
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1078,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8104
                self.qualifiedIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8105
                self.dotIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableRefListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.TableRefContext)
            else:
                return self.getTypedRuleContext(SQLParser.TableRefContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_tableRefList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRefList" ):
                listener.enterTableRefList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRefList" ):
                listener.exitTableRefList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableRefList" ):
                return visitor.visitTableRefList(self)
            else:
                return visitor.visitChildren(self)




    def tableRefList(self):

        localctx = SQLParser.TableRefListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1106, self.RULE_tableRefList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8108
            self.tableRef()
            self.state = 8113
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1079,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 8109
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 8110
                    self.tableRef() 
                self.state = 8115
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1079,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableAliasRefListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRefWithWildcard(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.TableRefWithWildcardContext)
            else:
                return self.getTypedRuleContext(SQLParser.TableRefWithWildcardContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_tableAliasRefList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableAliasRefList" ):
                listener.enterTableAliasRefList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableAliasRefList" ):
                listener.exitTableAliasRefList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableAliasRefList" ):
                return visitor.visitTableAliasRefList(self)
            else:
                return visitor.visitChildren(self)




    def tableAliasRefList(self):

        localctx = SQLParser.TableAliasRefListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1108, self.RULE_tableAliasRefList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8116
            self.tableRefWithWildcard()
            self.state = 8121
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1080,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 8117
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 8118
                    self.tableRefWithWildcard() 
                self.state = 8123
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1080,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_parameterName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterName" ):
                listener.enterParameterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterName" ):
                listener.exitParameterName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterName" ):
                return visitor.visitParameterName(self)
            else:
                return visitor.visitChildren(self)




    def parameterName(self):

        localctx = SQLParser.ParameterNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1110, self.RULE_parameterName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8124
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pureIdentifier(self):
            return self.getTypedRuleContext(SQLParser.PureIdentifierContext,0)


        def labelKeyword(self):
            return self.getTypedRuleContext(SQLParser.LabelKeywordContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_labelIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelIdentifier" ):
                listener.enterLabelIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelIdentifier" ):
                listener.exitLabelIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelIdentifier" ):
                return visitor.visitLabelIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def labelIdentifier(self):

        localctx = SQLParser.LabelIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1112, self.RULE_labelIdentifier)
        try:
            self.state = 8128
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1081,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8126
                self.pureIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8127
                self.labelKeyword()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelIdentifier(self):
            return self.getTypedRuleContext(SQLParser.LabelIdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_labelRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelRef" ):
                listener.enterLabelRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelRef" ):
                listener.exitLabelRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelRef" ):
                return visitor.visitLabelRef(self)
            else:
                return visitor.visitChildren(self)




    def labelRef(self):

        localctx = SQLParser.LabelRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1114, self.RULE_labelRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8130
            self.labelIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pureIdentifier(self):
            return self.getTypedRuleContext(SQLParser.PureIdentifierContext,0)


        def roleKeyword(self):
            return self.getTypedRuleContext(SQLParser.RoleKeywordContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_roleIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleIdentifier" ):
                listener.enterRoleIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleIdentifier" ):
                listener.exitRoleIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoleIdentifier" ):
                return visitor.visitRoleIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def roleIdentifier(self):

        localctx = SQLParser.RoleIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1116, self.RULE_roleIdentifier)
        try:
            self.state = 8134
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1082,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8132
                self.pureIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8133
                self.roleKeyword()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def roleIdentifier(self):
            return self.getTypedRuleContext(SQLParser.RoleIdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_roleRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleRef" ):
                listener.enterRoleRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleRef" ):
                listener.exitRoleRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoleRef" ):
                return visitor.visitRoleRef(self)
            else:
                return visitor.visitChildren(self)




    def roleRef(self):

        localctx = SQLParser.RoleRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1118, self.RULE_roleRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8136
            self.roleIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PluginRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_pluginRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPluginRef" ):
                listener.enterPluginRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPluginRef" ):
                listener.exitPluginRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPluginRef" ):
                return visitor.visitPluginRef(self)
            else:
                return visitor.visitChildren(self)




    def pluginRef(self):

        localctx = SQLParser.PluginRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1120, self.RULE_pluginRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8138
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComponentRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_componentRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponentRef" ):
                listener.enterComponentRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponentRef" ):
                listener.exitComponentRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComponentRef" ):
                return visitor.visitComponentRef(self)
            else:
                return visitor.visitChildren(self)




    def componentRef(self):

        localctx = SQLParser.ComponentRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1122, self.RULE_componentRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8140
            self.textStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceGroupRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_resourceGroupRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceGroupRef" ):
                listener.enterResourceGroupRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceGroupRef" ):
                listener.exitResourceGroupRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResourceGroupRef" ):
                return visitor.visitResourceGroupRef(self)
            else:
                return visitor.visitChildren(self)




    def resourceGroupRef(self):

        localctx = SQLParser.ResourceGroupRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1124, self.RULE_resourceGroupRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8142
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_windowName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowName" ):
                listener.enterWindowName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowName" ):
                listener.exitWindowName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowName" ):
                return visitor.visitWindowName(self)
            else:
                return visitor.visitChildren(self)




    def windowName(self):

        localctx = SQLParser.WindowNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1126, self.RULE_windowName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8144
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PureIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLParser.IDENTIFIER, 0)

        def BACK_TICK_QUOTED_ID(self):
            return self.getToken(SQLParser.BACK_TICK_QUOTED_ID, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(SQLParser.DOUBLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_pureIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPureIdentifier" ):
                listener.enterPureIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPureIdentifier" ):
                listener.exitPureIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPureIdentifier" ):
                return visitor.visitPureIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def pureIdentifier(self):

        localctx = SQLParser.PureIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1128, self.RULE_pureIdentifier)
        self._la = 0 # Token type
        try:
            self.state = 8149
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1083,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8146
                _la = self._input.LA(1)
                if not(_la==SQLParser.IDENTIFIER or _la==SQLParser.BACK_TICK_QUOTED_ID):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8147
                if not self.isSqlModeActive(AnsiQuotes):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.isSqlModeActive(AnsiQuotes)")
                self.state = 8148
                self.match(SQLParser.DOUBLE_QUOTED_TEXT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pureIdentifier(self):
            return self.getTypedRuleContext(SQLParser.PureIdentifierContext,0)


        def identifierKeyword(self):
            return self.getTypedRuleContext(SQLParser.IdentifierKeywordContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = SQLParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1130, self.RULE_identifier)
        try:
            self.state = 8153
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1084,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8151
                self.pureIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8152
                self.identifierKeyword()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SQLParser.IdentifierContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = SQLParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1132, self.RULE_identifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8155
            self.identifier()
            self.state = 8160
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1085,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 8156
                    self.match(SQLParser.COMMA_SYMBOL)
                    self.state = 8157
                    self.identifier() 
                self.state = 8162
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1085,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListWithParenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SQLParser.IdentifierListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_identifierListWithParentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierListWithParentheses" ):
                listener.enterIdentifierListWithParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierListWithParentheses" ):
                listener.exitIdentifierListWithParentheses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierListWithParentheses" ):
                return visitor.visitIdentifierListWithParentheses(self)
            else:
                return visitor.visitChildren(self)




    def identifierListWithParentheses(self):

        localctx = SQLParser.IdentifierListWithParenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1134, self.RULE_identifierListWithParentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8163
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 8164
            self.identifierList()
            self.state = 8165
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(SQLParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_qualifiedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdentifier" ):
                listener.enterQualifiedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdentifier" ):
                listener.exitQualifiedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedIdentifier" ):
                return visitor.visitQualifiedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedIdentifier(self):

        localctx = SQLParser.QualifiedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1136, self.RULE_qualifiedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8167
            self.identifier()
            self.state = 8169
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1086,self._ctx)
            if la_ == 1:
                self.state = 8168
                self.dotIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def dotIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.DotIdentifierContext)
            else:
                return self.getTypedRuleContext(SQLParser.DotIdentifierContext,i)


        def getRuleIndex(self):
            return SQLParser.RULE_simpleIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIdentifier" ):
                listener.enterSimpleIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIdentifier" ):
                listener.exitSimpleIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleIdentifier" ):
                return visitor.visitSimpleIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def simpleIdentifier(self):

        localctx = SQLParser.SimpleIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1138, self.RULE_simpleIdentifier)
        self._la = 0 # Token type
        try:
            self.state = 8182
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1089,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8171
                self.identifier()
                self.state = 8176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.DOT_SYMBOL:
                    self.state = 8172
                    self.dotIdentifier()
                    self.state = 8174
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLParser.DOT_SYMBOL:
                        self.state = 8173
                        self.dotIdentifier()




                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8178
                if not self.serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 80000")
                self.state = 8179
                self.dotIdentifier()
                self.state = 8180
                self.dotIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_SYMBOL(self):
            return self.getToken(SQLParser.DOT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_dotIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotIdentifier" ):
                listener.enterDotIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotIdentifier" ):
                listener.exitDotIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotIdentifier" ):
                return visitor.visitDotIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def dotIdentifier(self):

        localctx = SQLParser.DotIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1140, self.RULE_dotIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8184
            self.match(SQLParser.DOT_SYMBOL)
            self.state = 8185
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ulong_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(SQLParser.INT_NUMBER, 0)

        def HEX_NUMBER(self):
            return self.getToken(SQLParser.HEX_NUMBER, 0)

        def LONG_NUMBER(self):
            return self.getToken(SQLParser.LONG_NUMBER, 0)

        def ULONGLONG_NUMBER(self):
            return self.getToken(SQLParser.ULONGLONG_NUMBER, 0)

        def DECIMAL_NUMBER(self):
            return self.getToken(SQLParser.DECIMAL_NUMBER, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(SQLParser.FLOAT_NUMBER, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_ulong_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUlong_number" ):
                listener.enterUlong_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUlong_number" ):
                listener.exitUlong_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUlong_number" ):
                return visitor.visitUlong_number(self)
            else:
                return visitor.visitChildren(self)




    def ulong_number(self):

        localctx = SQLParser.Ulong_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1142, self.RULE_ulong_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8187
            _la = self._input.LA(1)
            if not(((((_la - 747)) & ~0x3f) == 0 and ((1 << (_la - 747)) & ((1 << (SQLParser.INT_NUMBER - 747)) | (1 << (SQLParser.LONG_NUMBER - 747)) | (1 << (SQLParser.ULONGLONG_NUMBER - 747)) | (1 << (SQLParser.HEX_NUMBER - 747)) | (1 << (SQLParser.DECIMAL_NUMBER - 747)) | (1 << (SQLParser.FLOAT_NUMBER - 747)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Real_ulong_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(SQLParser.INT_NUMBER, 0)

        def HEX_NUMBER(self):
            return self.getToken(SQLParser.HEX_NUMBER, 0)

        def LONG_NUMBER(self):
            return self.getToken(SQLParser.LONG_NUMBER, 0)

        def ULONGLONG_NUMBER(self):
            return self.getToken(SQLParser.ULONGLONG_NUMBER, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_real_ulong_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReal_ulong_number" ):
                listener.enterReal_ulong_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReal_ulong_number" ):
                listener.exitReal_ulong_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReal_ulong_number" ):
                return visitor.visitReal_ulong_number(self)
            else:
                return visitor.visitChildren(self)




    def real_ulong_number(self):

        localctx = SQLParser.Real_ulong_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1144, self.RULE_real_ulong_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8189
            _la = self._input.LA(1)
            if not(((((_la - 747)) & ~0x3f) == 0 and ((1 << (_la - 747)) & ((1 << (SQLParser.INT_NUMBER - 747)) | (1 << (SQLParser.LONG_NUMBER - 747)) | (1 << (SQLParser.ULONGLONG_NUMBER - 747)) | (1 << (SQLParser.HEX_NUMBER - 747)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ulonglong_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(SQLParser.INT_NUMBER, 0)

        def LONG_NUMBER(self):
            return self.getToken(SQLParser.LONG_NUMBER, 0)

        def ULONGLONG_NUMBER(self):
            return self.getToken(SQLParser.ULONGLONG_NUMBER, 0)

        def DECIMAL_NUMBER(self):
            return self.getToken(SQLParser.DECIMAL_NUMBER, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(SQLParser.FLOAT_NUMBER, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_ulonglong_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUlonglong_number" ):
                listener.enterUlonglong_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUlonglong_number" ):
                listener.exitUlonglong_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUlonglong_number" ):
                return visitor.visitUlonglong_number(self)
            else:
                return visitor.visitChildren(self)




    def ulonglong_number(self):

        localctx = SQLParser.Ulonglong_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1146, self.RULE_ulonglong_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8191
            _la = self._input.LA(1)
            if not(((((_la - 747)) & ~0x3f) == 0 and ((1 << (_la - 747)) & ((1 << (SQLParser.INT_NUMBER - 747)) | (1 << (SQLParser.LONG_NUMBER - 747)) | (1 << (SQLParser.ULONGLONG_NUMBER - 747)) | (1 << (SQLParser.DECIMAL_NUMBER - 747)) | (1 << (SQLParser.FLOAT_NUMBER - 747)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Real_ulonglong_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(SQLParser.INT_NUMBER, 0)

        def HEX_NUMBER(self):
            return self.getToken(SQLParser.HEX_NUMBER, 0)

        def ULONGLONG_NUMBER(self):
            return self.getToken(SQLParser.ULONGLONG_NUMBER, 0)

        def LONG_NUMBER(self):
            return self.getToken(SQLParser.LONG_NUMBER, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_real_ulonglong_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReal_ulonglong_number" ):
                listener.enterReal_ulonglong_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReal_ulonglong_number" ):
                listener.exitReal_ulonglong_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReal_ulonglong_number" ):
                return visitor.visitReal_ulonglong_number(self)
            else:
                return visitor.visitChildren(self)




    def real_ulonglong_number(self):

        localctx = SQLParser.Real_ulonglong_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1148, self.RULE_real_ulonglong_number)
        try:
            self.state = 8198
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1090,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8193
                self.match(SQLParser.INT_NUMBER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8194
                if not self.serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80017")
                self.state = 8195
                self.match(SQLParser.HEX_NUMBER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8196
                self.match(SQLParser.ULONGLONG_NUMBER)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8197
                self.match(SQLParser.LONG_NUMBER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextLiteralContext,0)


        def numLiteral(self):
            return self.getTypedRuleContext(SQLParser.NumLiteralContext,0)


        def temporalLiteral(self):
            return self.getTypedRuleContext(SQLParser.TemporalLiteralContext,0)


        def nullLiteral(self):
            return self.getTypedRuleContext(SQLParser.NullLiteralContext,0)


        def boolLiteral(self):
            return self.getTypedRuleContext(SQLParser.BoolLiteralContext,0)


        def HEX_NUMBER(self):
            return self.getToken(SQLParser.HEX_NUMBER, 0)

        def BIN_NUMBER(self):
            return self.getToken(SQLParser.BIN_NUMBER, 0)

        def UNDERSCORE_CHARSET(self):
            return self.getToken(SQLParser.UNDERSCORE_CHARSET, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = SQLParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1150, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.state = 8209
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1092,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8200
                self.textLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8201
                self.numLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8202
                self.temporalLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8203
                self.nullLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8204
                self.boolLiteral()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8206
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.UNDERSCORE_CHARSET:
                    self.state = 8205
                    self.match(SQLParser.UNDERSCORE_CHARSET)


                self.state = 8208
                _la = self._input.LA(1)
                if not(_la==SQLParser.HEX_NUMBER or _la==SQLParser.BIN_NUMBER):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignedLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(SQLParser.LiteralContext,0)


        def PLUS_OPERATOR(self):
            return self.getToken(SQLParser.PLUS_OPERATOR, 0)

        def ulong_number(self):
            return self.getTypedRuleContext(SQLParser.Ulong_numberContext,0)


        def MINUS_OPERATOR(self):
            return self.getToken(SQLParser.MINUS_OPERATOR, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_signedLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignedLiteral" ):
                listener.enterSignedLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignedLiteral" ):
                listener.exitSignedLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSignedLiteral" ):
                return visitor.visitSignedLiteral(self)
            else:
                return visitor.visitChildren(self)




    def signedLiteral(self):

        localctx = SQLParser.SignedLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1152, self.RULE_signedLiteral)
        try:
            self.state = 8216
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1093,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8211
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8212
                self.match(SQLParser.PLUS_OPERATOR)
                self.state = 8213
                self.ulong_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8214
                self.match(SQLParser.MINUS_OPERATOR)
                self.state = 8215
                self.ulong_number()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def textString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.TextStringContext)
            else:
                return self.getTypedRuleContext(SQLParser.TextStringContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_stringList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringList" ):
                listener.enterStringList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringList" ):
                listener.exitStringList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringList" ):
                return visitor.visitStringList(self)
            else:
                return visitor.visitChildren(self)




    def stringList(self):

        localctx = SQLParser.StringListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1154, self.RULE_stringList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8218
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 8219
            self.textString()
            self.state = 8224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 8220
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 8221
                self.textString()
                self.state = 8226
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 8227
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # Token

        def SINGLE_QUOTED_TEXT(self):
            return self.getToken(SQLParser.SINGLE_QUOTED_TEXT, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(SQLParser.DOUBLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_textStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextStringLiteral" ):
                listener.enterTextStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextStringLiteral" ):
                listener.exitTextStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTextStringLiteral" ):
                return visitor.visitTextStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def textStringLiteral(self):

        localctx = SQLParser.TextStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1156, self.RULE_textStringLiteral)
        try:
            self.state = 8232
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1095,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8229
                localctx.value = self.match(SQLParser.SINGLE_QUOTED_TEXT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8230
                if not not self.isSqlModeActive(AnsiQuotes):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "not self.isSqlModeActive(AnsiQuotes)")
                self.state = 8231
                localctx.value = self.match(SQLParser.DOUBLE_QUOTED_TEXT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextStringLiteralContext,0)


        def HEX_NUMBER(self):
            return self.getToken(SQLParser.HEX_NUMBER, 0)

        def BIN_NUMBER(self):
            return self.getToken(SQLParser.BIN_NUMBER, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_textString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextString" ):
                listener.enterTextString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextString" ):
                listener.exitTextString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTextString" ):
                return visitor.visitTextString(self)
            else:
                return visitor.visitChildren(self)




    def textString(self):

        localctx = SQLParser.TextStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1158, self.RULE_textString)
        try:
            self.state = 8237
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1096,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8234
                self.textStringLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8235
                self.match(SQLParser.HEX_NUMBER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8236
                self.match(SQLParser.BIN_NUMBER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextStringHashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextStringLiteralContext,0)


        def HEX_NUMBER(self):
            return self.getToken(SQLParser.HEX_NUMBER, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_textStringHash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextStringHash" ):
                listener.enterTextStringHash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextStringHash" ):
                listener.exitTextStringHash(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTextStringHash" ):
                return visitor.visitTextStringHash(self)
            else:
                return visitor.visitChildren(self)




    def textStringHash(self):

        localctx = SQLParser.TextStringHashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1160, self.RULE_textStringHash)
        try:
            self.state = 8242
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1097,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8239
                self.textStringLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8240
                if not self.serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80017")
                self.state = 8241
                self.match(SQLParser.HEX_NUMBER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.TextStringLiteralContext)
            else:
                return self.getTypedRuleContext(SQLParser.TextStringLiteralContext,i)


        def NCHAR_TEXT(self):
            return self.getToken(SQLParser.NCHAR_TEXT, 0)

        def UNDERSCORE_CHARSET(self):
            return self.getToken(SQLParser.UNDERSCORE_CHARSET, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_textLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextLiteral" ):
                listener.enterTextLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextLiteral" ):
                listener.exitTextLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTextLiteral" ):
                return visitor.visitTextLiteral(self)
            else:
                return visitor.visitChildren(self)




    def textLiteral(self):

        localctx = SQLParser.TextLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1162, self.RULE_textLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8249
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1099,self._ctx)
            if la_ == 1:
                self.state = 8245
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1098,self._ctx)
                if la_ == 1:
                    self.state = 8244
                    self.match(SQLParser.UNDERSCORE_CHARSET)


                self.state = 8247
                self.textStringLiteral()
                pass

            elif la_ == 2:
                self.state = 8248
                self.match(SQLParser.NCHAR_TEXT)
                pass


            self.state = 8254
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 8251
                    self.textStringLiteral() 
                self.state = 8256
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1100,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextStringNoLinebreakContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_textStringNoLinebreak

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextStringNoLinebreak" ):
                listener.enterTextStringNoLinebreak(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextStringNoLinebreak" ):
                listener.exitTextStringNoLinebreak(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTextStringNoLinebreak" ):
                return visitor.visitTextStringNoLinebreak(self)
            else:
                return visitor.visitChildren(self)




    def textStringNoLinebreak(self):

        localctx = SQLParser.TextStringNoLinebreakContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1164, self.RULE_textStringNoLinebreak)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8257
            self.textStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextStringLiteralListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.TextStringLiteralContext)
            else:
                return self.getTypedRuleContext(SQLParser.TextStringLiteralContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(SQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_textStringLiteralList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextStringLiteralList" ):
                listener.enterTextStringLiteralList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextStringLiteralList" ):
                listener.exitTextStringLiteralList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTextStringLiteralList" ):
                return visitor.visitTextStringLiteralList(self)
            else:
                return visitor.visitChildren(self)




    def textStringLiteralList(self):

        localctx = SQLParser.TextStringLiteralListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1166, self.RULE_textStringLiteralList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8259
            self.textStringLiteral()
            self.state = 8264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLParser.COMMA_SYMBOL:
                self.state = 8260
                self.match(SQLParser.COMMA_SYMBOL)
                self.state = 8261
                self.textStringLiteral()
                self.state = 8266
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(SQLParser.INT_NUMBER, 0)

        def LONG_NUMBER(self):
            return self.getToken(SQLParser.LONG_NUMBER, 0)

        def ULONGLONG_NUMBER(self):
            return self.getToken(SQLParser.ULONGLONG_NUMBER, 0)

        def DECIMAL_NUMBER(self):
            return self.getToken(SQLParser.DECIMAL_NUMBER, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(SQLParser.FLOAT_NUMBER, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_numLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumLiteral" ):
                listener.enterNumLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumLiteral" ):
                listener.exitNumLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumLiteral" ):
                return visitor.visitNumLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numLiteral(self):

        localctx = SQLParser.NumLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1168, self.RULE_numLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8267
            _la = self._input.LA(1)
            if not(((((_la - 747)) & ~0x3f) == 0 and ((1 << (_la - 747)) & ((1 << (SQLParser.INT_NUMBER - 747)) | (1 << (SQLParser.LONG_NUMBER - 747)) | (1 << (SQLParser.ULONGLONG_NUMBER - 747)) | (1 << (SQLParser.DECIMAL_NUMBER - 747)) | (1 << (SQLParser.FLOAT_NUMBER - 747)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE_SYMBOL(self):
            return self.getToken(SQLParser.TRUE_SYMBOL, 0)

        def FALSE_SYMBOL(self):
            return self.getToken(SQLParser.FALSE_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_boolLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolLiteral" ):
                listener.enterBoolLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolLiteral" ):
                listener.exitBoolLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolLiteral" ):
                return visitor.visitBoolLiteral(self)
            else:
                return visitor.visitChildren(self)




    def boolLiteral(self):

        localctx = SQLParser.BoolLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1170, self.RULE_boolLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8269
            _la = self._input.LA(1)
            if not(_la==SQLParser.FALSE_SYMBOL or _la==SQLParser.TRUE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_SYMBOL(self):
            return self.getToken(SQLParser.NULL_SYMBOL, 0)

        def NULL2_SYMBOL(self):
            return self.getToken(SQLParser.NULL2_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_nullLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullLiteral" ):
                return visitor.visitNullLiteral(self)
            else:
                return visitor.visitChildren(self)




    def nullLiteral(self):

        localctx = SQLParser.NullLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1172, self.RULE_nullLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8271
            _la = self._input.LA(1)
            if not(_la==SQLParser.NULL_SYMBOL or _la==SQLParser.NULL2_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemporalLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_SYMBOL(self):
            return self.getToken(SQLParser.DATE_SYMBOL, 0)

        def SINGLE_QUOTED_TEXT(self):
            return self.getToken(SQLParser.SINGLE_QUOTED_TEXT, 0)

        def TIME_SYMBOL(self):
            return self.getToken(SQLParser.TIME_SYMBOL, 0)

        def TIMESTAMP_SYMBOL(self):
            return self.getToken(SQLParser.TIMESTAMP_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_temporalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemporalLiteral" ):
                listener.enterTemporalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemporalLiteral" ):
                listener.exitTemporalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemporalLiteral" ):
                return visitor.visitTemporalLiteral(self)
            else:
                return visitor.visitChildren(self)




    def temporalLiteral(self):

        localctx = SQLParser.TemporalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1174, self.RULE_temporalLiteral)
        try:
            self.state = 8279
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.DATE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8273
                self.match(SQLParser.DATE_SYMBOL)
                self.state = 8274
                self.match(SQLParser.SINGLE_QUOTED_TEXT)
                pass
            elif token in [SQLParser.TIME_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8275
                self.match(SQLParser.TIME_SYMBOL)
                self.state = 8276
                self.match(SQLParser.SINGLE_QUOTED_TEXT)
                pass
            elif token in [SQLParser.TIMESTAMP_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8277
                self.match(SQLParser.TIMESTAMP_SYMBOL)
                self.state = 8278
                self.match(SQLParser.SINGLE_QUOTED_TEXT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldLength(self):
            return self.getTypedRuleContext(SQLParser.FieldLengthContext,0)


        def precision(self):
            return self.getTypedRuleContext(SQLParser.PrecisionContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_floatOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatOptions" ):
                listener.enterFloatOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatOptions" ):
                listener.exitFloatOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatOptions" ):
                return visitor.visitFloatOptions(self)
            else:
                return visitor.visitChildren(self)




    def floatOptions(self):

        localctx = SQLParser.FloatOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1176, self.RULE_floatOptions)
        try:
            self.state = 8283
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8281
                self.fieldLength()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8282
                self.precision()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandardFloatOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def precision(self):
            return self.getTypedRuleContext(SQLParser.PrecisionContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_standardFloatOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandardFloatOptions" ):
                listener.enterStandardFloatOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandardFloatOptions" ):
                listener.exitStandardFloatOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandardFloatOptions" ):
                return visitor.visitStandardFloatOptions(self)
            else:
                return visitor.visitChildren(self)




    def standardFloatOptions(self):

        localctx = SQLParser.StandardFloatOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1178, self.RULE_standardFloatOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8285
            self.precision()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecisionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def INT_NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.INT_NUMBER)
            else:
                return self.getToken(SQLParser.INT_NUMBER, i)

        def COMMA_SYMBOL(self):
            return self.getToken(SQLParser.COMMA_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_precision

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecision" ):
                listener.enterPrecision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecision" ):
                listener.exitPrecision(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecision" ):
                return visitor.visitPrecision(self)
            else:
                return visitor.visitChildren(self)




    def precision(self):

        localctx = SQLParser.PrecisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1180, self.RULE_precision)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8287
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 8288
            self.match(SQLParser.INT_NUMBER)
            self.state = 8289
            self.match(SQLParser.COMMA_SYMBOL)
            self.state = 8290
            self.match(SQLParser.INT_NUMBER)
            self.state = 8291
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextOrIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SQLParser.IdentifierContext,0)


        def textStringLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_textOrIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextOrIdentifier" ):
                listener.enterTextOrIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextOrIdentifier" ):
                listener.exitTextOrIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTextOrIdentifier" ):
                return visitor.visitTextOrIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def textOrIdentifier(self):

        localctx = SQLParser.TextOrIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1182, self.RULE_textOrIdentifier)
        try:
            self.state = 8295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1104,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8293
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8294
                self.textStringLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LValueIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pureIdentifier(self):
            return self.getTypedRuleContext(SQLParser.PureIdentifierContext,0)


        def lValueKeyword(self):
            return self.getTypedRuleContext(SQLParser.LValueKeywordContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_lValueIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLValueIdentifier" ):
                listener.enterLValueIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLValueIdentifier" ):
                listener.exitLValueIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLValueIdentifier" ):
                return visitor.visitLValueIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def lValueIdentifier(self):

        localctx = SQLParser.LValueIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1184, self.RULE_lValueIdentifier)
        try:
            self.state = 8299
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8297
                self.pureIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8298
                self.lValueKeyword()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleIdentifierOrTextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def roleIdentifier(self):
            return self.getTypedRuleContext(SQLParser.RoleIdentifierContext,0)


        def textStringLiteral(self):
            return self.getTypedRuleContext(SQLParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_roleIdentifierOrText

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleIdentifierOrText" ):
                listener.enterRoleIdentifierOrText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleIdentifierOrText" ):
                listener.exitRoleIdentifierOrText(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoleIdentifierOrText" ):
                return visitor.visitRoleIdentifierOrText(self)
            else:
                return visitor.visitChildren(self)




    def roleIdentifierOrText(self):

        localctx = SQLParser.RoleIdentifierOrTextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1186, self.RULE_roleIdentifierOrText)
        try:
            self.state = 8303
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1106,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8301
                self.roleIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8302
                self.textStringLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SizeNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def real_ulonglong_number(self):
            return self.getTypedRuleContext(SQLParser.Real_ulonglong_numberContext,0)


        def pureIdentifier(self):
            return self.getTypedRuleContext(SQLParser.PureIdentifierContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_sizeNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSizeNumber" ):
                listener.enterSizeNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSizeNumber" ):
                listener.exitSizeNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSizeNumber" ):
                return visitor.visitSizeNumber(self)
            else:
                return visitor.visitChildren(self)




    def sizeNumber(self):

        localctx = SQLParser.SizeNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1188, self.RULE_sizeNumber)
        try:
            self.state = 8307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8305
                self.real_ulonglong_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8306
                self.pureIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_parentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParentheses" ):
                listener.enterParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParentheses" ):
                listener.exitParentheses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParentheses" ):
                return visitor.visitParentheses(self)
            else:
                return visitor.visitChildren(self)




    def parentheses(self):

        localctx = SQLParser.ParenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1190, self.RULE_parentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8309
            self.match(SQLParser.OPEN_PAR_SYMBOL)
            self.state = 8310
            self.match(SQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL_OPERATOR(self):
            return self.getToken(SQLParser.EQUAL_OPERATOR, 0)

        def ASSIGN_OPERATOR(self):
            return self.getToken(SQLParser.ASSIGN_OPERATOR, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_equal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqual" ):
                listener.enterEqual(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqual" ):
                listener.exitEqual(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqual" ):
                return visitor.visitEqual(self)
            else:
                return visitor.visitChildren(self)




    def equal(self):

        localctx = SQLParser.EqualContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1192, self.RULE_equal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8312
            _la = self._input.LA(1)
            if not(_la==SQLParser.EQUAL_OPERATOR or _la==SQLParser.ASSIGN_OPERATOR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERSIST_SYMBOL(self):
            return self.getToken(SQLParser.PERSIST_SYMBOL, 0)

        def PERSIST_ONLY_SYMBOL(self):
            return self.getToken(SQLParser.PERSIST_ONLY_SYMBOL, 0)

        def GLOBAL_SYMBOL(self):
            return self.getToken(SQLParser.GLOBAL_SYMBOL, 0)

        def LOCAL_SYMBOL(self):
            return self.getToken(SQLParser.LOCAL_SYMBOL, 0)

        def SESSION_SYMBOL(self):
            return self.getToken(SQLParser.SESSION_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_optionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionType" ):
                listener.enterOptionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionType" ):
                listener.exitOptionType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionType" ):
                return visitor.visitOptionType(self)
            else:
                return visitor.visitChildren(self)




    def optionType(self):

        localctx = SQLParser.OptionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1194, self.RULE_optionType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8314
            _la = self._input.LA(1)
            if not(_la==SQLParser.GLOBAL_SYMBOL or _la==SQLParser.LOCAL_SYMBOL or _la==SQLParser.SESSION_SYMBOL or _la==SQLParser.PERSIST_SYMBOL or _la==SQLParser.PERSIST_ONLY_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarIdentTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL_SYMBOL(self):
            return self.getToken(SQLParser.GLOBAL_SYMBOL, 0)

        def DOT_SYMBOL(self):
            return self.getToken(SQLParser.DOT_SYMBOL, 0)

        def LOCAL_SYMBOL(self):
            return self.getToken(SQLParser.LOCAL_SYMBOL, 0)

        def SESSION_SYMBOL(self):
            return self.getToken(SQLParser.SESSION_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_varIdentType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarIdentType" ):
                listener.enterVarIdentType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarIdentType" ):
                listener.exitVarIdentType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarIdentType" ):
                return visitor.visitVarIdentType(self)
            else:
                return visitor.visitChildren(self)




    def varIdentType(self):

        localctx = SQLParser.VarIdentTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1196, self.RULE_varIdentType)
        try:
            self.state = 8322
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.GLOBAL_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8316
                self.match(SQLParser.GLOBAL_SYMBOL)
                self.state = 8317
                self.match(SQLParser.DOT_SYMBOL)
                pass
            elif token in [SQLParser.LOCAL_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8318
                self.match(SQLParser.LOCAL_SYMBOL)
                self.state = 8319
                self.match(SQLParser.DOT_SYMBOL)
                pass
            elif token in [SQLParser.SESSION_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8320
                self.match(SQLParser.SESSION_SYMBOL)
                self.state = 8321
                self.match(SQLParser.DOT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetVarIdentTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERSIST_SYMBOL(self):
            return self.getToken(SQLParser.PERSIST_SYMBOL, 0)

        def DOT_SYMBOL(self):
            return self.getToken(SQLParser.DOT_SYMBOL, 0)

        def PERSIST_ONLY_SYMBOL(self):
            return self.getToken(SQLParser.PERSIST_ONLY_SYMBOL, 0)

        def GLOBAL_SYMBOL(self):
            return self.getToken(SQLParser.GLOBAL_SYMBOL, 0)

        def LOCAL_SYMBOL(self):
            return self.getToken(SQLParser.LOCAL_SYMBOL, 0)

        def SESSION_SYMBOL(self):
            return self.getToken(SQLParser.SESSION_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_setVarIdentType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetVarIdentType" ):
                listener.enterSetVarIdentType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetVarIdentType" ):
                listener.exitSetVarIdentType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetVarIdentType" ):
                return visitor.visitSetVarIdentType(self)
            else:
                return visitor.visitChildren(self)




    def setVarIdentType(self):

        localctx = SQLParser.SetVarIdentTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1198, self.RULE_setVarIdentType)
        try:
            self.state = 8334
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.PERSIST_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8324
                self.match(SQLParser.PERSIST_SYMBOL)
                self.state = 8325
                self.match(SQLParser.DOT_SYMBOL)
                pass
            elif token in [SQLParser.PERSIST_ONLY_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8326
                self.match(SQLParser.PERSIST_ONLY_SYMBOL)
                self.state = 8327
                self.match(SQLParser.DOT_SYMBOL)
                pass
            elif token in [SQLParser.GLOBAL_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8328
                self.match(SQLParser.GLOBAL_SYMBOL)
                self.state = 8329
                self.match(SQLParser.DOT_SYMBOL)
                pass
            elif token in [SQLParser.LOCAL_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8330
                self.match(SQLParser.LOCAL_SYMBOL)
                self.state = 8331
                self.match(SQLParser.DOT_SYMBOL)
                pass
            elif token in [SQLParser.SESSION_SYMBOL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8332
                self.match(SQLParser.SESSION_SYMBOL)
                self.state = 8333
                self.match(SQLParser.DOT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelKeyword(self):
            return self.getTypedRuleContext(SQLParser.LabelKeywordContext,0)


        def roleOrIdentifierKeyword(self):
            return self.getTypedRuleContext(SQLParser.RoleOrIdentifierKeywordContext,0)


        def EXECUTE_SYMBOL(self):
            return self.getToken(SQLParser.EXECUTE_SYMBOL, 0)

        def SHUTDOWN_SYMBOL(self):
            return self.getToken(SQLParser.SHUTDOWN_SYMBOL, 0)

        def RESTART_SYMBOL(self):
            return self.getToken(SQLParser.RESTART_SYMBOL, 0)

        def identifierKeywordsUnambiguous(self):
            return self.getTypedRuleContext(SQLParser.IdentifierKeywordsUnambiguousContext,0)


        def identifierKeywordsAmbiguous1RolesAndLabels(self):
            return self.getTypedRuleContext(SQLParser.IdentifierKeywordsAmbiguous1RolesAndLabelsContext,0)


        def identifierKeywordsAmbiguous2Labels(self):
            return self.getTypedRuleContext(SQLParser.IdentifierKeywordsAmbiguous2LabelsContext,0)


        def identifierKeywordsAmbiguous3Roles(self):
            return self.getTypedRuleContext(SQLParser.IdentifierKeywordsAmbiguous3RolesContext,0)


        def identifierKeywordsAmbiguous4SystemVariables(self):
            return self.getTypedRuleContext(SQLParser.IdentifierKeywordsAmbiguous4SystemVariablesContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_identifierKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierKeyword" ):
                listener.enterIdentifierKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierKeyword" ):
                listener.exitIdentifierKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierKeyword" ):
                return visitor.visitIdentifierKeyword(self)
            else:
                return visitor.visitChildren(self)




    def identifierKeyword(self):

        localctx = SQLParser.IdentifierKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1200, self.RULE_identifierKeyword)
        try:
            self.state = 8353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1112,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8336
                if not self.serverVersion < 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 80017")
                self.state = 8344
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1110,self._ctx)
                if la_ == 1:
                    self.state = 8337
                    self.labelKeyword()
                    pass

                elif la_ == 2:
                    self.state = 8338
                    self.roleOrIdentifierKeyword()
                    pass

                elif la_ == 3:
                    self.state = 8339
                    self.match(SQLParser.EXECUTE_SYMBOL)
                    pass

                elif la_ == 4:
                    self.state = 8340
                    if not self.serverVersion >= 50709:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 50709")
                    self.state = 8341
                    self.match(SQLParser.SHUTDOWN_SYMBOL)
                    pass

                elif la_ == 5:
                    self.state = 8342
                    if not self.serverVersion >= 80011:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.serverVersion >= 80011")
                    self.state = 8343
                    self.match(SQLParser.RESTART_SYMBOL)
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8351
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1111,self._ctx)
                if la_ == 1:
                    self.state = 8346
                    self.identifierKeywordsUnambiguous()
                    pass

                elif la_ == 2:
                    self.state = 8347
                    self.identifierKeywordsAmbiguous1RolesAndLabels()
                    pass

                elif la_ == 3:
                    self.state = 8348
                    self.identifierKeywordsAmbiguous2Labels()
                    pass

                elif la_ == 4:
                    self.state = 8349
                    self.identifierKeywordsAmbiguous3Roles()
                    pass

                elif la_ == 5:
                    self.state = 8350
                    self.identifierKeywordsAmbiguous4SystemVariables()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierKeywordsAmbiguous1RolesAndLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE_SYMBOL(self):
            return self.getToken(SQLParser.EXECUTE_SYMBOL, 0)

        def RESTART_SYMBOL(self):
            return self.getToken(SQLParser.RESTART_SYMBOL, 0)

        def SHUTDOWN_SYMBOL(self):
            return self.getToken(SQLParser.SHUTDOWN_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierKeywordsAmbiguous1RolesAndLabels" ):
                listener.enterIdentifierKeywordsAmbiguous1RolesAndLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierKeywordsAmbiguous1RolesAndLabels" ):
                listener.exitIdentifierKeywordsAmbiguous1RolesAndLabels(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierKeywordsAmbiguous1RolesAndLabels" ):
                return visitor.visitIdentifierKeywordsAmbiguous1RolesAndLabels(self)
            else:
                return visitor.visitChildren(self)




    def identifierKeywordsAmbiguous1RolesAndLabels(self):

        localctx = SQLParser.IdentifierKeywordsAmbiguous1RolesAndLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1202, self.RULE_identifierKeywordsAmbiguous1RolesAndLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8355
            _la = self._input.LA(1)
            if not(_la==SQLParser.EXECUTE_SYMBOL or _la==SQLParser.SHUTDOWN_SYMBOL or _la==SQLParser.RESTART_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierKeywordsAmbiguous2LabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASCII_SYMBOL(self):
            return self.getToken(SQLParser.ASCII_SYMBOL, 0)

        def BEGIN_SYMBOL(self):
            return self.getToken(SQLParser.BEGIN_SYMBOL, 0)

        def BYTE_SYMBOL(self):
            return self.getToken(SQLParser.BYTE_SYMBOL, 0)

        def CACHE_SYMBOL(self):
            return self.getToken(SQLParser.CACHE_SYMBOL, 0)

        def CHARSET_SYMBOL(self):
            return self.getToken(SQLParser.CHARSET_SYMBOL, 0)

        def CHECKSUM_SYMBOL(self):
            return self.getToken(SQLParser.CHECKSUM_SYMBOL, 0)

        def CLONE_SYMBOL(self):
            return self.getToken(SQLParser.CLONE_SYMBOL, 0)

        def COMMENT_SYMBOL(self):
            return self.getToken(SQLParser.COMMENT_SYMBOL, 0)

        def COMMIT_SYMBOL(self):
            return self.getToken(SQLParser.COMMIT_SYMBOL, 0)

        def CONTAINS_SYMBOL(self):
            return self.getToken(SQLParser.CONTAINS_SYMBOL, 0)

        def DEALLOCATE_SYMBOL(self):
            return self.getToken(SQLParser.DEALLOCATE_SYMBOL, 0)

        def DO_SYMBOL(self):
            return self.getToken(SQLParser.DO_SYMBOL, 0)

        def END_SYMBOL(self):
            return self.getToken(SQLParser.END_SYMBOL, 0)

        def FLUSH_SYMBOL(self):
            return self.getToken(SQLParser.FLUSH_SYMBOL, 0)

        def FOLLOWS_SYMBOL(self):
            return self.getToken(SQLParser.FOLLOWS_SYMBOL, 0)

        def HANDLER_SYMBOL(self):
            return self.getToken(SQLParser.HANDLER_SYMBOL, 0)

        def HELP_SYMBOL(self):
            return self.getToken(SQLParser.HELP_SYMBOL, 0)

        def IMPORT_SYMBOL(self):
            return self.getToken(SQLParser.IMPORT_SYMBOL, 0)

        def INSTALL_SYMBOL(self):
            return self.getToken(SQLParser.INSTALL_SYMBOL, 0)

        def LANGUAGE_SYMBOL(self):
            return self.getToken(SQLParser.LANGUAGE_SYMBOL, 0)

        def NO_SYMBOL(self):
            return self.getToken(SQLParser.NO_SYMBOL, 0)

        def PRECEDES_SYMBOL(self):
            return self.getToken(SQLParser.PRECEDES_SYMBOL, 0)

        def PREPARE_SYMBOL(self):
            return self.getToken(SQLParser.PREPARE_SYMBOL, 0)

        def REPAIR_SYMBOL(self):
            return self.getToken(SQLParser.REPAIR_SYMBOL, 0)

        def RESET_SYMBOL(self):
            return self.getToken(SQLParser.RESET_SYMBOL, 0)

        def ROLLBACK_SYMBOL(self):
            return self.getToken(SQLParser.ROLLBACK_SYMBOL, 0)

        def SAVEPOINT_SYMBOL(self):
            return self.getToken(SQLParser.SAVEPOINT_SYMBOL, 0)

        def SIGNED_SYMBOL(self):
            return self.getToken(SQLParser.SIGNED_SYMBOL, 0)

        def SLAVE_SYMBOL(self):
            return self.getToken(SQLParser.SLAVE_SYMBOL, 0)

        def START_SYMBOL(self):
            return self.getToken(SQLParser.START_SYMBOL, 0)

        def STOP_SYMBOL(self):
            return self.getToken(SQLParser.STOP_SYMBOL, 0)

        def TRUNCATE_SYMBOL(self):
            return self.getToken(SQLParser.TRUNCATE_SYMBOL, 0)

        def UNICODE_SYMBOL(self):
            return self.getToken(SQLParser.UNICODE_SYMBOL, 0)

        def UNINSTALL_SYMBOL(self):
            return self.getToken(SQLParser.UNINSTALL_SYMBOL, 0)

        def XA_SYMBOL(self):
            return self.getToken(SQLParser.XA_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_identifierKeywordsAmbiguous2Labels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierKeywordsAmbiguous2Labels" ):
                listener.enterIdentifierKeywordsAmbiguous2Labels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierKeywordsAmbiguous2Labels" ):
                listener.exitIdentifierKeywordsAmbiguous2Labels(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierKeywordsAmbiguous2Labels" ):
                return visitor.visitIdentifierKeywordsAmbiguous2Labels(self)
            else:
                return visitor.visitChildren(self)




    def identifierKeywordsAmbiguous2Labels(self):

        localctx = SQLParser.IdentifierKeywordsAmbiguous2LabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1204, self.RULE_identifierKeywordsAmbiguous2Labels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8357
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLParser.ASCII_SYMBOL) | (1 << SQLParser.BEGIN_SYMBOL) | (1 << SQLParser.BYTE_SYMBOL) | (1 << SQLParser.CACHE_SYMBOL) | (1 << SQLParser.CHARSET_SYMBOL) | (1 << SQLParser.CHECKSUM_SYMBOL))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (SQLParser.COMMENT_SYMBOL - 75)) | (1 << (SQLParser.COMMIT_SYMBOL - 75)) | (1 << (SQLParser.CONTAINS_SYMBOL - 75)) | (1 << (SQLParser.DEALLOCATE_SYMBOL - 75)))) != 0) or ((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & ((1 << (SQLParser.DO_SYMBOL - 147)) | (1 << (SQLParser.END_SYMBOL - 147)) | (1 << (SQLParser.FLUSH_SYMBOL - 147)) | (1 << (SQLParser.FOLLOWS_SYMBOL - 147)))) != 0) or ((((_la - 219)) & ~0x3f) == 0 and ((1 << (_la - 219)) & ((1 << (SQLParser.HANDLER_SYMBOL - 219)) | (1 << (SQLParser.HELP_SYMBOL - 219)) | (1 << (SQLParser.IMPORT_SYMBOL - 219)) | (1 << (SQLParser.INSTALL_SYMBOL - 219)) | (1 << (SQLParser.LANGUAGE_SYMBOL - 219)))) != 0) or ((((_la - 373)) & ~0x3f) == 0 and ((1 << (_la - 373)) & ((1 << (SQLParser.NO_SYMBOL - 373)) | (1 << (SQLParser.PRECEDES_SYMBOL - 373)) | (1 << (SQLParser.PREPARE_SYMBOL - 373)))) != 0) or ((((_la - 455)) & ~0x3f) == 0 and ((1 << (_la - 455)) & ((1 << (SQLParser.REPAIR_SYMBOL - 455)) | (1 << (SQLParser.RESET_SYMBOL - 455)) | (1 << (SQLParser.ROLLBACK_SYMBOL - 455)) | (1 << (SQLParser.SAVEPOINT_SYMBOL - 455)) | (1 << (SQLParser.SIGNED_SYMBOL - 455)) | (1 << (SQLParser.SLAVE_SYMBOL - 455)))) != 0) or ((((_la - 543)) & ~0x3f) == 0 and ((1 << (_la - 543)) & ((1 << (SQLParser.START_SYMBOL - 543)) | (1 << (SQLParser.STOP_SYMBOL - 543)) | (1 << (SQLParser.TRUNCATE_SYMBOL - 543)) | (1 << (SQLParser.UNICODE_SYMBOL - 543)))) != 0) or _la==SQLParser.UNINSTALL_SYMBOL or _la==SQLParser.XA_SYMBOL or _la==SQLParser.CLONE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def roleOrLabelKeyword(self):
            return self.getTypedRuleContext(SQLParser.RoleOrLabelKeywordContext,0)


        def EVENT_SYMBOL(self):
            return self.getToken(SQLParser.EVENT_SYMBOL, 0)

        def FILE_SYMBOL(self):
            return self.getToken(SQLParser.FILE_SYMBOL, 0)

        def NONE_SYMBOL(self):
            return self.getToken(SQLParser.NONE_SYMBOL, 0)

        def PROCESS_SYMBOL(self):
            return self.getToken(SQLParser.PROCESS_SYMBOL, 0)

        def PROXY_SYMBOL(self):
            return self.getToken(SQLParser.PROXY_SYMBOL, 0)

        def RELOAD_SYMBOL(self):
            return self.getToken(SQLParser.RELOAD_SYMBOL, 0)

        def REPLICATION_SYMBOL(self):
            return self.getToken(SQLParser.REPLICATION_SYMBOL, 0)

        def RESOURCE_SYMBOL(self):
            return self.getToken(SQLParser.RESOURCE_SYMBOL, 0)

        def SUPER_SYMBOL(self):
            return self.getToken(SQLParser.SUPER_SYMBOL, 0)

        def identifierKeywordsUnambiguous(self):
            return self.getTypedRuleContext(SQLParser.IdentifierKeywordsUnambiguousContext,0)


        def identifierKeywordsAmbiguous3Roles(self):
            return self.getTypedRuleContext(SQLParser.IdentifierKeywordsAmbiguous3RolesContext,0)


        def identifierKeywordsAmbiguous4SystemVariables(self):
            return self.getTypedRuleContext(SQLParser.IdentifierKeywordsAmbiguous4SystemVariablesContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_labelKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelKeyword" ):
                listener.enterLabelKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelKeyword" ):
                listener.exitLabelKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelKeyword" ):
                return visitor.visitLabelKeyword(self)
            else:
                return visitor.visitChildren(self)




    def labelKeyword(self):

        localctx = SQLParser.LabelKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1206, self.RULE_labelKeyword)
        try:
            self.state = 8377
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8359
                if not self.serverVersion < 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 80017")
                self.state = 8370
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1113,self._ctx)
                if la_ == 1:
                    self.state = 8360
                    self.roleOrLabelKeyword()
                    pass

                elif la_ == 2:
                    self.state = 8361
                    self.match(SQLParser.EVENT_SYMBOL)
                    pass

                elif la_ == 3:
                    self.state = 8362
                    self.match(SQLParser.FILE_SYMBOL)
                    pass

                elif la_ == 4:
                    self.state = 8363
                    self.match(SQLParser.NONE_SYMBOL)
                    pass

                elif la_ == 5:
                    self.state = 8364
                    self.match(SQLParser.PROCESS_SYMBOL)
                    pass

                elif la_ == 6:
                    self.state = 8365
                    self.match(SQLParser.PROXY_SYMBOL)
                    pass

                elif la_ == 7:
                    self.state = 8366
                    self.match(SQLParser.RELOAD_SYMBOL)
                    pass

                elif la_ == 8:
                    self.state = 8367
                    self.match(SQLParser.REPLICATION_SYMBOL)
                    pass

                elif la_ == 9:
                    self.state = 8368
                    self.match(SQLParser.RESOURCE_SYMBOL)
                    pass

                elif la_ == 10:
                    self.state = 8369
                    self.match(SQLParser.SUPER_SYMBOL)
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8375
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1114,self._ctx)
                if la_ == 1:
                    self.state = 8372
                    self.identifierKeywordsUnambiguous()
                    pass

                elif la_ == 2:
                    self.state = 8373
                    self.identifierKeywordsAmbiguous3Roles()
                    pass

                elif la_ == 3:
                    self.state = 8374
                    self.identifierKeywordsAmbiguous4SystemVariables()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierKeywordsAmbiguous3RolesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENT_SYMBOL(self):
            return self.getToken(SQLParser.EVENT_SYMBOL, 0)

        def FILE_SYMBOL(self):
            return self.getToken(SQLParser.FILE_SYMBOL, 0)

        def NONE_SYMBOL(self):
            return self.getToken(SQLParser.NONE_SYMBOL, 0)

        def PROCESS_SYMBOL(self):
            return self.getToken(SQLParser.PROCESS_SYMBOL, 0)

        def PROXY_SYMBOL(self):
            return self.getToken(SQLParser.PROXY_SYMBOL, 0)

        def RELOAD_SYMBOL(self):
            return self.getToken(SQLParser.RELOAD_SYMBOL, 0)

        def REPLICATION_SYMBOL(self):
            return self.getToken(SQLParser.REPLICATION_SYMBOL, 0)

        def RESOURCE_SYMBOL(self):
            return self.getToken(SQLParser.RESOURCE_SYMBOL, 0)

        def SUPER_SYMBOL(self):
            return self.getToken(SQLParser.SUPER_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_identifierKeywordsAmbiguous3Roles

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierKeywordsAmbiguous3Roles" ):
                listener.enterIdentifierKeywordsAmbiguous3Roles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierKeywordsAmbiguous3Roles" ):
                listener.exitIdentifierKeywordsAmbiguous3Roles(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierKeywordsAmbiguous3Roles" ):
                return visitor.visitIdentifierKeywordsAmbiguous3Roles(self)
            else:
                return visitor.visitChildren(self)




    def identifierKeywordsAmbiguous3Roles(self):

        localctx = SQLParser.IdentifierKeywordsAmbiguous3RolesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1208, self.RULE_identifierKeywordsAmbiguous3Roles)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8379
            _la = self._input.LA(1)
            if not(_la==SQLParser.EVENT_SYMBOL or _la==SQLParser.FILE_SYMBOL or ((((_la - 369)) & ~0x3f) == 0 and ((1 << (_la - 369)) & ((1 << (SQLParser.NONE_SYMBOL - 369)) | (1 << (SQLParser.PROCESS_SYMBOL - 369)) | (1 << (SQLParser.PROXY_SYMBOL - 369)))) != 0) or _la==SQLParser.RELOAD_SYMBOL or _la==SQLParser.REPLICATION_SYMBOL or _la==SQLParser.SUPER_SYMBOL or _la==SQLParser.RESOURCE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierKeywordsUnambiguousContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACTION_SYMBOL(self):
            return self.getToken(SQLParser.ACTION_SYMBOL, 0)

        def ACCOUNT_SYMBOL(self):
            return self.getToken(SQLParser.ACCOUNT_SYMBOL, 0)

        def ACTIVE_SYMBOL(self):
            return self.getToken(SQLParser.ACTIVE_SYMBOL, 0)

        def ADDDATE_SYMBOL(self):
            return self.getToken(SQLParser.ADDDATE_SYMBOL, 0)

        def ADMIN_SYMBOL(self):
            return self.getToken(SQLParser.ADMIN_SYMBOL, 0)

        def AFTER_SYMBOL(self):
            return self.getToken(SQLParser.AFTER_SYMBOL, 0)

        def AGAINST_SYMBOL(self):
            return self.getToken(SQLParser.AGAINST_SYMBOL, 0)

        def AGGREGATE_SYMBOL(self):
            return self.getToken(SQLParser.AGGREGATE_SYMBOL, 0)

        def ALGORITHM_SYMBOL(self):
            return self.getToken(SQLParser.ALGORITHM_SYMBOL, 0)

        def ALWAYS_SYMBOL(self):
            return self.getToken(SQLParser.ALWAYS_SYMBOL, 0)

        def ANY_SYMBOL(self):
            return self.getToken(SQLParser.ANY_SYMBOL, 0)

        def AT_SYMBOL(self):
            return self.getToken(SQLParser.AT_SYMBOL, 0)

        def AUTOEXTEND_SIZE_SYMBOL(self):
            return self.getToken(SQLParser.AUTOEXTEND_SIZE_SYMBOL, 0)

        def AUTO_INCREMENT_SYMBOL(self):
            return self.getToken(SQLParser.AUTO_INCREMENT_SYMBOL, 0)

        def AVG_ROW_LENGTH_SYMBOL(self):
            return self.getToken(SQLParser.AVG_ROW_LENGTH_SYMBOL, 0)

        def AVG_SYMBOL(self):
            return self.getToken(SQLParser.AVG_SYMBOL, 0)

        def BACKUP_SYMBOL(self):
            return self.getToken(SQLParser.BACKUP_SYMBOL, 0)

        def BINLOG_SYMBOL(self):
            return self.getToken(SQLParser.BINLOG_SYMBOL, 0)

        def BIT_SYMBOL(self):
            return self.getToken(SQLParser.BIT_SYMBOL, 0)

        def BLOCK_SYMBOL(self):
            return self.getToken(SQLParser.BLOCK_SYMBOL, 0)

        def BOOLEAN_SYMBOL(self):
            return self.getToken(SQLParser.BOOLEAN_SYMBOL, 0)

        def BOOL_SYMBOL(self):
            return self.getToken(SQLParser.BOOL_SYMBOL, 0)

        def BTREE_SYMBOL(self):
            return self.getToken(SQLParser.BTREE_SYMBOL, 0)

        def BUCKETS_SYMBOL(self):
            return self.getToken(SQLParser.BUCKETS_SYMBOL, 0)

        def CASCADED_SYMBOL(self):
            return self.getToken(SQLParser.CASCADED_SYMBOL, 0)

        def CATALOG_NAME_SYMBOL(self):
            return self.getToken(SQLParser.CATALOG_NAME_SYMBOL, 0)

        def CHAIN_SYMBOL(self):
            return self.getToken(SQLParser.CHAIN_SYMBOL, 0)

        def CHANGED_SYMBOL(self):
            return self.getToken(SQLParser.CHANGED_SYMBOL, 0)

        def CHANNEL_SYMBOL(self):
            return self.getToken(SQLParser.CHANNEL_SYMBOL, 0)

        def CIPHER_SYMBOL(self):
            return self.getToken(SQLParser.CIPHER_SYMBOL, 0)

        def CLASS_ORIGIN_SYMBOL(self):
            return self.getToken(SQLParser.CLASS_ORIGIN_SYMBOL, 0)

        def CLIENT_SYMBOL(self):
            return self.getToken(SQLParser.CLIENT_SYMBOL, 0)

        def CLOSE_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_SYMBOL, 0)

        def COALESCE_SYMBOL(self):
            return self.getToken(SQLParser.COALESCE_SYMBOL, 0)

        def CODE_SYMBOL(self):
            return self.getToken(SQLParser.CODE_SYMBOL, 0)

        def COLLATION_SYMBOL(self):
            return self.getToken(SQLParser.COLLATION_SYMBOL, 0)

        def COLUMNS_SYMBOL(self):
            return self.getToken(SQLParser.COLUMNS_SYMBOL, 0)

        def COLUMN_FORMAT_SYMBOL(self):
            return self.getToken(SQLParser.COLUMN_FORMAT_SYMBOL, 0)

        def COLUMN_NAME_SYMBOL(self):
            return self.getToken(SQLParser.COLUMN_NAME_SYMBOL, 0)

        def COMMITTED_SYMBOL(self):
            return self.getToken(SQLParser.COMMITTED_SYMBOL, 0)

        def COMPACT_SYMBOL(self):
            return self.getToken(SQLParser.COMPACT_SYMBOL, 0)

        def COMPLETION_SYMBOL(self):
            return self.getToken(SQLParser.COMPLETION_SYMBOL, 0)

        def COMPONENT_SYMBOL(self):
            return self.getToken(SQLParser.COMPONENT_SYMBOL, 0)

        def COMPRESSED_SYMBOL(self):
            return self.getToken(SQLParser.COMPRESSED_SYMBOL, 0)

        def COMPRESSION_SYMBOL(self):
            return self.getToken(SQLParser.COMPRESSION_SYMBOL, 0)

        def CONCURRENT_SYMBOL(self):
            return self.getToken(SQLParser.CONCURRENT_SYMBOL, 0)

        def CONNECTION_SYMBOL(self):
            return self.getToken(SQLParser.CONNECTION_SYMBOL, 0)

        def CONSISTENT_SYMBOL(self):
            return self.getToken(SQLParser.CONSISTENT_SYMBOL, 0)

        def CONSTRAINT_CATALOG_SYMBOL(self):
            return self.getToken(SQLParser.CONSTRAINT_CATALOG_SYMBOL, 0)

        def CONSTRAINT_NAME_SYMBOL(self):
            return self.getToken(SQLParser.CONSTRAINT_NAME_SYMBOL, 0)

        def CONSTRAINT_SCHEMA_SYMBOL(self):
            return self.getToken(SQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0)

        def CONTEXT_SYMBOL(self):
            return self.getToken(SQLParser.CONTEXT_SYMBOL, 0)

        def CPU_SYMBOL(self):
            return self.getToken(SQLParser.CPU_SYMBOL, 0)

        def CURRENT_SYMBOL(self):
            return self.getToken(SQLParser.CURRENT_SYMBOL, 0)

        def CURSOR_NAME_SYMBOL(self):
            return self.getToken(SQLParser.CURSOR_NAME_SYMBOL, 0)

        def DATAFILE_SYMBOL(self):
            return self.getToken(SQLParser.DATAFILE_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(SQLParser.DATA_SYMBOL, 0)

        def DATETIME_SYMBOL(self):
            return self.getToken(SQLParser.DATETIME_SYMBOL, 0)

        def DATE_SYMBOL(self):
            return self.getToken(SQLParser.DATE_SYMBOL, 0)

        def DAY_SYMBOL(self):
            return self.getToken(SQLParser.DAY_SYMBOL, 0)

        def DEFAULT_AUTH_SYMBOL(self):
            return self.getToken(SQLParser.DEFAULT_AUTH_SYMBOL, 0)

        def DEFINER_SYMBOL(self):
            return self.getToken(SQLParser.DEFINER_SYMBOL, 0)

        def DEFINITION_SYMBOL(self):
            return self.getToken(SQLParser.DEFINITION_SYMBOL, 0)

        def DELAY_KEY_WRITE_SYMBOL(self):
            return self.getToken(SQLParser.DELAY_KEY_WRITE_SYMBOL, 0)

        def DESCRIPTION_SYMBOL(self):
            return self.getToken(SQLParser.DESCRIPTION_SYMBOL, 0)

        def DIAGNOSTICS_SYMBOL(self):
            return self.getToken(SQLParser.DIAGNOSTICS_SYMBOL, 0)

        def DIRECTORY_SYMBOL(self):
            return self.getToken(SQLParser.DIRECTORY_SYMBOL, 0)

        def DISABLE_SYMBOL(self):
            return self.getToken(SQLParser.DISABLE_SYMBOL, 0)

        def DISCARD_SYMBOL(self):
            return self.getToken(SQLParser.DISCARD_SYMBOL, 0)

        def DISK_SYMBOL(self):
            return self.getToken(SQLParser.DISK_SYMBOL, 0)

        def DUMPFILE_SYMBOL(self):
            return self.getToken(SQLParser.DUMPFILE_SYMBOL, 0)

        def DUPLICATE_SYMBOL(self):
            return self.getToken(SQLParser.DUPLICATE_SYMBOL, 0)

        def DYNAMIC_SYMBOL(self):
            return self.getToken(SQLParser.DYNAMIC_SYMBOL, 0)

        def ENABLE_SYMBOL(self):
            return self.getToken(SQLParser.ENABLE_SYMBOL, 0)

        def ENCRYPTION_SYMBOL(self):
            return self.getToken(SQLParser.ENCRYPTION_SYMBOL, 0)

        def ENDS_SYMBOL(self):
            return self.getToken(SQLParser.ENDS_SYMBOL, 0)

        def ENFORCED_SYMBOL(self):
            return self.getToken(SQLParser.ENFORCED_SYMBOL, 0)

        def ENGINES_SYMBOL(self):
            return self.getToken(SQLParser.ENGINES_SYMBOL, 0)

        def ENGINE_SYMBOL(self):
            return self.getToken(SQLParser.ENGINE_SYMBOL, 0)

        def ENUM_SYMBOL(self):
            return self.getToken(SQLParser.ENUM_SYMBOL, 0)

        def ERRORS_SYMBOL(self):
            return self.getToken(SQLParser.ERRORS_SYMBOL, 0)

        def ERROR_SYMBOL(self):
            return self.getToken(SQLParser.ERROR_SYMBOL, 0)

        def ESCAPE_SYMBOL(self):
            return self.getToken(SQLParser.ESCAPE_SYMBOL, 0)

        def EVENTS_SYMBOL(self):
            return self.getToken(SQLParser.EVENTS_SYMBOL, 0)

        def EVERY_SYMBOL(self):
            return self.getToken(SQLParser.EVERY_SYMBOL, 0)

        def EXCHANGE_SYMBOL(self):
            return self.getToken(SQLParser.EXCHANGE_SYMBOL, 0)

        def EXCLUDE_SYMBOL(self):
            return self.getToken(SQLParser.EXCLUDE_SYMBOL, 0)

        def EXPANSION_SYMBOL(self):
            return self.getToken(SQLParser.EXPANSION_SYMBOL, 0)

        def EXPIRE_SYMBOL(self):
            return self.getToken(SQLParser.EXPIRE_SYMBOL, 0)

        def EXPORT_SYMBOL(self):
            return self.getToken(SQLParser.EXPORT_SYMBOL, 0)

        def EXTENDED_SYMBOL(self):
            return self.getToken(SQLParser.EXTENDED_SYMBOL, 0)

        def EXTENT_SIZE_SYMBOL(self):
            return self.getToken(SQLParser.EXTENT_SIZE_SYMBOL, 0)

        def FAST_SYMBOL(self):
            return self.getToken(SQLParser.FAST_SYMBOL, 0)

        def FAULTS_SYMBOL(self):
            return self.getToken(SQLParser.FAULTS_SYMBOL, 0)

        def FILE_BLOCK_SIZE_SYMBOL(self):
            return self.getToken(SQLParser.FILE_BLOCK_SIZE_SYMBOL, 0)

        def FILTER_SYMBOL(self):
            return self.getToken(SQLParser.FILTER_SYMBOL, 0)

        def FIRST_SYMBOL(self):
            return self.getToken(SQLParser.FIRST_SYMBOL, 0)

        def FIXED_SYMBOL(self):
            return self.getToken(SQLParser.FIXED_SYMBOL, 0)

        def FOLLOWING_SYMBOL(self):
            return self.getToken(SQLParser.FOLLOWING_SYMBOL, 0)

        def FORMAT_SYMBOL(self):
            return self.getToken(SQLParser.FORMAT_SYMBOL, 0)

        def FOUND_SYMBOL(self):
            return self.getToken(SQLParser.FOUND_SYMBOL, 0)

        def FULL_SYMBOL(self):
            return self.getToken(SQLParser.FULL_SYMBOL, 0)

        def GENERAL_SYMBOL(self):
            return self.getToken(SQLParser.GENERAL_SYMBOL, 0)

        def GEOMETRYCOLLECTION_SYMBOL(self):
            return self.getToken(SQLParser.GEOMETRYCOLLECTION_SYMBOL, 0)

        def GEOMETRY_SYMBOL(self):
            return self.getToken(SQLParser.GEOMETRY_SYMBOL, 0)

        def GET_FORMAT_SYMBOL(self):
            return self.getToken(SQLParser.GET_FORMAT_SYMBOL, 0)

        def GET_MASTER_PUBLIC_KEY_SYMBOL(self):
            return self.getToken(SQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0)

        def GRANTS_SYMBOL(self):
            return self.getToken(SQLParser.GRANTS_SYMBOL, 0)

        def GROUP_REPLICATION_SYMBOL(self):
            return self.getToken(SQLParser.GROUP_REPLICATION_SYMBOL, 0)

        def HASH_SYMBOL(self):
            return self.getToken(SQLParser.HASH_SYMBOL, 0)

        def HISTOGRAM_SYMBOL(self):
            return self.getToken(SQLParser.HISTOGRAM_SYMBOL, 0)

        def HISTORY_SYMBOL(self):
            return self.getToken(SQLParser.HISTORY_SYMBOL, 0)

        def HOSTS_SYMBOL(self):
            return self.getToken(SQLParser.HOSTS_SYMBOL, 0)

        def HOST_SYMBOL(self):
            return self.getToken(SQLParser.HOST_SYMBOL, 0)

        def HOUR_SYMBOL(self):
            return self.getToken(SQLParser.HOUR_SYMBOL, 0)

        def IDENTIFIED_SYMBOL(self):
            return self.getToken(SQLParser.IDENTIFIED_SYMBOL, 0)

        def IGNORE_SERVER_IDS_SYMBOL(self):
            return self.getToken(SQLParser.IGNORE_SERVER_IDS_SYMBOL, 0)

        def INACTIVE_SYMBOL(self):
            return self.getToken(SQLParser.INACTIVE_SYMBOL, 0)

        def INDEXES_SYMBOL(self):
            return self.getToken(SQLParser.INDEXES_SYMBOL, 0)

        def INITIAL_SIZE_SYMBOL(self):
            return self.getToken(SQLParser.INITIAL_SIZE_SYMBOL, 0)

        def INSERT_METHOD_SYMBOL(self):
            return self.getToken(SQLParser.INSERT_METHOD_SYMBOL, 0)

        def INSTANCE_SYMBOL(self):
            return self.getToken(SQLParser.INSTANCE_SYMBOL, 0)

        def INVISIBLE_SYMBOL(self):
            return self.getToken(SQLParser.INVISIBLE_SYMBOL, 0)

        def INVOKER_SYMBOL(self):
            return self.getToken(SQLParser.INVOKER_SYMBOL, 0)

        def IO_SYMBOL(self):
            return self.getToken(SQLParser.IO_SYMBOL, 0)

        def IPC_SYMBOL(self):
            return self.getToken(SQLParser.IPC_SYMBOL, 0)

        def ISOLATION_SYMBOL(self):
            return self.getToken(SQLParser.ISOLATION_SYMBOL, 0)

        def ISSUER_SYMBOL(self):
            return self.getToken(SQLParser.ISSUER_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(SQLParser.JSON_SYMBOL, 0)

        def KEY_BLOCK_SIZE_SYMBOL(self):
            return self.getToken(SQLParser.KEY_BLOCK_SIZE_SYMBOL, 0)

        def LAST_SYMBOL(self):
            return self.getToken(SQLParser.LAST_SYMBOL, 0)

        def LEAVES_SYMBOL(self):
            return self.getToken(SQLParser.LEAVES_SYMBOL, 0)

        def LESS_SYMBOL(self):
            return self.getToken(SQLParser.LESS_SYMBOL, 0)

        def LEVEL_SYMBOL(self):
            return self.getToken(SQLParser.LEVEL_SYMBOL, 0)

        def LINESTRING_SYMBOL(self):
            return self.getToken(SQLParser.LINESTRING_SYMBOL, 0)

        def LIST_SYMBOL(self):
            return self.getToken(SQLParser.LIST_SYMBOL, 0)

        def LOCKED_SYMBOL(self):
            return self.getToken(SQLParser.LOCKED_SYMBOL, 0)

        def LOCKS_SYMBOL(self):
            return self.getToken(SQLParser.LOCKS_SYMBOL, 0)

        def LOGFILE_SYMBOL(self):
            return self.getToken(SQLParser.LOGFILE_SYMBOL, 0)

        def LOGS_SYMBOL(self):
            return self.getToken(SQLParser.LOGS_SYMBOL, 0)

        def MASTER_AUTO_POSITION_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_AUTO_POSITION_SYMBOL, 0)

        def MASTER_COMPRESSION_ALGORITHM_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0)

        def MASTER_CONNECT_RETRY_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0)

        def MASTER_DELAY_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_DELAY_SYMBOL, 0)

        def MASTER_HEARTBEAT_PERIOD_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0)

        def MASTER_HOST_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_HOST_SYMBOL, 0)

        def NETWORK_NAMESPACE_SYMBOL(self):
            return self.getToken(SQLParser.NETWORK_NAMESPACE_SYMBOL, 0)

        def MASTER_LOG_FILE_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_LOG_FILE_SYMBOL, 0)

        def MASTER_LOG_POS_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_LOG_POS_SYMBOL, 0)

        def MASTER_PASSWORD_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_PASSWORD_SYMBOL, 0)

        def MASTER_PORT_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_PORT_SYMBOL, 0)

        def MASTER_PUBLIC_KEY_PATH_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0)

        def MASTER_RETRY_COUNT_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_RETRY_COUNT_SYMBOL, 0)

        def MASTER_SERVER_ID_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SERVER_ID_SYMBOL, 0)

        def MASTER_SSL_CAPATH_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SSL_CAPATH_SYMBOL, 0)

        def MASTER_SSL_CA_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SSL_CA_SYMBOL, 0)

        def MASTER_SSL_CERT_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SSL_CERT_SYMBOL, 0)

        def MASTER_SSL_CIPHER_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SSL_CIPHER_SYMBOL, 0)

        def MASTER_SSL_CRLPATH_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0)

        def MASTER_SSL_CRL_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SSL_CRL_SYMBOL, 0)

        def MASTER_SSL_KEY_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SSL_KEY_SYMBOL, 0)

        def MASTER_SSL_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SSL_SYMBOL, 0)

        def MASTER_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SYMBOL, 0)

        def MASTER_TLS_CIPHERSUITES_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0)

        def MASTER_TLS_VERSION_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_TLS_VERSION_SYMBOL, 0)

        def MASTER_USER_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_USER_SYMBOL, 0)

        def MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0)

        def MAX_CONNECTIONS_PER_HOUR_SYMBOL(self):
            return self.getToken(SQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0)

        def MAX_QUERIES_PER_HOUR_SYMBOL(self):
            return self.getToken(SQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0)

        def MAX_ROWS_SYMBOL(self):
            return self.getToken(SQLParser.MAX_ROWS_SYMBOL, 0)

        def MAX_SIZE_SYMBOL(self):
            return self.getToken(SQLParser.MAX_SIZE_SYMBOL, 0)

        def MAX_UPDATES_PER_HOUR_SYMBOL(self):
            return self.getToken(SQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0)

        def MAX_USER_CONNECTIONS_SYMBOL(self):
            return self.getToken(SQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0)

        def MEDIUM_SYMBOL(self):
            return self.getToken(SQLParser.MEDIUM_SYMBOL, 0)

        def MEMORY_SYMBOL(self):
            return self.getToken(SQLParser.MEMORY_SYMBOL, 0)

        def MERGE_SYMBOL(self):
            return self.getToken(SQLParser.MERGE_SYMBOL, 0)

        def MESSAGE_TEXT_SYMBOL(self):
            return self.getToken(SQLParser.MESSAGE_TEXT_SYMBOL, 0)

        def MICROSECOND_SYMBOL(self):
            return self.getToken(SQLParser.MICROSECOND_SYMBOL, 0)

        def MIGRATE_SYMBOL(self):
            return self.getToken(SQLParser.MIGRATE_SYMBOL, 0)

        def MINUTE_SYMBOL(self):
            return self.getToken(SQLParser.MINUTE_SYMBOL, 0)

        def MIN_ROWS_SYMBOL(self):
            return self.getToken(SQLParser.MIN_ROWS_SYMBOL, 0)

        def MODE_SYMBOL(self):
            return self.getToken(SQLParser.MODE_SYMBOL, 0)

        def MODIFY_SYMBOL(self):
            return self.getToken(SQLParser.MODIFY_SYMBOL, 0)

        def MONTH_SYMBOL(self):
            return self.getToken(SQLParser.MONTH_SYMBOL, 0)

        def MULTILINESTRING_SYMBOL(self):
            return self.getToken(SQLParser.MULTILINESTRING_SYMBOL, 0)

        def MULTIPOINT_SYMBOL(self):
            return self.getToken(SQLParser.MULTIPOINT_SYMBOL, 0)

        def MULTIPOLYGON_SYMBOL(self):
            return self.getToken(SQLParser.MULTIPOLYGON_SYMBOL, 0)

        def MUTEX_SYMBOL(self):
            return self.getToken(SQLParser.MUTEX_SYMBOL, 0)

        def MYSQL_ERRNO_SYMBOL(self):
            return self.getToken(SQLParser.MYSQL_ERRNO_SYMBOL, 0)

        def NAMES_SYMBOL(self):
            return self.getToken(SQLParser.NAMES_SYMBOL, 0)

        def NAME_SYMBOL(self):
            return self.getToken(SQLParser.NAME_SYMBOL, 0)

        def NATIONAL_SYMBOL(self):
            return self.getToken(SQLParser.NATIONAL_SYMBOL, 0)

        def NCHAR_SYMBOL(self):
            return self.getToken(SQLParser.NCHAR_SYMBOL, 0)

        def NDBCLUSTER_SYMBOL(self):
            return self.getToken(SQLParser.NDBCLUSTER_SYMBOL, 0)

        def NESTED_SYMBOL(self):
            return self.getToken(SQLParser.NESTED_SYMBOL, 0)

        def NEVER_SYMBOL(self):
            return self.getToken(SQLParser.NEVER_SYMBOL, 0)

        def NEW_SYMBOL(self):
            return self.getToken(SQLParser.NEW_SYMBOL, 0)

        def NEXT_SYMBOL(self):
            return self.getToken(SQLParser.NEXT_SYMBOL, 0)

        def NODEGROUP_SYMBOL(self):
            return self.getToken(SQLParser.NODEGROUP_SYMBOL, 0)

        def NOWAIT_SYMBOL(self):
            return self.getToken(SQLParser.NOWAIT_SYMBOL, 0)

        def NO_WAIT_SYMBOL(self):
            return self.getToken(SQLParser.NO_WAIT_SYMBOL, 0)

        def NULLS_SYMBOL(self):
            return self.getToken(SQLParser.NULLS_SYMBOL, 0)

        def NUMBER_SYMBOL(self):
            return self.getToken(SQLParser.NUMBER_SYMBOL, 0)

        def NVARCHAR_SYMBOL(self):
            return self.getToken(SQLParser.NVARCHAR_SYMBOL, 0)

        def OFFSET_SYMBOL(self):
            return self.getToken(SQLParser.OFFSET_SYMBOL, 0)

        def OJ_SYMBOL(self):
            return self.getToken(SQLParser.OJ_SYMBOL, 0)

        def OLD_SYMBOL(self):
            return self.getToken(SQLParser.OLD_SYMBOL, 0)

        def ONE_SYMBOL(self):
            return self.getToken(SQLParser.ONE_SYMBOL, 0)

        def ONLY_SYMBOL(self):
            return self.getToken(SQLParser.ONLY_SYMBOL, 0)

        def OPEN_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_SYMBOL, 0)

        def OPTIONAL_SYMBOL(self):
            return self.getToken(SQLParser.OPTIONAL_SYMBOL, 0)

        def OPTIONS_SYMBOL(self):
            return self.getToken(SQLParser.OPTIONS_SYMBOL, 0)

        def ORDINALITY_SYMBOL(self):
            return self.getToken(SQLParser.ORDINALITY_SYMBOL, 0)

        def ORGANIZATION_SYMBOL(self):
            return self.getToken(SQLParser.ORGANIZATION_SYMBOL, 0)

        def OTHERS_SYMBOL(self):
            return self.getToken(SQLParser.OTHERS_SYMBOL, 0)

        def OWNER_SYMBOL(self):
            return self.getToken(SQLParser.OWNER_SYMBOL, 0)

        def PACK_KEYS_SYMBOL(self):
            return self.getToken(SQLParser.PACK_KEYS_SYMBOL, 0)

        def PAGE_SYMBOL(self):
            return self.getToken(SQLParser.PAGE_SYMBOL, 0)

        def PARSER_SYMBOL(self):
            return self.getToken(SQLParser.PARSER_SYMBOL, 0)

        def PARTIAL_SYMBOL(self):
            return self.getToken(SQLParser.PARTIAL_SYMBOL, 0)

        def PARTITIONING_SYMBOL(self):
            return self.getToken(SQLParser.PARTITIONING_SYMBOL, 0)

        def PARTITIONS_SYMBOL(self):
            return self.getToken(SQLParser.PARTITIONS_SYMBOL, 0)

        def PASSWORD_SYMBOL(self):
            return self.getToken(SQLParser.PASSWORD_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(SQLParser.PATH_SYMBOL, 0)

        def PHASE_SYMBOL(self):
            return self.getToken(SQLParser.PHASE_SYMBOL, 0)

        def PLUGINS_SYMBOL(self):
            return self.getToken(SQLParser.PLUGINS_SYMBOL, 0)

        def PLUGIN_DIR_SYMBOL(self):
            return self.getToken(SQLParser.PLUGIN_DIR_SYMBOL, 0)

        def PLUGIN_SYMBOL(self):
            return self.getToken(SQLParser.PLUGIN_SYMBOL, 0)

        def POINT_SYMBOL(self):
            return self.getToken(SQLParser.POINT_SYMBOL, 0)

        def POLYGON_SYMBOL(self):
            return self.getToken(SQLParser.POLYGON_SYMBOL, 0)

        def PORT_SYMBOL(self):
            return self.getToken(SQLParser.PORT_SYMBOL, 0)

        def PRECEDING_SYMBOL(self):
            return self.getToken(SQLParser.PRECEDING_SYMBOL, 0)

        def PRESERVE_SYMBOL(self):
            return self.getToken(SQLParser.PRESERVE_SYMBOL, 0)

        def PREV_SYMBOL(self):
            return self.getToken(SQLParser.PREV_SYMBOL, 0)

        def PRIVILEGES_SYMBOL(self):
            return self.getToken(SQLParser.PRIVILEGES_SYMBOL, 0)

        def PRIVILEGE_CHECKS_USER_SYMBOL(self):
            return self.getToken(SQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0)

        def PROCESSLIST_SYMBOL(self):
            return self.getToken(SQLParser.PROCESSLIST_SYMBOL, 0)

        def PROFILES_SYMBOL(self):
            return self.getToken(SQLParser.PROFILES_SYMBOL, 0)

        def PROFILE_SYMBOL(self):
            return self.getToken(SQLParser.PROFILE_SYMBOL, 0)

        def QUARTER_SYMBOL(self):
            return self.getToken(SQLParser.QUARTER_SYMBOL, 0)

        def QUERY_SYMBOL(self):
            return self.getToken(SQLParser.QUERY_SYMBOL, 0)

        def QUICK_SYMBOL(self):
            return self.getToken(SQLParser.QUICK_SYMBOL, 0)

        def READ_ONLY_SYMBOL(self):
            return self.getToken(SQLParser.READ_ONLY_SYMBOL, 0)

        def REBUILD_SYMBOL(self):
            return self.getToken(SQLParser.REBUILD_SYMBOL, 0)

        def RECOVER_SYMBOL(self):
            return self.getToken(SQLParser.RECOVER_SYMBOL, 0)

        def REDO_BUFFER_SIZE_SYMBOL(self):
            return self.getToken(SQLParser.REDO_BUFFER_SIZE_SYMBOL, 0)

        def REDUNDANT_SYMBOL(self):
            return self.getToken(SQLParser.REDUNDANT_SYMBOL, 0)

        def REFERENCE_SYMBOL(self):
            return self.getToken(SQLParser.REFERENCE_SYMBOL, 0)

        def RELAY_SYMBOL(self):
            return self.getToken(SQLParser.RELAY_SYMBOL, 0)

        def RELAYLOG_SYMBOL(self):
            return self.getToken(SQLParser.RELAYLOG_SYMBOL, 0)

        def RELAY_LOG_FILE_SYMBOL(self):
            return self.getToken(SQLParser.RELAY_LOG_FILE_SYMBOL, 0)

        def RELAY_LOG_POS_SYMBOL(self):
            return self.getToken(SQLParser.RELAY_LOG_POS_SYMBOL, 0)

        def RELAY_THREAD_SYMBOL(self):
            return self.getToken(SQLParser.RELAY_THREAD_SYMBOL, 0)

        def REMOVE_SYMBOL(self):
            return self.getToken(SQLParser.REMOVE_SYMBOL, 0)

        def REORGANIZE_SYMBOL(self):
            return self.getToken(SQLParser.REORGANIZE_SYMBOL, 0)

        def REPEATABLE_SYMBOL(self):
            return self.getToken(SQLParser.REPEATABLE_SYMBOL, 0)

        def REPLICATE_DO_DB_SYMBOL(self):
            return self.getToken(SQLParser.REPLICATE_DO_DB_SYMBOL, 0)

        def REPLICATE_DO_TABLE_SYMBOL(self):
            return self.getToken(SQLParser.REPLICATE_DO_TABLE_SYMBOL, 0)

        def REPLICATE_IGNORE_DB_SYMBOL(self):
            return self.getToken(SQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0)

        def REPLICATE_IGNORE_TABLE_SYMBOL(self):
            return self.getToken(SQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0)

        def REPLICATE_REWRITE_DB_SYMBOL(self):
            return self.getToken(SQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0)

        def REPLICATE_WILD_DO_TABLE_SYMBOL(self):
            return self.getToken(SQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0)

        def REPLICATE_WILD_IGNORE_TABLE_SYMBOL(self):
            return self.getToken(SQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0)

        def USER_RESOURCES_SYMBOL(self):
            return self.getToken(SQLParser.USER_RESOURCES_SYMBOL, 0)

        def RESPECT_SYMBOL(self):
            return self.getToken(SQLParser.RESPECT_SYMBOL, 0)

        def RESTORE_SYMBOL(self):
            return self.getToken(SQLParser.RESTORE_SYMBOL, 0)

        def RESUME_SYMBOL(self):
            return self.getToken(SQLParser.RESUME_SYMBOL, 0)

        def RETAIN_SYMBOL(self):
            return self.getToken(SQLParser.RETAIN_SYMBOL, 0)

        def RETURNED_SQLSTATE_SYMBOL(self):
            return self.getToken(SQLParser.RETURNED_SQLSTATE_SYMBOL, 0)

        def RETURNS_SYMBOL(self):
            return self.getToken(SQLParser.RETURNS_SYMBOL, 0)

        def REUSE_SYMBOL(self):
            return self.getToken(SQLParser.REUSE_SYMBOL, 0)

        def REVERSE_SYMBOL(self):
            return self.getToken(SQLParser.REVERSE_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(SQLParser.ROLE_SYMBOL, 0)

        def ROLLUP_SYMBOL(self):
            return self.getToken(SQLParser.ROLLUP_SYMBOL, 0)

        def ROTATE_SYMBOL(self):
            return self.getToken(SQLParser.ROTATE_SYMBOL, 0)

        def ROUTINE_SYMBOL(self):
            return self.getToken(SQLParser.ROUTINE_SYMBOL, 0)

        def ROW_COUNT_SYMBOL(self):
            return self.getToken(SQLParser.ROW_COUNT_SYMBOL, 0)

        def ROW_FORMAT_SYMBOL(self):
            return self.getToken(SQLParser.ROW_FORMAT_SYMBOL, 0)

        def RTREE_SYMBOL(self):
            return self.getToken(SQLParser.RTREE_SYMBOL, 0)

        def SCHEDULE_SYMBOL(self):
            return self.getToken(SQLParser.SCHEDULE_SYMBOL, 0)

        def SCHEMA_NAME_SYMBOL(self):
            return self.getToken(SQLParser.SCHEMA_NAME_SYMBOL, 0)

        def SECONDARY_ENGINE_SYMBOL(self):
            return self.getToken(SQLParser.SECONDARY_ENGINE_SYMBOL, 0)

        def SECONDARY_LOAD_SYMBOL(self):
            return self.getToken(SQLParser.SECONDARY_LOAD_SYMBOL, 0)

        def SECONDARY_SYMBOL(self):
            return self.getToken(SQLParser.SECONDARY_SYMBOL, 0)

        def SECONDARY_UNLOAD_SYMBOL(self):
            return self.getToken(SQLParser.SECONDARY_UNLOAD_SYMBOL, 0)

        def SECOND_SYMBOL(self):
            return self.getToken(SQLParser.SECOND_SYMBOL, 0)

        def SECURITY_SYMBOL(self):
            return self.getToken(SQLParser.SECURITY_SYMBOL, 0)

        def SERIALIZABLE_SYMBOL(self):
            return self.getToken(SQLParser.SERIALIZABLE_SYMBOL, 0)

        def SERIAL_SYMBOL(self):
            return self.getToken(SQLParser.SERIAL_SYMBOL, 0)

        def SERVER_SYMBOL(self):
            return self.getToken(SQLParser.SERVER_SYMBOL, 0)

        def SHARE_SYMBOL(self):
            return self.getToken(SQLParser.SHARE_SYMBOL, 0)

        def SIMPLE_SYMBOL(self):
            return self.getToken(SQLParser.SIMPLE_SYMBOL, 0)

        def SKIP_SYMBOL(self):
            return self.getToken(SQLParser.SKIP_SYMBOL, 0)

        def SLOW_SYMBOL(self):
            return self.getToken(SQLParser.SLOW_SYMBOL, 0)

        def SNAPSHOT_SYMBOL(self):
            return self.getToken(SQLParser.SNAPSHOT_SYMBOL, 0)

        def SOCKET_SYMBOL(self):
            return self.getToken(SQLParser.SOCKET_SYMBOL, 0)

        def SONAME_SYMBOL(self):
            return self.getToken(SQLParser.SONAME_SYMBOL, 0)

        def SOUNDS_SYMBOL(self):
            return self.getToken(SQLParser.SOUNDS_SYMBOL, 0)

        def SOURCE_SYMBOL(self):
            return self.getToken(SQLParser.SOURCE_SYMBOL, 0)

        def SQL_AFTER_GTIDS_SYMBOL(self):
            return self.getToken(SQLParser.SQL_AFTER_GTIDS_SYMBOL, 0)

        def SQL_AFTER_MTS_GAPS_SYMBOL(self):
            return self.getToken(SQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0)

        def SQL_BEFORE_GTIDS_SYMBOL(self):
            return self.getToken(SQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0)

        def SQL_BUFFER_RESULT_SYMBOL(self):
            return self.getToken(SQLParser.SQL_BUFFER_RESULT_SYMBOL, 0)

        def SQL_NO_CACHE_SYMBOL(self):
            return self.getToken(SQLParser.SQL_NO_CACHE_SYMBOL, 0)

        def SQL_THREAD_SYMBOL(self):
            return self.getToken(SQLParser.SQL_THREAD_SYMBOL, 0)

        def SRID_SYMBOL(self):
            return self.getToken(SQLParser.SRID_SYMBOL, 0)

        def STACKED_SYMBOL(self):
            return self.getToken(SQLParser.STACKED_SYMBOL, 0)

        def STARTS_SYMBOL(self):
            return self.getToken(SQLParser.STARTS_SYMBOL, 0)

        def STATS_AUTO_RECALC_SYMBOL(self):
            return self.getToken(SQLParser.STATS_AUTO_RECALC_SYMBOL, 0)

        def STATS_PERSISTENT_SYMBOL(self):
            return self.getToken(SQLParser.STATS_PERSISTENT_SYMBOL, 0)

        def STATS_SAMPLE_PAGES_SYMBOL(self):
            return self.getToken(SQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0)

        def STATUS_SYMBOL(self):
            return self.getToken(SQLParser.STATUS_SYMBOL, 0)

        def STORAGE_SYMBOL(self):
            return self.getToken(SQLParser.STORAGE_SYMBOL, 0)

        def STRING_SYMBOL(self):
            return self.getToken(SQLParser.STRING_SYMBOL, 0)

        def SUBCLASS_ORIGIN_SYMBOL(self):
            return self.getToken(SQLParser.SUBCLASS_ORIGIN_SYMBOL, 0)

        def SUBDATE_SYMBOL(self):
            return self.getToken(SQLParser.SUBDATE_SYMBOL, 0)

        def SUBJECT_SYMBOL(self):
            return self.getToken(SQLParser.SUBJECT_SYMBOL, 0)

        def SUBPARTITIONS_SYMBOL(self):
            return self.getToken(SQLParser.SUBPARTITIONS_SYMBOL, 0)

        def SUBPARTITION_SYMBOL(self):
            return self.getToken(SQLParser.SUBPARTITION_SYMBOL, 0)

        def SUSPEND_SYMBOL(self):
            return self.getToken(SQLParser.SUSPEND_SYMBOL, 0)

        def SWAPS_SYMBOL(self):
            return self.getToken(SQLParser.SWAPS_SYMBOL, 0)

        def SWITCHES_SYMBOL(self):
            return self.getToken(SQLParser.SWITCHES_SYMBOL, 0)

        def TABLES_SYMBOL(self):
            return self.getToken(SQLParser.TABLES_SYMBOL, 0)

        def TABLESPACE_SYMBOL(self):
            return self.getToken(SQLParser.TABLESPACE_SYMBOL, 0)

        def TABLE_CHECKSUM_SYMBOL(self):
            return self.getToken(SQLParser.TABLE_CHECKSUM_SYMBOL, 0)

        def TABLE_NAME_SYMBOL(self):
            return self.getToken(SQLParser.TABLE_NAME_SYMBOL, 0)

        def TEMPORARY_SYMBOL(self):
            return self.getToken(SQLParser.TEMPORARY_SYMBOL, 0)

        def TEMPTABLE_SYMBOL(self):
            return self.getToken(SQLParser.TEMPTABLE_SYMBOL, 0)

        def TEXT_SYMBOL(self):
            return self.getToken(SQLParser.TEXT_SYMBOL, 0)

        def THAN_SYMBOL(self):
            return self.getToken(SQLParser.THAN_SYMBOL, 0)

        def THREAD_PRIORITY_SYMBOL(self):
            return self.getToken(SQLParser.THREAD_PRIORITY_SYMBOL, 0)

        def TIES_SYMBOL(self):
            return self.getToken(SQLParser.TIES_SYMBOL, 0)

        def TIMESTAMP_ADD_SYMBOL(self):
            return self.getToken(SQLParser.TIMESTAMP_ADD_SYMBOL, 0)

        def TIMESTAMP_DIFF_SYMBOL(self):
            return self.getToken(SQLParser.TIMESTAMP_DIFF_SYMBOL, 0)

        def TIMESTAMP_SYMBOL(self):
            return self.getToken(SQLParser.TIMESTAMP_SYMBOL, 0)

        def TIME_SYMBOL(self):
            return self.getToken(SQLParser.TIME_SYMBOL, 0)

        def TRANSACTION_SYMBOL(self):
            return self.getToken(SQLParser.TRANSACTION_SYMBOL, 0)

        def TRIGGERS_SYMBOL(self):
            return self.getToken(SQLParser.TRIGGERS_SYMBOL, 0)

        def TYPES_SYMBOL(self):
            return self.getToken(SQLParser.TYPES_SYMBOL, 0)

        def TYPE_SYMBOL(self):
            return self.getToken(SQLParser.TYPE_SYMBOL, 0)

        def UNBOUNDED_SYMBOL(self):
            return self.getToken(SQLParser.UNBOUNDED_SYMBOL, 0)

        def UNCOMMITTED_SYMBOL(self):
            return self.getToken(SQLParser.UNCOMMITTED_SYMBOL, 0)

        def UNDEFINED_SYMBOL(self):
            return self.getToken(SQLParser.UNDEFINED_SYMBOL, 0)

        def UNDOFILE_SYMBOL(self):
            return self.getToken(SQLParser.UNDOFILE_SYMBOL, 0)

        def UNDO_BUFFER_SIZE_SYMBOL(self):
            return self.getToken(SQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0)

        def UNKNOWN_SYMBOL(self):
            return self.getToken(SQLParser.UNKNOWN_SYMBOL, 0)

        def UNTIL_SYMBOL(self):
            return self.getToken(SQLParser.UNTIL_SYMBOL, 0)

        def UPGRADE_SYMBOL(self):
            return self.getToken(SQLParser.UPGRADE_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(SQLParser.USER_SYMBOL, 0)

        def USE_FRM_SYMBOL(self):
            return self.getToken(SQLParser.USE_FRM_SYMBOL, 0)

        def VALIDATION_SYMBOL(self):
            return self.getToken(SQLParser.VALIDATION_SYMBOL, 0)

        def VALUE_SYMBOL(self):
            return self.getToken(SQLParser.VALUE_SYMBOL, 0)

        def VARIABLES_SYMBOL(self):
            return self.getToken(SQLParser.VARIABLES_SYMBOL, 0)

        def VCPU_SYMBOL(self):
            return self.getToken(SQLParser.VCPU_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(SQLParser.VIEW_SYMBOL, 0)

        def VISIBLE_SYMBOL(self):
            return self.getToken(SQLParser.VISIBLE_SYMBOL, 0)

        def WAIT_SYMBOL(self):
            return self.getToken(SQLParser.WAIT_SYMBOL, 0)

        def WARNINGS_SYMBOL(self):
            return self.getToken(SQLParser.WARNINGS_SYMBOL, 0)

        def WEEK_SYMBOL(self):
            return self.getToken(SQLParser.WEEK_SYMBOL, 0)

        def WEIGHT_STRING_SYMBOL(self):
            return self.getToken(SQLParser.WEIGHT_STRING_SYMBOL, 0)

        def WITHOUT_SYMBOL(self):
            return self.getToken(SQLParser.WITHOUT_SYMBOL, 0)

        def WORK_SYMBOL(self):
            return self.getToken(SQLParser.WORK_SYMBOL, 0)

        def WRAPPER_SYMBOL(self):
            return self.getToken(SQLParser.WRAPPER_SYMBOL, 0)

        def X509_SYMBOL(self):
            return self.getToken(SQLParser.X509_SYMBOL, 0)

        def XID_SYMBOL(self):
            return self.getToken(SQLParser.XID_SYMBOL, 0)

        def XML_SYMBOL(self):
            return self.getToken(SQLParser.XML_SYMBOL, 0)

        def YEAR_SYMBOL(self):
            return self.getToken(SQLParser.YEAR_SYMBOL, 0)

        def ARRAY_SYMBOL(self):
            return self.getToken(SQLParser.ARRAY_SYMBOL, 0)

        def FAILED_LOGIN_ATTEMPTS_SYMBOL(self):
            return self.getToken(SQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL, 0)

        def MEMBER_SYMBOL(self):
            return self.getToken(SQLParser.MEMBER_SYMBOL, 0)

        def OFF_SYMBOL(self):
            return self.getToken(SQLParser.OFF_SYMBOL, 0)

        def PASSWORD_LOCK_TIME_SYMBOL(self):
            return self.getToken(SQLParser.PASSWORD_LOCK_TIME_SYMBOL, 0)

        def RANDOM_SYMBOL(self):
            return self.getToken(SQLParser.RANDOM_SYMBOL, 0)

        def REQUIRE_ROW_FORMAT_SYMBOL(self):
            return self.getToken(SQLParser.REQUIRE_ROW_FORMAT_SYMBOL, 0)

        def REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL(self):
            return self.getToken(SQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL, 0)

        def STREAM_SYMBOL(self):
            return self.getToken(SQLParser.STREAM_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_identifierKeywordsUnambiguous

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierKeywordsUnambiguous" ):
                listener.enterIdentifierKeywordsUnambiguous(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierKeywordsUnambiguous" ):
                listener.exitIdentifierKeywordsUnambiguous(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierKeywordsUnambiguous" ):
                return visitor.visitIdentifierKeywordsUnambiguous(self)
            else:
                return visitor.visitChildren(self)




    def identifierKeywordsUnambiguous(self):

        localctx = SQLParser.IdentifierKeywordsUnambiguousContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1210, self.RULE_identifierKeywordsUnambiguous)
        self._la = 0 # Token type
        try:
            self.state = 8384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8381
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLParser.ACCOUNT_SYMBOL) | (1 << SQLParser.ACTION_SYMBOL) | (1 << SQLParser.ADDDATE_SYMBOL) | (1 << SQLParser.AFTER_SYMBOL) | (1 << SQLParser.AGAINST_SYMBOL) | (1 << SQLParser.AGGREGATE_SYMBOL) | (1 << SQLParser.ALGORITHM_SYMBOL) | (1 << SQLParser.ALWAYS_SYMBOL) | (1 << SQLParser.ANY_SYMBOL) | (1 << SQLParser.AT_SYMBOL) | (1 << SQLParser.AUTOEXTEND_SIZE_SYMBOL) | (1 << SQLParser.AUTO_INCREMENT_SYMBOL) | (1 << SQLParser.AVG_ROW_LENGTH_SYMBOL) | (1 << SQLParser.AVG_SYMBOL) | (1 << SQLParser.BACKUP_SYMBOL) | (1 << SQLParser.BINLOG_SYMBOL) | (1 << SQLParser.BIT_SYMBOL) | (1 << SQLParser.BLOCK_SYMBOL) | (1 << SQLParser.BOOLEAN_SYMBOL) | (1 << SQLParser.BOOL_SYMBOL) | (1 << SQLParser.BTREE_SYMBOL) | (1 << SQLParser.CASCADED_SYMBOL) | (1 << SQLParser.CATALOG_NAME_SYMBOL) | (1 << SQLParser.CHAIN_SYMBOL) | (1 << SQLParser.CHANGED_SYMBOL) | (1 << SQLParser.CHANNEL_SYMBOL) | (1 << SQLParser.CIPHER_SYMBOL))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SQLParser.CLASS_ORIGIN_SYMBOL - 64)) | (1 << (SQLParser.CLIENT_SYMBOL - 64)) | (1 << (SQLParser.CLOSE_SYMBOL - 64)) | (1 << (SQLParser.COALESCE_SYMBOL - 64)) | (1 << (SQLParser.CODE_SYMBOL - 64)) | (1 << (SQLParser.COLLATION_SYMBOL - 64)) | (1 << (SQLParser.COLUMNS_SYMBOL - 64)) | (1 << (SQLParser.COLUMN_NAME_SYMBOL - 64)) | (1 << (SQLParser.COLUMN_FORMAT_SYMBOL - 64)) | (1 << (SQLParser.COMMITTED_SYMBOL - 64)) | (1 << (SQLParser.COMPACT_SYMBOL - 64)) | (1 << (SQLParser.COMPLETION_SYMBOL - 64)) | (1 << (SQLParser.COMPRESSED_SYMBOL - 64)) | (1 << (SQLParser.COMPRESSION_SYMBOL - 64)) | (1 << (SQLParser.CONCURRENT_SYMBOL - 64)) | (1 << (SQLParser.CONNECTION_SYMBOL - 64)) | (1 << (SQLParser.CONSISTENT_SYMBOL - 64)) | (1 << (SQLParser.CONSTRAINT_CATALOG_SYMBOL - 64)) | (1 << (SQLParser.CONSTRAINT_NAME_SYMBOL - 64)) | (1 << (SQLParser.CONSTRAINT_SCHEMA_SYMBOL - 64)) | (1 << (SQLParser.CONTEXT_SYMBOL - 64)) | (1 << (SQLParser.CPU_SYMBOL - 64)) | (1 << (SQLParser.CURRENT_SYMBOL - 64)) | (1 << (SQLParser.CURSOR_NAME_SYMBOL - 64)) | (1 << (SQLParser.DATAFILE_SYMBOL - 64)) | (1 << (SQLParser.DATA_SYMBOL - 64)) | (1 << (SQLParser.DATETIME_SYMBOL - 64)) | (1 << (SQLParser.DATE_SYMBOL - 64)) | (1 << (SQLParser.DAY_SYMBOL - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (SQLParser.DEFAULT_AUTH_SYMBOL - 129)) | (1 << (SQLParser.DEFINER_SYMBOL - 129)) | (1 << (SQLParser.DELAY_KEY_WRITE_SYMBOL - 129)) | (1 << (SQLParser.DIAGNOSTICS_SYMBOL - 129)) | (1 << (SQLParser.DIRECTORY_SYMBOL - 129)) | (1 << (SQLParser.DISABLE_SYMBOL - 129)) | (1 << (SQLParser.DISCARD_SYMBOL - 129)) | (1 << (SQLParser.DISK_SYMBOL - 129)) | (1 << (SQLParser.DUMPFILE_SYMBOL - 129)) | (1 << (SQLParser.DUPLICATE_SYMBOL - 129)) | (1 << (SQLParser.DYNAMIC_SYMBOL - 129)) | (1 << (SQLParser.ENABLE_SYMBOL - 129)) | (1 << (SQLParser.ENCRYPTION_SYMBOL - 129)) | (1 << (SQLParser.ENDS_SYMBOL - 129)) | (1 << (SQLParser.ENGINES_SYMBOL - 129)) | (1 << (SQLParser.ENGINE_SYMBOL - 129)) | (1 << (SQLParser.ENUM_SYMBOL - 129)) | (1 << (SQLParser.ERROR_SYMBOL - 129)) | (1 << (SQLParser.ERRORS_SYMBOL - 129)) | (1 << (SQLParser.ESCAPE_SYMBOL - 129)) | (1 << (SQLParser.EVENTS_SYMBOL - 129)) | (1 << (SQLParser.EVERY_SYMBOL - 129)) | (1 << (SQLParser.EXCHANGE_SYMBOL - 129)) | (1 << (SQLParser.EXPANSION_SYMBOL - 129)) | (1 << (SQLParser.EXPIRE_SYMBOL - 129)) | (1 << (SQLParser.EXPORT_SYMBOL - 129)) | (1 << (SQLParser.EXTENDED_SYMBOL - 129)) | (1 << (SQLParser.EXTENT_SIZE_SYMBOL - 129)) | (1 << (SQLParser.FAST_SYMBOL - 129)) | (1 << (SQLParser.FAULTS_SYMBOL - 129)) | (1 << (SQLParser.FILE_BLOCK_SIZE_SYMBOL - 129)) | (1 << (SQLParser.FILTER_SYMBOL - 129)) | (1 << (SQLParser.FIRST_SYMBOL - 129)) | (1 << (SQLParser.FIXED_SYMBOL - 129)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (SQLParser.FORMAT_SYMBOL - 201)) | (1 << (SQLParser.FOUND_SYMBOL - 201)) | (1 << (SQLParser.FULL_SYMBOL - 201)) | (1 << (SQLParser.GENERAL_SYMBOL - 201)) | (1 << (SQLParser.GROUP_REPLICATION_SYMBOL - 201)) | (1 << (SQLParser.GEOMETRYCOLLECTION_SYMBOL - 201)) | (1 << (SQLParser.GEOMETRY_SYMBOL - 201)) | (1 << (SQLParser.GET_FORMAT_SYMBOL - 201)) | (1 << (SQLParser.GRANTS_SYMBOL - 201)) | (1 << (SQLParser.HASH_SYMBOL - 201)) | (1 << (SQLParser.HOST_SYMBOL - 201)) | (1 << (SQLParser.HOSTS_SYMBOL - 201)) | (1 << (SQLParser.HOUR_SYMBOL - 201)) | (1 << (SQLParser.IDENTIFIED_SYMBOL - 201)) | (1 << (SQLParser.IGNORE_SERVER_IDS_SYMBOL - 201)) | (1 << (SQLParser.INDEXES_SYMBOL - 201)) | (1 << (SQLParser.INITIAL_SIZE_SYMBOL - 201)) | (1 << (SQLParser.INSERT_METHOD_SYMBOL - 201)) | (1 << (SQLParser.INSTANCE_SYMBOL - 201)) | (1 << (SQLParser.INVOKER_SYMBOL - 201)) | (1 << (SQLParser.IO_SYMBOL - 201)) | (1 << (SQLParser.IPC_SYMBOL - 201)) | (1 << (SQLParser.ISOLATION_SYMBOL - 201)) | (1 << (SQLParser.ISSUER_SYMBOL - 201)) | (1 << (SQLParser.JSON_SYMBOL - 201)) | (1 << (SQLParser.KEY_BLOCK_SIZE_SYMBOL - 201)))) != 0) or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & ((1 << (SQLParser.LAST_SYMBOL - 268)) | (1 << (SQLParser.LEAVES_SYMBOL - 268)) | (1 << (SQLParser.LESS_SYMBOL - 268)) | (1 << (SQLParser.LEVEL_SYMBOL - 268)) | (1 << (SQLParser.LINESTRING_SYMBOL - 268)) | (1 << (SQLParser.LIST_SYMBOL - 268)) | (1 << (SQLParser.LOCKS_SYMBOL - 268)) | (1 << (SQLParser.LOGFILE_SYMBOL - 268)) | (1 << (SQLParser.LOGS_SYMBOL - 268)) | (1 << (SQLParser.MASTER_AUTO_POSITION_SYMBOL - 268)) | (1 << (SQLParser.MASTER_CONNECT_RETRY_SYMBOL - 268)) | (1 << (SQLParser.MASTER_DELAY_SYMBOL - 268)) | (1 << (SQLParser.MASTER_HOST_SYMBOL - 268)) | (1 << (SQLParser.MASTER_LOG_FILE_SYMBOL - 268)) | (1 << (SQLParser.MASTER_LOG_POS_SYMBOL - 268)) | (1 << (SQLParser.MASTER_PASSWORD_SYMBOL - 268)) | (1 << (SQLParser.MASTER_PORT_SYMBOL - 268)) | (1 << (SQLParser.MASTER_RETRY_COUNT_SYMBOL - 268)) | (1 << (SQLParser.MASTER_SERVER_ID_SYMBOL - 268)) | (1 << (SQLParser.MASTER_SSL_CAPATH_SYMBOL - 268)) | (1 << (SQLParser.MASTER_SSL_CA_SYMBOL - 268)) | (1 << (SQLParser.MASTER_SSL_CERT_SYMBOL - 268)) | (1 << (SQLParser.MASTER_SSL_CIPHER_SYMBOL - 268)) | (1 << (SQLParser.MASTER_SSL_CRL_SYMBOL - 268)) | (1 << (SQLParser.MASTER_SSL_CRLPATH_SYMBOL - 268)) | (1 << (SQLParser.MASTER_SSL_KEY_SYMBOL - 268)) | (1 << (SQLParser.MASTER_SSL_SYMBOL - 268)) | (1 << (SQLParser.MASTER_SYMBOL - 268)) | (1 << (SQLParser.MASTER_TLS_VERSION_SYMBOL - 268)) | (1 << (SQLParser.MASTER_USER_SYMBOL - 268)) | (1 << (SQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL - 268)) | (1 << (SQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL - 268)) | (1 << (SQLParser.MAX_QUERIES_PER_HOUR_SYMBOL - 268)) | (1 << (SQLParser.MAX_ROWS_SYMBOL - 268)) | (1 << (SQLParser.MAX_SIZE_SYMBOL - 268)) | (1 << (SQLParser.MAX_UPDATES_PER_HOUR_SYMBOL - 268)) | (1 << (SQLParser.MAX_USER_CONNECTIONS_SYMBOL - 268)))) != 0) or ((((_la - 333)) & ~0x3f) == 0 and ((1 << (_la - 333)) & ((1 << (SQLParser.MEDIUM_SYMBOL - 333)) | (1 << (SQLParser.MEMORY_SYMBOL - 333)) | (1 << (SQLParser.MERGE_SYMBOL - 333)) | (1 << (SQLParser.MESSAGE_TEXT_SYMBOL - 333)) | (1 << (SQLParser.MICROSECOND_SYMBOL - 333)) | (1 << (SQLParser.MIGRATE_SYMBOL - 333)) | (1 << (SQLParser.MINUTE_SYMBOL - 333)) | (1 << (SQLParser.MIN_ROWS_SYMBOL - 333)) | (1 << (SQLParser.MODE_SYMBOL - 333)) | (1 << (SQLParser.MODIFY_SYMBOL - 333)) | (1 << (SQLParser.MONTH_SYMBOL - 333)) | (1 << (SQLParser.MULTILINESTRING_SYMBOL - 333)) | (1 << (SQLParser.MULTIPOINT_SYMBOL - 333)) | (1 << (SQLParser.MULTIPOLYGON_SYMBOL - 333)) | (1 << (SQLParser.MUTEX_SYMBOL - 333)) | (1 << (SQLParser.MYSQL_ERRNO_SYMBOL - 333)) | (1 << (SQLParser.NAMES_SYMBOL - 333)) | (1 << (SQLParser.NAME_SYMBOL - 333)) | (1 << (SQLParser.NATIONAL_SYMBOL - 333)) | (1 << (SQLParser.NCHAR_SYMBOL - 333)) | (1 << (SQLParser.NDBCLUSTER_SYMBOL - 333)) | (1 << (SQLParser.NEVER_SYMBOL - 333)) | (1 << (SQLParser.NEW_SYMBOL - 333)) | (1 << (SQLParser.NEXT_SYMBOL - 333)) | (1 << (SQLParser.NODEGROUP_SYMBOL - 333)) | (1 << (SQLParser.NO_WAIT_SYMBOL - 333)) | (1 << (SQLParser.NUMBER_SYMBOL - 333)) | (1 << (SQLParser.NVARCHAR_SYMBOL - 333)) | (1 << (SQLParser.OFFSET_SYMBOL - 333)) | (1 << (SQLParser.ONE_SYMBOL - 333)) | (1 << (SQLParser.ONLY_SYMBOL - 333)) | (1 << (SQLParser.OPEN_SYMBOL - 333)) | (1 << (SQLParser.OPTIONS_SYMBOL - 333)))) != 0) or ((((_la - 398)) & ~0x3f) == 0 and ((1 << (_la - 398)) & ((1 << (SQLParser.OWNER_SYMBOL - 398)) | (1 << (SQLParser.PACK_KEYS_SYMBOL - 398)) | (1 << (SQLParser.PAGE_SYMBOL - 398)) | (1 << (SQLParser.PARSER_SYMBOL - 398)) | (1 << (SQLParser.PARTIAL_SYMBOL - 398)) | (1 << (SQLParser.PARTITIONING_SYMBOL - 398)) | (1 << (SQLParser.PARTITIONS_SYMBOL - 398)) | (1 << (SQLParser.PASSWORD_SYMBOL - 398)) | (1 << (SQLParser.PHASE_SYMBOL - 398)) | (1 << (SQLParser.PLUGINS_SYMBOL - 398)) | (1 << (SQLParser.PLUGIN_DIR_SYMBOL - 398)) | (1 << (SQLParser.PLUGIN_SYMBOL - 398)) | (1 << (SQLParser.POINT_SYMBOL - 398)) | (1 << (SQLParser.POLYGON_SYMBOL - 398)) | (1 << (SQLParser.PORT_SYMBOL - 398)) | (1 << (SQLParser.PRESERVE_SYMBOL - 398)) | (1 << (SQLParser.PREV_SYMBOL - 398)) | (1 << (SQLParser.PRIVILEGES_SYMBOL - 398)) | (1 << (SQLParser.PROCESSLIST_SYMBOL - 398)) | (1 << (SQLParser.PROFILE_SYMBOL - 398)) | (1 << (SQLParser.PROFILES_SYMBOL - 398)) | (1 << (SQLParser.QUARTER_SYMBOL - 398)) | (1 << (SQLParser.QUERY_SYMBOL - 398)) | (1 << (SQLParser.QUICK_SYMBOL - 398)) | (1 << (SQLParser.READ_ONLY_SYMBOL - 398)) | (1 << (SQLParser.REBUILD_SYMBOL - 398)) | (1 << (SQLParser.RECOVER_SYMBOL - 398)) | (1 << (SQLParser.REDO_BUFFER_SIZE_SYMBOL - 398)) | (1 << (SQLParser.REDUNDANT_SYMBOL - 398)) | (1 << (SQLParser.RELAY_SYMBOL - 398)) | (1 << (SQLParser.RELAYLOG_SYMBOL - 398)) | (1 << (SQLParser.RELAY_LOG_FILE_SYMBOL - 398)) | (1 << (SQLParser.RELAY_LOG_POS_SYMBOL - 398)) | (1 << (SQLParser.RELAY_THREAD_SYMBOL - 398)) | (1 << (SQLParser.REMOVE_SYMBOL - 398)) | (1 << (SQLParser.REORGANIZE_SYMBOL - 398)) | (1 << (SQLParser.REPEATABLE_SYMBOL - 398)) | (1 << (SQLParser.REPLICATE_DO_DB_SYMBOL - 398)) | (1 << (SQLParser.REPLICATE_IGNORE_DB_SYMBOL - 398)))) != 0) or ((((_la - 462)) & ~0x3f) == 0 and ((1 << (_la - 462)) & ((1 << (SQLParser.REPLICATE_DO_TABLE_SYMBOL - 462)) | (1 << (SQLParser.REPLICATE_IGNORE_TABLE_SYMBOL - 462)) | (1 << (SQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL - 462)) | (1 << (SQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL - 462)) | (1 << (SQLParser.REPLICATE_REWRITE_DB_SYMBOL - 462)) | (1 << (SQLParser.RESTORE_SYMBOL - 462)) | (1 << (SQLParser.RESUME_SYMBOL - 462)) | (1 << (SQLParser.RETURNED_SQLSTATE_SYMBOL - 462)) | (1 << (SQLParser.RETURNS_SYMBOL - 462)) | (1 << (SQLParser.REVERSE_SYMBOL - 462)) | (1 << (SQLParser.ROLLUP_SYMBOL - 462)) | (1 << (SQLParser.ROTATE_SYMBOL - 462)) | (1 << (SQLParser.ROUTINE_SYMBOL - 462)) | (1 << (SQLParser.ROW_COUNT_SYMBOL - 462)) | (1 << (SQLParser.ROW_FORMAT_SYMBOL - 462)) | (1 << (SQLParser.RTREE_SYMBOL - 462)) | (1 << (SQLParser.SCHEDULE_SYMBOL - 462)) | (1 << (SQLParser.SCHEMA_NAME_SYMBOL - 462)) | (1 << (SQLParser.SECOND_SYMBOL - 462)) | (1 << (SQLParser.SECURITY_SYMBOL - 462)) | (1 << (SQLParser.SERIALIZABLE_SYMBOL - 462)) | (1 << (SQLParser.SERIAL_SYMBOL - 462)) | (1 << (SQLParser.SERVER_SYMBOL - 462)) | (1 << (SQLParser.SHARE_SYMBOL - 462)) | (1 << (SQLParser.SIMPLE_SYMBOL - 462)) | (1 << (SQLParser.SLOW_SYMBOL - 462)) | (1 << (SQLParser.SNAPSHOT_SYMBOL - 462)) | (1 << (SQLParser.SOCKET_SYMBOL - 462)) | (1 << (SQLParser.SONAME_SYMBOL - 462)) | (1 << (SQLParser.SOUNDS_SYMBOL - 462)) | (1 << (SQLParser.SOURCE_SYMBOL - 462)))) != 0) or ((((_la - 528)) & ~0x3f) == 0 and ((1 << (_la - 528)) & ((1 << (SQLParser.SQL_AFTER_GTIDS_SYMBOL - 528)) | (1 << (SQLParser.SQL_AFTER_MTS_GAPS_SYMBOL - 528)) | (1 << (SQLParser.SQL_BEFORE_GTIDS_SYMBOL - 528)) | (1 << (SQLParser.SQL_BUFFER_RESULT_SYMBOL - 528)) | (1 << (SQLParser.SQL_NO_CACHE_SYMBOL - 528)) | (1 << (SQLParser.SQL_THREAD_SYMBOL - 528)) | (1 << (SQLParser.STACKED_SYMBOL - 528)) | (1 << (SQLParser.STARTS_SYMBOL - 528)) | (1 << (SQLParser.STATS_AUTO_RECALC_SYMBOL - 528)) | (1 << (SQLParser.STATS_PERSISTENT_SYMBOL - 528)) | (1 << (SQLParser.STATS_SAMPLE_PAGES_SYMBOL - 528)) | (1 << (SQLParser.STATUS_SYMBOL - 528)) | (1 << (SQLParser.STORAGE_SYMBOL - 528)) | (1 << (SQLParser.STRING_SYMBOL - 528)) | (1 << (SQLParser.SUBCLASS_ORIGIN_SYMBOL - 528)) | (1 << (SQLParser.SUBDATE_SYMBOL - 528)) | (1 << (SQLParser.SUBJECT_SYMBOL - 528)) | (1 << (SQLParser.SUBPARTITIONS_SYMBOL - 528)) | (1 << (SQLParser.SUBPARTITION_SYMBOL - 528)) | (1 << (SQLParser.SUSPEND_SYMBOL - 528)) | (1 << (SQLParser.SWAPS_SYMBOL - 528)) | (1 << (SQLParser.SWITCHES_SYMBOL - 528)) | (1 << (SQLParser.TABLES_SYMBOL - 528)) | (1 << (SQLParser.TABLESPACE_SYMBOL - 528)) | (1 << (SQLParser.TABLE_CHECKSUM_SYMBOL - 528)) | (1 << (SQLParser.TABLE_NAME_SYMBOL - 528)) | (1 << (SQLParser.TEMPORARY_SYMBOL - 528)) | (1 << (SQLParser.TEMPTABLE_SYMBOL - 528)) | (1 << (SQLParser.TEXT_SYMBOL - 528)) | (1 << (SQLParser.THAN_SYMBOL - 528)) | (1 << (SQLParser.TIMESTAMP_SYMBOL - 528)) | (1 << (SQLParser.TIMESTAMP_ADD_SYMBOL - 528)) | (1 << (SQLParser.TIMESTAMP_DIFF_SYMBOL - 528)) | (1 << (SQLParser.TIME_SYMBOL - 528)))) != 0) or ((((_la - 592)) & ~0x3f) == 0 and ((1 << (_la - 592)) & ((1 << (SQLParser.TRANSACTION_SYMBOL - 592)) | (1 << (SQLParser.TRIGGERS_SYMBOL - 592)) | (1 << (SQLParser.TYPES_SYMBOL - 592)) | (1 << (SQLParser.TYPE_SYMBOL - 592)) | (1 << (SQLParser.UNCOMMITTED_SYMBOL - 592)) | (1 << (SQLParser.UNDEFINED_SYMBOL - 592)) | (1 << (SQLParser.UNDOFILE_SYMBOL - 592)) | (1 << (SQLParser.UNDO_BUFFER_SIZE_SYMBOL - 592)) | (1 << (SQLParser.UNKNOWN_SYMBOL - 592)) | (1 << (SQLParser.UNTIL_SYMBOL - 592)) | (1 << (SQLParser.UPGRADE_SYMBOL - 592)) | (1 << (SQLParser.USER_RESOURCES_SYMBOL - 592)) | (1 << (SQLParser.USER_SYMBOL - 592)) | (1 << (SQLParser.USE_FRM_SYMBOL - 592)) | (1 << (SQLParser.VALIDATION_SYMBOL - 592)) | (1 << (SQLParser.VALUE_SYMBOL - 592)) | (1 << (SQLParser.VARIABLES_SYMBOL - 592)) | (1 << (SQLParser.VIEW_SYMBOL - 592)) | (1 << (SQLParser.WAIT_SYMBOL - 592)) | (1 << (SQLParser.WARNINGS_SYMBOL - 592)) | (1 << (SQLParser.WEEK_SYMBOL - 592)) | (1 << (SQLParser.WEIGHT_STRING_SYMBOL - 592)) | (1 << (SQLParser.WITHOUT_SYMBOL - 592)) | (1 << (SQLParser.WORK_SYMBOL - 592)) | (1 << (SQLParser.WRAPPER_SYMBOL - 592)) | (1 << (SQLParser.X509_SYMBOL - 592)) | (1 << (SQLParser.XID_SYMBOL - 592)) | (1 << (SQLParser.XML_SYMBOL - 592)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (SQLParser.YEAR_SYMBOL - 656)) | (1 << (SQLParser.ROLE_SYMBOL - 656)) | (1 << (SQLParser.ADMIN_SYMBOL - 656)) | (1 << (SQLParser.INVISIBLE_SYMBOL - 656)) | (1 << (SQLParser.VISIBLE_SYMBOL - 656)) | (1 << (SQLParser.COMPONENT_SYMBOL - 656)) | (1 << (SQLParser.SKIP_SYMBOL - 656)) | (1 << (SQLParser.LOCKED_SYMBOL - 656)) | (1 << (SQLParser.NOWAIT_SYMBOL - 656)) | (1 << (SQLParser.HISTOGRAM_SYMBOL - 656)) | (1 << (SQLParser.BUCKETS_SYMBOL - 656)) | (1 << (SQLParser.EXCLUDE_SYMBOL - 656)) | (1 << (SQLParser.FOLLOWING_SYMBOL - 656)) | (1 << (SQLParser.NULLS_SYMBOL - 656)) | (1 << (SQLParser.OTHERS_SYMBOL - 656)) | (1 << (SQLParser.PRECEDING_SYMBOL - 656)) | (1 << (SQLParser.RESPECT_SYMBOL - 656)) | (1 << (SQLParser.TIES_SYMBOL - 656)) | (1 << (SQLParser.UNBOUNDED_SYMBOL - 656)) | (1 << (SQLParser.NESTED_SYMBOL - 656)) | (1 << (SQLParser.ORDINALITY_SYMBOL - 656)) | (1 << (SQLParser.PATH_SYMBOL - 656)) | (1 << (SQLParser.HISTORY_SYMBOL - 656)) | (1 << (SQLParser.REUSE_SYMBOL - 656)) | (1 << (SQLParser.SRID_SYMBOL - 656)) | (1 << (SQLParser.THREAD_PRIORITY_SYMBOL - 656)) | (1 << (SQLParser.VCPU_SYMBOL - 656)) | (1 << (SQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL - 656)) | (1 << (SQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL - 656)) | (1 << (SQLParser.DEFINITION_SYMBOL - 656)) | (1 << (SQLParser.DESCRIPTION_SYMBOL - 656)) | (1 << (SQLParser.ORGANIZATION_SYMBOL - 656)) | (1 << (SQLParser.REFERENCE_SYMBOL - 656)) | (1 << (SQLParser.OPTIONAL_SYMBOL - 656)))) != 0) or ((((_la - 720)) & ~0x3f) == 0 and ((1 << (_la - 720)) & ((1 << (SQLParser.SECONDARY_SYMBOL - 720)) | (1 << (SQLParser.SECONDARY_ENGINE_SYMBOL - 720)) | (1 << (SQLParser.SECONDARY_LOAD_SYMBOL - 720)) | (1 << (SQLParser.SECONDARY_UNLOAD_SYMBOL - 720)) | (1 << (SQLParser.ACTIVE_SYMBOL - 720)) | (1 << (SQLParser.INACTIVE_SYMBOL - 720)) | (1 << (SQLParser.RETAIN_SYMBOL - 720)) | (1 << (SQLParser.OLD_SYMBOL - 720)) | (1 << (SQLParser.NETWORK_NAMESPACE_SYMBOL - 720)) | (1 << (SQLParser.ENFORCED_SYMBOL - 720)) | (1 << (SQLParser.OJ_SYMBOL - 720)) | (1 << (SQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL - 720)) | (1 << (SQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL - 720)) | (1 << (SQLParser.PRIVILEGE_CHECKS_USER_SYMBOL - 720)) | (1 << (SQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL - 720)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8382
                if not self.serverVersion >= 80019:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80019")
                self.state = 8383
                _la = self._input.LA(1)
                if not(_la==SQLParser.TIMESTAMP_SYMBOL or _la==SQLParser.TIME_SYMBOL or ((((_la - 731)) & ~0x3f) == 0 and ((1 << (_la - 731)) & ((1 << (SQLParser.ARRAY_SYMBOL - 731)) | (1 << (SQLParser.MEMBER_SYMBOL - 731)) | (1 << (SQLParser.RANDOM_SYMBOL - 731)) | (1 << (SQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL - 731)) | (1 << (SQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL - 731)) | (1 << (SQLParser.PRIVILEGE_CHECKS_USER_SYMBOL - 731)) | (1 << (SQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL - 731)) | (1 << (SQLParser.REQUIRE_ROW_FORMAT_SYMBOL - 731)) | (1 << (SQLParser.PASSWORD_LOCK_TIME_SYMBOL - 731)) | (1 << (SQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL - 731)) | (1 << (SQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL - 731)) | (1 << (SQLParser.STREAM_SYMBOL - 731)) | (1 << (SQLParser.OFF_SYMBOL - 731)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def roleOrLabelKeyword(self):
            return self.getTypedRuleContext(SQLParser.RoleOrLabelKeywordContext,0)


        def roleOrIdentifierKeyword(self):
            return self.getTypedRuleContext(SQLParser.RoleOrIdentifierKeywordContext,0)


        def identifierKeywordsUnambiguous(self):
            return self.getTypedRuleContext(SQLParser.IdentifierKeywordsUnambiguousContext,0)


        def identifierKeywordsAmbiguous2Labels(self):
            return self.getTypedRuleContext(SQLParser.IdentifierKeywordsAmbiguous2LabelsContext,0)


        def identifierKeywordsAmbiguous4SystemVariables(self):
            return self.getTypedRuleContext(SQLParser.IdentifierKeywordsAmbiguous4SystemVariablesContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_roleKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleKeyword" ):
                listener.enterRoleKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleKeyword" ):
                listener.exitRoleKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoleKeyword" ):
                return visitor.visitRoleKeyword(self)
            else:
                return visitor.visitChildren(self)




    def roleKeyword(self):

        localctx = SQLParser.RoleKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1212, self.RULE_roleKeyword)
        try:
            self.state = 8396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8386
                if not self.serverVersion < 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 80017")
                self.state = 8389
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1117,self._ctx)
                if la_ == 1:
                    self.state = 8387
                    self.roleOrLabelKeyword()
                    pass

                elif la_ == 2:
                    self.state = 8388
                    self.roleOrIdentifierKeyword()
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8394
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1118,self._ctx)
                if la_ == 1:
                    self.state = 8391
                    self.identifierKeywordsUnambiguous()
                    pass

                elif la_ == 2:
                    self.state = 8392
                    self.identifierKeywordsAmbiguous2Labels()
                    pass

                elif la_ == 3:
                    self.state = 8393
                    self.identifierKeywordsAmbiguous4SystemVariables()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LValueKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierKeywordsUnambiguous(self):
            return self.getTypedRuleContext(SQLParser.IdentifierKeywordsUnambiguousContext,0)


        def identifierKeywordsAmbiguous1RolesAndLabels(self):
            return self.getTypedRuleContext(SQLParser.IdentifierKeywordsAmbiguous1RolesAndLabelsContext,0)


        def identifierKeywordsAmbiguous2Labels(self):
            return self.getTypedRuleContext(SQLParser.IdentifierKeywordsAmbiguous2LabelsContext,0)


        def identifierKeywordsAmbiguous3Roles(self):
            return self.getTypedRuleContext(SQLParser.IdentifierKeywordsAmbiguous3RolesContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_lValueKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLValueKeyword" ):
                listener.enterLValueKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLValueKeyword" ):
                listener.exitLValueKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLValueKeyword" ):
                return visitor.visitLValueKeyword(self)
            else:
                return visitor.visitChildren(self)




    def lValueKeyword(self):

        localctx = SQLParser.LValueKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1214, self.RULE_lValueKeyword)
        try:
            self.state = 8402
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8398
                self.identifierKeywordsUnambiguous()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8399
                self.identifierKeywordsAmbiguous1RolesAndLabels()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8400
                self.identifierKeywordsAmbiguous2Labels()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8401
                self.identifierKeywordsAmbiguous3Roles()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierKeywordsAmbiguous4SystemVariablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL_SYMBOL(self):
            return self.getToken(SQLParser.GLOBAL_SYMBOL, 0)

        def LOCAL_SYMBOL(self):
            return self.getToken(SQLParser.LOCAL_SYMBOL, 0)

        def PERSIST_SYMBOL(self):
            return self.getToken(SQLParser.PERSIST_SYMBOL, 0)

        def PERSIST_ONLY_SYMBOL(self):
            return self.getToken(SQLParser.PERSIST_ONLY_SYMBOL, 0)

        def SESSION_SYMBOL(self):
            return self.getToken(SQLParser.SESSION_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierKeywordsAmbiguous4SystemVariables" ):
                listener.enterIdentifierKeywordsAmbiguous4SystemVariables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierKeywordsAmbiguous4SystemVariables" ):
                listener.exitIdentifierKeywordsAmbiguous4SystemVariables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierKeywordsAmbiguous4SystemVariables" ):
                return visitor.visitIdentifierKeywordsAmbiguous4SystemVariables(self)
            else:
                return visitor.visitChildren(self)




    def identifierKeywordsAmbiguous4SystemVariables(self):

        localctx = SQLParser.IdentifierKeywordsAmbiguous4SystemVariablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1216, self.RULE_identifierKeywordsAmbiguous4SystemVariables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8404
            _la = self._input.LA(1)
            if not(_la==SQLParser.GLOBAL_SYMBOL or _la==SQLParser.LOCAL_SYMBOL or _la==SQLParser.SESSION_SYMBOL or _la==SQLParser.PERSIST_SYMBOL or _la==SQLParser.PERSIST_ONLY_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleOrIdentifierKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNT_SYMBOL(self):
            return self.getToken(SQLParser.ACCOUNT_SYMBOL, 0)

        def ASCII_SYMBOL(self):
            return self.getToken(SQLParser.ASCII_SYMBOL, 0)

        def ALWAYS_SYMBOL(self):
            return self.getToken(SQLParser.ALWAYS_SYMBOL, 0)

        def BACKUP_SYMBOL(self):
            return self.getToken(SQLParser.BACKUP_SYMBOL, 0)

        def BEGIN_SYMBOL(self):
            return self.getToken(SQLParser.BEGIN_SYMBOL, 0)

        def BYTE_SYMBOL(self):
            return self.getToken(SQLParser.BYTE_SYMBOL, 0)

        def CACHE_SYMBOL(self):
            return self.getToken(SQLParser.CACHE_SYMBOL, 0)

        def CHARSET_SYMBOL(self):
            return self.getToken(SQLParser.CHARSET_SYMBOL, 0)

        def CHECKSUM_SYMBOL(self):
            return self.getToken(SQLParser.CHECKSUM_SYMBOL, 0)

        def CLONE_SYMBOL(self):
            return self.getToken(SQLParser.CLONE_SYMBOL, 0)

        def CLOSE_SYMBOL(self):
            return self.getToken(SQLParser.CLOSE_SYMBOL, 0)

        def COMMENT_SYMBOL(self):
            return self.getToken(SQLParser.COMMENT_SYMBOL, 0)

        def COMMIT_SYMBOL(self):
            return self.getToken(SQLParser.COMMIT_SYMBOL, 0)

        def CONTAINS_SYMBOL(self):
            return self.getToken(SQLParser.CONTAINS_SYMBOL, 0)

        def DEALLOCATE_SYMBOL(self):
            return self.getToken(SQLParser.DEALLOCATE_SYMBOL, 0)

        def DO_SYMBOL(self):
            return self.getToken(SQLParser.DO_SYMBOL, 0)

        def END_SYMBOL(self):
            return self.getToken(SQLParser.END_SYMBOL, 0)

        def FLUSH_SYMBOL(self):
            return self.getToken(SQLParser.FLUSH_SYMBOL, 0)

        def FOLLOWS_SYMBOL(self):
            return self.getToken(SQLParser.FOLLOWS_SYMBOL, 0)

        def FORMAT_SYMBOL(self):
            return self.getToken(SQLParser.FORMAT_SYMBOL, 0)

        def GROUP_REPLICATION_SYMBOL(self):
            return self.getToken(SQLParser.GROUP_REPLICATION_SYMBOL, 0)

        def HANDLER_SYMBOL(self):
            return self.getToken(SQLParser.HANDLER_SYMBOL, 0)

        def HELP_SYMBOL(self):
            return self.getToken(SQLParser.HELP_SYMBOL, 0)

        def HOST_SYMBOL(self):
            return self.getToken(SQLParser.HOST_SYMBOL, 0)

        def INSTALL_SYMBOL(self):
            return self.getToken(SQLParser.INSTALL_SYMBOL, 0)

        def INVISIBLE_SYMBOL(self):
            return self.getToken(SQLParser.INVISIBLE_SYMBOL, 0)

        def LANGUAGE_SYMBOL(self):
            return self.getToken(SQLParser.LANGUAGE_SYMBOL, 0)

        def NO_SYMBOL(self):
            return self.getToken(SQLParser.NO_SYMBOL, 0)

        def OPEN_SYMBOL(self):
            return self.getToken(SQLParser.OPEN_SYMBOL, 0)

        def OPTIONS_SYMBOL(self):
            return self.getToken(SQLParser.OPTIONS_SYMBOL, 0)

        def OWNER_SYMBOL(self):
            return self.getToken(SQLParser.OWNER_SYMBOL, 0)

        def PARSER_SYMBOL(self):
            return self.getToken(SQLParser.PARSER_SYMBOL, 0)

        def PARTITION_SYMBOL(self):
            return self.getToken(SQLParser.PARTITION_SYMBOL, 0)

        def PORT_SYMBOL(self):
            return self.getToken(SQLParser.PORT_SYMBOL, 0)

        def PRECEDES_SYMBOL(self):
            return self.getToken(SQLParser.PRECEDES_SYMBOL, 0)

        def PREPARE_SYMBOL(self):
            return self.getToken(SQLParser.PREPARE_SYMBOL, 0)

        def REMOVE_SYMBOL(self):
            return self.getToken(SQLParser.REMOVE_SYMBOL, 0)

        def REPAIR_SYMBOL(self):
            return self.getToken(SQLParser.REPAIR_SYMBOL, 0)

        def RESET_SYMBOL(self):
            return self.getToken(SQLParser.RESET_SYMBOL, 0)

        def RESTORE_SYMBOL(self):
            return self.getToken(SQLParser.RESTORE_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(SQLParser.ROLE_SYMBOL, 0)

        def ROLLBACK_SYMBOL(self):
            return self.getToken(SQLParser.ROLLBACK_SYMBOL, 0)

        def SAVEPOINT_SYMBOL(self):
            return self.getToken(SQLParser.SAVEPOINT_SYMBOL, 0)

        def SECONDARY_SYMBOL(self):
            return self.getToken(SQLParser.SECONDARY_SYMBOL, 0)

        def SECONDARY_ENGINE_SYMBOL(self):
            return self.getToken(SQLParser.SECONDARY_ENGINE_SYMBOL, 0)

        def SECONDARY_LOAD_SYMBOL(self):
            return self.getToken(SQLParser.SECONDARY_LOAD_SYMBOL, 0)

        def SECONDARY_UNLOAD_SYMBOL(self):
            return self.getToken(SQLParser.SECONDARY_UNLOAD_SYMBOL, 0)

        def SECURITY_SYMBOL(self):
            return self.getToken(SQLParser.SECURITY_SYMBOL, 0)

        def SERVER_SYMBOL(self):
            return self.getToken(SQLParser.SERVER_SYMBOL, 0)

        def SIGNED_SYMBOL(self):
            return self.getToken(SQLParser.SIGNED_SYMBOL, 0)

        def SOCKET_SYMBOL(self):
            return self.getToken(SQLParser.SOCKET_SYMBOL, 0)

        def SLAVE_SYMBOL(self):
            return self.getToken(SQLParser.SLAVE_SYMBOL, 0)

        def SONAME_SYMBOL(self):
            return self.getToken(SQLParser.SONAME_SYMBOL, 0)

        def START_SYMBOL(self):
            return self.getToken(SQLParser.START_SYMBOL, 0)

        def STOP_SYMBOL(self):
            return self.getToken(SQLParser.STOP_SYMBOL, 0)

        def TRUNCATE_SYMBOL(self):
            return self.getToken(SQLParser.TRUNCATE_SYMBOL, 0)

        def UNICODE_SYMBOL(self):
            return self.getToken(SQLParser.UNICODE_SYMBOL, 0)

        def UNINSTALL_SYMBOL(self):
            return self.getToken(SQLParser.UNINSTALL_SYMBOL, 0)

        def UPGRADE_SYMBOL(self):
            return self.getToken(SQLParser.UPGRADE_SYMBOL, 0)

        def VISIBLE_SYMBOL(self):
            return self.getToken(SQLParser.VISIBLE_SYMBOL, 0)

        def WRAPPER_SYMBOL(self):
            return self.getToken(SQLParser.WRAPPER_SYMBOL, 0)

        def XA_SYMBOL(self):
            return self.getToken(SQLParser.XA_SYMBOL, 0)

        def SHUTDOWN_SYMBOL(self):
            return self.getToken(SQLParser.SHUTDOWN_SYMBOL, 0)

        def IMPORT_SYMBOL(self):
            return self.getToken(SQLParser.IMPORT_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_roleOrIdentifierKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleOrIdentifierKeyword" ):
                listener.enterRoleOrIdentifierKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleOrIdentifierKeyword" ):
                listener.exitRoleOrIdentifierKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoleOrIdentifierKeyword" ):
                return visitor.visitRoleOrIdentifierKeyword(self)
            else:
                return visitor.visitChildren(self)




    def roleOrIdentifierKeyword(self):

        localctx = SQLParser.RoleOrIdentifierKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1218, self.RULE_roleOrIdentifierKeyword)
        self._la = 0 # Token type
        try:
            self.state = 8411
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8406
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLParser.ACCOUNT_SYMBOL) | (1 << SQLParser.ALWAYS_SYMBOL) | (1 << SQLParser.ASCII_SYMBOL) | (1 << SQLParser.BACKUP_SYMBOL) | (1 << SQLParser.BEGIN_SYMBOL) | (1 << SQLParser.BYTE_SYMBOL) | (1 << SQLParser.CACHE_SYMBOL) | (1 << SQLParser.CHARSET_SYMBOL) | (1 << SQLParser.CHECKSUM_SYMBOL))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (SQLParser.CLOSE_SYMBOL - 66)) | (1 << (SQLParser.COMMENT_SYMBOL - 66)) | (1 << (SQLParser.COMMIT_SYMBOL - 66)) | (1 << (SQLParser.CONTAINS_SYMBOL - 66)) | (1 << (SQLParser.DEALLOCATE_SYMBOL - 66)))) != 0) or ((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & ((1 << (SQLParser.DO_SYMBOL - 147)) | (1 << (SQLParser.END_SYMBOL - 147)) | (1 << (SQLParser.FLUSH_SYMBOL - 147)) | (1 << (SQLParser.FOLLOWS_SYMBOL - 147)) | (1 << (SQLParser.FORMAT_SYMBOL - 147)) | (1 << (SQLParser.GROUP_REPLICATION_SYMBOL - 147)))) != 0) or ((((_la - 219)) & ~0x3f) == 0 and ((1 << (_la - 219)) & ((1 << (SQLParser.HANDLER_SYMBOL - 219)) | (1 << (SQLParser.HELP_SYMBOL - 219)) | (1 << (SQLParser.HOST_SYMBOL - 219)) | (1 << (SQLParser.INSTALL_SYMBOL - 219)) | (1 << (SQLParser.LANGUAGE_SYMBOL - 219)))) != 0) or ((((_la - 373)) & ~0x3f) == 0 and ((1 << (_la - 373)) & ((1 << (SQLParser.NO_SYMBOL - 373)) | (1 << (SQLParser.OPEN_SYMBOL - 373)) | (1 << (SQLParser.OPTIONS_SYMBOL - 373)) | (1 << (SQLParser.OWNER_SYMBOL - 373)) | (1 << (SQLParser.PARSER_SYMBOL - 373)) | (1 << (SQLParser.PARTITION_SYMBOL - 373)) | (1 << (SQLParser.PORT_SYMBOL - 373)) | (1 << (SQLParser.PRECEDES_SYMBOL - 373)) | (1 << (SQLParser.PREPARE_SYMBOL - 373)))) != 0) or ((((_la - 452)) & ~0x3f) == 0 and ((1 << (_la - 452)) & ((1 << (SQLParser.REMOVE_SYMBOL - 452)) | (1 << (SQLParser.REPAIR_SYMBOL - 452)) | (1 << (SQLParser.RESET_SYMBOL - 452)) | (1 << (SQLParser.RESTORE_SYMBOL - 452)) | (1 << (SQLParser.ROLLBACK_SYMBOL - 452)) | (1 << (SQLParser.SAVEPOINT_SYMBOL - 452)) | (1 << (SQLParser.SECURITY_SYMBOL - 452)) | (1 << (SQLParser.SERVER_SYMBOL - 452)) | (1 << (SQLParser.SIGNED_SYMBOL - 452)) | (1 << (SQLParser.SLAVE_SYMBOL - 452)))) != 0) or ((((_la - 519)) & ~0x3f) == 0 and ((1 << (_la - 519)) & ((1 << (SQLParser.SOCKET_SYMBOL - 519)) | (1 << (SQLParser.SONAME_SYMBOL - 519)) | (1 << (SQLParser.START_SYMBOL - 519)) | (1 << (SQLParser.STOP_SYMBOL - 519)))) != 0) or ((((_la - 597)) & ~0x3f) == 0 and ((1 << (_la - 597)) & ((1 << (SQLParser.TRUNCATE_SYMBOL - 597)) | (1 << (SQLParser.UNICODE_SYMBOL - 597)) | (1 << (SQLParser.UNINSTALL_SYMBOL - 597)) | (1 << (SQLParser.UPGRADE_SYMBOL - 597)) | (1 << (SQLParser.WRAPPER_SYMBOL - 597)) | (1 << (SQLParser.XA_SYMBOL - 597)) | (1 << (SQLParser.ROLE_SYMBOL - 597)))) != 0) or ((((_la - 661)) & ~0x3f) == 0 and ((1 << (_la - 661)) & ((1 << (SQLParser.INVISIBLE_SYMBOL - 661)) | (1 << (SQLParser.VISIBLE_SYMBOL - 661)) | (1 << (SQLParser.CLONE_SYMBOL - 661)) | (1 << (SQLParser.SECONDARY_SYMBOL - 661)) | (1 << (SQLParser.SECONDARY_ENGINE_SYMBOL - 661)) | (1 << (SQLParser.SECONDARY_LOAD_SYMBOL - 661)) | (1 << (SQLParser.SECONDARY_UNLOAD_SYMBOL - 661)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8407
                if not self.serverVersion >= 50709:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 50709")
                self.state = 8408
                self.match(SQLParser.SHUTDOWN_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8409
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 8410
                self.match(SQLParser.IMPORT_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleOrLabelKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACTION_SYMBOL(self):
            return self.getToken(SQLParser.ACTION_SYMBOL, 0)

        def ACTIVE_SYMBOL(self):
            return self.getToken(SQLParser.ACTIVE_SYMBOL, 0)

        def ADDDATE_SYMBOL(self):
            return self.getToken(SQLParser.ADDDATE_SYMBOL, 0)

        def AFTER_SYMBOL(self):
            return self.getToken(SQLParser.AFTER_SYMBOL, 0)

        def AGAINST_SYMBOL(self):
            return self.getToken(SQLParser.AGAINST_SYMBOL, 0)

        def AGGREGATE_SYMBOL(self):
            return self.getToken(SQLParser.AGGREGATE_SYMBOL, 0)

        def ALGORITHM_SYMBOL(self):
            return self.getToken(SQLParser.ALGORITHM_SYMBOL, 0)

        def ANALYSE_SYMBOL(self):
            return self.getToken(SQLParser.ANALYSE_SYMBOL, 0)

        def ANY_SYMBOL(self):
            return self.getToken(SQLParser.ANY_SYMBOL, 0)

        def AT_SYMBOL(self):
            return self.getToken(SQLParser.AT_SYMBOL, 0)

        def AUTHORS_SYMBOL(self):
            return self.getToken(SQLParser.AUTHORS_SYMBOL, 0)

        def AUTO_INCREMENT_SYMBOL(self):
            return self.getToken(SQLParser.AUTO_INCREMENT_SYMBOL, 0)

        def AUTOEXTEND_SIZE_SYMBOL(self):
            return self.getToken(SQLParser.AUTOEXTEND_SIZE_SYMBOL, 0)

        def AVG_ROW_LENGTH_SYMBOL(self):
            return self.getToken(SQLParser.AVG_ROW_LENGTH_SYMBOL, 0)

        def AVG_SYMBOL(self):
            return self.getToken(SQLParser.AVG_SYMBOL, 0)

        def BINLOG_SYMBOL(self):
            return self.getToken(SQLParser.BINLOG_SYMBOL, 0)

        def BIT_SYMBOL(self):
            return self.getToken(SQLParser.BIT_SYMBOL, 0)

        def BLOCK_SYMBOL(self):
            return self.getToken(SQLParser.BLOCK_SYMBOL, 0)

        def BOOL_SYMBOL(self):
            return self.getToken(SQLParser.BOOL_SYMBOL, 0)

        def BOOLEAN_SYMBOL(self):
            return self.getToken(SQLParser.BOOLEAN_SYMBOL, 0)

        def BTREE_SYMBOL(self):
            return self.getToken(SQLParser.BTREE_SYMBOL, 0)

        def BUCKETS_SYMBOL(self):
            return self.getToken(SQLParser.BUCKETS_SYMBOL, 0)

        def CASCADED_SYMBOL(self):
            return self.getToken(SQLParser.CASCADED_SYMBOL, 0)

        def CATALOG_NAME_SYMBOL(self):
            return self.getToken(SQLParser.CATALOG_NAME_SYMBOL, 0)

        def CHAIN_SYMBOL(self):
            return self.getToken(SQLParser.CHAIN_SYMBOL, 0)

        def CHANGED_SYMBOL(self):
            return self.getToken(SQLParser.CHANGED_SYMBOL, 0)

        def CHANNEL_SYMBOL(self):
            return self.getToken(SQLParser.CHANNEL_SYMBOL, 0)

        def CIPHER_SYMBOL(self):
            return self.getToken(SQLParser.CIPHER_SYMBOL, 0)

        def CLIENT_SYMBOL(self):
            return self.getToken(SQLParser.CLIENT_SYMBOL, 0)

        def CLASS_ORIGIN_SYMBOL(self):
            return self.getToken(SQLParser.CLASS_ORIGIN_SYMBOL, 0)

        def COALESCE_SYMBOL(self):
            return self.getToken(SQLParser.COALESCE_SYMBOL, 0)

        def CODE_SYMBOL(self):
            return self.getToken(SQLParser.CODE_SYMBOL, 0)

        def COLLATION_SYMBOL(self):
            return self.getToken(SQLParser.COLLATION_SYMBOL, 0)

        def COLUMN_NAME_SYMBOL(self):
            return self.getToken(SQLParser.COLUMN_NAME_SYMBOL, 0)

        def COLUMN_FORMAT_SYMBOL(self):
            return self.getToken(SQLParser.COLUMN_FORMAT_SYMBOL, 0)

        def COLUMNS_SYMBOL(self):
            return self.getToken(SQLParser.COLUMNS_SYMBOL, 0)

        def COMMITTED_SYMBOL(self):
            return self.getToken(SQLParser.COMMITTED_SYMBOL, 0)

        def COMPACT_SYMBOL(self):
            return self.getToken(SQLParser.COMPACT_SYMBOL, 0)

        def COMPLETION_SYMBOL(self):
            return self.getToken(SQLParser.COMPLETION_SYMBOL, 0)

        def COMPONENT_SYMBOL(self):
            return self.getToken(SQLParser.COMPONENT_SYMBOL, 0)

        def COMPRESSED_SYMBOL(self):
            return self.getToken(SQLParser.COMPRESSED_SYMBOL, 0)

        def COMPRESSION_SYMBOL(self):
            return self.getToken(SQLParser.COMPRESSION_SYMBOL, 0)

        def CONCURRENT_SYMBOL(self):
            return self.getToken(SQLParser.CONCURRENT_SYMBOL, 0)

        def CONNECTION_SYMBOL(self):
            return self.getToken(SQLParser.CONNECTION_SYMBOL, 0)

        def CONSISTENT_SYMBOL(self):
            return self.getToken(SQLParser.CONSISTENT_SYMBOL, 0)

        def CONSTRAINT_CATALOG_SYMBOL(self):
            return self.getToken(SQLParser.CONSTRAINT_CATALOG_SYMBOL, 0)

        def CONSTRAINT_SCHEMA_SYMBOL(self):
            return self.getToken(SQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0)

        def CONSTRAINT_NAME_SYMBOL(self):
            return self.getToken(SQLParser.CONSTRAINT_NAME_SYMBOL, 0)

        def CONTEXT_SYMBOL(self):
            return self.getToken(SQLParser.CONTEXT_SYMBOL, 0)

        def CONTRIBUTORS_SYMBOL(self):
            return self.getToken(SQLParser.CONTRIBUTORS_SYMBOL, 0)

        def CPU_SYMBOL(self):
            return self.getToken(SQLParser.CPU_SYMBOL, 0)

        def CURRENT_SYMBOL(self):
            return self.getToken(SQLParser.CURRENT_SYMBOL, 0)

        def CURSOR_NAME_SYMBOL(self):
            return self.getToken(SQLParser.CURSOR_NAME_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(SQLParser.DATA_SYMBOL, 0)

        def DATAFILE_SYMBOL(self):
            return self.getToken(SQLParser.DATAFILE_SYMBOL, 0)

        def DATETIME_SYMBOL(self):
            return self.getToken(SQLParser.DATETIME_SYMBOL, 0)

        def DATE_SYMBOL(self):
            return self.getToken(SQLParser.DATE_SYMBOL, 0)

        def DAY_SYMBOL(self):
            return self.getToken(SQLParser.DAY_SYMBOL, 0)

        def DEFAULT_AUTH_SYMBOL(self):
            return self.getToken(SQLParser.DEFAULT_AUTH_SYMBOL, 0)

        def DEFINER_SYMBOL(self):
            return self.getToken(SQLParser.DEFINER_SYMBOL, 0)

        def DELAY_KEY_WRITE_SYMBOL(self):
            return self.getToken(SQLParser.DELAY_KEY_WRITE_SYMBOL, 0)

        def DES_KEY_FILE_SYMBOL(self):
            return self.getToken(SQLParser.DES_KEY_FILE_SYMBOL, 0)

        def DESCRIPTION_SYMBOL(self):
            return self.getToken(SQLParser.DESCRIPTION_SYMBOL, 0)

        def DIAGNOSTICS_SYMBOL(self):
            return self.getToken(SQLParser.DIAGNOSTICS_SYMBOL, 0)

        def DIRECTORY_SYMBOL(self):
            return self.getToken(SQLParser.DIRECTORY_SYMBOL, 0)

        def DISABLE_SYMBOL(self):
            return self.getToken(SQLParser.DISABLE_SYMBOL, 0)

        def DISCARD_SYMBOL(self):
            return self.getToken(SQLParser.DISCARD_SYMBOL, 0)

        def DISK_SYMBOL(self):
            return self.getToken(SQLParser.DISK_SYMBOL, 0)

        def DUMPFILE_SYMBOL(self):
            return self.getToken(SQLParser.DUMPFILE_SYMBOL, 0)

        def DUPLICATE_SYMBOL(self):
            return self.getToken(SQLParser.DUPLICATE_SYMBOL, 0)

        def DYNAMIC_SYMBOL(self):
            return self.getToken(SQLParser.DYNAMIC_SYMBOL, 0)

        def ENCRYPTION_SYMBOL(self):
            return self.getToken(SQLParser.ENCRYPTION_SYMBOL, 0)

        def ENDS_SYMBOL(self):
            return self.getToken(SQLParser.ENDS_SYMBOL, 0)

        def ENUM_SYMBOL(self):
            return self.getToken(SQLParser.ENUM_SYMBOL, 0)

        def ENGINE_SYMBOL(self):
            return self.getToken(SQLParser.ENGINE_SYMBOL, 0)

        def ENGINES_SYMBOL(self):
            return self.getToken(SQLParser.ENGINES_SYMBOL, 0)

        def ERROR_SYMBOL(self):
            return self.getToken(SQLParser.ERROR_SYMBOL, 0)

        def ERRORS_SYMBOL(self):
            return self.getToken(SQLParser.ERRORS_SYMBOL, 0)

        def ESCAPE_SYMBOL(self):
            return self.getToken(SQLParser.ESCAPE_SYMBOL, 0)

        def EVENTS_SYMBOL(self):
            return self.getToken(SQLParser.EVENTS_SYMBOL, 0)

        def EVERY_SYMBOL(self):
            return self.getToken(SQLParser.EVERY_SYMBOL, 0)

        def EXCLUDE_SYMBOL(self):
            return self.getToken(SQLParser.EXCLUDE_SYMBOL, 0)

        def EXPANSION_SYMBOL(self):
            return self.getToken(SQLParser.EXPANSION_SYMBOL, 0)

        def EXPORT_SYMBOL(self):
            return self.getToken(SQLParser.EXPORT_SYMBOL, 0)

        def EXTENDED_SYMBOL(self):
            return self.getToken(SQLParser.EXTENDED_SYMBOL, 0)

        def EXTENT_SIZE_SYMBOL(self):
            return self.getToken(SQLParser.EXTENT_SIZE_SYMBOL, 0)

        def FAULTS_SYMBOL(self):
            return self.getToken(SQLParser.FAULTS_SYMBOL, 0)

        def FAST_SYMBOL(self):
            return self.getToken(SQLParser.FAST_SYMBOL, 0)

        def FOLLOWING_SYMBOL(self):
            return self.getToken(SQLParser.FOLLOWING_SYMBOL, 0)

        def FOUND_SYMBOL(self):
            return self.getToken(SQLParser.FOUND_SYMBOL, 0)

        def ENABLE_SYMBOL(self):
            return self.getToken(SQLParser.ENABLE_SYMBOL, 0)

        def FULL_SYMBOL(self):
            return self.getToken(SQLParser.FULL_SYMBOL, 0)

        def FILE_BLOCK_SIZE_SYMBOL(self):
            return self.getToken(SQLParser.FILE_BLOCK_SIZE_SYMBOL, 0)

        def FILTER_SYMBOL(self):
            return self.getToken(SQLParser.FILTER_SYMBOL, 0)

        def FIRST_SYMBOL(self):
            return self.getToken(SQLParser.FIRST_SYMBOL, 0)

        def FIXED_SYMBOL(self):
            return self.getToken(SQLParser.FIXED_SYMBOL, 0)

        def GENERAL_SYMBOL(self):
            return self.getToken(SQLParser.GENERAL_SYMBOL, 0)

        def GEOMETRY_SYMBOL(self):
            return self.getToken(SQLParser.GEOMETRY_SYMBOL, 0)

        def GEOMETRYCOLLECTION_SYMBOL(self):
            return self.getToken(SQLParser.GEOMETRYCOLLECTION_SYMBOL, 0)

        def GET_FORMAT_SYMBOL(self):
            return self.getToken(SQLParser.GET_FORMAT_SYMBOL, 0)

        def GRANTS_SYMBOL(self):
            return self.getToken(SQLParser.GRANTS_SYMBOL, 0)

        def GLOBAL_SYMBOL(self):
            return self.getToken(SQLParser.GLOBAL_SYMBOL, 0)

        def HASH_SYMBOL(self):
            return self.getToken(SQLParser.HASH_SYMBOL, 0)

        def HISTOGRAM_SYMBOL(self):
            return self.getToken(SQLParser.HISTOGRAM_SYMBOL, 0)

        def HISTORY_SYMBOL(self):
            return self.getToken(SQLParser.HISTORY_SYMBOL, 0)

        def HOSTS_SYMBOL(self):
            return self.getToken(SQLParser.HOSTS_SYMBOL, 0)

        def HOUR_SYMBOL(self):
            return self.getToken(SQLParser.HOUR_SYMBOL, 0)

        def IDENTIFIED_SYMBOL(self):
            return self.getToken(SQLParser.IDENTIFIED_SYMBOL, 0)

        def IGNORE_SERVER_IDS_SYMBOL(self):
            return self.getToken(SQLParser.IGNORE_SERVER_IDS_SYMBOL, 0)

        def INVOKER_SYMBOL(self):
            return self.getToken(SQLParser.INVOKER_SYMBOL, 0)

        def INDEXES_SYMBOL(self):
            return self.getToken(SQLParser.INDEXES_SYMBOL, 0)

        def INITIAL_SIZE_SYMBOL(self):
            return self.getToken(SQLParser.INITIAL_SIZE_SYMBOL, 0)

        def INSTANCE_SYMBOL(self):
            return self.getToken(SQLParser.INSTANCE_SYMBOL, 0)

        def INACTIVE_SYMBOL(self):
            return self.getToken(SQLParser.INACTIVE_SYMBOL, 0)

        def IO_SYMBOL(self):
            return self.getToken(SQLParser.IO_SYMBOL, 0)

        def IPC_SYMBOL(self):
            return self.getToken(SQLParser.IPC_SYMBOL, 0)

        def ISOLATION_SYMBOL(self):
            return self.getToken(SQLParser.ISOLATION_SYMBOL, 0)

        def ISSUER_SYMBOL(self):
            return self.getToken(SQLParser.ISSUER_SYMBOL, 0)

        def INSERT_METHOD_SYMBOL(self):
            return self.getToken(SQLParser.INSERT_METHOD_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(SQLParser.JSON_SYMBOL, 0)

        def KEY_BLOCK_SIZE_SYMBOL(self):
            return self.getToken(SQLParser.KEY_BLOCK_SIZE_SYMBOL, 0)

        def LAST_SYMBOL(self):
            return self.getToken(SQLParser.LAST_SYMBOL, 0)

        def LEAVES_SYMBOL(self):
            return self.getToken(SQLParser.LEAVES_SYMBOL, 0)

        def LESS_SYMBOL(self):
            return self.getToken(SQLParser.LESS_SYMBOL, 0)

        def LEVEL_SYMBOL(self):
            return self.getToken(SQLParser.LEVEL_SYMBOL, 0)

        def LINESTRING_SYMBOL(self):
            return self.getToken(SQLParser.LINESTRING_SYMBOL, 0)

        def LIST_SYMBOL(self):
            return self.getToken(SQLParser.LIST_SYMBOL, 0)

        def LOCAL_SYMBOL(self):
            return self.getToken(SQLParser.LOCAL_SYMBOL, 0)

        def LOCKED_SYMBOL(self):
            return self.getToken(SQLParser.LOCKED_SYMBOL, 0)

        def LOCKS_SYMBOL(self):
            return self.getToken(SQLParser.LOCKS_SYMBOL, 0)

        def LOGFILE_SYMBOL(self):
            return self.getToken(SQLParser.LOGFILE_SYMBOL, 0)

        def LOGS_SYMBOL(self):
            return self.getToken(SQLParser.LOGS_SYMBOL, 0)

        def MAX_ROWS_SYMBOL(self):
            return self.getToken(SQLParser.MAX_ROWS_SYMBOL, 0)

        def MASTER_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SYMBOL, 0)

        def MASTER_HEARTBEAT_PERIOD_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0)

        def MASTER_HOST_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_HOST_SYMBOL, 0)

        def MASTER_PORT_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_PORT_SYMBOL, 0)

        def MASTER_LOG_FILE_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_LOG_FILE_SYMBOL, 0)

        def MASTER_LOG_POS_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_LOG_POS_SYMBOL, 0)

        def MASTER_USER_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_USER_SYMBOL, 0)

        def MASTER_PASSWORD_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_PASSWORD_SYMBOL, 0)

        def MASTER_PUBLIC_KEY_PATH_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0)

        def MASTER_SERVER_ID_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SERVER_ID_SYMBOL, 0)

        def MASTER_CONNECT_RETRY_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0)

        def MASTER_RETRY_COUNT_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_RETRY_COUNT_SYMBOL, 0)

        def MASTER_DELAY_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_DELAY_SYMBOL, 0)

        def MASTER_SSL_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SSL_SYMBOL, 0)

        def MASTER_SSL_CA_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SSL_CA_SYMBOL, 0)

        def MASTER_SSL_CAPATH_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SSL_CAPATH_SYMBOL, 0)

        def MASTER_TLS_VERSION_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_TLS_VERSION_SYMBOL, 0)

        def MASTER_SSL_CERT_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SSL_CERT_SYMBOL, 0)

        def MASTER_SSL_CIPHER_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SSL_CIPHER_SYMBOL, 0)

        def MASTER_SSL_CRL_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SSL_CRL_SYMBOL, 0)

        def MASTER_SSL_CRLPATH_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0)

        def MASTER_SSL_KEY_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_SSL_KEY_SYMBOL, 0)

        def MASTER_AUTO_POSITION_SYMBOL(self):
            return self.getToken(SQLParser.MASTER_AUTO_POSITION_SYMBOL, 0)

        def MAX_CONNECTIONS_PER_HOUR_SYMBOL(self):
            return self.getToken(SQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0)

        def MAX_QUERIES_PER_HOUR_SYMBOL(self):
            return self.getToken(SQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0)

        def MAX_STATEMENT_TIME_SYMBOL(self):
            return self.getToken(SQLParser.MAX_STATEMENT_TIME_SYMBOL, 0)

        def MAX_SIZE_SYMBOL(self):
            return self.getToken(SQLParser.MAX_SIZE_SYMBOL, 0)

        def MAX_UPDATES_PER_HOUR_SYMBOL(self):
            return self.getToken(SQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0)

        def MAX_USER_CONNECTIONS_SYMBOL(self):
            return self.getToken(SQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0)

        def MEDIUM_SYMBOL(self):
            return self.getToken(SQLParser.MEDIUM_SYMBOL, 0)

        def MEMORY_SYMBOL(self):
            return self.getToken(SQLParser.MEMORY_SYMBOL, 0)

        def MERGE_SYMBOL(self):
            return self.getToken(SQLParser.MERGE_SYMBOL, 0)

        def MESSAGE_TEXT_SYMBOL(self):
            return self.getToken(SQLParser.MESSAGE_TEXT_SYMBOL, 0)

        def MICROSECOND_SYMBOL(self):
            return self.getToken(SQLParser.MICROSECOND_SYMBOL, 0)

        def MIGRATE_SYMBOL(self):
            return self.getToken(SQLParser.MIGRATE_SYMBOL, 0)

        def MINUTE_SYMBOL(self):
            return self.getToken(SQLParser.MINUTE_SYMBOL, 0)

        def MIN_ROWS_SYMBOL(self):
            return self.getToken(SQLParser.MIN_ROWS_SYMBOL, 0)

        def MODIFY_SYMBOL(self):
            return self.getToken(SQLParser.MODIFY_SYMBOL, 0)

        def MODE_SYMBOL(self):
            return self.getToken(SQLParser.MODE_SYMBOL, 0)

        def MONTH_SYMBOL(self):
            return self.getToken(SQLParser.MONTH_SYMBOL, 0)

        def MULTILINESTRING_SYMBOL(self):
            return self.getToken(SQLParser.MULTILINESTRING_SYMBOL, 0)

        def MULTIPOINT_SYMBOL(self):
            return self.getToken(SQLParser.MULTIPOINT_SYMBOL, 0)

        def MULTIPOLYGON_SYMBOL(self):
            return self.getToken(SQLParser.MULTIPOLYGON_SYMBOL, 0)

        def MUTEX_SYMBOL(self):
            return self.getToken(SQLParser.MUTEX_SYMBOL, 0)

        def MYSQL_ERRNO_SYMBOL(self):
            return self.getToken(SQLParser.MYSQL_ERRNO_SYMBOL, 0)

        def NAME_SYMBOL(self):
            return self.getToken(SQLParser.NAME_SYMBOL, 0)

        def NAMES_SYMBOL(self):
            return self.getToken(SQLParser.NAMES_SYMBOL, 0)

        def NATIONAL_SYMBOL(self):
            return self.getToken(SQLParser.NATIONAL_SYMBOL, 0)

        def NCHAR_SYMBOL(self):
            return self.getToken(SQLParser.NCHAR_SYMBOL, 0)

        def NDBCLUSTER_SYMBOL(self):
            return self.getToken(SQLParser.NDBCLUSTER_SYMBOL, 0)

        def NESTED_SYMBOL(self):
            return self.getToken(SQLParser.NESTED_SYMBOL, 0)

        def NEVER_SYMBOL(self):
            return self.getToken(SQLParser.NEVER_SYMBOL, 0)

        def NEXT_SYMBOL(self):
            return self.getToken(SQLParser.NEXT_SYMBOL, 0)

        def NEW_SYMBOL(self):
            return self.getToken(SQLParser.NEW_SYMBOL, 0)

        def NO_WAIT_SYMBOL(self):
            return self.getToken(SQLParser.NO_WAIT_SYMBOL, 0)

        def NODEGROUP_SYMBOL(self):
            return self.getToken(SQLParser.NODEGROUP_SYMBOL, 0)

        def NULLS_SYMBOL(self):
            return self.getToken(SQLParser.NULLS_SYMBOL, 0)

        def NOWAIT_SYMBOL(self):
            return self.getToken(SQLParser.NOWAIT_SYMBOL, 0)

        def NUMBER_SYMBOL(self):
            return self.getToken(SQLParser.NUMBER_SYMBOL, 0)

        def NVARCHAR_SYMBOL(self):
            return self.getToken(SQLParser.NVARCHAR_SYMBOL, 0)

        def OFFSET_SYMBOL(self):
            return self.getToken(SQLParser.OFFSET_SYMBOL, 0)

        def OLD_SYMBOL(self):
            return self.getToken(SQLParser.OLD_SYMBOL, 0)

        def OLD_PASSWORD_SYMBOL(self):
            return self.getToken(SQLParser.OLD_PASSWORD_SYMBOL, 0)

        def ONE_SYMBOL(self):
            return self.getToken(SQLParser.ONE_SYMBOL, 0)

        def OPTIONAL_SYMBOL(self):
            return self.getToken(SQLParser.OPTIONAL_SYMBOL, 0)

        def ORDINALITY_SYMBOL(self):
            return self.getToken(SQLParser.ORDINALITY_SYMBOL, 0)

        def ORGANIZATION_SYMBOL(self):
            return self.getToken(SQLParser.ORGANIZATION_SYMBOL, 0)

        def OTHERS_SYMBOL(self):
            return self.getToken(SQLParser.OTHERS_SYMBOL, 0)

        def PACK_KEYS_SYMBOL(self):
            return self.getToken(SQLParser.PACK_KEYS_SYMBOL, 0)

        def PAGE_SYMBOL(self):
            return self.getToken(SQLParser.PAGE_SYMBOL, 0)

        def PARTIAL_SYMBOL(self):
            return self.getToken(SQLParser.PARTIAL_SYMBOL, 0)

        def PARTITIONING_SYMBOL(self):
            return self.getToken(SQLParser.PARTITIONING_SYMBOL, 0)

        def PARTITIONS_SYMBOL(self):
            return self.getToken(SQLParser.PARTITIONS_SYMBOL, 0)

        def PASSWORD_SYMBOL(self):
            return self.getToken(SQLParser.PASSWORD_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(SQLParser.PATH_SYMBOL, 0)

        def PHASE_SYMBOL(self):
            return self.getToken(SQLParser.PHASE_SYMBOL, 0)

        def PLUGIN_DIR_SYMBOL(self):
            return self.getToken(SQLParser.PLUGIN_DIR_SYMBOL, 0)

        def PLUGIN_SYMBOL(self):
            return self.getToken(SQLParser.PLUGIN_SYMBOL, 0)

        def PLUGINS_SYMBOL(self):
            return self.getToken(SQLParser.PLUGINS_SYMBOL, 0)

        def POINT_SYMBOL(self):
            return self.getToken(SQLParser.POINT_SYMBOL, 0)

        def POLYGON_SYMBOL(self):
            return self.getToken(SQLParser.POLYGON_SYMBOL, 0)

        def PRECEDING_SYMBOL(self):
            return self.getToken(SQLParser.PRECEDING_SYMBOL, 0)

        def PRESERVE_SYMBOL(self):
            return self.getToken(SQLParser.PRESERVE_SYMBOL, 0)

        def PREV_SYMBOL(self):
            return self.getToken(SQLParser.PREV_SYMBOL, 0)

        def THREAD_PRIORITY_SYMBOL(self):
            return self.getToken(SQLParser.THREAD_PRIORITY_SYMBOL, 0)

        def PRIVILEGES_SYMBOL(self):
            return self.getToken(SQLParser.PRIVILEGES_SYMBOL, 0)

        def PROCESSLIST_SYMBOL(self):
            return self.getToken(SQLParser.PROCESSLIST_SYMBOL, 0)

        def PROFILE_SYMBOL(self):
            return self.getToken(SQLParser.PROFILE_SYMBOL, 0)

        def PROFILES_SYMBOL(self):
            return self.getToken(SQLParser.PROFILES_SYMBOL, 0)

        def QUARTER_SYMBOL(self):
            return self.getToken(SQLParser.QUARTER_SYMBOL, 0)

        def QUERY_SYMBOL(self):
            return self.getToken(SQLParser.QUERY_SYMBOL, 0)

        def QUICK_SYMBOL(self):
            return self.getToken(SQLParser.QUICK_SYMBOL, 0)

        def READ_ONLY_SYMBOL(self):
            return self.getToken(SQLParser.READ_ONLY_SYMBOL, 0)

        def REBUILD_SYMBOL(self):
            return self.getToken(SQLParser.REBUILD_SYMBOL, 0)

        def RECOVER_SYMBOL(self):
            return self.getToken(SQLParser.RECOVER_SYMBOL, 0)

        def REDO_BUFFER_SIZE_SYMBOL(self):
            return self.getToken(SQLParser.REDO_BUFFER_SIZE_SYMBOL, 0)

        def REDOFILE_SYMBOL(self):
            return self.getToken(SQLParser.REDOFILE_SYMBOL, 0)

        def REDUNDANT_SYMBOL(self):
            return self.getToken(SQLParser.REDUNDANT_SYMBOL, 0)

        def RELAY_SYMBOL(self):
            return self.getToken(SQLParser.RELAY_SYMBOL, 0)

        def RELAYLOG_SYMBOL(self):
            return self.getToken(SQLParser.RELAYLOG_SYMBOL, 0)

        def RELAY_LOG_FILE_SYMBOL(self):
            return self.getToken(SQLParser.RELAY_LOG_FILE_SYMBOL, 0)

        def RELAY_LOG_POS_SYMBOL(self):
            return self.getToken(SQLParser.RELAY_LOG_POS_SYMBOL, 0)

        def RELAY_THREAD_SYMBOL(self):
            return self.getToken(SQLParser.RELAY_THREAD_SYMBOL, 0)

        def REMOTE_SYMBOL(self):
            return self.getToken(SQLParser.REMOTE_SYMBOL, 0)

        def REORGANIZE_SYMBOL(self):
            return self.getToken(SQLParser.REORGANIZE_SYMBOL, 0)

        def REPEATABLE_SYMBOL(self):
            return self.getToken(SQLParser.REPEATABLE_SYMBOL, 0)

        def REPLICATE_DO_DB_SYMBOL(self):
            return self.getToken(SQLParser.REPLICATE_DO_DB_SYMBOL, 0)

        def REPLICATE_IGNORE_DB_SYMBOL(self):
            return self.getToken(SQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0)

        def REPLICATE_DO_TABLE_SYMBOL(self):
            return self.getToken(SQLParser.REPLICATE_DO_TABLE_SYMBOL, 0)

        def REPLICATE_IGNORE_TABLE_SYMBOL(self):
            return self.getToken(SQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0)

        def REPLICATE_WILD_DO_TABLE_SYMBOL(self):
            return self.getToken(SQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0)

        def REPLICATE_WILD_IGNORE_TABLE_SYMBOL(self):
            return self.getToken(SQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0)

        def REPLICATE_REWRITE_DB_SYMBOL(self):
            return self.getToken(SQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0)

        def USER_RESOURCES_SYMBOL(self):
            return self.getToken(SQLParser.USER_RESOURCES_SYMBOL, 0)

        def RESPECT_SYMBOL(self):
            return self.getToken(SQLParser.RESPECT_SYMBOL, 0)

        def RESUME_SYMBOL(self):
            return self.getToken(SQLParser.RESUME_SYMBOL, 0)

        def RETAIN_SYMBOL(self):
            return self.getToken(SQLParser.RETAIN_SYMBOL, 0)

        def RETURNED_SQLSTATE_SYMBOL(self):
            return self.getToken(SQLParser.RETURNED_SQLSTATE_SYMBOL, 0)

        def RETURNS_SYMBOL(self):
            return self.getToken(SQLParser.RETURNS_SYMBOL, 0)

        def REUSE_SYMBOL(self):
            return self.getToken(SQLParser.REUSE_SYMBOL, 0)

        def REVERSE_SYMBOL(self):
            return self.getToken(SQLParser.REVERSE_SYMBOL, 0)

        def ROLLUP_SYMBOL(self):
            return self.getToken(SQLParser.ROLLUP_SYMBOL, 0)

        def ROTATE_SYMBOL(self):
            return self.getToken(SQLParser.ROTATE_SYMBOL, 0)

        def ROUTINE_SYMBOL(self):
            return self.getToken(SQLParser.ROUTINE_SYMBOL, 0)

        def ROW_COUNT_SYMBOL(self):
            return self.getToken(SQLParser.ROW_COUNT_SYMBOL, 0)

        def ROW_FORMAT_SYMBOL(self):
            return self.getToken(SQLParser.ROW_FORMAT_SYMBOL, 0)

        def RTREE_SYMBOL(self):
            return self.getToken(SQLParser.RTREE_SYMBOL, 0)

        def SCHEDULE_SYMBOL(self):
            return self.getToken(SQLParser.SCHEDULE_SYMBOL, 0)

        def SCHEMA_NAME_SYMBOL(self):
            return self.getToken(SQLParser.SCHEMA_NAME_SYMBOL, 0)

        def SECOND_SYMBOL(self):
            return self.getToken(SQLParser.SECOND_SYMBOL, 0)

        def SERIAL_SYMBOL(self):
            return self.getToken(SQLParser.SERIAL_SYMBOL, 0)

        def SERIALIZABLE_SYMBOL(self):
            return self.getToken(SQLParser.SERIALIZABLE_SYMBOL, 0)

        def SESSION_SYMBOL(self):
            return self.getToken(SQLParser.SESSION_SYMBOL, 0)

        def SHARE_SYMBOL(self):
            return self.getToken(SQLParser.SHARE_SYMBOL, 0)

        def SIMPLE_SYMBOL(self):
            return self.getToken(SQLParser.SIMPLE_SYMBOL, 0)

        def SKIP_SYMBOL(self):
            return self.getToken(SQLParser.SKIP_SYMBOL, 0)

        def SLOW_SYMBOL(self):
            return self.getToken(SQLParser.SLOW_SYMBOL, 0)

        def SNAPSHOT_SYMBOL(self):
            return self.getToken(SQLParser.SNAPSHOT_SYMBOL, 0)

        def SOUNDS_SYMBOL(self):
            return self.getToken(SQLParser.SOUNDS_SYMBOL, 0)

        def SOURCE_SYMBOL(self):
            return self.getToken(SQLParser.SOURCE_SYMBOL, 0)

        def SQL_AFTER_GTIDS_SYMBOL(self):
            return self.getToken(SQLParser.SQL_AFTER_GTIDS_SYMBOL, 0)

        def SQL_AFTER_MTS_GAPS_SYMBOL(self):
            return self.getToken(SQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0)

        def SQL_BEFORE_GTIDS_SYMBOL(self):
            return self.getToken(SQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0)

        def SQL_CACHE_SYMBOL(self):
            return self.getToken(SQLParser.SQL_CACHE_SYMBOL, 0)

        def SQL_BUFFER_RESULT_SYMBOL(self):
            return self.getToken(SQLParser.SQL_BUFFER_RESULT_SYMBOL, 0)

        def SQL_NO_CACHE_SYMBOL(self):
            return self.getToken(SQLParser.SQL_NO_CACHE_SYMBOL, 0)

        def SQL_THREAD_SYMBOL(self):
            return self.getToken(SQLParser.SQL_THREAD_SYMBOL, 0)

        def SRID_SYMBOL(self):
            return self.getToken(SQLParser.SRID_SYMBOL, 0)

        def STACKED_SYMBOL(self):
            return self.getToken(SQLParser.STACKED_SYMBOL, 0)

        def STARTS_SYMBOL(self):
            return self.getToken(SQLParser.STARTS_SYMBOL, 0)

        def STATS_AUTO_RECALC_SYMBOL(self):
            return self.getToken(SQLParser.STATS_AUTO_RECALC_SYMBOL, 0)

        def STATS_PERSISTENT_SYMBOL(self):
            return self.getToken(SQLParser.STATS_PERSISTENT_SYMBOL, 0)

        def STATS_SAMPLE_PAGES_SYMBOL(self):
            return self.getToken(SQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0)

        def STATUS_SYMBOL(self):
            return self.getToken(SQLParser.STATUS_SYMBOL, 0)

        def STORAGE_SYMBOL(self):
            return self.getToken(SQLParser.STORAGE_SYMBOL, 0)

        def STRING_SYMBOL(self):
            return self.getToken(SQLParser.STRING_SYMBOL, 0)

        def SUBCLASS_ORIGIN_SYMBOL(self):
            return self.getToken(SQLParser.SUBCLASS_ORIGIN_SYMBOL, 0)

        def SUBDATE_SYMBOL(self):
            return self.getToken(SQLParser.SUBDATE_SYMBOL, 0)

        def SUBJECT_SYMBOL(self):
            return self.getToken(SQLParser.SUBJECT_SYMBOL, 0)

        def SUBPARTITION_SYMBOL(self):
            return self.getToken(SQLParser.SUBPARTITION_SYMBOL, 0)

        def SUBPARTITIONS_SYMBOL(self):
            return self.getToken(SQLParser.SUBPARTITIONS_SYMBOL, 0)

        def SUPER_SYMBOL(self):
            return self.getToken(SQLParser.SUPER_SYMBOL, 0)

        def SUSPEND_SYMBOL(self):
            return self.getToken(SQLParser.SUSPEND_SYMBOL, 0)

        def SWAPS_SYMBOL(self):
            return self.getToken(SQLParser.SWAPS_SYMBOL, 0)

        def SWITCHES_SYMBOL(self):
            return self.getToken(SQLParser.SWITCHES_SYMBOL, 0)

        def TABLE_NAME_SYMBOL(self):
            return self.getToken(SQLParser.TABLE_NAME_SYMBOL, 0)

        def TABLES_SYMBOL(self):
            return self.getToken(SQLParser.TABLES_SYMBOL, 0)

        def TABLE_CHECKSUM_SYMBOL(self):
            return self.getToken(SQLParser.TABLE_CHECKSUM_SYMBOL, 0)

        def TABLESPACE_SYMBOL(self):
            return self.getToken(SQLParser.TABLESPACE_SYMBOL, 0)

        def TEMPORARY_SYMBOL(self):
            return self.getToken(SQLParser.TEMPORARY_SYMBOL, 0)

        def TEMPTABLE_SYMBOL(self):
            return self.getToken(SQLParser.TEMPTABLE_SYMBOL, 0)

        def TEXT_SYMBOL(self):
            return self.getToken(SQLParser.TEXT_SYMBOL, 0)

        def THAN_SYMBOL(self):
            return self.getToken(SQLParser.THAN_SYMBOL, 0)

        def TIES_SYMBOL(self):
            return self.getToken(SQLParser.TIES_SYMBOL, 0)

        def TRANSACTION_SYMBOL(self):
            return self.getToken(SQLParser.TRANSACTION_SYMBOL, 0)

        def TRIGGERS_SYMBOL(self):
            return self.getToken(SQLParser.TRIGGERS_SYMBOL, 0)

        def TIMESTAMP_SYMBOL(self):
            return self.getToken(SQLParser.TIMESTAMP_SYMBOL, 0)

        def TIMESTAMP_ADD_SYMBOL(self):
            return self.getToken(SQLParser.TIMESTAMP_ADD_SYMBOL, 0)

        def TIMESTAMP_DIFF_SYMBOL(self):
            return self.getToken(SQLParser.TIMESTAMP_DIFF_SYMBOL, 0)

        def TIME_SYMBOL(self):
            return self.getToken(SQLParser.TIME_SYMBOL, 0)

        def TYPES_SYMBOL(self):
            return self.getToken(SQLParser.TYPES_SYMBOL, 0)

        def TYPE_SYMBOL(self):
            return self.getToken(SQLParser.TYPE_SYMBOL, 0)

        def UDF_RETURNS_SYMBOL(self):
            return self.getToken(SQLParser.UDF_RETURNS_SYMBOL, 0)

        def UNBOUNDED_SYMBOL(self):
            return self.getToken(SQLParser.UNBOUNDED_SYMBOL, 0)

        def UNCOMMITTED_SYMBOL(self):
            return self.getToken(SQLParser.UNCOMMITTED_SYMBOL, 0)

        def UNDEFINED_SYMBOL(self):
            return self.getToken(SQLParser.UNDEFINED_SYMBOL, 0)

        def UNDO_BUFFER_SIZE_SYMBOL(self):
            return self.getToken(SQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0)

        def UNDOFILE_SYMBOL(self):
            return self.getToken(SQLParser.UNDOFILE_SYMBOL, 0)

        def UNKNOWN_SYMBOL(self):
            return self.getToken(SQLParser.UNKNOWN_SYMBOL, 0)

        def UNTIL_SYMBOL(self):
            return self.getToken(SQLParser.UNTIL_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(SQLParser.USER_SYMBOL, 0)

        def USE_FRM_SYMBOL(self):
            return self.getToken(SQLParser.USE_FRM_SYMBOL, 0)

        def VARIABLES_SYMBOL(self):
            return self.getToken(SQLParser.VARIABLES_SYMBOL, 0)

        def VCPU_SYMBOL(self):
            return self.getToken(SQLParser.VCPU_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(SQLParser.VIEW_SYMBOL, 0)

        def VALUE_SYMBOL(self):
            return self.getToken(SQLParser.VALUE_SYMBOL, 0)

        def WARNINGS_SYMBOL(self):
            return self.getToken(SQLParser.WARNINGS_SYMBOL, 0)

        def WAIT_SYMBOL(self):
            return self.getToken(SQLParser.WAIT_SYMBOL, 0)

        def WEEK_SYMBOL(self):
            return self.getToken(SQLParser.WEEK_SYMBOL, 0)

        def WORK_SYMBOL(self):
            return self.getToken(SQLParser.WORK_SYMBOL, 0)

        def WEIGHT_STRING_SYMBOL(self):
            return self.getToken(SQLParser.WEIGHT_STRING_SYMBOL, 0)

        def X509_SYMBOL(self):
            return self.getToken(SQLParser.X509_SYMBOL, 0)

        def XID_SYMBOL(self):
            return self.getToken(SQLParser.XID_SYMBOL, 0)

        def XML_SYMBOL(self):
            return self.getToken(SQLParser.XML_SYMBOL, 0)

        def YEAR_SYMBOL(self):
            return self.getToken(SQLParser.YEAR_SYMBOL, 0)

        def SHUTDOWN_SYMBOL(self):
            return self.getToken(SQLParser.SHUTDOWN_SYMBOL, 0)

        def CUBE_SYMBOL(self):
            return self.getToken(SQLParser.CUBE_SYMBOL, 0)

        def IMPORT_SYMBOL(self):
            return self.getToken(SQLParser.IMPORT_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(SQLParser.FUNCTION_SYMBOL, 0)

        def ROWS_SYMBOL(self):
            return self.getToken(SQLParser.ROWS_SYMBOL, 0)

        def ROW_SYMBOL(self):
            return self.getToken(SQLParser.ROW_SYMBOL, 0)

        def EXCHANGE_SYMBOL(self):
            return self.getToken(SQLParser.EXCHANGE_SYMBOL, 0)

        def EXPIRE_SYMBOL(self):
            return self.getToken(SQLParser.EXPIRE_SYMBOL, 0)

        def ONLY_SYMBOL(self):
            return self.getToken(SQLParser.ONLY_SYMBOL, 0)

        def VALIDATION_SYMBOL(self):
            return self.getToken(SQLParser.VALIDATION_SYMBOL, 0)

        def WITHOUT_SYMBOL(self):
            return self.getToken(SQLParser.WITHOUT_SYMBOL, 0)

        def ADMIN_SYMBOL(self):
            return self.getToken(SQLParser.ADMIN_SYMBOL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_roleOrLabelKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleOrLabelKeyword" ):
                listener.enterRoleOrLabelKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleOrLabelKeyword" ):
                listener.exitRoleOrLabelKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoleOrLabelKeyword" ):
                return visitor.visitRoleOrLabelKeyword(self)
            else:
                return visitor.visitChildren(self)




    def roleOrLabelKeyword(self):

        localctx = SQLParser.RoleOrLabelKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1220, self.RULE_roleOrLabelKeyword)
        self._la = 0 # Token type
        try:
            self.state = 8422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8413
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLParser.ACTION_SYMBOL) | (1 << SQLParser.ADDDATE_SYMBOL) | (1 << SQLParser.AFTER_SYMBOL) | (1 << SQLParser.AGAINST_SYMBOL) | (1 << SQLParser.AGGREGATE_SYMBOL) | (1 << SQLParser.ALGORITHM_SYMBOL) | (1 << SQLParser.ANALYSE_SYMBOL) | (1 << SQLParser.ANY_SYMBOL) | (1 << SQLParser.AT_SYMBOL) | (1 << SQLParser.AUTHORS_SYMBOL) | (1 << SQLParser.AUTOEXTEND_SIZE_SYMBOL) | (1 << SQLParser.AUTO_INCREMENT_SYMBOL) | (1 << SQLParser.AVG_ROW_LENGTH_SYMBOL) | (1 << SQLParser.AVG_SYMBOL) | (1 << SQLParser.BINLOG_SYMBOL) | (1 << SQLParser.BIT_SYMBOL) | (1 << SQLParser.BLOCK_SYMBOL) | (1 << SQLParser.BOOLEAN_SYMBOL) | (1 << SQLParser.BOOL_SYMBOL) | (1 << SQLParser.BTREE_SYMBOL) | (1 << SQLParser.CASCADED_SYMBOL) | (1 << SQLParser.CATALOG_NAME_SYMBOL) | (1 << SQLParser.CHAIN_SYMBOL) | (1 << SQLParser.CHANGED_SYMBOL) | (1 << SQLParser.CHANNEL_SYMBOL) | (1 << SQLParser.CIPHER_SYMBOL))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SQLParser.CLASS_ORIGIN_SYMBOL - 64)) | (1 << (SQLParser.CLIENT_SYMBOL - 64)) | (1 << (SQLParser.COALESCE_SYMBOL - 64)) | (1 << (SQLParser.CODE_SYMBOL - 64)) | (1 << (SQLParser.COLLATION_SYMBOL - 64)) | (1 << (SQLParser.COLUMNS_SYMBOL - 64)) | (1 << (SQLParser.COLUMN_NAME_SYMBOL - 64)) | (1 << (SQLParser.COLUMN_FORMAT_SYMBOL - 64)) | (1 << (SQLParser.COMMITTED_SYMBOL - 64)) | (1 << (SQLParser.COMPACT_SYMBOL - 64)) | (1 << (SQLParser.COMPLETION_SYMBOL - 64)) | (1 << (SQLParser.COMPRESSED_SYMBOL - 64)) | (1 << (SQLParser.COMPRESSION_SYMBOL - 64)) | (1 << (SQLParser.CONCURRENT_SYMBOL - 64)) | (1 << (SQLParser.CONNECTION_SYMBOL - 64)) | (1 << (SQLParser.CONSISTENT_SYMBOL - 64)) | (1 << (SQLParser.CONSTRAINT_CATALOG_SYMBOL - 64)) | (1 << (SQLParser.CONSTRAINT_NAME_SYMBOL - 64)) | (1 << (SQLParser.CONSTRAINT_SCHEMA_SYMBOL - 64)) | (1 << (SQLParser.CONTEXT_SYMBOL - 64)) | (1 << (SQLParser.CONTRIBUTORS_SYMBOL - 64)) | (1 << (SQLParser.CPU_SYMBOL - 64)) | (1 << (SQLParser.CURRENT_SYMBOL - 64)) | (1 << (SQLParser.CURSOR_NAME_SYMBOL - 64)) | (1 << (SQLParser.DATAFILE_SYMBOL - 64)) | (1 << (SQLParser.DATA_SYMBOL - 64)) | (1 << (SQLParser.DATETIME_SYMBOL - 64)) | (1 << (SQLParser.DATE_SYMBOL - 64)) | (1 << (SQLParser.DAY_SYMBOL - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (SQLParser.DEFAULT_AUTH_SYMBOL - 129)) | (1 << (SQLParser.DEFINER_SYMBOL - 129)) | (1 << (SQLParser.DELAY_KEY_WRITE_SYMBOL - 129)) | (1 << (SQLParser.DES_KEY_FILE_SYMBOL - 129)) | (1 << (SQLParser.DIAGNOSTICS_SYMBOL - 129)) | (1 << (SQLParser.DIRECTORY_SYMBOL - 129)) | (1 << (SQLParser.DISABLE_SYMBOL - 129)) | (1 << (SQLParser.DISCARD_SYMBOL - 129)) | (1 << (SQLParser.DISK_SYMBOL - 129)) | (1 << (SQLParser.DUMPFILE_SYMBOL - 129)) | (1 << (SQLParser.DUPLICATE_SYMBOL - 129)) | (1 << (SQLParser.DYNAMIC_SYMBOL - 129)) | (1 << (SQLParser.ENABLE_SYMBOL - 129)) | (1 << (SQLParser.ENCRYPTION_SYMBOL - 129)) | (1 << (SQLParser.ENDS_SYMBOL - 129)) | (1 << (SQLParser.ENGINES_SYMBOL - 129)) | (1 << (SQLParser.ENGINE_SYMBOL - 129)) | (1 << (SQLParser.ENUM_SYMBOL - 129)) | (1 << (SQLParser.ERROR_SYMBOL - 129)) | (1 << (SQLParser.ERRORS_SYMBOL - 129)) | (1 << (SQLParser.ESCAPE_SYMBOL - 129)) | (1 << (SQLParser.EVENTS_SYMBOL - 129)) | (1 << (SQLParser.EVERY_SYMBOL - 129)) | (1 << (SQLParser.EXPANSION_SYMBOL - 129)) | (1 << (SQLParser.EXPORT_SYMBOL - 129)) | (1 << (SQLParser.EXTENDED_SYMBOL - 129)) | (1 << (SQLParser.EXTENT_SIZE_SYMBOL - 129)) | (1 << (SQLParser.FAST_SYMBOL - 129)) | (1 << (SQLParser.FAULTS_SYMBOL - 129)) | (1 << (SQLParser.FILE_BLOCK_SIZE_SYMBOL - 129)) | (1 << (SQLParser.FILTER_SYMBOL - 129)) | (1 << (SQLParser.FIRST_SYMBOL - 129)) | (1 << (SQLParser.FIXED_SYMBOL - 129)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (SQLParser.FOUND_SYMBOL - 202)) | (1 << (SQLParser.FULL_SYMBOL - 202)) | (1 << (SQLParser.GENERAL_SYMBOL - 202)) | (1 << (SQLParser.GEOMETRYCOLLECTION_SYMBOL - 202)) | (1 << (SQLParser.GEOMETRY_SYMBOL - 202)) | (1 << (SQLParser.GET_FORMAT_SYMBOL - 202)) | (1 << (SQLParser.GLOBAL_SYMBOL - 202)) | (1 << (SQLParser.GRANTS_SYMBOL - 202)) | (1 << (SQLParser.HASH_SYMBOL - 202)) | (1 << (SQLParser.HOSTS_SYMBOL - 202)) | (1 << (SQLParser.HOUR_SYMBOL - 202)) | (1 << (SQLParser.IDENTIFIED_SYMBOL - 202)) | (1 << (SQLParser.IGNORE_SERVER_IDS_SYMBOL - 202)) | (1 << (SQLParser.INDEXES_SYMBOL - 202)) | (1 << (SQLParser.INITIAL_SIZE_SYMBOL - 202)) | (1 << (SQLParser.INSERT_METHOD_SYMBOL - 202)) | (1 << (SQLParser.INSTANCE_SYMBOL - 202)) | (1 << (SQLParser.INVOKER_SYMBOL - 202)) | (1 << (SQLParser.IO_SYMBOL - 202)) | (1 << (SQLParser.IPC_SYMBOL - 202)) | (1 << (SQLParser.ISOLATION_SYMBOL - 202)) | (1 << (SQLParser.ISSUER_SYMBOL - 202)) | (1 << (SQLParser.JSON_SYMBOL - 202)) | (1 << (SQLParser.KEY_BLOCK_SIZE_SYMBOL - 202)))) != 0) or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & ((1 << (SQLParser.LAST_SYMBOL - 268)) | (1 << (SQLParser.LEAVES_SYMBOL - 268)) | (1 << (SQLParser.LESS_SYMBOL - 268)) | (1 << (SQLParser.LEVEL_SYMBOL - 268)) | (1 << (SQLParser.LINESTRING_SYMBOL - 268)) | (1 << (SQLParser.LIST_SYMBOL - 268)) | (1 << (SQLParser.LOCAL_SYMBOL - 268)) | (1 << (SQLParser.LOCKS_SYMBOL - 268)) | (1 << (SQLParser.LOGFILE_SYMBOL - 268)) | (1 << (SQLParser.LOGS_SYMBOL - 268)) | (1 << (SQLParser.MASTER_AUTO_POSITION_SYMBOL - 268)) | (1 << (SQLParser.MASTER_CONNECT_RETRY_SYMBOL - 268)) | (1 << (SQLParser.MASTER_DELAY_SYMBOL - 268)) | (1 << (SQLParser.MASTER_HOST_SYMBOL - 268)) | (1 << (SQLParser.MASTER_LOG_FILE_SYMBOL - 268)) | (1 << (SQLParser.MASTER_LOG_POS_SYMBOL - 268)) | (1 << (SQLParser.MASTER_PASSWORD_SYMBOL - 268)) | (1 << (SQLParser.MASTER_PORT_SYMBOL - 268)) | (1 << (SQLParser.MASTER_RETRY_COUNT_SYMBOL - 268)) | (1 << (SQLParser.MASTER_SERVER_ID_SYMBOL - 268)) | (1 << (SQLParser.MASTER_SSL_CAPATH_SYMBOL - 268)) | (1 << (SQLParser.MASTER_SSL_CA_SYMBOL - 268)) | (1 << (SQLParser.MASTER_SSL_CERT_SYMBOL - 268)) | (1 << (SQLParser.MASTER_SSL_CIPHER_SYMBOL - 268)) | (1 << (SQLParser.MASTER_SSL_CRL_SYMBOL - 268)) | (1 << (SQLParser.MASTER_SSL_CRLPATH_SYMBOL - 268)) | (1 << (SQLParser.MASTER_SSL_KEY_SYMBOL - 268)) | (1 << (SQLParser.MASTER_SSL_SYMBOL - 268)) | (1 << (SQLParser.MASTER_SYMBOL - 268)) | (1 << (SQLParser.MASTER_TLS_VERSION_SYMBOL - 268)) | (1 << (SQLParser.MASTER_USER_SYMBOL - 268)) | (1 << (SQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL - 268)) | (1 << (SQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL - 268)) | (1 << (SQLParser.MAX_QUERIES_PER_HOUR_SYMBOL - 268)) | (1 << (SQLParser.MAX_ROWS_SYMBOL - 268)) | (1 << (SQLParser.MAX_SIZE_SYMBOL - 268)) | (1 << (SQLParser.MAX_STATEMENT_TIME_SYMBOL - 268)) | (1 << (SQLParser.MAX_UPDATES_PER_HOUR_SYMBOL - 268)) | (1 << (SQLParser.MAX_USER_CONNECTIONS_SYMBOL - 268)))) != 0) or ((((_la - 333)) & ~0x3f) == 0 and ((1 << (_la - 333)) & ((1 << (SQLParser.MEDIUM_SYMBOL - 333)) | (1 << (SQLParser.MEMORY_SYMBOL - 333)) | (1 << (SQLParser.MERGE_SYMBOL - 333)) | (1 << (SQLParser.MESSAGE_TEXT_SYMBOL - 333)) | (1 << (SQLParser.MICROSECOND_SYMBOL - 333)) | (1 << (SQLParser.MIGRATE_SYMBOL - 333)) | (1 << (SQLParser.MINUTE_SYMBOL - 333)) | (1 << (SQLParser.MIN_ROWS_SYMBOL - 333)) | (1 << (SQLParser.MODE_SYMBOL - 333)) | (1 << (SQLParser.MODIFY_SYMBOL - 333)) | (1 << (SQLParser.MONTH_SYMBOL - 333)) | (1 << (SQLParser.MULTILINESTRING_SYMBOL - 333)) | (1 << (SQLParser.MULTIPOINT_SYMBOL - 333)) | (1 << (SQLParser.MULTIPOLYGON_SYMBOL - 333)) | (1 << (SQLParser.MUTEX_SYMBOL - 333)) | (1 << (SQLParser.MYSQL_ERRNO_SYMBOL - 333)) | (1 << (SQLParser.NAMES_SYMBOL - 333)) | (1 << (SQLParser.NAME_SYMBOL - 333)) | (1 << (SQLParser.NATIONAL_SYMBOL - 333)) | (1 << (SQLParser.NCHAR_SYMBOL - 333)) | (1 << (SQLParser.NDBCLUSTER_SYMBOL - 333)) | (1 << (SQLParser.NEVER_SYMBOL - 333)) | (1 << (SQLParser.NEW_SYMBOL - 333)) | (1 << (SQLParser.NEXT_SYMBOL - 333)) | (1 << (SQLParser.NODEGROUP_SYMBOL - 333)) | (1 << (SQLParser.NO_WAIT_SYMBOL - 333)) | (1 << (SQLParser.NUMBER_SYMBOL - 333)) | (1 << (SQLParser.NVARCHAR_SYMBOL - 333)) | (1 << (SQLParser.OFFSET_SYMBOL - 333)) | (1 << (SQLParser.OLD_PASSWORD_SYMBOL - 333)) | (1 << (SQLParser.ONE_SYMBOL - 333)))) != 0) or ((((_la - 399)) & ~0x3f) == 0 and ((1 << (_la - 399)) & ((1 << (SQLParser.PACK_KEYS_SYMBOL - 399)) | (1 << (SQLParser.PAGE_SYMBOL - 399)) | (1 << (SQLParser.PARTIAL_SYMBOL - 399)) | (1 << (SQLParser.PARTITIONING_SYMBOL - 399)) | (1 << (SQLParser.PARTITIONS_SYMBOL - 399)) | (1 << (SQLParser.PASSWORD_SYMBOL - 399)) | (1 << (SQLParser.PHASE_SYMBOL - 399)) | (1 << (SQLParser.PLUGINS_SYMBOL - 399)) | (1 << (SQLParser.PLUGIN_DIR_SYMBOL - 399)) | (1 << (SQLParser.PLUGIN_SYMBOL - 399)) | (1 << (SQLParser.POINT_SYMBOL - 399)) | (1 << (SQLParser.POLYGON_SYMBOL - 399)) | (1 << (SQLParser.PRESERVE_SYMBOL - 399)) | (1 << (SQLParser.PREV_SYMBOL - 399)) | (1 << (SQLParser.PRIVILEGES_SYMBOL - 399)) | (1 << (SQLParser.PROCESSLIST_SYMBOL - 399)) | (1 << (SQLParser.PROFILE_SYMBOL - 399)) | (1 << (SQLParser.PROFILES_SYMBOL - 399)) | (1 << (SQLParser.QUARTER_SYMBOL - 399)) | (1 << (SQLParser.QUERY_SYMBOL - 399)) | (1 << (SQLParser.QUICK_SYMBOL - 399)) | (1 << (SQLParser.READ_ONLY_SYMBOL - 399)) | (1 << (SQLParser.REBUILD_SYMBOL - 399)) | (1 << (SQLParser.RECOVER_SYMBOL - 399)) | (1 << (SQLParser.REDOFILE_SYMBOL - 399)) | (1 << (SQLParser.REDO_BUFFER_SIZE_SYMBOL - 399)) | (1 << (SQLParser.REDUNDANT_SYMBOL - 399)) | (1 << (SQLParser.RELAY_SYMBOL - 399)) | (1 << (SQLParser.RELAYLOG_SYMBOL - 399)) | (1 << (SQLParser.RELAY_LOG_FILE_SYMBOL - 399)) | (1 << (SQLParser.RELAY_LOG_POS_SYMBOL - 399)) | (1 << (SQLParser.RELAY_THREAD_SYMBOL - 399)) | (1 << (SQLParser.REORGANIZE_SYMBOL - 399)) | (1 << (SQLParser.REPEATABLE_SYMBOL - 399)) | (1 << (SQLParser.REPLICATE_DO_DB_SYMBOL - 399)) | (1 << (SQLParser.REPLICATE_IGNORE_DB_SYMBOL - 399)) | (1 << (SQLParser.REPLICATE_DO_TABLE_SYMBOL - 399)))) != 0) or ((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & ((1 << (SQLParser.REPLICATE_IGNORE_TABLE_SYMBOL - 463)) | (1 << (SQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL - 463)) | (1 << (SQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL - 463)) | (1 << (SQLParser.REPLICATE_REWRITE_DB_SYMBOL - 463)) | (1 << (SQLParser.RESUME_SYMBOL - 463)) | (1 << (SQLParser.RETURNED_SQLSTATE_SYMBOL - 463)) | (1 << (SQLParser.RETURNS_SYMBOL - 463)) | (1 << (SQLParser.REVERSE_SYMBOL - 463)) | (1 << (SQLParser.ROLLUP_SYMBOL - 463)) | (1 << (SQLParser.ROTATE_SYMBOL - 463)) | (1 << (SQLParser.ROUTINE_SYMBOL - 463)) | (1 << (SQLParser.ROW_COUNT_SYMBOL - 463)) | (1 << (SQLParser.ROW_FORMAT_SYMBOL - 463)) | (1 << (SQLParser.RTREE_SYMBOL - 463)) | (1 << (SQLParser.SCHEDULE_SYMBOL - 463)) | (1 << (SQLParser.SCHEMA_NAME_SYMBOL - 463)) | (1 << (SQLParser.SECOND_SYMBOL - 463)) | (1 << (SQLParser.SERIALIZABLE_SYMBOL - 463)) | (1 << (SQLParser.SERIAL_SYMBOL - 463)) | (1 << (SQLParser.SESSION_SYMBOL - 463)) | (1 << (SQLParser.SHARE_SYMBOL - 463)) | (1 << (SQLParser.SIMPLE_SYMBOL - 463)) | (1 << (SQLParser.SLOW_SYMBOL - 463)) | (1 << (SQLParser.SNAPSHOT_SYMBOL - 463)) | (1 << (SQLParser.SOUNDS_SYMBOL - 463)) | (1 << (SQLParser.SOURCE_SYMBOL - 463)))) != 0) or ((((_la - 528)) & ~0x3f) == 0 and ((1 << (_la - 528)) & ((1 << (SQLParser.SQL_AFTER_GTIDS_SYMBOL - 528)) | (1 << (SQLParser.SQL_AFTER_MTS_GAPS_SYMBOL - 528)) | (1 << (SQLParser.SQL_BEFORE_GTIDS_SYMBOL - 528)) | (1 << (SQLParser.SQL_BUFFER_RESULT_SYMBOL - 528)) | (1 << (SQLParser.SQL_CACHE_SYMBOL - 528)) | (1 << (SQLParser.SQL_NO_CACHE_SYMBOL - 528)) | (1 << (SQLParser.SQL_THREAD_SYMBOL - 528)) | (1 << (SQLParser.STACKED_SYMBOL - 528)) | (1 << (SQLParser.STARTS_SYMBOL - 528)) | (1 << (SQLParser.STATS_AUTO_RECALC_SYMBOL - 528)) | (1 << (SQLParser.STATS_PERSISTENT_SYMBOL - 528)) | (1 << (SQLParser.STATS_SAMPLE_PAGES_SYMBOL - 528)) | (1 << (SQLParser.STATUS_SYMBOL - 528)) | (1 << (SQLParser.STORAGE_SYMBOL - 528)) | (1 << (SQLParser.STRING_SYMBOL - 528)) | (1 << (SQLParser.SUBCLASS_ORIGIN_SYMBOL - 528)) | (1 << (SQLParser.SUBDATE_SYMBOL - 528)) | (1 << (SQLParser.SUBJECT_SYMBOL - 528)) | (1 << (SQLParser.SUBPARTITIONS_SYMBOL - 528)) | (1 << (SQLParser.SUBPARTITION_SYMBOL - 528)) | (1 << (SQLParser.SUPER_SYMBOL - 528)) | (1 << (SQLParser.SUSPEND_SYMBOL - 528)) | (1 << (SQLParser.SWAPS_SYMBOL - 528)) | (1 << (SQLParser.SWITCHES_SYMBOL - 528)) | (1 << (SQLParser.TABLES_SYMBOL - 528)) | (1 << (SQLParser.TABLESPACE_SYMBOL - 528)) | (1 << (SQLParser.TABLE_CHECKSUM_SYMBOL - 528)) | (1 << (SQLParser.TABLE_NAME_SYMBOL - 528)) | (1 << (SQLParser.TEMPORARY_SYMBOL - 528)) | (1 << (SQLParser.TEMPTABLE_SYMBOL - 528)) | (1 << (SQLParser.TEXT_SYMBOL - 528)) | (1 << (SQLParser.THAN_SYMBOL - 528)) | (1 << (SQLParser.TIMESTAMP_SYMBOL - 528)) | (1 << (SQLParser.TIMESTAMP_ADD_SYMBOL - 528)) | (1 << (SQLParser.TIMESTAMP_DIFF_SYMBOL - 528)) | (1 << (SQLParser.TIME_SYMBOL - 528)))) != 0) or ((((_la - 592)) & ~0x3f) == 0 and ((1 << (_la - 592)) & ((1 << (SQLParser.TRANSACTION_SYMBOL - 592)) | (1 << (SQLParser.TRIGGERS_SYMBOL - 592)) | (1 << (SQLParser.TYPES_SYMBOL - 592)) | (1 << (SQLParser.TYPE_SYMBOL - 592)) | (1 << (SQLParser.UDF_RETURNS_SYMBOL - 592)) | (1 << (SQLParser.UNCOMMITTED_SYMBOL - 592)) | (1 << (SQLParser.UNDEFINED_SYMBOL - 592)) | (1 << (SQLParser.UNDOFILE_SYMBOL - 592)) | (1 << (SQLParser.UNDO_BUFFER_SIZE_SYMBOL - 592)) | (1 << (SQLParser.UNKNOWN_SYMBOL - 592)) | (1 << (SQLParser.UNTIL_SYMBOL - 592)) | (1 << (SQLParser.USER_RESOURCES_SYMBOL - 592)) | (1 << (SQLParser.USER_SYMBOL - 592)) | (1 << (SQLParser.USE_FRM_SYMBOL - 592)) | (1 << (SQLParser.VALUE_SYMBOL - 592)) | (1 << (SQLParser.VARIABLES_SYMBOL - 592)) | (1 << (SQLParser.VIEW_SYMBOL - 592)) | (1 << (SQLParser.WAIT_SYMBOL - 592)) | (1 << (SQLParser.WARNINGS_SYMBOL - 592)) | (1 << (SQLParser.WEEK_SYMBOL - 592)) | (1 << (SQLParser.WEIGHT_STRING_SYMBOL - 592)) | (1 << (SQLParser.WORK_SYMBOL - 592)) | (1 << (SQLParser.X509_SYMBOL - 592)) | (1 << (SQLParser.XID_SYMBOL - 592)) | (1 << (SQLParser.XML_SYMBOL - 592)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (SQLParser.YEAR_SYMBOL - 656)) | (1 << (SQLParser.COMPONENT_SYMBOL - 656)) | (1 << (SQLParser.SKIP_SYMBOL - 656)) | (1 << (SQLParser.LOCKED_SYMBOL - 656)) | (1 << (SQLParser.NOWAIT_SYMBOL - 656)) | (1 << (SQLParser.HISTOGRAM_SYMBOL - 656)) | (1 << (SQLParser.BUCKETS_SYMBOL - 656)) | (1 << (SQLParser.REMOTE_SYMBOL - 656)) | (1 << (SQLParser.EXCLUDE_SYMBOL - 656)) | (1 << (SQLParser.FOLLOWING_SYMBOL - 656)) | (1 << (SQLParser.NULLS_SYMBOL - 656)) | (1 << (SQLParser.OTHERS_SYMBOL - 656)) | (1 << (SQLParser.PRECEDING_SYMBOL - 656)) | (1 << (SQLParser.RESPECT_SYMBOL - 656)) | (1 << (SQLParser.TIES_SYMBOL - 656)) | (1 << (SQLParser.UNBOUNDED_SYMBOL - 656)) | (1 << (SQLParser.NESTED_SYMBOL - 656)) | (1 << (SQLParser.ORDINALITY_SYMBOL - 656)) | (1 << (SQLParser.PATH_SYMBOL - 656)) | (1 << (SQLParser.HISTORY_SYMBOL - 656)) | (1 << (SQLParser.REUSE_SYMBOL - 656)) | (1 << (SQLParser.SRID_SYMBOL - 656)) | (1 << (SQLParser.THREAD_PRIORITY_SYMBOL - 656)) | (1 << (SQLParser.VCPU_SYMBOL - 656)) | (1 << (SQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL - 656)) | (1 << (SQLParser.DESCRIPTION_SYMBOL - 656)) | (1 << (SQLParser.ORGANIZATION_SYMBOL - 656)) | (1 << (SQLParser.OPTIONAL_SYMBOL - 656)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (SQLParser.ACTIVE_SYMBOL - 724)) | (1 << (SQLParser.INACTIVE_SYMBOL - 724)) | (1 << (SQLParser.RETAIN_SYMBOL - 724)) | (1 << (SQLParser.OLD_SYMBOL - 724)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8414
                if not self.serverVersion < 50709:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 50709")
                self.state = 8415
                self.match(SQLParser.SHUTDOWN_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8416
                if not self.serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion < 80000")
                self.state = 8417
                _la = self._input.LA(1)
                if not(_la==SQLParser.CUBE_SYMBOL or _la==SQLParser.FUNCTION_SYMBOL or _la==SQLParser.IMPORT_SYMBOL or _la==SQLParser.ROWS_SYMBOL or _la==SQLParser.ROW_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8418
                if not self.serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80000")
                self.state = 8419
                _la = self._input.LA(1)
                if not(_la==SQLParser.EXCHANGE_SYMBOL or _la==SQLParser.EXPIRE_SYMBOL or _la==SQLParser.ONLY_SYMBOL or _la==SQLParser.SUPER_SYMBOL or _la==SQLParser.VALIDATION_SYMBOL or _la==SQLParser.WITHOUT_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8420
                if not self.serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.serverVersion >= 80014")
                self.state = 8421
                self.match(SQLParser.ADMIN_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[2] = self.simpleStatement_sempred
        self._predicates[3] = self.alterStatement_sempred
        self._predicates[4] = self.alterDatabase_sempred
        self._predicates[10] = self.alterTable_sempred
        self._predicates[14] = self.standaloneAlterCommands_sempred
        self._predicates[15] = self.alterPartition_sempred
        self._predicates[18] = self.alterListItem_sempred
        self._predicates[25] = self.withValidation_sempred
        self._predicates[28] = self.alterTablespace_sempred
        self._predicates[39] = self.createStatement_sempred
        self._predicates[41] = self.createDatabaseOption_sempred
        self._predicates[54] = self.createIndex_sempred
        self._predicates[65] = self.tsDataFileName_sempred
        self._predicates[68] = self.tablespaceOption_sempred
        self._predicates[85] = self.triggerFollowsPrecedesClause_sempred
        self._predicates[90] = self.dropStatement_sempred
        self._predicates[111] = self.deleteStatement_sempred
        self._predicates[112] = self.partitionDelete_sempred
        self._predicates[114] = self.doStatement_sempred
        self._predicates[117] = self.insertStatement_sempred
        self._predicates[136] = self.queryExpression_sempred
        self._predicates[139] = self.queryPrimary_sempred
        self._predicates[140] = self.querySpecification_sempred
        self._predicates[164] = self.olapOption_sempred
        self._predicates[172] = self.selectOption_sempred
        self._predicates[174] = self.lockingClause_sempred
        self._predicates[175] = self.lockStrengh_sempred
        self._predicates[181] = self.tableReference_sempred
        self._predicates[187] = self.tableFactor_sempred
        self._predicates[190] = self.derivedTable_sempred
        self._predicates[194] = self.jtColumn_sempred
        self._predicates[200] = self.tableAlias_sempred
        self._predicates[209] = self.updateStatement_sempred
        self._predicates[213] = self.transactionCharacteristic_sempred
        self._predicates[215] = self.lockStatement_sempred
        self._predicates[219] = self.xaConvert_sempred
        self._predicates[221] = self.replicationStatement_sempred
        self._predicates[222] = self.resetOption_sempred
        self._predicates[223] = self.masterResetOptions_sempred
        self._predicates[233] = self.changeReplication_sempred
        self._predicates[241] = self.slaveUntilOptions_sempred
        self._predicates[242] = self.slaveConnectionOptions_sempred
        self._predicates[249] = self.cloneStatement_sempred
        self._predicates[252] = self.accountManagementStatement_sempred
        self._predicates[253] = self.alterUser_sempred
        self._predicates[254] = self.alterUserTail_sempred
        self._predicates[256] = self.createUser_sempred
        self._predicates[257] = self.createUserTail_sempred
        self._predicates[258] = self.defaultRoleClause_sempred
        self._predicates[261] = self.accountLockPasswordExpireOptions_sempred
        self._predicates[262] = self.dropUser_sempred
        self._predicates[263] = self.grant_sempred
        self._predicates[264] = self.grantTargetList_sempred
        self._predicates[265] = self.grantOptions_sempred
        self._predicates[269] = self.versionedRequireClause_sempred
        self._predicates[271] = self.revoke_sempred
        self._predicates[272] = self.onTypeTo_sempred
        self._predicates[275] = self.roleOrPrivilege_sempred
        self._predicates[276] = self.grantIdentifier_sempred
        self._predicates[283] = self.tableAdministrationStatement_sempred
        self._predicates[289] = self.startOptionValueList_sempred
        self._predicates[294] = self.optionValueNoOptionType_sempred
        self._predicates[299] = self.setExprOrDefault_sempred
        self._predicates[300] = self.showStatement_sempred
        self._predicates[301] = self.showCommandType_sempred
        self._predicates[302] = self.nonBlocking_sempred
        self._predicates[306] = self.otherAdministrativeStatement_sempred
        self._predicates[314] = self.flushOption_sempred
        self._predicates[317] = self.flushTablesOptions_sempred
        self._predicates[332] = self.utilityStatement_sempred
        self._predicates[334] = self.explainStatement_sempred
        self._predicates[335] = self.explainableStatement_sempred
        self._predicates[339] = self.expr_sempred
        self._predicates[340] = self.boolPri_sempred
        self._predicates[342] = self.predicate_sempred
        self._predicates[344] = self.bitExpr_sempred
        self._predicates[345] = self.simpleExpr_sempred
        self._predicates[346] = self.arrayCast_sempred
        self._predicates[347] = self.jsonOperator_sempred
        self._predicates[348] = self.sumExpr_sempred
        self._predicates[359] = self.runtimeFunctionCall_sempred
        self._predicates[360] = self.geometryFunction_sempred
        self._predicates[362] = self.fractionalPrecision_sempred
        self._predicates[374] = self.internalVariableName_sempred
        self._predicates[378] = self.castType_sempred
        self._predicates[392] = self.channel_sempred
        self._predicates[421] = self.getDiagnostics_sempred
        self._predicates[434] = self.checkOrReferences_sempred
        self._predicates[437] = self.tableConstraintDef_sempred
        self._predicates[439] = self.fieldDefinition_sempred
        self._predicates[440] = self.columnAttribute_sempred
        self._predicates[450] = self.keyListVariants_sempred
        self._predicates[453] = self.commonIndexOption_sempred
        self._predicates[459] = self.dataType_sempred
        self._predicates[469] = self.charsetName_sempred
        self._predicates[470] = self.collationName_sempred
        self._predicates[473] = self.createTableOption_sempred
        self._predicates[481] = self.partitionKeyAlgorithm_sempred
        self._predicates[508] = self.createUserEntry_sempred
        self._predicates[519] = self.usePartition_sempred
        self._predicates[521] = self.columnName_sempred
        self._predicates[564] = self.pureIdentifier_sempred
        self._predicates[569] = self.simpleIdentifier_sempred
        self._predicates[574] = self.real_ulonglong_number_sempred
        self._predicates[578] = self.textStringLiteral_sempred
        self._predicates[580] = self.textStringHash_sempred
        self._predicates[600] = self.identifierKeyword_sempred
        self._predicates[603] = self.labelKeyword_sempred
        self._predicates[605] = self.identifierKeywordsUnambiguous_sempred
        self._predicates[606] = self.roleKeyword_sempred
        self._predicates[609] = self.roleOrIdentifierKeyword_sempred
        self._predicates[610] = self.roleOrLabelKeyword_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def simpleStatement_sempred(self, localctx:SimpleStatementContext, predIndex:int):
            if predIndex == 0:
                return self.serverVersion >= 80000
         

            if predIndex == 1:
                return self.serverVersion >= 80000
         

            if predIndex == 2:
                return self.serverVersion >= 80000
         

            if predIndex == 3:
                return self.serverVersion >= 50604
         

    def alterStatement_sempred(self, localctx:AlterStatementContext, predIndex:int):
            if predIndex == 4:
                return self.serverVersion >= 80014
         

            if predIndex == 5:
                return self.serverVersion >= 50713
         

    def alterDatabase_sempred(self, localctx:AlterDatabaseContext, predIndex:int):
            if predIndex == 6:
                return self.serverVersion < 80000
         

    def alterTable_sempred(self, localctx:AlterTableContext, predIndex:int):
            if predIndex == 7:
                return self.serverVersion < 50700
         

    def standaloneAlterCommands_sempred(self, localctx:StandaloneAlterCommandsContext, predIndex:int):
            if predIndex == 8:
                return self.serverVersion >= 80014
         

    def alterPartition_sempred(self, localctx:AlterPartitionContext, predIndex:int):
            if predIndex == 9:
                return self.serverVersion >= 50704
         

            if predIndex == 10:
                return self.serverVersion >= 50704
         

    def alterListItem_sempred(self, localctx:AlterListItemContext, predIndex:int):
            if predIndex == 11:
                return self.serverVersion >= 50700
         

            if predIndex == 12:
                return self.serverVersion < 50700
         

            if predIndex == 13:
                return self.serverVersion >= 80017
         

            if predIndex == 14:
                return self.serverVersion >= 80019
         

            if predIndex == 15:
                return self.serverVersion >= 80014
         

            if predIndex == 16:
                return self.serverVersion >= 80000
         

            if predIndex == 17:
                return self.serverVersion >= 80017
         

            if predIndex == 18:
                return self.serverVersion >= 80019
         

            if predIndex == 19:
                return self.serverVersion >= 80000
         

            if predIndex == 20:
                return self.serverVersion >= 50700
         

            if predIndex == 21:
                return self.serverVersion >= 80014
         

            if predIndex == 22:
                return self.serverVersion >= 50708 and self.serverVersion < 80000
         

    def withValidation_sempred(self, localctx:WithValidationContext, predIndex:int):
            if predIndex == 23:
                return self.serverVersion >= 50706
         

    def alterTablespace_sempred(self, localctx:AlterTablespaceContext, predIndex:int):
            if predIndex == 24:
                return self.serverVersion < 80000
         

            if predIndex == 25:
                return self.serverVersion >= 80014
         

    def createStatement_sempred(self, localctx:CreateStatementContext, predIndex:int):
            if predIndex == 26:
                return self.serverVersion >= 80000
         

            if predIndex == 27:
                return self.serverVersion >= 80011
         

            if predIndex == 28:
                return self.serverVersion >= 80014
         

    def createDatabaseOption_sempred(self, localctx:CreateDatabaseOptionContext, predIndex:int):
            if predIndex == 29:
                return self.serverVersion >= 80016
         

    def createIndex_sempred(self, localctx:CreateIndexContext, predIndex:int):
            if predIndex == 30:
                return self.serverVersion >= 80014
         

    def tsDataFileName_sempred(self, localctx:TsDataFileNameContext, predIndex:int):
            if predIndex == 31:
                return self.serverVersion >= 80014
         

    def tablespaceOption_sempred(self, localctx:TablespaceOptionContext, predIndex:int):
            if predIndex == 32:
                return self.serverVersion >= 50707
         

            if predIndex == 33:
                return self.serverVersion >= 80014
         

    def triggerFollowsPrecedesClause_sempred(self, localctx:TriggerFollowsPrecedesClauseContext, predIndex:int):
            if predIndex == 34:
                return self.serverVersion >= 50700
         

    def dropStatement_sempred(self, localctx:DropStatementContext, predIndex:int):
            if predIndex == 35:
                return self.serverVersion >= 80000
         

            if predIndex == 36:
                return self.serverVersion >= 80011
         

            if predIndex == 37:
                return self.serverVersion >= 80014
         

    def deleteStatement_sempred(self, localctx:DeleteStatementContext, predIndex:int):
            if predIndex == 38:
                return self.serverVersion >= 80000
         

            if predIndex == 39:
                return self.serverVersion >= 80017
         

    def partitionDelete_sempred(self, localctx:PartitionDeleteContext, predIndex:int):
            if predIndex == 40:
                return self.serverVersion >= 50602
         

    def doStatement_sempred(self, localctx:DoStatementContext, predIndex:int):
            if predIndex == 41:
                return self.serverVersion < 50709
         

            if predIndex == 42:
                return self.serverVersion >= 50709
         

    def insertStatement_sempred(self, localctx:InsertStatementContext, predIndex:int):
            if predIndex == 43:
                return  self.serverVersion >= 80018
         

            if predIndex == 44:
                return  self.serverVersion >= 80018
         

    def queryExpression_sempred(self, localctx:QueryExpressionContext, predIndex:int):
            if predIndex == 45:
                return self.serverVersion >= 80000
         

            if predIndex == 46:
                return self.serverVersion < 80000
         

    def queryPrimary_sempred(self, localctx:QueryPrimaryContext, predIndex:int):
            if predIndex == 47:
                return self.serverVersion >= 80019
         

            if predIndex == 48:
                return self.serverVersion >= 80019
         

    def querySpecification_sempred(self, localctx:QuerySpecificationContext, predIndex:int):
            if predIndex == 49:
                return self.serverVersion >= 80000
         

    def olapOption_sempred(self, localctx:OlapOptionContext, predIndex:int):
            if predIndex == 50:
                return self.serverVersion < 80000
         

    def selectOption_sempred(self, localctx:SelectOptionContext, predIndex:int):
            if predIndex == 51:
                return self.serverVersion < 80000
         

            if predIndex == 52:
                return self.serverVersion >= 50704 and self.serverVersion < 50708
         

    def lockingClause_sempred(self, localctx:LockingClauseContext, predIndex:int):
            if predIndex == 53:
                return self.serverVersion >= 80000
         

            if predIndex == 54:
                return self.serverVersion >= 80000
         

    def lockStrengh_sempred(self, localctx:LockStrenghContext, predIndex:int):
            if predIndex == 55:
                return self.serverVersion >= 80000
         

    def tableReference_sempred(self, localctx:TableReferenceContext, predIndex:int):
            if predIndex == 56:
                return self.serverVersion < 80017
         

    def tableFactor_sempred(self, localctx:TableFactorContext, predIndex:int):
            if predIndex == 57:
                return self.serverVersion >= 80004
         

    def derivedTable_sempred(self, localctx:DerivedTableContext, predIndex:int):
            if predIndex == 58:
                return self.serverVersion >= 80000
         

            if predIndex == 59:
                return self.serverVersion >= 80014
         

    def jtColumn_sempred(self, localctx:JtColumnContext, predIndex:int):
            if predIndex == 60:
                return self.serverVersion >= 80014
         

    def tableAlias_sempred(self, localctx:TableAliasContext, predIndex:int):
            if predIndex == 61:
                return self.serverVersion < 80017
         

    def updateStatement_sempred(self, localctx:UpdateStatementContext, predIndex:int):
            if predIndex == 62:
                return self.serverVersion >= 80000
         

    def transactionCharacteristic_sempred(self, localctx:TransactionCharacteristicContext, predIndex:int):
            if predIndex == 63:
                return self.serverVersion >= 50605
         

    def lockStatement_sempred(self, localctx:LockStatementContext, predIndex:int):
            if predIndex == 64:
                return self.serverVersion >= 80000
         

            if predIndex == 65:
                return self.serverVersion >= 80000
         

    def xaConvert_sempred(self, localctx:XaConvertContext, predIndex:int):
            if predIndex == 66:
                return self.serverVersion >= 50704
         

    def replicationStatement_sempred(self, localctx:ReplicationStatementContext, predIndex:int):
            if predIndex == 67:
                return self.serverVersion > 80000
         

            if predIndex == 68:
                return self.serverVersion >= 50700
         

            if predIndex == 69:
                return self.serverVersion > 50706
         

    def resetOption_sempred(self, localctx:ResetOptionContext, predIndex:int):
            if predIndex == 70:
                return self.serverVersion < 80000
         

    def masterResetOptions_sempred(self, localctx:MasterResetOptionsContext, predIndex:int):
            if predIndex == 71:
                return self.serverVersion >= 80000
         

            if predIndex == 72:
                return self.serverVersion < 80017
         

            if predIndex == 73:
                return self.serverVersion >= 80017
         

    def changeReplication_sempred(self, localctx:ChangeReplicationContext, predIndex:int):
            if predIndex == 74:
                return self.serverVersion >= 80000
         

    def slaveUntilOptions_sempred(self, localctx:SlaveUntilOptionsContext, predIndex:int):
            if predIndex == 75:
                return self.serverVersion >= 50606
         

            if predIndex == 76:
                return self.serverVersion >= 50606
         

    def slaveConnectionOptions_sempred(self, localctx:SlaveConnectionOptionsContext, predIndex:int):
            if predIndex == 77:
                return self.serverVersion >= 50604
         

    def cloneStatement_sempred(self, localctx:CloneStatementContext, predIndex:int):
            if predIndex == 78:
                return self.serverVersion >= 80014
         

    def accountManagementStatement_sempred(self, localctx:AccountManagementStatementContext, predIndex:int):
            if predIndex == 79:
                return self.serverVersion >= 50606
         

            if predIndex == 80:
                return self.serverVersion >= 80000
         

    def alterUser_sempred(self, localctx:AlterUserContext, predIndex:int):
            if predIndex == 81:
                return self.serverVersion >= 50706
         

    def alterUserTail_sempred(self, localctx:AlterUserTailContext, predIndex:int):
            if predIndex == 82:
                return self.serverVersion < 80014
         

            if predIndex == 83:
                return self.serverVersion >= 80014
         

            if predIndex == 84:
                return self.serverVersion >= 50706
         

            if predIndex == 85:
                return self.serverVersion >= 80014
         

            if predIndex == 86:
                return self.serverVersion >= 80014
         

            if predIndex == 87:
                return self.serverVersion >= 80014
         

            if predIndex == 88:
                return self.serverVersion >= 80000
         

            if predIndex == 89:
                return self.serverVersion >= 80018
         

    def createUser_sempred(self, localctx:CreateUserContext, predIndex:int):
            if predIndex == 90:
                return self.serverVersion >= 50706
         

    def createUserTail_sempred(self, localctx:CreateUserTailContext, predIndex:int):
            if predIndex == 91:
                return self.serverVersion >= 50706
         

    def defaultRoleClause_sempred(self, localctx:DefaultRoleClauseContext, predIndex:int):
            if predIndex == 92:
                return self.serverVersion >= 80000
         

    def accountLockPasswordExpireOptions_sempred(self, localctx:AccountLockPasswordExpireOptionsContext, predIndex:int):
            if predIndex == 93:
                return self.serverVersion >= 80014
         

    def dropUser_sempred(self, localctx:DropUserContext, predIndex:int):
            if predIndex == 94:
                return self.serverVersion >= 50706
         

    def grant_sempred(self, localctx:GrantContext, predIndex:int):
            if predIndex == 95:
                return self.serverVersion >= 80000
         

    def grantTargetList_sempred(self, localctx:GrantTargetListContext, predIndex:int):
            if predIndex == 96:
                return self.serverVersion < 80011
         

            if predIndex == 97:
                return self.serverVersion >= 80011
         

    def grantOptions_sempred(self, localctx:GrantOptionsContext, predIndex:int):
            if predIndex == 98:
                return self.serverVersion < 80011
         

            if predIndex == 99:
                return self.serverVersion >= 80011
         

    def versionedRequireClause_sempred(self, localctx:VersionedRequireClauseContext, predIndex:int):
            if predIndex == 100:
                return self.serverVersion < 80011
         

    def revoke_sempred(self, localctx:RevokeContext, predIndex:int):
            if predIndex == 101:
                return self.serverVersion >= 80000
         

            if predIndex == 102:
                return self.serverVersion >= 80000
         

    def onTypeTo_sempred(self, localctx:OnTypeToContext, predIndex:int):
            if predIndex == 103:
                return self.serverVersion < 80000
         

            if predIndex == 104:
                return self.serverVersion >= 80000
         

    def roleOrPrivilege_sempred(self, localctx:RoleOrPrivilegeContext, predIndex:int):
            if predIndex == 105:
                return self.serverVersion > 80000
         

            if predIndex == 106:
                return self.serverVersion > 80000
         

    def grantIdentifier_sempred(self, localctx:GrantIdentifierContext, predIndex:int):
            if predIndex == 107:
                return self.serverVersion >= 80017
         

    def tableAdministrationStatement_sempred(self, localctx:TableAdministrationStatementContext, predIndex:int):
            if predIndex == 108:
                return self.serverVersion >= 80000
         

    def startOptionValueList_sempred(self, localctx:StartOptionValueListContext, predIndex:int):
            if predIndex == 109:
                return self.serverVersion < 50706
         

            if predIndex == 110:
                return self.serverVersion < 80014
         

            if predIndex == 111:
                return self.serverVersion >= 80018
         

    def optionValueNoOptionType_sempred(self, localctx:OptionValueNoOptionTypeContext, predIndex:int):
            if predIndex == 112:
                return self.serverVersion >= 80011
         

    def setExprOrDefault_sempred(self, localctx:SetExprOrDefaultContext, predIndex:int):
            if predIndex == 113:
                return self.serverVersion >= 80000
         

    def showStatement_sempred(self, localctx:ShowStatementContext, predIndex:int):
            if predIndex == 114:
                return self.serverVersion < 50700
         

            if predIndex == 115:
                return self.serverVersion >= 80000
         

            if predIndex == 116:
                return self.serverVersion < 50700
         

            if predIndex == 117:
                return self.serverVersion >= 50704
         

    def showCommandType_sempred(self, localctx:ShowCommandTypeContext, predIndex:int):
            if predIndex == 118:
                return self.serverVersion >= 80000
         

    def nonBlocking_sempred(self, localctx:NonBlockingContext, predIndex:int):
            if predIndex == 119:
                return self.serverVersion >= 50700 and self.serverVersion < 50706
         

    def otherAdministrativeStatement_sempred(self, localctx:OtherAdministrativeStatementContext, predIndex:int):
            if predIndex == 120:
                return self.serverVersion >= 50709
         

    def flushOption_sempred(self, localctx:FlushOptionContext, predIndex:int):
            if predIndex == 121:
                return self.serverVersion < 80000
         

            if predIndex == 122:
                return self.serverVersion >= 50706
         

    def flushTablesOptions_sempred(self, localctx:FlushTablesOptionsContext, predIndex:int):
            if predIndex == 123:
                return self.serverVersion >= 50606
         

    def utilityStatement_sempred(self, localctx:UtilityStatementContext, predIndex:int):
            if predIndex == 124:
                return self.serverVersion >= 80011
         

    def explainStatement_sempred(self, localctx:ExplainStatementContext, predIndex:int):
            if predIndex == 125:
                return self.serverVersion < 80000
         

            if predIndex == 126:
                return self.serverVersion < 80000
         

            if predIndex == 127:
                return self.serverVersion >= 50605
         

            if predIndex == 128:
                return self.serverVersion >= 80018
         

            if predIndex == 129:
                return self.serverVersion >= 80019
         

    def explainableStatement_sempred(self, localctx:ExplainableStatementContext, predIndex:int):
            if predIndex == 130:
                return self.serverVersion >= 50603
         

            if predIndex == 131:
                return self.serverVersion >= 50700
         

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 132:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 133:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 134:
                return self.precpred(self._ctx, 1)
         

    def boolPri_sempred(self, localctx:BoolPriContext, predIndex:int):
            if predIndex == 135:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 136:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 137:
                return self.precpred(self._ctx, 1)
         

    def predicate_sempred(self, localctx:PredicateContext, predIndex:int):
            if predIndex == 138:
                return self.serverVersion >= 80017
         

    def bitExpr_sempred(self, localctx:BitExprContext, predIndex:int):
            if predIndex == 139:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 140:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 141:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 142:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 143:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 144:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 145:
                return self.precpred(self._ctx, 4)
         

    def simpleExpr_sempred(self, localctx:SimpleExprContext, predIndex:int):
            if predIndex == 146:
                return self.serverVersion >= 80000
         

            if predIndex == 147:
                return self.serverVersion >= 80000
         

            if predIndex == 148:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 149:
                return self.precpred(self._ctx, 21)
         

    def arrayCast_sempred(self, localctx:ArrayCastContext, predIndex:int):
            if predIndex == 150:
                return self.serverVersion >= 80017
         

    def jsonOperator_sempred(self, localctx:JsonOperatorContext, predIndex:int):
            if predIndex == 151:
                return self.serverVersion >= 50708
         

            if predIndex == 152:
                return self.serverVersion >= 50713
         

    def sumExpr_sempred(self, localctx:SumExprContext, predIndex:int):
            if predIndex == 153:
                return self.serverVersion >= 80000
         

            if predIndex == 154:
                return self.serverVersion >= 80000
         

            if predIndex == 155:
                return self.serverVersion >= 80000
         

            if predIndex == 156:
                return self.serverVersion >= 80000
         

            if predIndex == 157:
                return self.serverVersion >= 80000
         

            if predIndex == 158:
                return self.serverVersion >= 80000
         

            if predIndex == 159:
                return self.serverVersion >= 80000
         

            if predIndex == 160:
                return self.serverVersion >= 80000
         

            if predIndex == 161:
                return self.serverVersion >= 80000
         

            if predIndex == 162:
                return self.serverVersion >= 80000
         

            if predIndex == 163:
                return self.serverVersion >= 80000
         

            if predIndex == 164:
                return self.serverVersion >= 80000
         

            if predIndex == 165:
                return self.serverVersion >= 80000
         

    def runtimeFunctionCall_sempred(self, localctx:RuntimeFunctionCallContext, predIndex:int):
            if predIndex == 166:
                return self.serverVersion < 50607
         

            if predIndex == 167:
                return self.serverVersion < 80011
         

            if predIndex == 168:
                return self.serverVersion < 80000
         

    def geometryFunction_sempred(self, localctx:GeometryFunctionContext, predIndex:int):
            if predIndex == 169:
                return self.serverVersion < 50706
         

    def fractionalPrecision_sempred(self, localctx:FractionalPrecisionContext, predIndex:int):
            if predIndex == 170:
                return self.serverVersion >= 50604
         

    def internalVariableName_sempred(self, localctx:InternalVariableNameContext, predIndex:int):
            if predIndex == 171:
                return self.serverVersion < 80017
         

            if predIndex == 172:
                return self.serverVersion >= 80017
         

    def castType_sempred(self, localctx:CastTypeContext, predIndex:int):
            if predIndex == 173:
                return self.serverVersion >= 50708
         

            if predIndex == 174:
                return self.serverVersion >= 80017
         

            if predIndex == 175:
                return self.serverVersion >= 80017
         

    def channel_sempred(self, localctx:ChannelContext, predIndex:int):
            if predIndex == 176:
                return self.serverVersion >= 50706
         

    def getDiagnostics_sempred(self, localctx:GetDiagnosticsContext, predIndex:int):
            if predIndex == 177:
                return self.serverVersion >= 50700
         

    def checkOrReferences_sempred(self, localctx:CheckOrReferencesContext, predIndex:int):
            if predIndex == 178:
                return self.serverVersion < 80016
         

    def tableConstraintDef_sempred(self, localctx:TableConstraintDefContext, predIndex:int):
            if predIndex == 179:
                return self.serverVersion >= 80017
         

    def fieldDefinition_sempred(self, localctx:FieldDefinitionContext, predIndex:int):
            if predIndex == 180:
                return self.serverVersion >= 50707
         

            if predIndex == 181:
                return self.serverVersion < 80000
         

            if predIndex == 182:
                return self.serverVersion >= 80000
         

    def columnAttribute_sempred(self, localctx:ColumnAttributeContext, predIndex:int):
            if predIndex == 183:
                return self.serverVersion >= 80014
         

            if predIndex == 184:
                return self.serverVersion >= 80013
         

            if predIndex == 185:
                return self.serverVersion >= 80000
         

            if predIndex == 186:
                return self.serverVersion >= 80017
         

            if predIndex == 187:
                return self.serverVersion >= 80017
         

    def keyListVariants_sempred(self, localctx:KeyListVariantsContext, predIndex:int):
            if predIndex == 188:
                return self.serverVersion >= 80013
         

            if predIndex == 189:
                return self.serverVersion < 80013
         

    def commonIndexOption_sempred(self, localctx:CommonIndexOptionContext, predIndex:int):
            if predIndex == 190:
                return self.serverVersion >= 80000
         

    def dataType_sempred(self, localctx:DataTypeContext, predIndex:int):
            if predIndex == 191:
                return self.serverVersion >= 50708
         

    def charsetName_sempred(self, localctx:CharsetNameContext, predIndex:int):
            if predIndex == 192:
                return self.serverVersion < 80011
         

    def collationName_sempred(self, localctx:CollationNameContext, predIndex:int):
            if predIndex == 193:
                return self.serverVersion < 80011
         

            if predIndex == 194:
                return self.serverVersion >= 80018
         

    def createTableOption_sempred(self, localctx:CreateTableOptionContext, predIndex:int):
            if predIndex == 195:
                return self.serverVersion >= 80014
         

            if predIndex == 196:
                return self.serverVersion >= 50708
         

            if predIndex == 197:
                return self.serverVersion >= 50711
         

            if predIndex == 198:
                return self.serverVersion >= 50707
         

    def partitionKeyAlgorithm_sempred(self, localctx:PartitionKeyAlgorithmContext, predIndex:int):
            if predIndex == 199:
                return self.serverVersion >= 50700
         

    def createUserEntry_sempred(self, localctx:CreateUserEntryContext, predIndex:int):
            if predIndex == 200:
                return self.serverVersion < 80011
         

            if predIndex == 201:
                return self.serverVersion >= 50706
         

            if predIndex == 202:
                return self.serverVersion >= 80018
         

    def usePartition_sempred(self, localctx:UsePartitionContext, predIndex:int):
            if predIndex == 203:
                return self.serverVersion >= 50602
         

    def columnName_sempred(self, localctx:ColumnNameContext, predIndex:int):
            if predIndex == 204:
                return self.serverVersion >= 80000
         

            if predIndex == 205:
                return self.serverVersion < 80000
         

    def pureIdentifier_sempred(self, localctx:PureIdentifierContext, predIndex:int):
            if predIndex == 206:
                return self.isSqlModeActive(AnsiQuotes)
         

    def simpleIdentifier_sempred(self, localctx:SimpleIdentifierContext, predIndex:int):
            if predIndex == 207:
                return self.serverVersion < 80000
         

    def real_ulonglong_number_sempred(self, localctx:Real_ulonglong_numberContext, predIndex:int):
            if predIndex == 208:
                return self.serverVersion >= 80017
         

    def textStringLiteral_sempred(self, localctx:TextStringLiteralContext, predIndex:int):
            if predIndex == 209:
                return not self.isSqlModeActive(AnsiQuotes)
         

    def textStringHash_sempred(self, localctx:TextStringHashContext, predIndex:int):
            if predIndex == 210:
                return self.serverVersion >= 80017
         

    def identifierKeyword_sempred(self, localctx:IdentifierKeywordContext, predIndex:int):
            if predIndex == 211:
                return self.serverVersion < 80017
         

            if predIndex == 212:
                return self.serverVersion >= 50709
         

            if predIndex == 213:
                return self.serverVersion >= 80011
         

    def labelKeyword_sempred(self, localctx:LabelKeywordContext, predIndex:int):
            if predIndex == 214:
                return self.serverVersion < 80017
         

    def identifierKeywordsUnambiguous_sempred(self, localctx:IdentifierKeywordsUnambiguousContext, predIndex:int):
            if predIndex == 215:
                return self.serverVersion >= 80019
         

    def roleKeyword_sempred(self, localctx:RoleKeywordContext, predIndex:int):
            if predIndex == 216:
                return self.serverVersion < 80017
         

    def roleOrIdentifierKeyword_sempred(self, localctx:RoleOrIdentifierKeywordContext, predIndex:int):
            if predIndex == 217:
                return self.serverVersion >= 50709
         

            if predIndex == 218:
                return self.serverVersion >= 80000
         

    def roleOrLabelKeyword_sempred(self, localctx:RoleOrLabelKeywordContext, predIndex:int):
            if predIndex == 219:
                return self.serverVersion < 50709
         

            if predIndex == 220:
                return self.serverVersion < 80000
         

            if predIndex == 221:
                return self.serverVersion >= 80000
         

            if predIndex == 222:
                return self.serverVersion >= 80014
         




